<File version="3.2">
  <FileID>e3161ce4-358c-452c-bb7b-0f880be08620</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAP+lSURBVHhe7P1ndB9HmqeJ3jN7z9n7fff7/Xa3
d3bH9PR0T21Pl+0uI5W8p0SK3gMgSAAEAZAgPAjvCUd477333nvvvffe47mR+QdFkIQkSl1SUaV4
znmBf7rIiMjIeH8RGZnx/5JIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolE
IpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQi
kUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKR
SCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFI
JBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgk
EolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQS
iUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJ
RCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolE
IpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQi
kUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJD8ZAv6X/+U/VP9f//HvqvX1DaqNje9XGxmZ
SJMmTZo0adJ+ImZsbFJtavqw+uOPPqr+//yv/2u18O2KfTP/4T/8h7Z33n6H8Jhk6rtG6RpdpHN4
Xpo0adKkSZP2k7EFukYWKK9vx8TkAf/7//a/ceTmv56/+z/+j+rQyASaBhcobhqkoKGPQmnSpEmT
Jk3aT8oU/13ZOU595zCnTn3+7QJA6fZv6BqjpGWIkqYBadKkSZMmTdpP1Iob+2kemCcmLvnbBcD9
+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
zQCMsiV5AjbWVrG+uoL1NRKJRCKRSB9MQqxdxRr7z4P522pjdRlS7S80AHzBESbuJKRM/D+JRCKR
SKTDKx6vJxQLQiX+FxkALu4iSCQSiUQiHX4NMA0x7cbwX2QASCQSiUQiHU29sQFwd/doX96GsACJ
RCKRSKSjrSUAhcUVP28ATE3NuotKKpCbV4THeYUkEolEIpGOsIpKKxEUHPbzBoAgCIIgCIIgCIIg
CIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIg
CIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIg
CIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIg
CIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIg
CIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIg
CIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIg
CIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIg
CIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgiE/Bf/tv/z9U
YOlfb92RmQAAAABJRU5ErkJggg==</Preview>
  <Form>dRhc1ohKnP4PACODCAAAAAAABADsvW1T6s6yPvyeKr7Drv02p/6DPAWq7nOqFFRQ1IioyDvQRJ6fCcKnv7t7
JhAghITEtdA1OXXW/l0xdGau9PT0zPT0/H8Pjbb+Pp38XzTyn//8fxz8Z7oY6v/736fFZKr3/t9r
q/8xmE/+39Vg3OP//s9/nP70P/950ceT1qD/v8n/F8P/+5//5Gbd6Wys/29fn03H9e7//EebNbqt
91t9URl09P7/NlS1nnpPpc+yiaQey2T/+59+vQdvRnkPiXTq/KPX6rcm8NspyM3p/ak+/u9/3put
7scYfv7f3KA/HQ+6k/9S6aH82ngw1MfThZBz/v6uD6cXs+l00LeegafKuqHD79918Rh/oDzr52aT
6aCXG/R69f7Hf//DLLHMkrvvPbPp4Om93tXzrZ7eRw6gSNn0//wnm/b+27vBh/7f/8sPWwd/clF/
7+QG3cH4v//32mxN9acesHnwV7luCwh8ai3hLZl46n/+A7wf/NEVMPzf/zsft/DrZf5fPDWcHvxN
8X2D7YtWvz5e/N/5+fnF+fnb+SX8i1fx/GKA/1n7hH9y5590M3d+PsKbd8lL+Hd+xx/9PL/97MLP
41eP5+eP8JdohEs4HzzC7wrtCYDcuSXh9vzz4vyylj1fX5/nuU+4eTFrws9vz3lZ6P45SXsU74fb
F+d7roeyWviqdvQvxUwVJkZWeVELjHX1L8ZS1YnBBI5Gtu9sYZDAEihhrHCJRi5npqrzT/h7pqix
rpHLMwtHI9t3PGAhMdaCMmaLJvz9qcQQRyNs645frOg1dmOwnrGosmgk1c90mbK+EwRHI59PbZYa
XA6YUr+41ViPcLJzxhRloTOWTNxVWPY9PWZKevpuwt8X493nBY5G1nfuRnAnf2uyYfe5zdTb+yZj
uTODsekwbrBMY3HPbFcqOUmI58Ub7kbI2+YdpujXJZP1my2VZbN6mjGjOhM4lXybiTIuv27aLDu9
/WJKvFczANeWwFu6dn/F2C3rmMyc9MfiF1xiK18A/Ak600CJ6fRHn2NFL94ZbDK8LsB/FkogcVg3
WTIaSdxpWKtPxrTiQONPZLOtDDx2e8csiZMY4NK9xhJnKlA469cE7reWFaaOvmaMtfVo5AvLVDXw
j/Djyu2AscmgmxD4Ots2+C+4xNb9g8YG7UpbsDAexU2O08VYEnlLz4CHhTlQWSajw2fMJT4Ndhar
q1DmqwZj1ccx8gIqgL+wJHbyUPWbc5WxUr5ronAVeMt+5CagDWeGxr7MwdL+2Ya9yz7/hdJ6fGA2
CRu4qAB+0qCM0UinrbL0sFuCd5y3GWeamarCmJrOor69ayxdq11bv6DnbRLWuPccjTwaoF+XBfhF
+QLvbOJFp2piGdt7/r6JkTe6M+h2KgkowyXg17IGT3QqzC9GfVvdQYmpdK15PVZ6b2UqU4MhZh5x
NLLvCZBYK39Vh73nlpmudYtZZVR70tioB60OeC4yBxyNODwBEtoJlEBl/Ho+P9cYOz/PMzY/P2cs
sxcDbweesONb0V9YncG6F8idX55bvczOBb9kc7DjLHORKgz0W/0lXRiCVW+qbbDyOtOP7Bd84WjE
dgfeWU4XZlpXb6YNKpOxLiM2jnMdepozjfc8DhKpXwhcJgtDv+D9F6ve8JlRmbv64nwI+DMr+rZo
xGfv54qP6k93+ld9kccyf0Ivo5czxXoBnijgE016wmBHYeQtmAQ7Rt427oBXcN1MFWKt5BE+APAW
wGvYxl78kHK2OKt2jZaWTVWTbfi7UgTtAcy2MfLm/oQfDLwdKwF9Iw09mwp6Nh30bKKR7TtBMPIW
TIIdA2+Dc/C/6ufof33mwB8LgMF/CyjBjoE3pyeeDPTw+ujh3TDvmPy3y5LBZqMe+Gt3I5CozD4M
9FQSviUib55+kSMftIU+aHGwDwNvLctLXRivjMWWt+CNGA2T7Vzgm5BHOIY6tJrkEbJNicLvPfBO
Z7zyk/f4venhsAw+5lUPfKVUtgGvrwBuPE3Av5uDUqmjVAzczU7MoeR4oR9yc7nrSR+Ho5FmzoQ7
j2P8trfAA2Iqo6IswUMc988AF5MZ+vYa//v289nsMsfL5lDgYSdW3fmFF8z1bfMJ/Qr0r998An1L
Pk8FNseJqvA5++0ljUja9r/T86Bv6zuJeAYcVnMJvjb8WGOZ7IPwg5XRC/hONAJJDz/uwDvTwFWx
v7EAA4UR+m/wRDGj7CmTwOsRyXpMo5gfhp2gRiUamWw8sfULVn0YmWzU7YBvXrvJ44jk3mCxxUjD
L/Uoag11SFB18Cvk8NuBt87odYwtY6qG/4kjtVFht0zWqCmPo6Q5tQmN42gE/Pgze3mzUyDL9sT2
L9TbF7Dqo3fwRRRmLNFSgMVsPQCRi2hkfgPMa/kOjZtMGIFAh8W0ArT09KgB46p4A8s0gDfmkk2N
ZRUDR0kDpzfeRCN3WOpKCUe4C7wDeDYpVO3FjcfUiv3v288n4mMYIJmJDPJmzpImm08HeWD6Bbql
xvMUmqSq4zsnUKZrtWWAurMCfntoE4v2G5apjQ+VYbijZhlgHLmhvm2/k2rBR5PwC47T8y1twDfa
/s6fj0ZWd5hRt0xDplQ/hydwrHcWu03Al6knGTiCWdDojDIWGl7KdQ1oxy9WGzEnMNo1kdkqg7Hg
dLdMhAetZRVqCbVWWiXQN8KqerGlC09n2E7XT2z/IjPJPdEHFrXMTK6fcBz/BjZ6kUalVMEGj+oV
E0bIL2O0b8PuPbS7RxgdKgrr4wj3HZhuglUftPONnTcIfH+Pf6/QCDghsAkta0sbzhpV+xPbv1h+
DZc44oVvea20kberEvDcykGZ4SvUTP71od7wJcZDGKcnztQ+l4CtzIAR7wR4zfayNO43d94gcJLG
9a0HGvm323QH6vu1pQ0vU8P+963nmYHmIZ2aoh+SybzWaSZAtPR0KvXClJnxgjMotTF+iUccEZeF
BFW9T5NGa+xrlkR8k7DeEI3svHM5Rp1PA9YeTI5V9SpuL60ya7/SXAWOwp+rq+ejEesX2Wwr7dBH
4AU9jbHzBidMvLk+gbMVGtk/+pYZgWGMDSxk6g1QjHlK8Gz1WWpWwdmL+wbYq3ifZss0PnvheCmz
5qux8wacD9m64w1fZgGXNZQIvpSFo5HVnRoYI2AWip6Il7Blm4k9PDpe6u1NnXjbeccReNhZcj8E
rITSq2iM33HBo17HZJmx8kBtBvQTLJFVMvTGYCSONjZ7twCfMj4GAwdeQ95NoisG3jbvPD/iLM4l
Siyf+8XIW7wP9gr8M+zdyh9BJCJvh37xAtam9/JIc60lVxyNHHrCD45GjpAw6Ha0bLpWy+PcGDgj
Q8A4e5an+beNO0Ewzb8FkpC+Aay3quUHDXmL4RzfB87oVWmOLwCORoJKsGPirUqzjLFKF+5c94+c
ZUSMvPn7xXHzllTmIeK3IeACzluWseU/GzgrWWAOGHg78IQfjLx5+gWU0UhgmcUM37D3/FHZnmsl
P8RxtvUYDLwdI4HKBDyfYS8kZiEN6rOo1J9DfAK0o/YEOt3rtLMwHrhBbwqGz2Bz+8wLJt58/UJg
/kYoQRJLcMOoRLw/PSdmL/etAnq+9swef4+0HE1cz/GfN7pxiaujdH3mnvdKy298G/us9g3Oag/6
OKt9jzizMas90LfnezfvBMHWPHlAiVTmMnhchUkC58VvqFbb8+K78+SpwqcBtU4XUoWJruC8uklz
+ySR5i037mxgKkPZM7Z4ozvdtcTjMPDm6ReiVgOsZbKw8+2rE+NCKeP6Qjqc1YC/vL5wcP0B9U0x
qd7M3gYmRhOeWM3+FyZbqwHO2L6+4O0Xbph4CyTBjok3919grTkLHSN33sc1DwVXOCimwFoD4Vis
yxTsUQcO2PYLN0y8bT/RXUv0h5G3YBKo1jkD10xukLdYk1YocJ3lCVdVjsfAW0AJdgy8hVAmC4t1
mY0ngIe3fgfw/c46TUFIWK/bbGAbb3ue8IORt3BWn45Zzypni+8JYKFkrjBYcft6lu1OYSXBGTtI
sGPibd8T3bVEb1jw5uMXbhh5KwReY7Mw6Vsoq3Z/Zx3QWlN7Wa+xVZOba24C29YB9zzhB2+tAwaU
SLwdK6FLcVxVjON6wTgu5G3rThBM64CBJNgx6VvgMlkYeVvd6X3mGrhW2aO1StM/xvXTYBLsGHgL
KMGOaT3Lyy+6nzlr9fP1fLUa+na+vX66dccjJonN3JKp9ZcOLQ/RuL5zWbDi/va+0ysG3gJKANyl
uMO3ywHy9oqxidad/hob9ARi/ottvPF877PVp3H9xz0uQfUMpqpKxYpWw3lIWq9SZuMGzt0PNTYd
XeOM8iQloiN3SiDiLTfKdDymdWeHUh+zDl0k3tZ30sUMuKTXKTS/qY8KrXh5nDym2VqQZo4TYq1x
0LnMH1Wm7fV6z7/ofi76YuX6NX9riJXst7shrmQDb+bmndVqezGmipXsZAKGK1Brlb61wbKKVsE/
6WJFbfmVzrNMI/6AMxi0jscv0g7btcaj3kse37i5ur6FsZ26P+EDo77RnUfOA9qK1RM2nBzEKbIV
arW4zfPAT1YpDQ02n72B2tc/BjgzGo080dpkRayuryXQyjZT8R8+V29vI5t41OuWqATUTveXySe2
eHN84lAMAdWJr1MvPl8ZxTngerzPKIQVC1uxGI5xDuPemRZanINH7BBzgHE1qzuD1tJgvN2SzqeS
7yau4SZEDAGPUhhsRS3YMOct/YamwsbD/jYx7l9Vtsq0RDxBHI3sj5TgT5S01S+2/76DkTdxZxXH
UF/HNQxWcQ3AQnvNwoYGX6st8Tyu1ztFa6xx+ubcYgF4XAoeF60qY7NRnIk1X3oDfNP+S4PTjSuJ
JktixImi5+Gzadd9ivY27WUE3qqgsddfGGyyFPHl6miItb4G3nZrtY17zQUTb6wXSigG8WCFB+08
sRB30l4ekb6WoK8lbGHOQlv/Isuh8TgH7DT1V4qCp1rPRczKuN81yKYKXihGRVESnwLTNgHxe4wX
gZERRiXwvmmMQSBZxcDl2kRW7Daw1UrfqiXhXnO5jkiJRlYRI4N3K0YFmO+DyR9vrFwLbeBx+ZvP
rzDp2+oO8YD7E8QvstOnmJAlaoW7DXoYTTQZxPO4tWGKnUwKv8RyacWHcCZJI9V6cwhWGjow7odk
xhgeQfFGk8HLUrAC3ZS22t+wKmM0shuJI3ZAKHXc8cDxYLUDot+ujKFM/TOHNqFEI237HgrxCyec
vrkCGqraWMPdB8hrYy4kQv+K8STzBPGGsT7mtJAQ72i8TpmtTEy77IlV4Uwj/YB7AyiSv4O7NubJ
1RvbOM5imjYW7xh08upGrbZq2VvH+tTXcTiDNcY4B4uHnTahtHejhRwxZ0FVUXvFj0li24Cqzad9
Jn5B0UKLea1iKd2EHKoK1nIQI/KsKJnSi0LrgC9lxneSpFOpqnjnqNdhIrYHHFhDSBhsldGO27yd
YmxPfR3rM1jHF7WhqlDm2AYBQhvaDs+LeKTBZkSTxYMifCdl1n6jnkZENKVrTQy7M5O4lo4BGMKL
QN+SZTIzDLtINC1bkXlocIlKfFRndl6Bp1WEE0qoPk20dRlJ3xxrud5xs96zY8PULpmBDu66TWDZ
8B23rH1YAuF0jVjA3S+iVZkpESuE8UiJsYglIwtJe3r4G8gSxGPjAvDWqFBMKK65dfPiDTMeUQcS
0SjgLqFoJI7d+T1G47Y+MQpG21OmjVrmMTJnjjFTdxhDZWHijd9Z8bB93bIOxretJNDzjpjiVM8p
+kzjGqvoVUvxoThLEbdFO5vMcb9gxWNOEqY9zotqDX097scCiRcUN2OghQQTczfrUC02frFZKycc
jdCddVzWnRWXhfbKitPq5BPIwmK3TZTOO5r1e27f7JFd881IL2KhgRoKZTBWe8TgW88w9JTeyG7R
1kyHrzhvmc0ucREFNTC2uFFFzN0SyVGYRhHEmihzBp0RaDOGiLCD7iWBO8Q+qLc0KI5rq1a7uC32
jOmrXWibe8iQBWOxaqe2ngJ4MHZ/4YiJhUQyg9GVVYycTabsvOGOwpcmRtClMX63h5GtU41ajbEx
4sAoreXX0LS/AcazpVU73e7NyFYcLmO7T2WiaDfO2+qOTnc6FRV5+NptE8RCf+v5DRyNrO7cEA+p
LNXK8oWon0in79EiLq3AqOkwXrHKhBo/QVbU0ZlJ6/Xvz+ZOqaG/xDiH4T3FU9J6fULg3muZ7dYS
MbRT+x2HiLpUco07bbbLAvEMo0uN4pEuS4ej+G7uL0Scqk3CtkQxzgIeqhtl2C6TV7wZN+j2i/Wu
R915F2Qby6YoamvPmBh8H/T2SyVqlziPFF9auyBtEomFJLBALct1lD0dXTc87MzkGPTtwBOecIUi
EzMiblBb34Gq2fDLpdhNmkxkrBkWx8vqT6kP73djYK8WowJTxzcJ0SYOXdPRa1uUgJcoGlmXabuM
/nE04vzEEdGSqVQFtVe77qFDNCu5jZk9Ycu+CR56/SARnMSbz1o57dutcQy8bd1xwLQvVx2l5rQn
2+Dx504aT/NvTm3A5k31MbhzPLgy9uwlXmOwbwee8IOBNy9xqDcHMD3f4nGqo14MRz3KPY14TXts
rO3i44mPuYmx2jgaOCtvS6Txgu9Y2X3YNb53wKNzMW61tY5bvbnfjGO1YewX3J/YwlMME86+o4tP
MfAwdsTdL80ij+9d/2IrdvYILPaJ+5cwWO88b/F95pcF0rfNO9tP7ODt520YeXN/wg+m/fWBJNgx
9Qv8TggxyKhvAaOYb3biom/2P+EH2+Ki9/8CWLBijlu2mOOXrRjkl+246J0nHKKWXTDq2/YTu+/0
ioG3YBIwM8IXz5TQeqW46AFlU7jhd1a4dgBvPw+Y9M31CT+YeAskwY6RN/udAsZu36drH1cUF42+
eazKvGLgzecv9uKbjysRT267EwQjb15+0aqW7xKAX292o8Xp+c148qvNJ7bxx7YERwy87X9iW+JB
TLwFkkCsvPUxJr7P4/AV/Q/E4fvGdt6CS9zmTdS6he595gJx00dkP8XhB94bYGGMww9nt4HP/QtY
a/TjRGQsaEfhAjO9pFeR/mL/gi32v3AA7+wVYJv7Fw48YZXRC17tX/D8iy087D3rZnr4cX3BxP4F
to4Xb9XKcwMz3hTStWFR0T3ukOhwLPYv2O4Ewat9H6FIBN7wDtWqV3sqQi0v33fixbcxfqkbZAFt
x3P7Hn+vKr065fkZCok30MrEO/tHYWqndS6R7hQJG8dh1LfdJ1TcGXKXgG/Xu6FaOdba2ifCMwuJ
vRWUa4hflGto6wk/f8cRZTAJ9r/z/EhBJNj/vt6TEkYZbXtSQiijkBbSl+DSPEgY4P8+4j98+83F
ec7668Xqv3b38hxqVbhP5Bp35PRw54hyhrs64rh/wex/Z16pk9r3oaaiEV7vcrqgVrt6M2USL4f2
9Dhj3PdRjmm4H6aNEln/l/J2/H4ZYqWjf6WBpY6eFz4AWSRXZvVmZgpfykjsyYT223nzn/8NmM4m
cD/W1JXXL+R1YqjEG+5W0RerPTxqEMx5C0viap9RKBKBtzBqSbzRvrZFYptZsCVJtASosb7ywW3v
zwqWo47yv4WS5e4v5c3DXH4faJMtWyF20n12dMlbGBJpn5FavLGYnRvXtDuvf4r5BgNJFPvaQpIo
9O3wL3AHYmrF66vzTrl/ez/g8djijZjFnZVnQXbz/d39gMHzW3rH1n5AT79AXhO4Wy+uS97CquXm
PsqEXlaKphFohyHwFtKux9+wj3KFgWmzR7iPuIZ/38DEm+sTfjDtowwkwY4xH37wMllY8BaSRDtv
J5iHNoQyWRj3n4aTbffI/L0uZx0I3kI4LeE7zl8Io0wW5vl7w5K45i2MHMM/MO/xkVjs2/X+C9ed
wMRbKLuTf81+Z094xZuvnNX7MO7bDSYBd+mmU19VpvQeKa7GeiJwGYm3UGrpK8/2H+NtjW37xOlO
S3vEM0mKS5G1mImovwRt4aUYYxOzjycw0j/5E3k7fse0r/zkuG+c9sCq6kUS4wa/MN5cc04p7rQf
kHb+plIfuM3moYa7HDHPcbONO+EuXcuIvIVTyyP2iRt8jz/goRMG3g484YzxDc8zzAJaN1j8rFSl
eEzHXcBHXxQXjbt8Gs/smDJuYuQtmAQH3gLmmhd4KM4RoF2NKsu+x4cic7LzRfHktPsllXxPYMZq
3D+DW0z3au/eC96YcC2j2F8fvJaEbXkJQpDodH5WfbUbPj2cVmhvMe2cs/bQJuIq4/tjstOHGGOl
i66G+44ojit19oo7th4Ma2f5SuIXZgnwqb0Mswxf6SfKm8/99a1HjEEevS5ZZvLwhudn9TQ8Zcwk
3vDYhtaDZood+Pydnt+QKfWuN3nzdPGd5q5vAN6OySIQPC8B7tgf4A7++hWdEeGAKS8B3YFfnMVu
rT2Lo2pF4/loDkmwY8xLsOcJdp1q+lNe/hVol7afMuzDxFsgCVu8eciFYM+2wPMQcJ1hBvhO9+xG
nDpB+8S1dbYFTxI38NesWN3kzdOl1stNH/kc/JXJEXvm7ZpnkKDTOvZi0DfrDjPezD1J4WlnujJ7
f9HcJYo8GA5PZEqty02JFXxjfa7hORYafEszB1Y9kbG5cpSfvPvGNiTijpPp8FpjdHqHkh7UTZ4B
Yk+ZKFsI5gSIRtRRcyT0ZTrs0a7ahFeenHjbc6qJM07ESw7bju36Nh3GG34k2s5RySWaGm8TmUmu
zPeJ32s7vyAesu+LAeMjkOnwtSL+Hu/W0CXW205lM6qmOLFyW+J8Vqzs2VGdwE1z8+mgsFFmr7y5
5+qwMOibuJPNtvbtzhPt9KN/SCLx5vTEfJrUcE92l8po5QuplQvA26BO+02X9ufjZ2McL6j1Wlec
u0M5I2y8JBPvDUa88ovvf06l3oSE2biQt++Uy0QjlGHkPnHFMIWKVS1TzVq5OrzkOBHYnj9k64wb
R4ynl7pwS+10UGM+JNpwpqTnaF8vs87l4Wf/2PZNavku5QAQGUl4xoh4v2bys4L4RZ72sHtpZafp
vSLv0cia+cbLVPCgPGC+GrqyWRN3fN3nRUYSkFAVOU3oSqfv2055V1xrdTi/CGKRd8XgOXFcruno
un1QIvYLTk8oMYP2P6s84wj3lLev2fiaWRJx//2E5yUQsxV4nS3r22XA/FvmhaWhGd3gf2fX6RZm
A7kp4TkqSTtvIrcLnuWyyriUyKy/rRfeOgvibW/Okm2cndZTbuRiO20O/Ui0YbAMJbFzkzKW4B5P
Y8MY0iyPenvzIX4BXwJwvTsSmTS4Et71WptvQB6NWjSy6pHRxloZR9zLFFveNmxv5xrtn7dD2Mrz
03id7fMaqARkIQ9KBP/N4YlMqX6xK5JyJ5xhPhF1lNp4ns6qUtLzaOTD4LmGhJLh6VeDTsXKV0PZ
Z7LZlVGjI3p4xptU9k3kS1pgOpdVnh96B+ajoXOdxGfDnb6pZCzlmTdbvhrHs6m2MfQkri4/+Jaj
176bhP2Y5eKfW1+O/JD5bGDs/EIdZWPCP5th1h7qeeyXpo1E9o8VryQNNVB4AfROPPvM/i0HcQ01
1sDslHX7X2g+xFYCL7y556+xY9C3JWbSe3U9bYjaqQeJ0YjDE5QfafsCi3kOLKSbjGe14M8v2lWR
WwF5pn3iq5x0eNAV4Q1FoHwhMcyBSDl3+BupnxB/5xkOjeX2WAaz7GDvh7vfPeb9EWd507lkyNvu
WWiOGPvbPWc98oqlR9FI3XSR4Hb6WukFE6ZgsiVVvU/QCGWzppQBU2TAwV/AqByULD1piPPC+cWz
ufU6qpCYi+l0qhPtr98uQ+rriXGNJq9Bvb3XsT/tmFiQBny76cTK2rNd5sO88Tw/8/hm3h9nDPpm
ivna/dds1DM9SaT9p5tPAA/gNZA+8TIq84+Nb0m5sPgZX/z5VBPn366RN/BSrbEedHEJK3PQ6g3q
aDhCr7Uhzo4XZcIcT3QuHvm9yqj6xPPV+OBlP+an1AFvuyfjOWJb1jvHC7/1dn4kd4k2PJ8WTHFe
IOGhyLuil+5E9pjYol6yaoFPxBY3jHLkiPxHVikwV1GugxI6eZGBiWd45W1BZM9alYFppaH4KeUa
ypTKGfrWaK0KS47xNPqtMnvnzQvGsjVwQsvNNowbmjeJ2E437/Dz/5aLtJU5SPydn/Zn2iWMurG+
mN1Iz97F+YBjMWSyXZS9iHJ18IuvaHw828uEGYS95FM9i90u/fEmTix0OlfREcdjasnhxatrhll7
KD/SPgkuGMyq0D/Kz4WWgfJgdGIFkQ+pV3k0cE7ZsPtKs3G/JCTQ36nP5wNL0lho+W3gvfIozqPc
PR0S2kSBZ97jXgONzLZxZvLwul3mg7xt5I06hGEkPn1Y7OWWYTv9mniVaM/HRXeAt905GJ5BLpHM
iJmC3TdmF/h7ysdlf4f2gH7GJWYywHMWXcu0863deDvM06oEIg8V6tvhMzDx1OCJm8vLe3DRTj1J
3DzX09HfOzDfq6TNd+btDZ7P8fSM3XnzmfsK+vqYWnCrK/lGfFxP+d8mw9eCpT07b9zOx6V8fbh5
fM4XnWuMvyfejsvo5YAxn0MwCf7PP1XHF3jGef9M4+P+fZdd37APF3OCkwbaL5zbGtYoF1FpVSYN
V+mqzv6eu/aCzp+5lXkbE28+T3ndj115C5DHTL0tg+9deRgZ4nxwv5eIc2i3lpjhN7XECax331K4
xlOJkLdwsrWFlf/N8bxdv7nVauU8+ZyrLHhLNfT4kP0XeRHfnP/NBbvwRvnfepT/bZ0Pzh1TXgKX
J/ANM/2ZfPMxOkQtxkeb/nnzdKnqTdIqAfDmsRZeMOXNCyLhj+R/e8QR6yv0dlM9SUNV/33X6iug
FV8u0yb3vYHZOK5A4Om3gc53DlTrP5g3z8M52UvMgH5n5QLErI/7rDad6KCqHzh+XXQoSzat7JR+
CG/+z8X2jkW+wQO/UG9rLcxeP6KTCXDJr/qEuei7DPy5q8TqeVu+wRDKuJVvMKBEF94MnnOT5xv0
hkW+QR+/cMMUF22daZ5fl/E4iYK3gGWyMPF2vITTO4d9L+bnCIQlMYQ8jZK3v8vbOm9jjWeOBN62
7gTBW/ktA0pE3oKXiW3mtwxJoiNvA8Aqz2fJPZt1fkt3zHnz8ws3TLwFkmDHIr9lSBIpL6hfCZzX
m9plHLMq4t9j+PePS5Hf0nYnCEbegkmwY+AthDJZWPAWksQt3oDZhN6qlkvVozKNEm/BcpXaMPIW
QvbT8POp1nbyqXqSgLwagF/M7YyZPC8oCyGL58/LCxoEb/JGzA4/rq71EeD+iH4xxL8jZgex4M3H
L9ww8RZIgh1TfsvAZbIwxg36+kWKeOU5noD5unYS+VQ9YJ5PNSyJ35KHFjSYVrGsvJ83zes8anQ2
IXkLkr+31iwkdLDBn4xtZSnD/KtTzKWrEm+e8sx6xFv5ewNKXOWhDUXiKn9vMImcN7Rvu/nf1hgz
3eYSmLn2Iz0cbuXG3cXb+XsP/8INU1x0IAl2LPL3hiRR6JvTE7VuETS25sqrsWEpgLc8fpsiZQQG
K40ZfkeYfZdn+PWJibdAEuwYeQsmwY6BN/8SBCvdYhvzbM/XliAa8ZjdlIlczDfXmIv5FXNYt84w
q3Gc8iYbv5M3Jx4TWOtoJI7ZnEtVsAVNk3g5xOPjdo7e9bWbvzfIJaVJaWFLu8V/igI80v9/rqXl
zi+dfkS5rP1mUt7Kh7/Tnw6T159mR29mKb9qEzPdjjTA7D5VneipX5K/V+aL3sHwbeFbZxKYZ7uZ
bq++foyN9ItByat++dQ3n3izP00nnvvnSlktdDEXc/pL6tsP0rc/yRvXjsJEr+rTs5u5dqS+BdXg
aASjys6xVfX6aFPbJ86b1LfT4q0wMJJcewzjK5M/rG9h2NxzvZwqVEzsF77Uyo/kTerbSfEGPfYU
fMpyMuWmfwfPrTiE0YtN/SbepL6dFG+kX6H6veOPp/c8Wvnxb+ZN6tup8IZnU5k0imJB/F61kOlc
6HjKE/s558sILM/l+dG8oQYz0r9j/d6O/qWYP/l8GXkuz4/mjfTPv9+L83Mf/zJvUt9OhTfQ4GzC
o9+LZ2K2Tcmb1LeT4k1vJlVXv7drfHXyeM5YzMeJg7+fN6lvf5+3cqaQLbTey/P8Hr9XB0/5NdH9
J88H9ITluYp/mTfUz12/t6lfJK/A5n6mdcmb1LcT5Y308yoZjRQ+q/Y1s2zhLHFi53jK808lbw64
EDOikerG3MK8OdElb1LffgBvuesv4ffqZXbzaIZ1bqw8b1fy9id4M9APeSyBFW4+S96kvv0o3srI
24vWMXK3V5I3qW8/irfCHHhrgg4Xa5I3qW8/jbdrqCl4De2F/oKnx3fprPgqnh5/HBbn1weQYMd0
fn3gMlmYeAullohR38KppeTtGAwWd4L7jIxWqSt5k/r2s3iLtVS9jLyZpuRN6tvP463PeavhnZ51
JwgG3gJKsGPBW0gSibdQail5OwneFhXiLdOBO+xG43eCYOAtoAQ7jkbCKJOFibdQail5k7xJ3iRv
kjfJ27/IWxVxV/BmrO8EwcRbIAl2jLwFL5OFgbeQail5k7xJ3iRvR0kcnAOun3PePnObd4JgzltY
EpG34GWyMPAWUi0lb3+XtwbinuDN3LwTBAveQpJIvAUuk4WRt3BqKXmTvEneJG+SN8nbP8TbkwH4
sg/44obWZbbvBMHAW0AJdky8BS6ThZG3Q7/Y5m3/85K347DkLVzeSGOvSiabDnsGnn86YIoy1/Ec
2csC/P1uRBqN44WnhuRN6tvf5I1sahE0dPT8pLHlfNgAZU3g2TRbp1arqqKxdPpjDBo9whN9B3WT
Ddp5k35v60//Dd5OQN/aiAeIbzWOibeNO0Ew8hZMgh1HI0ElWCyki5Mk8qZ86SZLJiZ0on2K+bsU
0OhUFihNTjCTQCbzVGPKolk1Wb9VqR5k+ifxZsdc38KSeLS+5Qi32sL2cAy8bd0JggVvIUkk3vxK
uAB72G8uC0yt13qMNSoTxrJZM786cT6cy35+fSKu4j+ZAss0Fnd4PlaFYRnymxp92rztxahv4WjH
r9S3QLyRdlyWDDbuXzWgj281GbgDKfQBTNVR38LVXofLTGSgDF9g2uMxVWOZ0n2WKb2nMnjOzdzS
0ZZIfTuE+4iHhI01FrwZ+5/wg4m3QBLsGHnbeoJ6krsxea0GW8xvNKbM2jWwgVmmHa1v4Wqv02Uu
0/DPKM7YbPRq0+A/xVsADPoWknYcrW95wgvEdxsYebtzfcIPBt4CSrBhq53CnfTNxTljuWSTvE5V
aMO36ts3SbtlHcOyLd/EW17oW0gSSd9C0Y6j9W1EGEfIi/EGRt7Grk/4wcDb0RJWrQ7G9WMY8V+l
UEOM+txgWcVsfIe+UR+fSGRMGJEZy6DSPFyZsVJe2ZaQeNvFQt9Ckkj6Fop2nJa+BePN6hf023sT
+lMY+WSnr3HSJsxNxdSj7RuMpFDjNRg7PbAuDaA0dhaNLOt9Ma5Kj9/xdNxLxtLFGJryWdI8LNd+
HVU28HRK695Q6tvPaqfoySQ/F0xZdN5MdrZMJxjTcFJge651j4YoNBIzx6Djy0VaY6nUh8ayH7kZ
9cgam40TVZZOfb0wpXX3AG9stpidN223L2o+Jaz53m/X3tJ5hzn3hlLf9uFHGOPUL28ZjnjNHYy8
uT/hB0cjtjtcO5YF0KcUjKsqNwOTZTIPVZwNUDa/K2I1nYWuNaPAT2cGPNR4jkamODIbVsGPuEmD
zn9WNfArlqiRn1/WO221vqQ37ikj8bZd6uuSCcL1vG9N9K+9mcl1ZcWKG2+BvwToWwjf0pW3o/E3
6lsAiaQ9V9EIaMOo91IANXxtoJlMGGDaTHAFjOqUsTGOuhNn6hjVGDQ6FzNMNhnE83xcpujFO9Oa
V7K302bucDs8hrc3sNrmJOFbd4/Q3sW8Vl23MqlvJ9FO9XvooWfjaglsy20Vv6l21dfYfJqsMPW2
1mdK77kMrmerjd/ueXoi/QJ/4kmFprXUj1Be39pbuuga+2st9c0JP0/QIpY0/FJLR0y8uT6xH2On
ew+OaPv9C3zOUW+JvCU7y1Uf7lviJgbeAkqwY+gXNu+Q15DOHmN5/WovtOyXdZvZLSPqWzi1/AO8
BZLoWd/6hJOI9b0Y9c39iX0YvsR8kljNM+G4S41G1BlY4cztK64nlE3rF2Slfb+BePP1CzeMvNnv
kNeAns33a+9yPjRcWRD6FkItv5+3YBJ96JuBOIF4ug8jb+5P7MET8FqXxtb6lu2bgmKAs/tmolV+
hf4y2YmBhEteRm9vFLx5L5MrJt7Wd1rQ4JTx+3G66097tTxN2+WWe8sI+hZSLb+dt4ASj9a3kHnL
lG7U7e/k+E3JKuO4Hkbdz2CTK2ub7N7KvpG36xJOckx9TvIepb0wPn1b2xapb55+0UL8xr+UCybe
XJ/Yg+eT/u639/BNzX4cJyBmGFfTba+1yeGNwJu/MrliwRvdeTcp6uB45fWuvcuvm77VTveWEfXt
zfYtqWWPhX/WxxHGIQnH8LbyAK03bHk2u7wF/xIe9Q3tW0vl/p0LJt5cn3DELLfQvawvuFyVYp9Z
rc75jTT/5r1MB7DgzRRew6xf31OwrGJUmHK/zDN2q7TJB6owtf4xYEq8X9cQVym+9/oFKtCJGdC7
aOM9wrTLnuleS/hyo2ike9lgmUbvmrGqNjZYIt5QoQzmBWONlymFzbVZOnUGYz+9UGLutd7DG5UB
58lp3pxaVXb6Cv5duzHHN0IVstPruVj5GffOStjO53Z9C/4ljtS3PRjbqX8J4DU4xnZ7197sXctY
9xOH9S1U3hjumejbi0P6l32PD2mGz1xZp72WwOpPwYqDNrwy/E/U4M11GJr1dq7loL1U4Y3KBF2Y
aCR7mDKKxYBWlQPvq1rR9rcJJ97inTeodeqjhGtFHl5GMXtQJxxnqbdXH39Q3xZM8CraqQuGdnrg
CQcMXkPfsc6etTe2uM1bZd77RtQ3z2U6iIE3fgesy3gQt8abOLpUFPPDCMjbzR3WaoRiVxq8/Kot
d2qZHtaK9FrbiNfn7DE4XqCP7TfN+vYuvH3N3nAniel3J4l1KdGIwtpgr/RcGF/iKH3bi6md+pPA
cl/6nlhar1+hUhzsYd5R30LR4DVvyqyNByziaPJrNmi7tyJuGdbe2ULdz1vxzmDxs1JF1JLWbWy1
bJXuTYzNKBzNm+3SoLNQei9PmiNv8E41fQb31YxyWJbrRWWjvkkdnX0dYyED6luo9i1Tukq61vTg
BV7DpxcWvqOd3uFOy3sDNRhnAm7v99jcdDGWZuw62dTY2bLeFmWOd9/Enp99vPXKjwbLZh+W4DXU
bf0tRkemH/YQAvaNGdAFPORhCHWbbUOrMoum8Hv3x91np3pK1MlWgtZ9NPJgRZQ4XqDRJnrWCYy4
g+JfZ9oaS8YzJREzuuebZjI6+N5FaA7fpm+tPPbIn3OyBNphHI34/IU5qbb36qUn7Y0t6vm1tXJ5
I+mbp1p4wcjbJ3oN/TOTLcy35Z4ykP6Rhu9c9G21Qt/kvBUc3ol9Ez0Rw61BQp/uHjT89vskXoPf
26RvV9j5lkLnnWLwyB6mh8NHqwSoC7j6ufcrkOecKZUzjv2GBj1RUdvR4A1pC3Ogevp2oembK45G
/P1CmX+4KKYX7a3cDFa2wpO+haTBnDdl1niGf96fHVo6lil712u6Fh+/LdjgaORtj61Qb8sgQbvu
C6uujqZT5qx/FK90oJ1WcO9To7JbEK5NGIFn0/h4rL7/K7T1L9NqI3t5Ipu875uOe2dUptL36NuX
8L6sMh7EgjePv1DVi7jbpz2svaQdorc79MaVffNdKycMvOFy7XtiHc+2+cTtvYarKrte6W4dZr21
/7b1zmHnmdZlXoTXAD1NyUEGjOyUeK8mtInaqVOpkaeFmdoXwWnUzbUF/SL9hOJFI+i5MAMjpxO4
MZR7Mo3Z7QHm0TrNPtzWT+O4v/TRPP5L+NO3Q3gvb07YnBT2+VI7NXW+4FvaWr4XfQullsK+sbax
0Niw2wH/7eYc7GHrET7VoAPKka7Vbtb7OlwvsJj9tf+29c7WwwPtoRC15NZq+1JwFJ+ula+8tNP0
/GPPqgpF1fNWJ56fJ4Tfi3HQFfRSY0m884BPtCsHeUoPP263R3p27VUx9r/yLfp2c2daVr2z8IqB
N8+/SJvb7XL7OqS94DWsynz4jdROj6rVLkbeeA+cSGY13DcEVTEw0j2RzIgViu3ZWuerqo1t/tvm
O6FNKBQNidqybODMwGhXgprOmmCjO9rq99BO99SCxvnOVyYz6wuNDYm3YfcS9w6YG6PyjW86GVyN
A30JP/p2GO/nbZfH1MGNi+7aK7wG3uo8vJHiLUOpJfoMIO3DqQ/3fPFZo/pHT/C2W4tx/6XKh2do
1U2xt277wtUC9LwP6RvyBOOofS7vcp4yeBsJi7dFq4r7U01nvxd9nZmOy4t/Rt9CtW+zcf/wt3fV
XrFC0fHcT4TYTlm/E43EDvQcDhffa/zAOtBN49q4G29gcztixQK8gmvKhLbHD+FZpKhVuekba+PS
inPB7hOXdgmr39N8b2tZtfyIhwdc16v0D/ZNmQmUyeHi870K66N3VfwWfbu9o/0L2BcNln4w8ubl
F+nZu4eYFjft5SsUvMzeygjt9MhabWB4o6JXNC/zIbTXcz6tqkwdX5yRrQGebd/embdh99nyEiq3
A8SxPs5O7MTgiYtsslpv9hzbKUqck811mH0V12Je2/z26OWSRjNzGo0kcYZu1hb7sSiKmbz9XW1B
PGo84xz1nj0myBtJ6LfzRrAv4UPfvGHgzcMvwPvaZwR2arrng/EVCt7qPJaR2mnQWuIbU8mMl/31
yqyPFrFEo6DDvJGfe58Tg35RyxlY6V71CSN3DNfmTiO37PTpjLHrLEijuVSyqXnXzEDoqyu916fN
MpbuDTD1H/u/gjlLGrhfC0dm0zJprCbaiFZwXvZnljS+M8Tft/OjbziaHGD0Nx9/+sDRiIdfzMZV
b7tu92oIeA2FVZm9lpHa6VG1suElErQ0PMyHULbTVHJydvgNylc0oms8SepGLdNV6F9p3J71s0Lr
aZUHZ4zF/O42j52lmE85LI37taa6z6rbLtNMaWwQjXQ6haP166C+cVuxRDzxjcm+HfhFeuo1k80+
3sRcA7U672VE/+24WtktKPxn6eA3ZWK/86CTx7itJK7Alta2Y/MN6P9Rnh+MLLTXsjQ0hBexNW7n
F63QKoqxO+t4oGymyNSCe2Ada1kCqx9fWdDAOa+yWVZg6u1Ly+a/Bf0SPvTNO0b75v6EOvryHMXt
zJuYa7j1y4Jop8fXElu+iFw8rCHopSbOVENMGjzkbxjLxT819PcaDryli5kMOpxL06rlokfrzNZ8
3PZlGF+0VmnwrBWHeaNf8Pk3Me7aW0vK0uMgzWiYYobu8AVthKKe+dyDsI/fqm8DHF2mi9jbtdD3
8Y35+NTlidko7n3XreNXoBWKdBH7CX9lRN6OqxXH8EbW99af7rlw/reUQ+3Bb7nLm1p/aQsv9Wx5
i1muYykx9tu+FKb1+WoA7lfFFbSiiUOlNK5oRCNnGo++BU8YSn2ttjQ26nYMb7xhXgxbL7CqaRpz
Dam3F3XGqo9j9IyVkmgTiWTGFLlf7tVr0U4H2BRB4sYbsZ0er1+u+nZ3T1nrEM+PwmDfXJ9Ijxs+
dt06aQh5DQPqcX2WEXk7rlb34o3KPXSB6BOYLBGNxBtL0JceWEyjZtKK/lJ8S5dLK43Aoj5qzry1
+2LTZfV+yMQ7Z9UnBznotU6H8ZWE0v2KlVU71dZ3/NRardfazBZJYX0Fyoo97FRUSyPR7wCMK4s3
54C1B7ahX45viEaC6JervsXpCTpPoXEUJt72PqGOphPvuuukvdxr4N/KbxmRt+NqJd6YTGQaLDPJ
PSEmP2TTFojdAy4XX9PFeHJn3gyM1wWL+Z4eokQeob5vXly77q20ZbPM1E5Xd4QGx7Y0OraHxxHO
hdk9bfEVzCW6AvVKAO0Q+hZQgnd984s3edt6Yjbq+du4uKO9wmsQLfsP8ob9afvjSxPzAEXuv20/
AeMs1xWMJca4cGvlzBuPYzhbjvpCv5TZO/ZV5u5Ur6KY75a9c2mnaMopQyHuVFJGuDI9ImyCjS1/
OtSaVvWy+vqN66+gjobjE9W3+3vkoULeVuJYDLztfSI92rdx0av2Vm4Hq1r4LyPxdlwt4Y20AwyH
Chr/O/K2+Qv19qoB/SuepOJ4Ze9m3RXzu7wtl2KutPowsnrD2iUjv9dJImh0prG4cZJI7XTUe06I
2Ivti3K6TgYvY4daJ1O4QpF02mck1jTIavvv8819vH2XvvnHwNueJ9RRd+hTebe0N3s3au37+l7w
0bzhG5PxTJ73pxjSqznytvKNxr0YzhPpCaGPfO6Le4xOb1i0opGqWJEACzlef/2G26YG8kPg7690
MovGZ9fQa0Xe+lgG50sr4W7Rsra3nbKNsE7rKyxxvjaZeNfEKhz1RYArB7CGKxqPf1rfQrVv09Gr
6xLMYe0lDzBIP3Esb9j/tuuWz2Np1x7e8mKmwNIOsKggwfUNOC+wqin16bZaDjuxEsYuuo91aZck
nZ9Fqwfu8SFfKXUfj9hOaefS3q/g/8Ksni/mt+qbQwTnUZjsm8MT8WHdf0zLBm/Ca+ClPqqMjnGq
HjAu2o+spS4eGabepOzt9CjewDDnzgzK3mCualrF4AZ4orH6BbxhMrxifOfvEbytL2VmvECrqjya
bmWi2CAP0jxeCp5B92pjKXx9S+KdB7rTxieOx2DfHJ5Q613/hneDN+E1cG05sozEm99a4Rv5XJjt
i+C5F9EIeJ23OMp5WPuMBySS7ShrBo833x3XZz9yE3qnuVOGyaC7tHKeOGaGd+aNzzH3uzHyg5cH
y5gpvewsSQfRXhVGAzcN+xvC17c+99bxjph1PBaDfdt9Yjq6Pu6UkxVvYq4hlgxSRuLNZ63gjazx
5mT0oGy0mgT2jF1nWhSNi7GM9znUaJzPxVVijmcf8KcvM4nPjx31j2p6FrtNWDq+Wyb4VjhbkSm1
8iKSh88McK8B4yDID8a97bTvA73O+XSAmbgvmcdaj/tn6MncfkGtnyYGi8fGGIe/fcczxtM8OurG
G/+Avh2NhX3beCI+qB2Z4cvSXr5CIdrd0WU8hrc23yfu1rLERftf6BRNGBUNxAoZx/tjGzek0frV
euTvUiaOwQcwhEVN4ahoVHvCyIo227FvPmqthTdeEK1Q+z59y3B90+jOkt8Jgmm9fuOOWm926QMd
ocGiP70bNVc8BCij4M37L/CN8bOx84ApcOzKlrTsx/UsjFqKdhrCtzyaN1ccpr6Nub6l6Y7J7wTB
yNvGHVrN9LbDa4+GiLmGZCpoGQVvnn+BM5+Nl31pTUPV3rNoJFZXLY8u8Jeg/CGBv+WxvLnjb9a3
UHmL92t71oq8XKghNFdq7zn+FG9tyom4d9I0TO2tlqORMVv1h1LfDuObcxhEtB5B3ygO1VzdCYKJ
t9Ud4TUcHCPvu3Bk1I9hpPQXHTS9BInDEe020MQ7ea08lTEa8VEr5IlOtXYpW0hX9uN2vu5Pw/gS
oG8hfMujeDuIv1PfQuUtkNeAl4OGoBU32gsRCUtehTo6M1djlvxyrdHm0byhd8UalYlLqwtNe89i
4/x6vCD1zRPWNP6tSd8y9jtBMPJm3Vm0qtoq3uN4v/fwRSde9s/ECm1sedvAc4njoNEUEcVXaEV/
KnhwrwX2Tdnpreveu7C0l+aZrP40pC8RjYTxLS3MeQtLYhj6dom4LPStsnknCBa8re703p4MNp8l
G7QPl+aVAsb3er1UcVLLeBjXcCYV+wVVfcmCTn88G3xmCXhZ+x3rWjyS1zB233sXjvZmpw9fwr6Z
wZi3Y9K3wN/Swqhv4WjH9+vbN/DGW00lwdTbex3HYQNm5UB09yrCnpWi/6EVLnOSMHifnSm1crTo
gBodw/2C6DVUn/bl3g+1bOBZF9b9qdQ3b9jg2gQ4K3iz3QmCibcDv8B+oPdSxuynCRjXZ5cX++IK
v0V7nS5zmRYnu1O2Z1Dm5wDSPF8NPOhrNV4Ixrwdo74F/5YWBn0LSTv+jr59G2/CJqdTqQrFUeNe
qfvEKm/GH9PevyItO31a2sZZUt8O42GnDWOYWlHB3JOayYbA29adIBh4O1oClrH3/Giw2fh6uYob
TMQzNG113IxxuPoWqjSy8lDrTFDedjHqW/BvaWHQt5C047T07Vt54+102MVc8mqT4Y4vjBlYHnve
x4lpb+NlShHrS6lvp6Fv38YbWeUnTUS6Zt8X3dU+cR+reKekvbRTHSPYNalvnvESdy/fMYxP0hjH
yNvmnSAYeAsowY6BN6cnqFYfmDUgppu49wSzCuB873fqWyBp/MRBSqdTuugYbDy4qlpf5s/xdiQm
fQtFO36ovn0Xb9bXH/fPMNPtU1XMhfFMo0H07eC1TxrOASbiqsnTH2Qao0vKrqtZZV5rrNS3H6dv
38kbrj/UXvKUKU3MfWFyMFIq81u0l7cSvhMYZ4jNSR/zNXRvhacjynTivP0EfYvlAd+fI37U1pjz
Zr8TBCNvwSTYMfAWQALUetSL4Sli8RvcHRON8DOAj9qkxETWOzWdTVDEMfKWHtcxv32numL6N/C2
jaORsLTjaH17Rty9RFzewMhb2fUJPxjPdw4mwY45b0El8nZcvkDeFr03A3fNNsQOCJf4NzzRBneE
YU66VBVPntJB4sujubZvv5s3C5O+hVLLo/XtgvG5VMCFDYy8FVyf8IOBt4AS7FjwFpJE4u1CtOxR
75L2IKq4A2wusi/wXM3XmZaGnnSF2Z6XvIUkUfIWHm9Wyx69PZlbfZXkTeqb5E3yFoi3lxwT/lr3
ubSDkTf3J/xg4C2gBDsG3kIok4WJt1BqKXmTvEneJG+SN8nbb+Wtlgf8+sgAdzRHTLy5PuEHI2/B
JNgx8BZCmSwMvIVUS8mb5E3yJnmTvEnefiVvl4jLONPeqezF0cihJ/xgzltYEom3wGWyMPIWTi0l
b9/M2wA0eJqufSCu0t9j+PddTLy5PuEHI2/BJNgx8BZCmSwseAtJouTtW3i7qeVVvfVavktI3qS+
/Sze0Obep28+LvuIccUiRmfdXrE9GHlzf8IPBt4CSrBjwVtIEom3UGopefse3sDm1qugwU9Xkjep
bz+Ot8um0qqWrzTJm9S3n8XboBsrV9LDl+uc0nsrm2zYu2zA35vXzAUjb+5P+MHRSFAJdgy8hVAm
CxNvodRS8hY+b7Ny+RFDrTMXqNETfYR/H9Hfh/h3Zyx4c3nCDybeAkmwY+QteJksjPvrw6ml5C1E
3sAGv9LZzueYTWleGHVjLw3Jm9S3H8FbtfzCbS7X4Nzr07yKf+9L3qS+nTRv/cxNrXTBbe5ag3Xw
KuLmqPds4A7XAuZmLuMeRQdM+Wpcn/CDgbeAEuwYeAuhTBYm3kKppeQtOG+koTabu9bgRCrDzvEX
04LkTerbyfHWKJOGsi2ba9Pg9E3z+kHyJvXtpHij+be2s83d0eBas/AheZP69vd5G/YuPxI8i4ub
xjpocHGsj2pPuAv8mTK9FFGihYm3jTtBMPIWTIIdRyNhlMnCXN/Ckih584jBgo5t+sgzGnnU4Enn
+fMKJZj/Hm9S3/4qbzAuUxnpn10/UXsP21wbHvcvk/l0rVsYK6M6vaGDbxjiG+uCN9udIJh4CyTB
jpG34GWyMOhbSLWUvLniYe9ZN9OprwencRnU1KPXsOtFdAu6/ot5k/r2d3lD/Tqgj/78Xoe5iOID
Wvl7Dd7Y57zdUBnwxHG4EwQjb8Ek2DHwFkKZLCz0LSSJkjcLd4sxpVcrL/ue9M+X3+s6H/z02h9S
O23/TN6kvv0l3mrDYpLrj9FfZvJ+9M+337sf67P3aKTyqYGn0vwAu1+c6CfOm9S3v8UbaUev9nSV
oHHUsfp3vN972A9RU8O7nN57e7pMQC16BWxlA6VXf7ozh2Cjm1LffpC+ef8F/7bwrRf4rW818e2b
xYqRewHePr15BX707fI8jAukhXhJaVKalCalSWlSmpQmpUlpUlqI0nKf/D8f8Z8i/P8l/UtX7nyP
Q5z/pvm3b5oP2RifLq/flhd6lxW++l29nFRThYn+opfThZTZ0ZtKI1Wd6H3lRYWnu/oXY4ANtoVx
nOX+hB8cjQSVYMfRSBhlsnA0ElYtJW+Stz/C25DxdlwYAG89pawWulVq6elqxrh+/+rdzatH2ZKf
Yd/CnA85UkIic36hN5OFlgZfIjtEfRsYsd+qb7KdSt4kb555Q0sA3la8P9Avkm2yFT/Nvp1Mv5Bl
5+da37iIjbG360l9k+1U8iZ5884b95QT849bRrbkxOzbafUL6cRzP6/DeKJflfom26nkTfIWHm+F
if6hT89u5om/Zt/84m/uF5owPiijX9vRpb7Jdip5k7x9M29ka66SheYfsW+n5fd+ZFlh3gce0i9S
32Q7lbxJ3v4Sb3oXbBHwNg8/vjccixlSv6CXM4VnqW9/Xd8kb5I3ydsmb4X5R4X9Lr83VfisXyov
6cK0L/Xt1PRN8iZ5k7yteWuyCtmrgDb4b/u9qergsyz17fT1TfImeZO8bfLWuij8NL/35fE8vy8S
TOrbieub5E3yJnkTd2g/FjPm51cn7vcaxlfmBm3u0mOUgtS3U9Q3yZvkTfK2egLtGY8IOEW/d/zx
9H6PO0lSPiPDpL6dqL5J3iRvkrf1E03Wpd0Gp+P39vSnx5dUYWJkoIxFDcq4yGOZP5lHDLz5/IUb
jkaCSrBjrm9hSSR9C6WWkjfJm+TtT/NWBhuskb37y37vxFg8akFsrtQ3yZvkTfL2o3gje/fFbuh4
lT/s99JsLsW/fSaUlwyWychhGedYxqNwNBJUgh1z3sKSSPoWSi0Ro76FU0vJm+RN8vZXeOsANhKJ
jJH7Y36vscxcQS+AGcJ+Lm9S3yRvkjfJW1De1EJWI4v4/X4vet5d/ZfwJvVN8iZ5k7wF5A0s4rf6
vcnE3Hj6hbxJfZO8Sd4kb4F4axsX2VL4fq/Y+ft7eZP6JnmTvEneAvJWTl43nTMAH+H3JjLn5zSb
0f/1vEl9k7xJ3iRvx/Omf7EaWUwW2O/Vy5ni5b/Cm9Q3yZvkTfIWjDeymEH8Xv2FXT+aXeOCpf4l
3qS+Sd4kb5K3ALyBxUz2L98PxZrt9Xu7+uLaAIlNkmjgGwrsECbefP3CDSNvwSTYMfAWQpksLPQt
JImSN8mb5O0X8aYWa0f4vQP96bL6T/Mm9U3yJnmTvAXiLV3oNK98zffirrSh/q/zJvVN8iZ5k7wd
z1s5U7ytevR7k9VP/TKAzf1NvEl9k7xJ3iRvwXgji3p4vlcvZ4uFatd4QgkxlJAlCUdg5C2YBDsG
3kIok4UFbyFJJH0LpZaSN8mb5O138UYW1cXvzbLzc414y6ckb1LfJG+SN8lbOLzlUy7xvX0jdzeW
vEl9k7xJ3iRvYfP2kSkuzD07g+fNnuRN6pvkTfImefsG3q4Nh53B7EKHv5v49xI+3xK82e4EwcRb
IAl2jLwFL5OFgbeQail5k7xJ3iRve3+R+erdzW3zvfoNKy6qkjepb5I3yZvk7ft4axmLu67N7+0Y
Txdnkjepb5I3yZvk7Rt5K8Q+PzYynMdacV3yJvVN8iZ5k7x9K29Tflb88vptuT2/K3mT+iZ5k7xJ
3r6HN25zy8nbC03yJvVN8iZ5k7z9Ed6aqWLZaBm5y6nkTeqb5E3yJnn7U7wVVcTP+otCuIV/T+Lf
HTHwduAJP1jwFpJE4i1wmSyMvIVTS8mb5E3yJnnbeKI/b1ZxfjepAdbw7236O2N7seDN5Qk/mHgL
JMGOkbfgZbIw8BZSLSVvkjfJm+Rt44mB2TGeHrqSN6lvkjfJm+Ttj/AGNvfWTBWSrbkueZP6JnmT
vEne/hRvMcR4irDkTeqb5E3yJnn7E7xli7Nqx2iVlpI3qW+SN8mb5E3yJnmTvEneJG+/l7caPtEj
3PePkbdgEuwYeAsowY4FbyFJJN5CqaXkTfImeZO8Ga0KPtFBfKP5x8hbMAl2HI0ElWDHnLewJBJv
odRS8iZ5k7z967xl8A4jvDgOE2+BJNgx8ha8TBYG3kIok4UFbyFJlLxJ3iRvkjfJm+RN8iZ5k7xJ
3iRvkjfJm+RN8iZ5k7xJ3iRvkjfJm+RN8iZ5k7z9PN6qnLcu3TH4nSAYeQsmwY6BtxDKZGHBW0gS
JW+SN8mb5E3yJnmTvEneJG+SN8mb5E3yJnmTvEneJG+SN8mb5O2v8zY4B1w/R/yZI9627gTB0UhQ
CXbMeQtLIvIWTi0lb5I3yZvkTfImeZO8Sd4kb5I3yZvkTfImeZO8beAeYRNxY4WBt607QbDgLSSJ
xFvgMlkYeQunlpI3yZvkTfImeZO8Sd4kb5I3yZvkTfImeZO8Sd4kb5I3yZvkTfImeZO8Sd4kb5K3
f4C3J8SXiC/2YeTN/Qk/GHgLKMGOBW8hSSTeQqml5E3yJnmTvLn8ok+YITb2YuDtwBN+sOAtJInE
W+AyWRh5C6eWkjfJm+RN8iZ5k7yFzpsYRW3EW5qSN6lvkjfJm+QtbN5W0eCDVttgav0FRlGz9xeT
DaKRdn4MT9yNaG+6trLKPcmb1DfJm+RN8uaDN/JiKZszWdRe+ZExc1JoM0XP3zKmprIGy2bNPJjf
dhV4Y9XS0GSzUU9l6eHHPVNat/foB7famC+kI6x2z8tc14/mTeqb5E3yJnnzwRutwHYJgx/bWrbB
rwVbySo3A8Yyql5gjCVUtudC2wuXuUzDUzH4J53MwM8yrw2mpAd1g426l2CDk+8L643cqq/e+GN5
k/omefPOWxvxAPGt5g0Tb75+4YaRt2AS7DgaCaNMFua8hSXxRHkjr9aKq6mCRXybg/P6VmHsa1YE
Y6lrD8Kv9XwJ27t7KUzrM6YVwIC3P74MtjCLCbTqn8KT7jfbecbnJngePSseiWvsSfEm9U3yJnmT
vPmUgP0v+Zg4XTDsXBaAN3U0nDJmvMw0ls0+LMFQqlnv1taj7d21xUxNZ03wpOm1OrjIubNPg036
3T5Lv4GzrOhX0UhpM+PI0V6D1DfJ20nwliOM82+Doi+MvPn7hRsG3gJKsGPBW0gSibdQavkXeeNj
HIPjdHGeYsqiWTVYbHGbZ4pifoD9U6MRxYdfG5rt3b3MBHQA7QX8xzihsXisQf2CehEHX7z+bLBB
O99nfM7ZPmNMtZT6dgr6JnmTvP2TvK1nazF2W7+519i4f1VhmXH8gbFxJ2aAudUqYVpLhytUaVmQ
Rk6xCua3AUWvFAcaruIlWHpYK4laChZsM8YtQ+qbbKeSN8nbt/F2yfckGqzfbDFujVhuaWgsmbjT
wIdsmGC/FGb+QWv5/dJoFW+5TJsslcj0oWdRHpkS77yZbNiJ4Zz1+xez5iZoruKyL/VNtlPJm+Tt
SAk2W/I4Qd565UeTe4DZ6UMMrNEijTMHxjIM+xbg+uPSTJw8aTD2wDpQ/ZppsK9pssLUm2wdWNI0
XMV7SrDV/npbLIXUN9lO/xRvOFtWHBI2jsPEWyAJdoy8BS+ThYG3EMpkYcFbSBJ98kYz87QbIXdr
skG7smRq/R5828rt0GBqNKLeo9UxU3/Ivv0oabhOqGJgm5rOLqFnyplianscjfS6BTHvTWuNlg3+
1/VNtlPJ27/J29qvfcIVsUmSKQvj1WSL+U0F5zlftuO8/r59+2HScDRgVGcobdyNmSz2lVJxN14X
YylK7B/TN9lOJW//Jm+a5W3hPKRexBWx3kuBZRr6JQ6PF4xlswzsAVOVb7ZI/7Q0c5ww2LAdw5hi
EfvzO/VNttO/ydsC79zhnTw9EQAL3kKSSLwFLpOFkbdwahkmb0Vrv4wJhnWZxxUxGOzmFjqzVsSq
U4YrYmHsXwhskf4RaRl1VmDp2tUFthIacfwafZPtVPL2T/ImvFqM83qeMqVXKWtsNr7GVi9WxL5o
itY4EHrg1YaEcv1z0h7UJq1VkqfS/sn6Jtvp6fLG8/curLxS/E4QDLwFlGDHgreQJBJvodTSI280
wqAIpsuShnvE8kyt1/qMVYF+pqJvxcxl6ttsiJR2hLTlLGnAt3ouMDHT/nP0TbZTyds/yRvN4vAV
McDpYjLDlEWryljsa5hgijJu0ML6H7MhoUvDXWVm/wwz4Kga9Bx6HnHsJMoWzpWJRuxzDdxTOVV9
k+1U8vZP8mas4wbxTuvuAfMMnPVZZpKrMDbunWlgbg3aI7Z3RezbbIgfaWRRzSRY1DMVcycoUPBZ
FQrers81drZIY76aTGN0w5R4t2awUe8lD9apXGSs/7k4Yq/xydreB7VFcdFPjxTX0D4lfZPtVPL2
T/JGK2JWXHS/1W6wdOrrGVv9tdoyWSo5wTwDxhfzsEfsD9gQIU21bGo8o1k2FaPR2o25wc6W6SXL
NGa3TEmPGgZ2FhWwqDeX0I+UHjQrZ9jdmCnrePJV7EXhDnfGve/uPv47NQ3jWs6AqmE00uloLOhc
g2ynkjfJ25G8rfeeJD+XTBm9VUw2n77lmXKvXqM1U3mrR58xpMuPp0qZbxMZg2UyeoPykYNFRdMf
j93CwHlyjf2Ckp68i3wNwqaib06RFLjzja2iXrb2b/HVgP28gYQC8ABivr+mf0oaZUoDlvK2fUay
nZ5+O/1hvD0ivkTczHFMvG3cCYKRt2AS7DgaCaNMFua8bT+x9mvJnxt1O32clz2jYHvGshllDM0z
kfmWVm+XZi5Vsd8qk5m1xQxxv7kwWfys0YCbD29wc/5hssngaszSw5ciWNQHDX3xCnprGDlR35gP
Ef7baoU1MG/JTzDx7fd5gDCMk7O9D6yNMw1lbb1e/536diz+19vpj+eNITYRjy2MvG3eCYKBt4AS
7FjwFpLEVX9Knk2zpYKvcw8eYXrcAPsWGxcY0/JdsH8ZL1O0Xls9Wm1+ak5Gwc2ryw+wqK2lwRJn
4zbL3ukGY7lYNGIYYFO7mPHm4w5sqqaZOL+B+RneZlYtdmNWnL9t+LzhHb14Z2LMcSmQqTst27vE
aZlhJ0bnHQ2/h7dwJP5b7VTy9qN5494++X8US1uORh5NNh3GweK9gxFj5jTBwBiy/hFtVs3QnKrd
pupgU9tLnJIoLcGm9lqU61uDN/YaYFGbDyJmlGaMwaKadou6HTfo3l/+BX3rt/I412CeB7N1J2V7
aRac97/WeEG20xPRN8nbj+GNW6sijrExlnbQhgG8env/Ca7sdV/jWVNwXI9ujttFeVYwEiybfcDI
MLUpMtsm4mMmbPZ1ugUWNRoZXmuWTX181Lgzm0q+m6IMnr3UH6BvNNdg1IPt+ODXydhezGum9J7L
q3kn2U5PRt8kb6fL28iyZzijwvNOzTC7zHI+tFafNmJpFXH+gsbPy6U5Pjbun5l83272PT0WUQs8
73Zq+CTmAAftfJvPc9q81JSV/y0UL/W09U0vRiN3ou8J4zoN27s0Uxobdi8bVu8o2+mJ6Jvk7XR5
o/X6cf/FYJnGqMhYW/8ScalMK/QYM4dxAyxqps2yH/AjVrro4r7dQh54S6dSb8LXGbQrJtpUPA33
qrSOovc87v9pvB2FKaohGslme8rftpYhSgNtweiP8jUTM1OynZ6Ivv0u3jCaiEbAzdzSEXPe3J7w
g4m3QBLsGHnDO7jaFO/VGPdrs3ejtrCp5qRvMvX2SgeL+vKEJ3a1E2BROzGyqKtWtRsfwnkKUsaf
wFtAiXjCAzNq0Yh5Gue1hSPNmmtgK10ImzeBo5GwtOMf0bffxNsV4SfEz3sx8HbgCT9Y8BaOROpP
9dt7HPE2VJbNvibIBqPX2jYtL5VHLeRWFvWKeh4HichbOLU8cd64vgUsk16kmYZG4u9byxClLed8
rgGjmmlMEzpvUt/+ed76hJPUilwx2Tdfv3DDuC4TTIKFwYIOohGMslI+WEE0HTrLUdFL94xdJz5N
NsJE1+CfzeEmzhT0yc/dI5F4C6WWp8wbYqFvASRgVEM228r8fWsZorRM5qGKcdEFqOUl7RMJnTep
b5K3n86bydLFTgxbFs3n7l540gBF41ZLQ4NNB/ECS7/F0qtWRTsB/j3ewtC3dJGiGt5mx9i3g9df
k6ble0wZ4cyUo3bIdirtm+QNcQvP9k5GI4lJ9XCrMjGstv+5wJ2/hQTPPq7ohRLdxFZG6/X/BG/B
9a3F5xpK6w7vN9je5Txl8j2LoA0j2U5PR99+F2+42oS7CXRcvz+IkTd/v3DDwFtACVCHQatSwdwJ
V37baUIV0UOxRV1jah3X4Fr3D+QH8zhVboUDl/EUebNhoW/+JQwwriGb1dPH2Ddv11+Qlsk84O6W
2g3DURH7Bt4cMbXTULTj1+qb5O2keMO5BsbaH19GsHaqJjMmS1HKmVJZgdHmazTyJM7lEb7P5TF9
1anyFoa+UVzD60w7wr55vv64ND7X8Pq0Xg2Q7fRE9E3ydkq8tW7urHPKwmqnWUXsHo1GsnetT6bE
W1WMlMivZiNcfaGfwVsI+la4EzkmjrBvPq4/K21jruHgmEe2U2nfjuKthfgN8bUfTLz5+oUbRt6O
ljBotbWN/ITh5woDS6yVRC7I3ELHdvmM+9beTWat0rWWP423HQz65vMXPK6h7rjj+sfa3kxGNzA3
UQnbCPWvofPmhkU7DUni79I3ydsp8ZYuDmKUn/DPtFOFaWPGHhKfjFWu+5hD7ApjK+bJn8ZbGPr2
CaQbL9M96Rp+qO3VCn2mzN4qIm5GttPT0bdfxRv5ayrimV8seAsgwY6JtyMk8LgGa67hz7ZTVZw6
YVRnJhvSyQV8PPEDeHPGqG+ef0FxDWeN/VvXfqLtXX6lNTbqXa7WoUPljSTymSqaQearB+vYRo5p
H+VmxLlxyu2Uj6EP1WpdJzGHo9nsWygaDPYtpFr+qnb6PbwNMPe3cm9e/J12Slc2q2MOnWnF0qcf
wFsI+kZzDdPX+NG82S7KXkQxBeLENzydKB5r5Fn2fdaD8cXtgLFYNLIYVfBOl7HG08TgPa6itN/E
KZw8djvIN81k9DZmmLvz+i1deeMSciYfmSkjzAYy6Z+NmToaTmnmirGvaVJjmUbrkrHrZFNj80kC
45HUURfs0+LjxeSnVK/mttbzH3+nnVrzlmRDMU8UZTed9F8aUKvuSMzH7dQKIzjV9Bk8H2+/aWzc
u8Txaky1+b052whD2rcT7xfSxc5StNOjW32AdsovozrF48yeV3udTp+3MPQNJ3galam2l5f9vFHe
Y0Ux3xmrPkBjnY16SxHH1bp/YLw/FbZGrFhsxFvinQXjUS1KDzPFj3tnJcyPVBBRLtAbqvQmn2XT
CgM650nz/i23eSMvFePDaZUuU7pKYV4L0+BZeHg8uciwb6oOpVIVnuFZMXnePEXp16HvKfRNNqX8
+MVJIpR+wQcWK0Ma7wWwX2gOxbeDTpNOHJxTrcx9taIvkWXYUZoNeF4bifyqy2hkPqwytX6zjul8
sq2a/NP27XT7BR7XEM8UnL71H7K9iTPV4C3/O8anJ6tveEJSPKYePvFyxRtGjKRTH+ALlV4UOtEX
JVLM3vNq/HnIn3Pgja8aWxHqg9YSvK/bi3fsFyY4ImH7D4fb/qY010D+mJ9vaVlc5G2EWXaWaEt4
plGyNkddDvpGVtt4MzXciZkXPqe3uYhj9Q1ZgL7NQF/cRAejssqnGtoV5ecIYGd7NxaesTgf0Gfv
99vs28n2C9Zcw96zEP6A7fU913ACvIWgb3yu4cHD4D4RAx/J4NYoXbu6YJtxNd+jb2KHjSZGwGNM
28Gczibd+KaZzKwP37L74O9bfs7FuVFgkdIfeIqJmt150RGX2zirMRdb4oft5SpeKXR9WzSrYA8T
ExxSLjdc2e9rWSqGc9K+SDzN+zfaNxrL0a5ZHLkFwdBOA0qwY+DN4y9EXIPrWQjfbnv5XMP782r+
7fR584JJ31yewHwNNNfqctGJSrPRK50PSPZJaOCf1DecQxxhhnPeT4gRsfM31UpD+Ja1iqdvqQr9
u820cF5AJGv6o6uK0JMo9z3a9fOkHS6zF95U8W1ptpZOXD2ybCHUlE7CM8fVgujdoIweted32Lcw
2qk/7JW31i3GNRw6C+F7NYTPNfSvcKhEM1M/gLcQ9A3jGvjJoI6XiQss08EZW7Hyd/UNy0BziGfL
OtqShKP/tlykcd7omXn4lmidbnE6QVG2EhP/hYgO2nmZHmIed/3amgU/qj8FTzoX/9TWPUngsnm+
9kgzYCyB/QDFj+c9a8tvsG8n2y+IPRSjv6khYq7hq3JI50+ItxD0DdtAdnr7tctOIq6KFbNt6/XX
9a2FXmoSitd4npKxXJtf+qbWXIPm/i1x9KjMP0zMRFr60/rmclGtBu32mFkz8X54o1pN39Hmzg6/
y2/ZAkqjVqaOhuuZ93/Bvp1svyDiGmpezkL4Ng0JMNfwk/tT9I0a5a3BhsJwNjdlMLHyE0jfxMr2
Zo4nYQ/V43njcw+dNh3Lt/VND841vPEYFoOpqr5/1W5LQ0K4PErTTJZpzDDPD65+etY3qtVbxRBR
Ct9TthCkmbjE53FE8hvs2+n2CyKuoeFNW75HQ6y5hopnbfj7vIWgb0WKa6hvUKKmp2PMJl5080sO
6Ju1JxFz42oi8rVeboqVHspuL2KqrH1GR9VK+Hcmz5/Pr+UiGqG5hm5+z7ekua04Dxv2riE7F5+d
4Ces9s40Hu0BNz9AmxIZmoPejcryqr3LBcZm9F+qrvq4wRu2onjs1r/N3Sqbae0rMscJQ9SKYrPB
YtJJBcTbwbP63GuanV7jlyjd/1S/lyJ56HwGaKfUP9ruBMG8nYYlkXjb94TIDdnL+tSQkC6SZs01
rFdgT5833xj0besOj2u4Xq9UmQn0tm6d9Gtb4q6+8dmLAlNvb3QRCcZPKzWMBYWLmqLd4r5ejIyl
85/JBsfFuvOBdzq8kU6MtkXFZDMKrgOmU8Oyw7dEPB2+aiKmwL++0U4R2vehjr5MEXtG5wGmi8mM
iLCjSLFsFvemUK33SnO/su/pkegn3PUNazXpd6ELMCrHnhtNcdPRCJ3Njf2jgXs5S6JWrQcNI4A7
Few/22I+xLLBey+3mqogFr5Er8FssY0+9e1v2jdaJyzyNpRfrzuv7gTB0UhQCXbMeXN+AteVDU9z
DV6+qf8LpPG5ho8XzRoD/wTe/GPSt80nWONxbDGPUfF8FO6JhS19q+AOiFZ+tQvNy2X2zxir3AwM
PAeqvVzafXGPtXqfUSSYYUX2g+2BOkQjtB9msxaDVruyNzPQAQ3BUZHJvmbFCu7YWmf3EDMmW774
lPw5A55/qwoPclOal4t4FH4v1nK/vhXEDsGjLjoxSR1N0bO+AX0z983RrGZ5BnhiV6Z0n4YyLtMu
og/4vdmWSvG+WKsc86tvP8a+hdJOA+C9vGGfvnEagpcrTNubOKM4VdDxiquOnxhv4eibbXzabszB
OrUrmL3t05P9E34I92hjNMo+5txi8LSzd71P5I2PP720w1V8EgNvDMbCygzMgW03DI0XVt+SYsdS
Q02M431caiprMPim08LS/s7DzFMdOmBztVyX9kMfc95HZpx+2PdGWiOpXZK0MYaf+L0UxQCbm04t
6Q2mD32zbPJ8khiLfSHOl1tNqS+b9M8Mz63uR9q30+0XyA/R3bpO39/U10UzDTg+PXu2a+DJ8xaK
vmWnuang4WuW7Pvqefj8W7p2cyFmOgNctPNpFo2MeuMjej+0b+S7Z7MPtBvmifF58tW3BIkYr4uv
ctiF4XKdLUd9nA8547x5srnb/UIeXLtZ5dEu1qv20s4RkrA7GkCWFvoLaHA04ieOwbrI+wef855t
9nUe9Y1+gePVxtPE5du719RaSfTa6k7Evn0RFvlVLQy8bd0JgkU7DUki8Wa7s5prqB6hOGHZXjHT
EI28rOKPTp23YBL5+DTF91BoY41nzFTrzQGz7Ws7LJFWtqCmH5S/YX+kvtcrm+1lye+9fzDcdXwL
Y7s1J/0+3wyG8yW2dRlsNTSiTSYmDV/Fwa0a0B+/WJbBxpsv5oEnnm1mIw+QJ+2l2dd0KvW6tk4b
tZ6jJ45RzT7bgmmCzU2PGth/ttTj9Q17FvBacdoep/WdL7ey0TmKMM4ar+3bAV5/kn0LrZ2GIHGH
N5prOFOPWxgIw/aKqIaX6nr99CfwFo6+xZfpJV8BU2boPfnpeShC4KxUDW30sVxiTEI00utadt1b
rWi24yb7BgZlFGdWhIotPmTU7YzRKnf8lAY8whTNfrCA7RSt06j3rOLOuoH9DV54S6gUvWHsWkhc
6bHP7vr5ClYGzcRenr3qWx5zWqfIgrrMM+0tm8heTxnlViu0v8q+nW6/QHMNr0eHwgRu9SKqgXs2
PI7rR/AWir5lJ8pU7PgadWO29a1DEnA+eJnAaKOnUL4CXhSlhZ73en+9d997hAVJp+4L+C1frXbM
99er9Y+eU5TB/guzNeSWhoNHeEw7zfMIAZw52LJOnnhbmCnHngj6G+2KV2yJedBqKM0cxjGe96NP
dxww9k3gbOAMSiYrvmUwfcMV/9jixr0Se2qKK6zKArNNOvrev8C+nWy/QHMNr1PHz+LtCtjqragG
wzY+/QG8BZaI872siin+KPIrXbu/ZGJEezi2UeXP85j4ML4CXYkM7SkzeLyl93Z4hxHCzw34T3BQ
0Xdf1eHTRFcXvGh/a2poo6fDV8xZJ2acg7ZTjHNIxMfHxPeSX8Il2CXe3NE+N5PRPDtGsxlsGI10
OoWNO4745jxLEg70bd70Db+UOjr7csqkcbCmmPXOHPeR6bcdpk/Uvt0QriDuOGLBm8sTfjDpWyAJ
doy8dbhG4lzD+JgF8QPf1OMl5hq6Vd5OfwpvwSVq7CwaWaZNcWrOovOG488O2NThUAMfsl7BMTKM
z3dx94Ep8X7N4Lt0w/gKdOHOOZqtRXvngzf0KWsv1zhYWdK3bFjfssSjZsb+yka7btOpbBVbHY2B
tt4I7dQ38yWWnT45RgAcKhvVCmxs3+kNx63X3/AowHD0jdb5WlWM6jPcM4061zRTqp9Tn+5Tg/9e
O8V+orNY9V0OmHhzfcIPRn0LJsGOedxga1nF0xCOCIjx8k09XGKugVYwVlGpP4C3wBIxAjQ9tHYt
8dUkPg9JUVc8t9V+nM0+oHsDXmoYXwEvvso3OltFbXnlDW0JZfhKJTO0GlVl1h6LNiYL1h58ls22
j1xETuyUQLRT78zz2ItjzrlLp6ba2kv10PL/sL5h3zQZXI13opa91vQ61VxFXvsr47/QTo/Ut4O8
UUzK/kVRH9eRrZ63Mhqf2lvZqfMWuEzQRqp3Q/OETljDTFbK4vPV9iU88Yb9Je0UVmbGi32dMF27
z9MOWM1f2RKJjMbX61ceYvB2ynAtcv+Ux/6yUQZzpfWorb2vk9I3Wt28vTdEXODBa6emX7NBQ3jO
v8++nWi/cBuN+Nk/7/uberisuYbGTis7Yd7C0DeDxRbpxtG8hfsV8GrrXyYb8LhVMbLzxlsO2ny9
1gFffJY08Vtacfm05kZr577KRvFxtCZnrbYHbaeDdr7heMKgF94onnfAc6aveTkdfaPIQsr3Rmd5
e7g2a5pp9K6YFTH3u+zb6fYL7QruE/d0GoK3y3ert+IaNuYaTp63EPStwLJ3s+7RvIX6FRKxNGPT
0bXh6GMe4u0TvPfSRWc9b1RlSh3jIijTMjMq/z97b9ucvK6kC39PVf4DtT7MeU6xZpv3lzmzVxVv
CSQECJCE8GWXAQNOjA3GQODXP2rZJiQxtmTj3NiImdmzlRta6qtbrVar1fpyeEs6ttvM9NsuyOU8
LRvnW3qOAT1uqeSwZ95WPk99G3PxbaZHKOuvnMI7daWdsD/DDZl9O9t1Qb/9cn1l/xoC3Ydy1kP2
t1GtwWqWnSduJ9C3D+MNYLe4nUgKu00abkD04LaysnODG66RnsJXliHKqMcaZlB1IHt/M/ysGUY5
tnTqAWdd5Qzb4nqewkqSmPVbxysA248t/yAInvXt4Czy4Hzeu77Bud8OxOZQOOcIp9lcdKxXTNrX
Wjt/+3b/ALugt5apsY5thBvlL+zaWN88UeD0LJlETC3/QY/rsCIJ1s8g4LZv4zi5GwqgTbHt4qsl
8FkKUW5tVLRpZqfG60OqciN/jnFNiRvM/CUuVjAerIw67qocR1Zcwaft769jvS6B49h+ftZyDFfh
2a/Ix3FF89R61FvjXi5V5s7h2HCO3ceIcx6D3l7GjR5xHgSsG/g+YLsF95djdT3/A2Iw+6rrdLbk
m751y5B7LVutbgQfuO8s7M9D9XXBw5wI5Tyl0zfyNs5quN8QzgWKDzG1fL65M+9QHJX92eHmXd/Q
Cp5/WIiucbP+4Nujb+MP8EEfwA/J52c5w8ZuN/26Pk/1mS9D5PPYakeAG75vKsMtM/MGjnHLNv/K
RfkqrgSZ6Ol3ZC0+RJzqOQVzqYG1o0UxT01fSb/ZC1ac4mOODVeTUfVqMkdwwnHxJJdTo48c14Oq
FTiDLiqUa+ir7zE0fKS98KBrVOWNt/RwXbJcThihr+n1Gt7qtPqG9CdzV4giaY8+XB7RRFfyK+A2
g2IW5h44XPbtbNcFtEJzg/aS8tyZ7ENIzYw17E+Ng4Cbd31Dng7XrckWgHiRAr4Ng3efmdoGMv8f
rq8aez92n0PsepYd4IYo5Ort3JfTdCj8AY9TtLgZzuznR5Lx9q3lh5RTvJIY9s+wqJ88bE1f3dyf
4goRUHNijSt4jQmPnKzGlk49vJm5ZNb7AbB/eq0i2yplVpzq1ddWtbrhKRP6nDi/N1NLpTmudTvj
yM/Ufn6w/mH71g2pfTvbdQFiDfHD+vm/b3udYw1niJt3fcOxho/0z9tUnqSQiNdhDm0Sh5bihLit
zfsL+k1gHCE+lCWONeDoBY414HsetlV8KDjFT7Lfc+8tPZqR6bdvjDwvnIuRmffvYJ6iPtc6Dtxa
TbjEMQovAV1fZbONjLNFFJtNWBIerFZRR05xZcdWRYL7MRWItS5j3LE7GGh/mplr4Fk3r68WDsja
f4yK6C/6ShVa+3a+6wLEGkalL4m8v2x7iWINZ4ebd33DsQZBcI2bNZhaB+atsX89IW5YMhCbyC7S
cM9Izx37KUu4dZYp8p+xhsHRWINLTqG2JH49F2cIZ9Kjqp5rq48oen0VXdOd8Ft99Jzk2fP1Vfvz
JNp+FhHUebfhFF6bj0LkvfcwN24QZhfaEuqYQYBiKb9x+WFC5vRn+fD3Pc1THIna+/JBs2+g4/iF
EMNXp2ob9xc8UDhs7/cLlBQg1tB7VL/tBX/V9pqxhsNci7PHzbqN86IJfwFvjbZuZdf1VK0/+HUY
ZCHHJ8MN79pxZlj+YTY1a64fGRu+hbGavEBeA2T26xVyjsYavHDqGzXwk/XM2P15PYksu/dzN/cX
jnygUhCuvoB8b/Ckszmrb7niNA/ZHUYl0n1WKfCk27dTzCqf52kdf2PXNfcH1G1jnnqgcNjGuNFS
eIBYA64ZcAqZHv3YUTNiDfgOBY7YBQG3o23QN6JfwAq+++jbx+eopYBrRaZTseSJcAPvCxcCgNck
ObjdbDs2I9aAFtG0AvUazFiDc07BedheyGvFJ2TK225tel/OuOmneCnIUUlaWshTjO0k1PCbIwsR
r6cWPCH7dqJZFZp5StSmx+2t3MNVA04gU4fPUWpGrAHXa9DjkgHA7QT69gYlGHj+CCoupbCPNexP
gpbYdug7Yje4Ze4qcJssNm4h17XxNSb9Y2xGrOFmwEV5XEVgflsmzin487YX396bw/v1330AB9z0
qLdEWv/yT3EabSQrEEFp7yN6Ybdv57subCDW0FwccUl+RUP0WINerwHn1QQBN+/6ppinKm5xswbz
FZm+uRTDp08VnCu0vwmsn7kZdaUokNaja3WI3r6i//p+eNHx29j0ig9TiDXgu8T3Nzz4wTnCjKd9
HhfcpcMv3nv50Ozrsc3F9eGO7bvs9A1+sRojDcYZdaccG9nHiVqWw9evo4vBU8tZ9mGyb2e7Luix
hsXxE1n/NYQ+1nAGuHnXNxxr2KRxvYaoG9wsPziCF43uRsahfiadh1q55TtjD73Revo7dx+db54x
WXxkrUtKz0r9OTYcAV4qEtR1h6qJq9ETZ9ZSI/tgatmsUOayi/mC41TIhXX9ccANv7aM65aZfu7O
lb6BLHFWAs1bG/jumHvWLKj9+OBcs3xezCCb+9ptkcv6jO2bAvO0h1/jM96UVry00Tz1SOGwfX1F
+gs4qc4PEwq1TE+nITjWkL2D+zMiaHAgcCNpQ76lzTfeupBK/4Ix+MX9KUQhdx9oLqyR3e9DFfab
AiAPOk3GJVgn/CZOPs9Vv44N/yXL38HdAMiEUGeVnZEJRv5B1Fr1ObLaUIVYhZd79JwBsvpbFtS+
fvBrG9FVr22coeE7ZIirmBd96xrV2AhfHYYshsauBGPDdyrQ//Nug/ecwh1FXGE/pyYaaNcDN+ew
vtFocDjs2wnmKWWbGLeEkcNCJtOTfL7vTyHWgF9tVWBFDghunvUNKmW0ivgFcsJZd3opgBXuNRYt
eE83CWMksj6oPQdrdZhDZYwN12tIQGVuBd8umLcrJPVpvn6Syesr7DmjzXumBtnds1arhVz4F4hT
rgtGBrF+/xmfiB35wAuX67edkf825lKJQRK508W4GYMx9I2Ua1t9m0Hp4XTqgTQ+0iq86+/cxavG
OYuRKzamv/6r5+ytl9dXyTXUzEE2Fu9pDtaFS7Vv57ouwG4zvrt3zn30z/biWMMS6gnq3lQgcPOu
b+Bj7uAer63t8F8KOOsAWaME3Y4DJJWZ8y2oPtPaU8OxBk2RwIpD3AhbTP25X/IPvhlwfYVjDTCm
tWk7oM9Zs7lGfvA7vHkjKRx3H32DaBn/xuU1yEjHrzfjd8hyA6GIVgH8usf1lRQDvzaV/uTSnTU6
rm+QxZfPC2lCLpOwCkDdM6xvkHutwhsjuE4jxOrhoWUN4kbJCexR0Eqj19hsVWfGu0+49jy+84/W
oCF+WfQN69uGUpbBsm+QEYB4jBu4HfzFSxvj5onCYfv6yvkXEGvYEu0FfbK9RqwBXnsR4SQnILiR
t3V9+/4NmPm53C28WBn9jDXgfKQ8NsTY80lmv7cxbgd/IbfadlLAd/7n790sjDFGwBXE2xbSE1Qh
kF9NSV5f6bGGxgjLEtdzGBPdLvj6AZ5ukd87AZzgXO/HGCBbw7TJB15ra29Rd6Y2mf/u/zxFY+B6
9TlhPATjFl08PXK6ffs66rcunI/eFXBlDag1/wQ1N+fwrl2/C++jInc5069EDd/pEIUj+ua2fYb2
LWFyDfN08OUvXtr4fr0nCodtAze7X3yrUEgyT0/zMfenONYwft77IQHBjaK990MOvgHztF54N+cp
ftnnNiu29BOwXP0ZqqXGx5Aj2st+aV9fff4Fl1L1LoVcrjmAmd0y7ZczVz3dg+Te+LW5bozH+P2s
xFvv0BZwrSLV8+76JxG732HcoBbuaSTh8zwFi/kB1RdI8nmNV5zUWbx8uC587/PT4/u+snzxnUj0
7WxxO/N56iNuPyoUOs7Tk33w/lSPNcTH+zU7ILh5nKdoFm3XKTO+i1//XkgVc0/9ZZb98OewvsFu
EsnO+wsiiNp4vMHvJraoV7/4bmHGNbOp3JrTrq8gf9cc9QNn1imTqV73w2+iRxdwb3dvfc57nkLE
mCKfF8dosnx7Ynq5zL6d5Tz1ETerCoUO8/R0H9ifHsQayLyt88DN4zyFWIMabRo44ByqzHx6z+1j
WU76hiksS4/cl2iFm08WzrOQzVTiWcrVrwd3iScGmah+H7U90ePk+yhjWmogD8++aMOPD64yq81v
OIwbXos8SALzdK/bN/1MTdmZf7FpO+rjob5BH3jnhl/jIOAwa0RnjR6ZfTvHeeojbhBroJy3J7S9
4+4ScPMeawiavsEu/D7/ZuY1jFsL4zUOQhT0/WlmORibJ/yuP/gdYzO/l3L1O9Se9dvWOM/C60LL
+IV+xpbM0Y8xl7t/MnAjWIuOt1dwdwDX48ryz1McD5Fex/CXKv6LZXsN+7A3zinasdc3WC8XOIOu
SVw4bLt+3XFGdJfZt7Ocpz7ihk+BaT8nyyzFkYbrK13HvcUaAqVvYN8+1rgqL66KAnmq2ny2P2Vx
ogjzHPKRnpLGqxLuP1GhBRmf3eurR8OPJeSq0YBobLZq0NFjDWak4RM3w7uHNYakdMPBZ71McvrZ
Es4PcaMdUJcAjbGOS5oZOEMds3HXuM+s/+VHG61luM67nilGpG89uDFIns/Lmbe8cW1JZt9IKXQh
KgkVSbD+7dsYty9/8dLG5wueKBy2EW4W38g/iK7eXTuJ7dWzGu6LrwfnpwHBzW0b6ZuRvZEbbO8B
Aw77vXCm1uf2PicRxVQapNBD7rLbD5wE3WamxoiocJu/l3d6DQD9s481mDyYuMHJ9FZ4HoNvbV+5
9scHUNH9XhO37oAUaZinC+mph1zet9fvhEm0F59+GisRmb7NoEawY33ezw8u8T6XKubuwEd9OxHF
4Nm3s8XtyGsIJJ8T2F49q2Hy0vrM4woIbh71DSpl3Obwmjc2KyAMnrWxbs8obAvye+XnOn7NhR5+
nBexkGLyfuYT4gZ+yLxfNc4F9Q9U9tZ37ejfu19xw1zl87M8/RjxKzwr9SX7mY/UsPN99v+O17ZZ
5Vh1Sjvt1d+ChFsbhqdNqm9vMk0+L34JKDOXHow72WY2yO4wTt7iLDLkqNp4v/DtG592PuT27XzX
hdj2zv2dRa+2V481KDdv2DMKFG5eKOpxy4+VApHPpAl/LicMzHtHFN6/vj/FcUlcHdwxo2m9yxo2
10Q+QYsb2L/E7JX7vDsMsQY9XoJzb2PfcYNf4Bcsid78/fGBSgjR6Mf11Wi/Ni2tco71/cJuDdkF
OyNv6+jnqPZi3zyTjj/RSMLY11NkaOrZHt2qDLqQeoM90J2xHiNOIRJ1+Bcv7eurL3/RK1MZ+/iQ
27fzXBfKkNfAezqc8WR797EGU8MDgptXinhfnxssbjnzRgT+4J1/ekq4w/2mb9gLHd3hG10tLpVc
9g7fWcQVv6KN7I0xL9Eu/Eu0lhK3ZgtuPX5RHGRRu1yW74tYlq0fuK31Wxr6zV9XHxyLhXc8X5CN
ja6GcLf4Bixk+hnvm8BLvTVudHHJFMn7u9baG22sOFzpwMmztlxPtRTB6kfw8e3GKK4hXCX25gNs
3852XYAVGr+cdyqZ0n4OYg2mrQkCbl4p4khD+vpq+vOGfibTGJi5ZbbnCZb69nkige82LV7aUPOw
ouqRAT0K+f2EjA43HN+A3H/9RuvBZ/0Ww37wmvuxbhz6vYanTFG37PtHv++MX2iAVzb1WpJ6XUaH
14aOUjvgAlGAGjrjn1w4SUK/J57lpzPS+ryUYzsRNbiBIxQ5qvOE87FvTTzmfcaJZRv0zf4bNO3r
K68UDtv7e+Kxj/nOXmAUMqX9mLGGzyhjIHDzOiawXvimE75F8i3UA75SvfiOba5M1YMFbmVs75KG
rE+BG9TIMW+af7EtZqxhX+3oGG5vaMebe+FxLNWd2vhYP0Qeb1v6qZyBG4VsQYO3k+urlzFpPi/d
2E5EDe5BJidr826K+zkR+nm6b+/vUZ6Eou6H6HPgRDKl/Zixhv6nfxcM3DyOCfmcuQFUDIdbJBbW
B8/b7OJj9R2XP6pvaNS4wpd1hXMcCcjy/TduHxk9glvSqBGWjGeR1+qy5sTpLdJum4F83sQ+k5oa
twan11RH1Jqci8vSx8d2ug+ittZfl7daH8/fvqWg3dRXcPs20jeHb9C0jXXhJBTxfoFr3cy8Xz01
ZUr70WMN0xc8TwcBwS2l65sX5BMcd5uajPWK1cdww5WoDB8ylvij+oZW6OxiPre9hQaZsPDaGv5+
zwk32D3OpTrHvQ2w47ym9xBPlk8OldVwHYykR9wQT/3nG8jmvb6iuibt8Dml7YV1IVdHq765PnrU
ljDP069tWBdOwiWs0Lvrq48+6WUb5w+thhixhmfZ0racKW7e9Q3OmjaaDFHJXcYet2h0J3DRjDYA
v3dnjZMvuOGsrPfyGuKW2ZsE2Ny07QqdTec/PcY4EW66j1iR4TbBDmd+UWaVe86rAZv7sVJgncil
T4EbPpPD2by+1rJ2/4FIA9KQyT4WH1r7dr7rgh5peP2DGoJPWYy8Bj3/Mgi4edc35N3n6v2o8Za3
M2747Ei/TbDodzhzf4DPG06qb7pVb0B6/03ZeNk9m8L1HJw+0ei4p9eKMeMjhLjh2EPnESoHKUnz
1i1xDQo32gv3BXG2x0arQs31XOaE+raDSvFCyu3YTsupxceINOzzooNm39K4jX11maht6BvFL+za
eF3wRAFrPDzPsv6DGjJGW20zrwGfXQYBt8826Jtb5HGlRxxrIMYN7rnhvAd8NyC6Gj5hrxR2yEaW
wmcehN26sI+1Gr/Y50Hglxtx5TTsaR/c8yWQKeSl6i+7G5kTdLiZs2oF99z0bDV8HxrfZ7D9EOmb
/vIPfq++e6fAa3/PrU9UTqhvsRS+l7Tex5FwrgW+x4ErvXtpw4mANwog0Fydh1efzHu7J5hVYZ2n
1m20LnijgGMNm3SPXHuJP6TUkrDVNjL5Df/t/HHzrm+APA7hcuvdl5tOxFKA/F9cSxff+detuH5/
Ad/BWPQ6Y25+fYVvpPYbJeM8a/4eg3d5RjXDauMIMs4u4sb9NTw8H8XnXZZ3zJzGZsYa9vUe3OKG
Vw7wQhd8d61XKdZrqqty3HyPYTzYGFlbxrsVhnWBMei5Zc2syHEyXKeIQ4Xf7CK+gbcfO3tbE/th
c0+kby39TQn9JY3M4vqKX3OrxUzd/8VLG9dH8kQBo8Bxn/v6sNq3810XcKyh+Uw964k+RNTysNXe
xxq4gODmXd/gtCrbyFj5cy6lYLwzBqfzaU6/uhVdDbpATZViY/1eW3TV6xg3fXX7hX9BXr/GdmyH
sYYGiS9FgNunbw71auY4zyv90Ua7pLcesvKLl/FX+6Ytbgf66/JgteGeW6x6uNqZZ+O+z9Ovdc3O
rl7NAQpBs2+5NNYGaO/o2gg3yl/YtQ3cXFFI6bGGg1n367Z33P2MNbyNA4LbzzbWNzrkYTO/Nm4C
0ON2WimchtpahVjDvI9n9sAf3LCXqq/QOKJyEGHR7ds+Sm1EL3Kp4M9T77jZtwG303DJcCNqg35u
N/pjUVGCmXXaeYo/+N7RUnl+M6xRIHDzrm9NHGuQx0dvWwXR9uKdP/ZC914qm6fnoW+hwg1eL8Xn
oa3mmr4NuHmjcNhGuLmhgHyC3PK+i6fN2nlmnXae4o+R13ADdyj2p8Jnj9uRtqFvhMhns3fJY9Wz
flkKp6GGK9lmeUnmzH396XEjaON5ehLtCJG+MdzOCje0c+PqJf2STdZ5Zp12nuofPdag36HQ94YB
wM27vsGeOfoxMs6GXOB2WimchtpaTeBYw/5+PZun56JvDLezwg18zO2mDy7Xz5ubvzPrzVjDPoIX
BNy86xsgv1aTLcfKLkGyvRaxBjZPz0PfGG7nhRuONdy2uSMZ678w6w/zGohiDWeBm3d9g1hDJr+F
WINTgfDA2F4z1qBwlLEGNk+ZfaPALYv/gvUL339x3QbcvFE4bCPciH+RShu1sPR3F393nuqfcU8z
7/jDDdUvOe2HyJ8Vbs5tQ9+OI58yXpqNkiRzBcT26rGGBf8ZNzo5bnTtsMxThtu+/ajjhm3FXQH/
xUsb4+aJwmEb4Ub2Czgn3G768CrA8SpRPs96uI+VzYxkLj/MzDmuFBM4bjl/5vQqKlGxgytSH552
rv84bkTt6ysH5FeqXDZeYnSBm6ePP9SQD89xGmTqG+vn6XGjbodinjLcQoYb2DO7WMP3mXWajwM1
qA0+hqJV60VizCViapnL1cUy+MWvuPJeEvHwwBnW6zOvJhMkfYMxZxfxtWGtToEb5ccHavhebpaH
Gw163IjNU6c2s28XiRv4kPCiKmx2j8Qavsysk32oqYFfjN/40jfogxcNqomnYJ5PZ4DbYtiFdxVj
5U/P2IwYn6O+4cz+jDYwrJVvuP0uNfDeIdZgRLHZPD0bfWO4nRdueqzhDt6Jcq5IfX6zHg6msqkc
+o/rq6xQRqZZzHDcbV7EO14Z3izscNHZ0+M+WvGZOfFePm6Tf0HfYF1Yqbc7PTL6y7j5Qy2bub46
RayBzVOGm117B+2cjlur9fUvXto6bqeiiHE7+g3wCEliDebnfGf911OepF6ZGyp3r7lU8qHM5VSo
zpSBByBVWepCzeqKKUvjFnjmULb2uNG2Qd++Iw+xBk1180LXmUoB++5oBQSujPPR0+PmpR3cecpw
Cxlu+KQwsxy0uHQqh6zVePyB59C5xHtPSQ1WFlzJBb8Xzr2NNrg62wDZv/QHrolo1mHRUWqa9yg/
PeMT6huOh+B1AGdhnZTTP0UNRxoy6vXVoGWsZmyeMvt2atzauN2FdgW3DdwO/uKljXHzROGwDbg5
/KI/ujUsQTzGZ+EdWeHYjdaznPVuqUUNLnO51RsXFar3+O3lNbdaVlvgv93f8Vx01utgnJJmBPnx
M7eCXBJI3z7/gvMaFgmVOtbgmlPfqeGcZBw/2d+vP4kGf8HNM8WAz1OGW+hwa+JdNvh3NXgdfPjU
4jar1zoXbWRvjHd69q9jnd+sPzk1fKcsuUMyXXPpdANeZFhM0YK0HcFdu/ga3mG/44x8t/cy9u8+
oxXO+lbGsYaFl9fAzww3nJOcXXwsuahZd4XNU2bfGG6UuOlRbWRLZs+PkFv7gl+DmXCcOo9zuB7+
uneSGQ+fM7Mhx6nplRyhxgRUul1z8d0Cqus+o03C9r235hazp7Wxdpl+8T5W8UXfCnqsYe0u1mA5
Ns8fj9TW66QRuVKMulJsnjL7dnrc8IoOWaWV/GEb45a3+wZNG3DzRuGwjXBzRWH3aTvGYFt2uLoW
zNPx6wrX1Qbbkcz9wVn/R6llc1HjbbTo6u2F43qtBbzpBfXH7vuiUZdbwdluaC0DfRMg0xXnXuBX
c3wc2+9RM2MNSfOs0rW+WbeNeXoiimGcpwy3cOOmR72bHLwvg6v8Z276RqWzdHpUJjqlO/WsP0dq
ySz6v0QO7uZp8Jpu8wNeeZ2sueX1FbzUk8029AcjKN/XPcXYfKCGa63heyFmzh6bp8y+Mdz8xO0z
stmHN73wjf14jIenFpITmre7z8SG+EkN3ulBKxNQ220zB5FzL5+z4BTi4vq9ECMbhM3TM5unDLcw
47aPENeQF7QaPcGb0q8tOKWrfD+lO+GsZ9T+ODWcH7JSXzjOOGlk8/Sc52kwcZu/v6F2v4bas86x
NsLN4Rs0bYSbRwqHbYyb5zGZbcDtyDewH1zJctHFS7sFb9viDAHkB6/niZb12dKftyGMmpvcPBxr
yKTXSPZwsvhn9M1Fm83TQOEWxW2sX9mjbYSbwzdo2gZuJ6KIcfM8JrMNuDn9AnCDs0ncVmexJJer
N1Lwvvj3M7pQWaRLoYZjDdHVsIVkDXueP65v5G02Txlul4Mb7B9mEJuYS5U6h28rcK2S1OIykDmL
qI3HW31G/7oNYdRcUMOxhjXUu8z0IQvm3PSNzVOGG8PNoo1tMI7p4NsJmeX11QBqQ+p36cY4b8tD
BkBY7NvZUjNiDfktB7EG7uz1jc1ThhvD7XvbiA8Dbo2CcUr3sVJ6XHTE3ZKc0nmyIYyaG2p6rGE9
BFlaxBrOWt/YPGW4MdyscOuaEeLFS3sMp3RV/R4vnNKNYb6T3aQLgX07W2pGrCFZ547FGgKkb2ye
MtwYbha4VfTTTg5O6bJwSpeGU7o1rngDAYnjN+mCbt/Olpr+4mUmveHMuFGI9I3N03PBDV6gmXVb
EMvaccRthBvlL+zaGDdPFA7bgJv3MZlthNuJuHTCzZDMGCo7trjsfWMAp3TvnH5KZ3WTLtD27Xyo
4VpCu016zKWSyy6XW5aaXHQ16I7J5khQ9Y3NU4Ybw82irUeId1l4MxOf0vEcl4gtOPMmHT6jC5B9
OxNq2XR+jN/7GGWN9z5KyUmLWyo3A4R0/2bvl+zI/ZJQ6Bubpww3htv3Nt6hQHy4XcQVz1vwXluP
iza4W7BIyXgWvzoXknu7p6IGleP1d+5W8MzooK2OufWy10ObiHQH69vz4x5ZvONg+sbmKcON4Xas
rUeN8lx00WuvOe36anHb5fIPK9HuLp1v9u18qOEaEj0N17tscbFtpg7VdVUzciBVygZu+/gb0zc2
TxluDDeXbeMeJfxFlStwStfO7E/pBPtTOhf2jfLjG7X1Ls1xuw/0H+nUwxti9b7LRROzV1xTWDZx
Mm5qWkcOmL6xefqHcIMKqzjLdNZ9bLlrm3mq7ikctqFOo/cxme3rq1OMyWzruJ2Koj+41XRrs4ZT
ui7cpYNTurI0RhvsUZW43uX52V78zkUuu6oiatHGIspxt5kpRGefVS4zR6zp+SFfbCzTNzZPGW4M
tz+Cm3FWxMEpXR3XPBybp3TZid1Nuj9oe/V3PVtouFG1z3GDzrLFbZbJN7R45J8QT8/XV+2vmV5M
385F3xhuZLg9wV/06Fe74KUNuHmjcNi+vjrFmMy2jtupKAYWN2PXA9bqufR5SjfAp3T4jA594fCM
7tdsL/Q57q1wQjO8RnTfg3rkGhrjsMuB7w73GR72519M3wKhbww3hhvDzaJtRJ6QPVu8tjlOW9y2
uPzD9g0ZwoV+k27gj+1d7zJGDfV0aqhyudzLKxdNKP0Wt5i9rz/XCdNXPzPcmL4x3BhuDLfT4YZ9
yqfHMafKz2U4o4ObdPz11Xqsvx7v7lU6/JJZDq7iRhu7Itje27w45pbzmx3UEqpyX3zxRy54uDF9
Y7hRt8c6blX4S9H8i5c2ws0jhcO2gduJKGLcTsJl2HHTI1PIHi6k9x7CLXvfHuFTutb+Lp11vUuI
zo67Rkrb4FlrcRtNTnLZ+2IP57+Nv507GxoZFtyYvjHcGG4Mt5PhZubVwPnAfK6f0q25RExFNriZ
nXKcqsTxW/Eyl13kP3AtNuP+82GOwcXhxvSN4cZwY7idCrd9hPi5zEW305cWp8o35b2V/sxUZLgx
fWO4MdwYbn7gdpA3w3Bj+sZwY7gx3BhuDDeG2xni9gztZ9x+0ttG/ZCDv3hpA27eKBy2EW4nGJPZ
NnA7EUWGG8ON4cZwI27j26WQoQ5Z9XobcPv6Fy9thJtHCoftz7pSp6CIcTsJlww3hhvDjeHGcGO4
MdwYbgw3hhvDjeHGcGO4MdwYbgw3hhvDjeHGcGO4MdwYbgw3hhvDjeHGcGO4MdxOjtvLI1Tae4e7
nf3ysTbCzeEbNG2Em0cKh22Mm+cxmW3A7TRcMtwYbgw3hhvDjeHGcGO4MdwYbgw3hhvDjeHGcGO4
MdwYbgw3hhvDjeHGcGO4MdwYbgw3hhvDjeHGcPOOG7zZKr13oV0hbQNudL+wa+vvxp6Koo7bqShi
3E7CJcON4cZwY7gx3BhuDDeGG8PtD+F2NyqnhVkPt2PwixH8O1Eb4Ub5C7u2gduJKGLcPI/JbANu
p+GS4cZwY7hdOG66zX15zLcYbkzfGG4MN4bb7+Bm2NzOmuHG9I3hxnBjuP0Wbsjm3vUrU4Yb0zeG
G8ON4fY7uN31y2JU7LWfq+gvPfjGDf4GvFNB2QbcvFE4bCPcPFI4bBu4nYgi1reTcMlwY7gx3C4P
N/EZ4facVGaVB43hxvSN4cZwY7j9Dm5P2eur9F2jXGG4MX1juDHcGG6/gdudVkJ/6F9fPWx6DDem
bww3hhvDzX/ckM1FFpfjuFwR4r2jSkJguDF9Y7gx3BhufuEm9toNGdtc9B9cQcC4VXvzWQW+MYVf
vMIv3LYxbp4oHLYBN+9jMtvXV6fiEtq6vjHcGG4MN4abc1uKtePY5o7Rf2yqc6nyKmHcbvE31vCL
AeelDbh5o3DYRridYExm28DtRBQZbgw3hhvDjazdvr3Tba7u92bmzwWGG9M3hhvDjeHmH25cnmsZ
8d1Dv3dWeRkg3ObwiwX8YoF/4aFt4HYiihg3z2My24Dbabg09I3hxnBjuDHcjrSRDe6vv9tc3M7e
PVfuBYYb0zeGG8ON4XZi3JbS0+P8u83V23luvGmh7/fSDDembww3hhvD7VS49dJcMs8VuO8297MN
3x8yv5fpG8ON4cZwOxluwx9+7vd26aXzUWW4MX1juDHcGG6nwI3DNtXG5n71e2UdNw4ojIFCFVP0
0DZwOxFFjJvnMZltwO00XHIMN4Ybw43hZn4DR3adba5+p4IfdYq9xexJx00CCn1M8Qkoum8j3DxS
OGwbuJ2IIsbtJFwy3BhuDDeGG/rLTH6aPBPZ3EO/tz+tzi4bN6ZvDDeGG8PNDW7zWUUY0Npc3B5F
x62NjCgO0heIG9M3hhvDjeHmErdBOpnOcSVam3vo96alavficGP6xnBjuDHcXLXTgFvXJneMrI3z
e+fIhvcvBDembww3hhvDzRXF6W2MwxYTUXNvcz/besX08OPG9I3hxnBjuLml0Ok+frT2FvT6yovN
PWgrsyeolhle3Ji+MdwYbgw3NxTEfjv2owLOifxePdcM57+lIdvsDfqswRg6Lc51W8fNC4XDNsbN
85jMNujbabjU9e1UXDLcGG4Mt7PB7RXZw6MW82R+Lzfe5W5w/bfaTggFbkzfGG4MN4abG9xe2/kW
toh2FvOEfu9o0Ua4FcaLWeVtHGDcmL4x3BhuDDc3uL12Ghz//jSpkljM0/m9+ntt2bubWhmqTXKt
oOHG9I3hxnBjuLnADdu7JbK5LRqLeUK/dwyWHP0F34zL9KVqLrrg8RjfYYxzGDNVG+PmicJhG3Dz
RuGwjfTtBGMy24a+nYgiw43hxnD7DdxmfWRzXd0E9sPvxX8RVsPuJDlH64J0vrgxfWO4MdwYbm5w
m/U7zZ4qV1INLxbTB78X/wXflBPQGB+SZ4Yb0zeGG8ON4UbfnkE85CE5lne5u1NYTF/8XuMvC+mp
DLGH2RngxvSN4cZwY7i5s7nt9NrI4zqVl+qn33vwjfnsfVRFXNxhrsbAlcyRtA3cKH5h18b65onC
YRv0zfuYzDbStxNxyXBjuDHcToPbjG/Hxs727Sz93s9bF/gu3Xz2JPeZvp23vjHcGG4XjVst9u3m
L4F9O1+/98AGr/rtGNO3s9M3hhvD7bJxgzqMnGf7do5+70FbP4NDXPd7TN/YPGW4Mdz+GG6zZ9ra
uQH2ew/aubt+vSLM+M5dlekbm6cMN4ab77hha7OR3pdt/+3bOfq939uZ9EezDLloVewHp5m+sXnK
cGO4nYBiOtOHe20j/bbBH7Jv5+j3/mgn81whuh10RHk+exIHTN/YPGW4MdzIKSD/7W69nMWUObYl
3JnZN4v2n/Z7rdvRxfNjawX3xDfjzHx619/f0mD6xuYpw+2ScTMsQUWSsnPpocrludbmN+o0htjv
dcYt/b4rCuKg2x7PZ7H3bOZuXnsSFoNOv4fayFPua7VZFLWb68UsBpLSQHIDLLmYrm9f/+KljfTN
I4XDtqFvJ6KI5+lJuGS4Mdx+AbdaJjobIK8Vz2MdN0kQ+c5N1ZjpWuOGi/YfbGzsudu3gsUH2bcT
fhg1Ro1RY9QYNUaNUWPUGDVGjVFj1Bg1Ro1RY9QYNUaNUWPUGDVGjVFj1Bg1Ro1RY9QYNUaNUWPU
GDVGjVFj1Bg1Ro1RY9QYNUaNUbP4/Pt/uaIo8+r2n+urCPr8L9dSlbmgavs/mO2IzM+Ef//1wIvy
gyCvOpoqzv8yvoS+1hbGgirIQ8H43gx9ZwnfqXwMp7w8Ef6KcMR9iLI4W8064k74659cLPZ3JBOL
Of6qgf7zr39uFHXWTGbShdEMUUEj4DVRkUuCrAmqI4nOVNnUhoqMyPDSUnD8flf40P76B7qL4P4i
x/qprNE/GD+CEZYkZSnKk7/+Ka40TZHL4hL1KgtD7T8lSRy+/y+Hf2D167rCj+y5/A985RuF5uAN
EY9o2zlwuV1qwuxfL6I8UjbLfwGt5b/QiCeqsFwWefXviNU3/o48C+oS9fLv1L9i8D9/R0orSVup
wr9lYYVGIP0daa0GaPj3wrarvAvyvwfZLJ8epjPxfDIlxHL5vwwe5kZfA16N/xUZTkVphFTn33+V
FFlTFWl5oFbfAC/Iw6mi/vVPV5n/HWmLk6n2A+ufPyryw/eSIsHvjB7q8Ms64c/ryhCj+9c/mXTu
70iK4Ce6Kh6ySfAjXd3jmeTfkXiO4PtdflCTR8IH+k32p8ZxusjJFaAtDqegz0Xlw3cFgH4Gykdb
WCICSw8qUFTQ9Jn9HakLY82VQrxMRe3nPP/5ExgXGrSF5bOwfUP9y3sTGP+0fRbWz6KzlbqEwdWK
Aj8j+P4N6u+vf+qroTjiI2ikS0US/o7k53TaHUcCzaWJtfurDAl+hqXTVUBUf/3TUIhnRDaPZl3S
YgGwmxJJkm+D9Y58zKT/Wc75IbZLwlJQ18CcEul0C+3u/0Sur26ViKZEugrSysh/R/5rov2/SEs1
Jb68vqqA0Y3w8jYyVIURMroiWjsiW2UVmQHHEVkQRpGNqE0jHUGLNIRNpIS+t0S/GEUEmR9IwvVV
dyrIaBYIw/eINhUiCNfIWFHxf4cRiUi1gOBGXE5hMMZiAf8VqAxhzYiAjpp/bY7H8Bu0Qvx1ffXf
zfZ/Iz5Kh+T/Nn50QEnZ/+bvCF5IMD/LyAbGJmoRfvmuD3rJrwWgM4uIY31YvKz9C/VQi4wU+f9o
B19YyRIygBHx/8zQP6EFL8JHBis0gVFn6AvoD0vMpyILMB7U67+urxAdnawqDAURURJUVVGX/3N9
9cC/IzyQwcH/PIVeHjpNWRLRz0V5qfGShKBGy3BL2SBTNRUk6fqqvZIjf9X0f/3vB2W0kj5/9Rd8
mUf/C8soXkXRYOb7HyO8wf4BmyBEYYRHh8ZxU0CDW6xEpC8RbaNEZpgsDBH9o0EbKUav2Wp1OggA
NL8i/x+iJEtoaUZDHKvKDHhAEkYaIGv/N9KUDRGb38JIG0xhoRl9/G3oTAQGMdgi1CcYWFNFsX4m
0L/h/1LRvwvtmhbRHTEkRDT6SeRd2EZ4LVK9r7z+B1kcpM7af56QtnEdZaxteFXgfjg2n8L5P0gI
SADQsy4eXcPRxMDALJFVjWCFQwMGtoYI5ZG4xKMBzfhXBKn8NrLB+jISNNDBoYIGMdSkbWSpzARN
nAlL0KrrK4K5/KKooxeVnx/z3L55UTD1SxiN0XdL9p+Df/vmRVGvqcgeGQua/0sqP2jxE+GBR72o
dCuqvnx0hIkiRJ5qaBH4V5py6cj8HUn89EEsHHvEnIgn3j9ddUWy7hprzSFzBL9q8aMRdq/RykGy
onUECUlSGBmLB8lSc7A2pTNUS1PC6ttEugQY+K5IGj+Yo35KymwuiTwyS/rUt1cpCzdNkpRNGf3t
qKjtFCqFFMoK1WMKcmTQRBT2yoIcb+N/iX5nakCMeKyfOmClYce2l59MHdteWv0WWfJncbnipY62
lYQDj/e4NA4NJN6GHsXVapdKqMZ7D9p3Rd6735+jd1Jiz3tHIvNqaVytfnmLBv/AqxMRzYjE35EY
/l8r82H14xrC9htz6EvwV1srg3wILB6QE3zZPzF9G5rFPoofauJa1LYFCfG1/DG0w12VQYGDvwea
Z01YapfB6YjX+LqyXCKfEcwI6u4y+BYug80ZL6OVAxnhC1HnFdo6/bRRCSJeCU36p3901Ek55iBZ
LIaEv9+7RzFzBbJ2XiwCPgJydlS05Ub9o38a6xthXiL8ueFf5cAXtAq6Wv3GycM65mNZwGPna33d
CFr94ez8efMYxgx80Hnznj3zr93/gl8eT2VjR7ZmtqF0Csfc5ClCwZQLt/wsferPU71AedRhcIoh
HncZSyqco6A9wIV4/hNVWc0vhNeZONGPrC+D3TmmcKNIIysfMZQsq8JcUTW0fl8Ku0tlpQ6FB16U
BsrHZTC9nPKqMLoolmGXdxmcIjryEuZwG44d3fH8i/ta0yH1f1frmMZg9StzU5Jxt5u1OlzDvziM
2QP8ODAPh5o/gPnPwT9bRO4DuKXtgPlpKSLaDPz2dvaz6/PdylofFFhvZTE/c2J+wrKLJdcgto89
ufMgagLCDw7eUVcX4hVbB4njoeQVBNwVZnOJ19z6D0FjWVEnvCzuPOxsf9FjcljDTu7DuIzIH4nI
BtFfeUdDQbSLq6UoC0uHvGc/vJZvAzhf34WsC8N3Aa5wGikVX6HxYSi1inkyPoSpx+JkdVEBTQUR
EC9lWbf22s5uPSex7ueyqlt35LSq02dg38Khym9cacKnNwPloyxovCi5vNOkX2civvHjZG9t7vr8
HUnlSdKWdR37xhxFenT+70iG6C7OXqHyZN/uaIpdsr+l9uFrIR18s6OkzGa8PPofl7nYv3RPTtNv
JhDplO26jq+5dWaoMyLfqKioI4QUOEYQ4yTMbfiulNYX0OzUMv13JE4WtnrgP+qCPNGmf/2TQD5m
KpfMpKyDpPR3EI560V+kQfTDtsCPmrK0peirM0RylYq8usT2YEqTi56D+6lWFx5oLXjw7C7cVero
V+Uoja9XW4qUNpkjuf3y1ZYeDpjidjCy3PE43V1IkhvLLi2qHQPOSoIviP2GkuCblQjzzzA3rS29
kXjNsIf6WH/JIsKl3DSZYdPV6yerFAYkEYObXLQGhOKgwfq2bcT/44cvd1sAImG0v//3E7L/fP3K
9+MyN7GmX9d1bwmff1LfkzShLWt2aXQeuqTWeYo80SM6/0vZoySK/xW7MCi/19uLf1L942S6+FX9
Xd18NI1+1sUEoLjBeGQC/Jl7jUemwM8bjsGfBF7PG/7kJMhahQEcfR435xtePB+KY4pjng8+vLj5
hcMLIg/oG4B0s+CMd4ktXtVkNKtvjc3X7+4Q49k82pdbujXWCv19uMT7w0wC7UbTdAE3wlpTbraH
XVzdJFIYDpWVbF0kiMBuKrOB8otKYvb3W+ZSnfEaJErrtVpGruolxMF6kfmkXzTM5JXCUqaSceK+
OoqqUXHk6F8cWrEvVTv2tuwbZ/+x+tYplnO9ct8vlEqDKWSUdtL79BAHvuVFeTlQVOu0VX8cgGNn
wTbpDekYcSBYV2cLlGiSFDLIPifJoizurgoelObSh+ptlT9mhb8v83oRDwtwrAt4eF7Pf2lO6N0Y
DHUVqHJGtZ4TTgg30+HUrkMinaALL//Ehjy4nIsdmQbHJwEJdX0K/Bc/m/8/yxJ1BCSoZ4LVPPgJ
jWW11fPW+vZKLq2WmjIzTjB/RfPLIi8pE71A2l//1CayopI4gX9iwqSSOTcT5jus5JMme2ztOD5p
iOqF4UkDxQvJR3TCWfIdjwDOlM+iyl6SMVxVlT33VSWTSLqZJJ+I+jo9iL6NpwfVgE44OxzqdVPP
iz+QNjpDKup67bBNJ3HM8Dzb5L8fiX9jUXKq1vQj5y843Akj0ak2U4C506AabnjZmwrS3Oki0Tf2
qJaIIzdiHXJQwaoQrw05CFZappzSbbodUk0tx/TFRn9tEKT//Z4SGCxZXzs3efnuraNmWdnI3wzv
mer2T6NbsNfr71odELZ4SeSXhdEIXoQQ7A1TUDlcaUpbmEvbMDI35CVBHvH2xR+CyhuOikPt92Vd
mYgyGPVQ8ikh792hfkdQWTNKZbUEdSbiOouhNDH6IxGF4RAZ0Y6Aj83Cyacq8JpQaAibJ6eCMwHl
cCRIAuIwtOzpb10Ae8bpdxi5FJBvLaGeNrw6cir1FVQW8al8iGU4VoZodzGqyU41vALK30TQ9Bs7
wONYQX2G1ugcsGoUZQOOQ8ppXVxqzfGT49Xc4HJoyLAUVsuDWATxhZc/SRnwkrHlB3UNZVxDnM1W
GqyRtXIYhSjKLYkfCgV1OBXXodwVv63k9wo4cmFkTuKXWl2ZONTlCCpz4lCQQxpMlERNnOCziKoi
jcLI4Uxf3gurkehYJznYLOLHc8O5xhschjzspqyQq60n7IU2wD/nl8uNoo5CKcDFild5GZmZUHow
i5Wi8WFkTBWG26EkFB0e/Agod0uBR141BGRk7H8aOyVyVn+e6ltmJ1genjv+1rjtkrVMUbBOOcDB
iG/fPf/cgmPvjoQzu2AkQlLIYAWe5a3ziysBnVqjLfr/4rB8EcyuZHEsCqPwMrgUhitV1La0HBLa
xyMGgNBCpmkspM5B4EwkidEIp7k0DqJ/GJIwTjPjSPpSeBXXgrptC8AsQQl+13x2hDnae2iK+mcY
xWnAMI6lOQ64LRh8+YnLucRvL2OB/3mEexFzFNj+zqePh2XnN1EzIRDiVBwJP6R4oyqz20I9jEo7
E2YDqiN5QieVwAUjdFgTcPkt8bO6wNErZvt+I8F1X0kXCycZENIhFUU+RiGKW0GLFCQp4iySiOXd
PfLh/7zVd/5CdkqJsd8C2v+YVJzpPKU4odOIMo5YRc6shegw0oBKjixDzUmERFR8k6XZewS6x++x
8FiupGIlGn0Q5XvkeCKcAQMkSGSj8eR8DOuxjJG45iN/Z+eLJ8Lgiy/3OZVYdGBkpFBmPS11BT1k
9uQOubVV82V1wQwEzusmSQ0J5xrAj0Y3K0n6wnmB5JnwgE43xG9HkEeFg9t3IWcY8TiRgeemXBSm
vDQ+kDWYVV95P7vFMZ4LgUyFD3js3fTdHiyMV6nzfCkCzYdAoGtR2CBxGpIUlnhDVeWXYJr1G7Td
UN4NOsb3dxN9gewb1noUehCMUN9PK+bv9b+zM2SJWAiEqQozZS0ULsih1Dn+NNS/6V39ac7X6Ec/
TLUrrgk3sgT7NF92tQY/kYOOA7fHtY+EOcWrj/+UFPAYzVEeBKmhy4hVPOFoWPr4IIMYi6bbmtsK
kIoUoUCTOZoDwcJoFIEhRHQreTiTjPMHYzhEsqbiJ6CypwlTOAmfgpZv0ocxRAqHkncneApeAil5
1/EaeyVwS9ZffUBKoI/Gq0Fwy14QVcTFjokkV4SCni9KAWu+haNFezxNz00QdcDttsNWEVwS9UUb
2ngsR30GTfm0ELQa4pLNYKoJ/R7NQUWoCfqpHj+dCq+qQc1eENXiaHXNcB5yGhX+SjrX4c0l+Mnn
BcVP42GIn+olDEOvqD/YvCQ9DUMlsYmgGdJzV6iRMN57bJ3yJchrMBS4wC7Z6ua0A3QmQRzozdLd
2YCeI0bX2F9DnZPu9JxHHUT3jHQdp5Sppxxzz1Kl28KTDD2IoiVa4G3lSkLBF6Hqjx67mqkkYw6F
NF3MUzIavyVRillKNvAgipXUu3E6NCUh4otgIZRqStXlFR+SsQdRtja148IZ/EC7D0WetAy2Wwoi
FMqigKjDuaLy6tZkNZRMmtvJGRqGiLpPeN1iHZ8PvmyyTOEEL3+GbB6F04YYDnnnCwTL8ManjvN7
QYGqRBgCVbqTejGKa8Xupant8SUxOHI8uJrdsVh36N6KIfQEiBY4QqcAMUnhFOgsRsyuI3rfgfMQ
6FZJkuAdGSlSRy2XdhHC+yabpZsILRkbQdxN0joKLoXuKXJwOrHTh3BJeQmi7KlcC4IQ4B+c7EYg
0NNcp2EiLOL2FPIlJPXrAqcOARMyEkShu/LDnMLC1BR9UQGzRBseyndNMFwwHDwmjRhTsxVEhbB7
5iGksR+91LIh3JrcDvVDFzq3nbkwFMfi8JdYPr89dDYMotQvAiDNLWOhjnx8gPT8JBiGOieqsESs
CL8iwbPg9IDNk4d3bFYuX056DKMZQR0GMZJDZDqctvMkREjBT9EmAOD6u3rPFEVbCUcdRN+NxpOx
lyw5IV+kq0vmwHsX5cjx6XZEzuQ8BFfWFH4cgcDJqfkpdXMUen0E15InZyaI4idZTx1WS0cCvgi5
rff7xXAT3lxzHHBABams1KFAe1sx4JvugaK8i/KkOffxtZ8/7PEqysyvMkFOSkN6iBmPUbyX1jY6
PVK34PynmpPOhXOm8ZKkbEqKPEYUHgQBnvc2Ti3aX7VICOU0PGRfM/m/kBhJKhkCAY4Eeftdfhek
v3DODCo8NCCYXZgKp0IgQ/0UsbDSlBmvicOivg5ZKvGPEZ8mR/H85BqGhw8ngtY2vLyi8lHiJUEe
8SpyH6DoCpLwyf0+Bw+G1O3LJCg2bIa2RoxOA+f1eZt8BGkOLkmTVo3J5+jTHvZDipjSMxJdIt+d
eIEsaOqJ0yBuywndRlv1IKPhix4UoOuI2XfE7BzK0fGRDvqvSEkc9nPWikDGUxAlTu5oOR2KkJHx
Re5l5Cz7IXZiroIoefJ3xW0lT0zGlwcpS7h3JOafL1ISSZh49EGUMPlr6iTHYn9IwsbxiGsJE48+
iBKme9rYVspUpHyRdBWNwELKERhEBI2CSNxUbARR5MMpL08EfLxXVyaiDNKjNdkkJPypxYR7NlKR
lxHcewS6JzPWJOMOokzRdwR5aRXJC2lwfjQq1HWeu8olXWKMhyEBE3LC9UloijCU8WcjXcpgku5q
ZhAZxSJ9EbWpstIKIRYtfr4ccxfevFPM2O2e0WVbGCptAV4XvJRIezwMryXvn916kqWwq6zOq6Gw
4LD7U3r0qKvli79rzr/AHR/QLgtOwUEaYqSSSKZcX4szhoA2IsYgKHOoifgI4k7EeXG0lbTjz39J
tpSCdRx2EEVJvnjYipSYjC+iNd6DwNLd909x7YF49EGUsBHadFOSwuaXviyE+ygueaUJmyEGUVjG
SUND2LiQl8OP/YnVmUcrqFdysTmMNIiSs01pDmeAbqjIa8TN5+M4hbabvO4AMbxX25Azil2dpdYc
H/AZzhRSY+l3JU/SCwk2tH3JSgNmAnsRgdKo2C+IVLRI18cMzZWukj6Eg0fJ8AtlNiI6smJSsRLE
BZTQuBJ6QL8v6ENHiF68RAMPolg9XVFw2J64p/ybCWY33tJLvbAZRIUh9T2cQ0zORHyxBBBogs4j
yviLISCUN+HQgyhafjS7nNJZ/FAT10JnKw/D6DcPldmcl3FpNxXS3pVwFgQT1bAKcCYsl/xE6Kr8
MJQH+Io64WVxh1WztFpqysxohJLZl0IY2ZrzqiaH9CR7rmwEtTMVzHfIw8ijqkjhjBotp7yK/HDa
95QIA0bWbhKhr5pOUJStKEBPgQsRWVq7cDqRRiX15ktBtxI3oX28xODUNIaIY+BVv5d1Qbm/yTCU
pdBvxF6A0lowenkaG4YqFBNBuwB11bk0X/V0o6mEHozVCk0aa4vThFwRO4FzX+hXOvswOC054gcF
qC5gGk/H6MOAQy40EONFCeNyNe3zMeQcBTEWSrl02KoAHS1f5G8U1wChGyrgTvZ0rARR8KQuPcmk
dyLi61T/JmvKZ8Gchh5E0RL6vbRz+bcEaz2H6Z6ACqNYSZxDp9PIPyJQOIkEae5fgSeVJcGAgytI
Ev+XQJwEZH5HqPSLLDEDQRSy3blrqIOEhT3j4d3BWrJ6QcGWRD4EQjQK5l2AulpxekHamoyFQIZQ
yGIvwLKwFpFT5K8cz4hf00cI5/Rci8LmJ6++RERtvBJfAqOfbAUuPko34Zw8dXJSxE+60NzFwLeO
90OIGGOgfWqXio8gOu0Ufh1ZMNyRji/S/oyC7yVOKWlyBoIoZnJ/iCBG9qeEbNaRdi1j4uEHUcQ0
a6qtkCkI/YblPgi3EAuagoUgipo47kBvsj1ESE9hsCnPMhzHHkTpEu8DyD0wGyq/OoUpwuBEgw+i
eEmDMNQL8W8J13oZpjutCuXENYwSLDOF4VBZyT/L+RFZZDsC/pR/+cwhgU5pLLDdWIMoQ1M93YjP
/re+SG4/F8kFZz/KIMrsW9pSa3/Bw+telpgeccH1pKfMrs+RuN7dErMUREVwvtoT8nNI8gkQzmOP
kLzf9ilAKLAHhQc6Gq+tQpwgbdTutGP8kvQ4DNWR936GZ5tEeNLjaP19Oe85WJP1bgN37ON67jk5
Ua6o+uJKQTziQFDmUCL6WFw4U65YC6JLRT+LybZIf9Sz/tw1eXasqRkKohIg2nNF5dVti18uN4o6
uhTHGnwxg+U6v9TawlLQyrwmhNcRs+M4xIk3uOp0AxkHk/k94xficibCcP25+91OhXeeWrJ6QVuk
RBguP6tgZBwFeJongM6MU5pZSbj/c/ZSSIv+UjmTZm8RvGQEbvdHbDNtsSelQurOZ2m24B0Byvzu
hxDZS4TmXBLJrkDKRRB9eIoFg17SnrZup5M1xb6NnI0gCnu/Xs5QjyLqKRHeDZr+2NNUWZqSbAhr
Qa18zEW06ITR9bPi+UWUJJ3lS/H/wnDUc+ATdRVdfEdWnDD4gF+4PZikvrJ8doqbC8PZzhHFDWuA
yE5zfTnK+rl++7t1wezgIr2B27/Q2FBbzCkIEZcXSFN6tnuBaIouE4F2D0PKQhC9WuoFhFzeBNR+
Reh4HJ5FT8BNEOVPGi6zFTshEV82rzhC5HrLSjjyUEiWOgBFQuG3ZEo6Z0nGHERpUnmHbtZkbzV/
TrQoU8xcGjYCL3Ai/9j1yvznRP9jaXarACQcBVEL6GNxtlpATc4XLYDMMePhcjQO4VMjDtWB+H0p
OobCogR2wUlqFbAh9rsKAAMx5O9a/DbMBFH4SIk1RYX33PUHxV2+aE9EhPhqI80Lcm29b/xqoNE7
1Wv2RCMPomTtH60K7dnSDS9KwuhBZz6Uh0nIvOEHLYeC1XXHUPBniq8oaBtBkCGpzydRnt1hQzIM
50aaUighq8KLMlJTcS6GVFPHqjIzGe0I8ogqE4zwXMHWjPtyPcaYfBHcJdEqajvGIK6d9ibWVl62
PyWVVyJFW7kDX5GBPokEZjvIIAqMyOA4nN85U/BFfF14497oOrLvm0iMJGMOojQJ3DinTajD732d
iHrfEbNz0q2mw5CDKEiSl49DuxNBqlD65D+M/o/EL7Wy8eyzOAvl08jwwjzi0oz+hJzVrjCcyuKQ
lxqKJo7Rf4EpW5khw3TyfBkC0+CLd2tMychBx4FLoKGUlNNaSUGLVCTJDOW6uR9D5HAQETwK0gWU
go8gLqaO1tZWzk6/9k2yYD4jRs8R6JpInE7DDaIAidcSpwlLRMVfge7PVOjESjr4gIrXyeVzEqzD
730TKexaDhdG4oqf9uMNohSNSiGIs7o4FOSl4EKSZDSIpelmD2p0TC5NsjEHUaL8aFQweOoqbpJb
CAj4IsvCaBTh95LUFJr0FYIxB1GWqjBT1oLB2A2E313Ik5CILzJt4773QoUTBLqEUqKhB1G0Kxn5
7MLoVlVW84spAwnTVG5uZJBhAbMexsgCcNlZDZZDVRyEn1N9RvrJ49kdWqfC8NTeUBV4TSg0hM0l
iS4dknfn6uJSa46f7BeR4HMqITYfhBkyo8vmOLx2FNjEy2LoufxcF31m9fwsTxgynXSHPLwqavCn
mxy84aBklfA4yN77Jz6up7lKbawVEb3PIB4CEa15jsFkAiK+vTgEnUeUccRWFsdDyQRDD+JWmGiR
tz/tIaDgm1CNjkGuvC5RsiMfgjEHUZr2SwRBpOo35WfEp2jkZjvIIArMeRPvGC62/bkvgtODxdCv
Hikml5/jeIMoQ8fNvH1yisOvfZFgCXeKRIe6pRCf01iDKD2S7Z/j+udAwLflT+/XzernMOKgSpJo
i+soThIqvsn0oHM3giUZexClS3J84bhWOhDwb7WU9anqZr10GHNQZUlySOMoTwIiPnpAn727kSvB
2IMo2+WUV0V50lLQl7eXcrb66Rh17NkPfpTOfE0w9Iwab/eEns+JoF0Cj+Y74R3EqCS45Jgwwmxv
A325a2AwFNH7DGKE2UEkTrFl+5+TYp6mfTcOEiC/YC+S38KzH3IQF3/CxcFWlmQ0fBGo+aYyH7Gd
TtYCJRt3EKVKthLaCpWIhC8yNV7zcyVSolEHUaLE/iph6PIPyPVLCNOFbEkHH0Tx0ro7TmsrDTHf
VloYhFFZUR+HG6lTMhNE4SvqhJfFHb6RWFotNWVmNC5lM65bbQfWQ7Gn+cKj/rxwSDltkit1KBPY
kokQyHEkqshatoW5ompLHPEsrDQFL+SXI8lsGPLXjc0rkqQoax2R5h1cwhAK+SrmSzjl0N5ESoo8
FicryydQrN0M8tEH0cMgWmAJtoOnkWuaRq7GbvBLzxRbwfDJkm5tddookJPyRbo4JeLLzKWWMxUT
ARU4kdvoJGoSIr4J+UvnEb13UvGSDDyIgl2LwqYgSQ+8KA2UD2GJE+2q/PJmJUmF4VBYIjYpxeyK
JKHQk7mYi1D7fihmAuKUX0ZgOBF9PBGNrASBK87CpBVQQ7awbAnqTFxCT6dTDhLKv68jMKpIYRk5
GJdXXSFhNGwq05SLwpSXRn4pDhn9P6Q+aKnRR3dqLSLjOoi6RFxg3VZjSKn4VmrV7D1idB/B/ZPW
PyYaexClS1SU3FayJBR8keqNXg3FLIas900kUJIhB1GYKo7LifLkUs4J+KEmrgWoC2eEJMMYOxc+
gDW08ODilIXRSEXGCMxPqfMcXn7Bje88dFt1ZRJaTvWaeIY/ASYwlPqLlsqfhebDcJsfQuhzRRkL
IxChboHCKEAolqtovKmoJWUVzgdaJtZ3wsOgqlAgF1lSiwBoKLjTK9yFU3QzfdZ92ViGl80n/DRQ
GI0L2kQiFh94acOrQngXC5BjZ87Pws1hV+XHY3EYXiaXaL0XjAWflkvC/IDju1XCcEE2/nckkSIu
VWH0FsSLFY67BKejPicCvjy2+i0cG8FdR3RBUNQMtx14EMM0ZEtBOCM2Vrz7/27n2fE8VtSaPEAb
qdGFMKyhjpsr7bJYVpXZkfBySDnuKoVQP+FKZLk9P+JK1IsvKzZ0GzH6pVyonUcc2qXa4YCMjAap
PHNxSg9Mf7c14qtoA3laRmuyqYVsQ8w3aVuIOYIPSimORyl5CYvsPWQ3UJP7VfnTZzxQ8xMWHbB3
YFyYeRtyv6oDuLoR3XvR1AyFRAns9ma0GmBD61fFD5dujYG4lb0NKyERvP0elX75t6H268I3R+Le
AbDhJojyJ4jihzYCZ8zjh0s4yDB02eBTLxJwKdxeVHjV4LmrzEMtXtMIX8rk1cMXHrglDLo5rwf+
RdyMfq3DMue/lNJIycmLIiVEKowM7b3Ew3CZrVyOuk6kLATRa6JyHpxkTUzJN2EbI/AibWImAipu
ivXGSd7kpHwTuDkELxInZyOgIqf0IEk2xuTkfBO9hcTdR0bJ+QmiDixWvMrLmihbZGKGdlP8uGf6
AjZMn8ziV/o6c2EoIn22fh49ZBx3FZf8Eu4kbGYPcTWNPIVx++QsiDsH0mnntMoQ0vFFArC8fPbv
blUhHH8QlxNae0MuamdivyFv4yKyOQ5ccoBe7M68BF72jpaXXPJOpH5D7l3Fu9Sd+AiizOHtBP1O
5ED5uBQPcqjIa8RNW5isJF7dM49rLIYy49VguPNV2Ab/oWRYLzfesdfu4POp37r4wmZo90FlQUMc
CqN9RfELEO4XHkN7mfvLImR3eTYEvBpvKrtUXooXkY5TJ/S38nmKK3s6P+b1scBtbsnWC1vMiUiQ
urpZV88L2wrB2sElGnUQHVvCldFpF0NAwxeZHj529SlS8hAFwbiDKFVKz91+wlLR8mfm6kOIGGPY
377VFEPwZHOYipEAi510/0IidkJavor96+QGqRvDoBE7ISNBFDskaCjKDHgrIveXlwR5xKsIGqgY
TFM67zNlhYocaeHTvJvzTTSEiDmGyOcgvr651BaWykpFziPNmk7NZxB1w/CjTUbp/TUCAsTn2zRZ
ZG3cL9zwQD1TyZVgxEGUJC9JygYe/UBffhAEqPuxhP29JJna79Z/80LZl7lfgAFFjBFBnVt9THjO
g7f3fboT+nte+AyixhgTQZK+xAoKnuwAKTFfimEbNgFUoPWl1jUyE6Z3oK8LxCcXlGwFUQ3Iw0bh
PMbgR6PPBxS+ijn0sVHEu/4ggPl8xG+wfHavm6UyIRDl9zD3EZ0Onw5/Z9wVu24iwnYd+bLh/bbR
Peg/cJFi90bX3lV1S5bUH0nQPABcGI2+PPMz/+6UuIg0u+YwiK4J/XGlU+SCjpxvMWlzGF/eh6ZX
BmqGAqoE5PbdSf7ElHwxCCB6qzedvCgAMUdhkD2hU0OlBWQ0fdOHwwXCF50g4y+I2kG9e3HyHaio
+eYymBZi/ziga0+Bip8gasBSGK5UUdveWr9jENKIBVzc1t8ERhK2ByD42ztVP4lzyyjpxs6ePPFr
XjRz3WQpondKNKkdxhnEOUyhzeGczshQF/RMeBxXtsIijBMbH7d84xIqrQlrofKhCaqsP78TRtaN
dLFLkvZIkLdfmITLP7q4RXliChy/93YhUedMKgRi/Xyv4GIckp9Bl0uax0Y1ACt2fUysP7/JmwyB
LPXDbSzOhhftpag3RWYliN3tNG3dKaP/iL3vff5OM+GuKJwOs77otL1tDAPFrhWvF2VuEyGQo+H1
W8ny5LaWzD74YmfNLPygm1hX23KnCDM1RdIoc5LmCBKizHoS3Gdy3JGlkTTUTM1YEENV1Pt2W3Wg
peaLKuxvvXnVAVpugih/6t2u00EkFTVf5H/4YiGhd3z02JGKm+DKn9DxJJA9GSXiKry0hV30XHmS
1dpO5GRMBFHcVA4biaknouSLuPdm3lreNBaeiIkgitv1gYS90+eSqj+OH74581X2+oVJPKCIOSK8
HJBfmnHBXhAVxEvk12k1cEvYN6fgZ4qiVw/RA5dB1Bba6KrDfp6KmC9aYVyv8qoGlKwEUfQ/Nb0s
QkBrsNIQ/dNYCGeKpI5EnuaO3bHs5cPheLIJznwFUSM8HX/baoYXyr6YiTIa0HcXYwz1QveD+nQz
8LCIFMULm0FUmLeV/E6nDgE/1BlOheF7hx8LBXlUlJThuzDSX1817mCH8WTHnmf/SpOf3flOPB0C
aQ4kfvguoeUrjKq6mYqaYMmc58ffj5s6X0oa36HuLBee818U3NgL+7gUPUFir5ImFboE44jAQCK8
PIoYQzFe8F7SFm1wwVUQXQQbexNOF2HPcFlB01cOr19gwaheyeqCXIJcGNJj94Lcl7zHC09hNFKF
ZYgdW2e+3egzoT9x3C76snYVze4C507Y+XThXEH2HId9BbFg9PJWkDBsKveCvLAVxJlvH1cQG8Po
yxLyYvYX3CXE3qCSoW1LgzhW7Qr4iN63WUKSaJtJNu4g7iwpVw9a6drQ+j0p74sDE4cV6DgJtNyp
Fhsy8dOQ9FkLDp4ww4OJGKNxN/tpGAunUni3DW5I/0kl8WA83LAaRLUhDNaR7eRP4hkkaGpM73f1
bjwDsnGHRKquZz8drd+TMv3kpuMk0HI/nWfgiqTPWnASz8AVY+FUCu+2wU/PwA8l8WA8LsUzmAga
8LJsIFxb/HK5UdRRW1gKGrz/TZ8XSUGLuJ4r7Us0eAwRGETEHEUEDwO/iE6aCUnBSUDlbjJW55fa
njlXqwclMd8kvxc3jOJA5lQrBiUzYRO+u5fR6cj9GQWgSFqh5iigWoAUGtu5x5Wi8a5uTdr8nFTK
MdoqvXBVUjfyuGOK65E2ow2iBJf6MmUUkXUjRBIKvsixYyzU+wcUyEVJMuaASvOQJ1crMRkN3yT6
RZhUqy7ZwIMo1qEia/xQu5iCUMbN5IawAYGWdO7DeCquLymlo+INBYffn7QIsTyN5+VCzOFEUga8
GcyoU12OIEzWOGrsCJecTAqtOCnSRHWjs8AlahCaSHukiWiQrvTuyhShzvUbyEb3NJUrHAYexJXe
aUEg2E4d/bEvgjQ3U0cmkt1O6uhAAyo44nXOSYikhHwTqNWFcJr5ScFDEGXttMrbytfhx77IdP+4
No0QHQYaRMEROC/h3FCt5Kk4EgxRwk3720L9QrLGk9kQeN2XK71cCKSHlkMksY7GaysjXQAHkUO5
PRQ0062riqORIPuqrmfDa0PRXLJLuCl2Xrn8cQZxt/uEiHoQrzSQrX226BORIC5uQBMRf8I9m36b
XncHdU7kwBGNOohunGd5/ilpVl3LMqSSJF4ZnbbMRFR8kSnsl1HvEb1788BKP1wm3SwTjT6g8iV0
B5wETEbGNwmb3Uf0/ukmL/HwAy5iZy+IVMqOlPwXNBqCV2E7chFEeQuQzIqIbnh1JMqTS4mgHCT/
HDJvFiqEyoVzUfDrAZ/z472r1OTLYP1T3GYs+4JqLqTD8FCTHsm2sVnHS94Fh0lIaZvb2WWPEQgn
u+9LbT/9PsZnr4ELPrg2nQQHvfRUSS/SxOOu02k/ZQXvEJhDiuzHRJtpS8VfEP0pihXGSScI6fim
BQeyPzg4psmYJ+QgiHImWITC6Tkb58jSweLhrxN1Duya+wLM82WwbJrnL2K+IFc5Fx5X+cdkDfGJ
pcV8vRy2LecsPduEWwjnJdAX18TIfgrwLoJqCSUQARkl0h1dLkMvDNgwHLiLlJ4iDRfB9RUpfAgC
mZNT81Pu+5di9sNwJ3tyboIrfwqHikD+5NT8lP8+IPBt8lOKn5yZIIrfMZQXzo3iWOf481DFSDsq
yKOyImsdfi3UlSEvlZT5NowumQ3/l8P7jyDfxUnfCoFf4P789tPJ8EjV3FIZzyL9ODU+UPLCJWg5
AR6XisWlG0ACOFxCQRilcPK+fIlR4Fom8yDHKLx5b7YS8USaUFypFE2hKENOcMS539GaSfLw4BkM
KwLjiuCBRWBkRNsbT6wGca/j3ul1qzJnqC4n1pQQa4nL1ZFMV9wR91tjfuZQnMjEuGM3dOrjm+qc
pdqcXGPCpy3uU32pk7aIyP561tZ+jfKetUXEYECVpDPlVWGuiMhiim4KHTv8njihkrbC6We/EeiY
VLYOww2iEGmzHdwcrXq9jHai01W6O2mUvARX9pR5H7TnrH9UC76etXpTBTqugqsPlAkxbs9d/4g+
HDt7daMPdFwFUR9OF6km2UF478bX/cSnp6jfyLB0Ej/3F7zLHYZ3FMKtaSRnRCfSNoKuzkTjPgMh
PqodARzhUT2foiSee/lthTt9CMUzBOFWshNFck/S05kom9cw70mwcKN1tea/bkRJ0FsvvDacCvvU
klMqF+pjiYlu9D6OXqOqyPxAEtq8uETeKuZk+dc/XXVlEQD5LumtPJyqiizu0C91Xg+y676fY8P0
aSYz6cJoJsriEnGjIU5LAiD/eTYduPNdsyx3S1Bn4hJoXsxzBPxodPBm2wEATfmgjPGNIo1CelkE
AVD6Kf6byyqFEA/D/S7zVToLcV6KGMOQVmjEZ0GUUFvoMqzQN6Y7ykxQZMGbKlO+SWHXhy8FMPbl
qHS5Rg4GEDgPgnYVsZUIJTHSM9R0jEI4hdHos17YwShorzRR8hLEPSDVuuN0cEpMyRepf74PayV7
qrdhSXgIorS9WGqSM1Y3hH3Rhf3DCvgdQhhSxByTe+3wwGQIlIXEl6HREQJ6v6AauITk4Ts5xoLu
SiMIWAqiInjcZju5Cx5o++Y9fHld/osLocju1cUbs0FUHeFjrqj77DPjFdAvhrLUeaZUGXc0SVUl
R6MqFTyUg6ix+UjqocZoSgQNiEhB3LEWRMWAV7iVjaB2poIkgUnW0Lw4rLVN731S0iPdFuZpKxV/
jiNiDuRbEXJSX5SSo0DqgeP7GWEtv2buNbpTXiuowmdB6u5UCO/DLIcsfynD7SfXZxfrTIch1glP
X+xd3/Aqrf5ai2tGT/aOEGkNLro4ZhgeEiKSjy36JBRIHchYivbhmcMohTYVqN6ecRp1IH0C2pWR
KC5JSs0XOX/GJmEYETQO8w0LaqnT8hMCDSByFGiUgITgb+nBwXsmXnWBhK0gqgPhEmyrAWQ0fBG6
8VacWzNPNvIgypUfauJagCyutgCBj4tJXDq4kVnYY1AW1uJQOP0ZuTPKpJ5lKksTRt13GzE4ixj9
B87BpBOX00JETor40lGaRi77YOUPCRkCoolYUvETRBulCZfzGrksbKqKNCops7kk8ujvLQXROn0l
J0tMCZU9noAAfYo4TcdkJYJ5EYXgWR/IpL4UDRyJy6Eiy0gGFxIJDEPu6lwVw/nI3JJfo5l3Yzn/
QqmNYQhLCx8ihTISrliWNph0swhec4z0IhLqKHArlDCygjycK9RwZXVEGfxpM7S6XxYGxub80qIq
Thg4WwoSMgVWmQCn4e7slqdUCIQ2lARe7QxVQZB/jOi4M0j6FqiVISZdpvIUy1QFdRS4ZWoqSPOL
SS/hB4rFShVOuxAGYz6c8vJEkBSKB4KDw9xyNYfAYhhZG06F4Tvq6Wk+4jUfovfWRou4CAKFTa+i
ngJn0613e/aLpNVPSKOPSZps0P/iZ/P/V/n4sVRah9ItxxXEkPmRpecIVLUZPxEO1teiKPPq9h/x
udhsb2L3txOlgD6NztO08jRB/60IzcJjqfAK/3+c4/JT+C/F21Gx+1QpFOq3rRL3MS0+wl+lTedG
2l1fof9aL6P/KG02xVasIG7hHwfaXbty89SsRG+eVO2+EKs89Z6Lj6VYL1cY3vCVp5U6KtaHM2G3
mt1MK2It/hKdjKLXV5PaMy/W+Pdlq1C/KVXn40qHe2zfJRpid1L/mMRu1IXQTC53q4K8mAxX23Qu
lc9H3x8eE9z7s1iTFpnKeiR0stVEm7++2raLw7vH3bDfSyXE+Sg3FpX7ZGGZeytWY+KipN7flar9
8uIxzr0lHsUXrlPfZuW+/L4stO+W1c39eCx0C9IinSx3stdX9Vb7ZTThxfZ21+nUpMf+tJmrdYX+
cJraznqVXLKYW71stXb/7ub+UXzMf6S7/UptV7vJrCvTmDp8uH0pSu/p2kft7e366qn/nKmKqWx9
2r1V3stL7bGRfO/M6upq3FBWteTH3eto9vbaeKvGXkqNzLQkP07qc+m+9nwv3qxn2+nz/cdiUd2W
+Jvt9dXNrjQoLxf5fke5yb5qb3fNN+7+vVyY5HiuID++a7fj2RM3HTw2BtNB/v6tJKpKrJ/t91M3
jdatKiXXt+uPXiM6eMwgmQq5UW43/eCLfKLypnTzxdlUu4nefyyHBe3hJVbIzttiYp5JNkqlhfg6
UW4ntc1jvCtO7rdv8ZXQny8e1OHwbjdXi73rK7n0XLld8sVappJf5lal7TT9XpbjH2q21S/1XqXX
4k2306u9K+98t/u+e1kIo2J6Xp3ImVL/8X760E7dreVM/K6QfchfX73s3pqNeJqvaYPcesFhdStU
pJvue2f1OCuV/pcz1JzuJNdyYpGarnSC1nQVoD+ymy2WIwui8bLxw2xlc/x3vsinZHZHJJ7jgwum
iBxcrmM7OnE5l/htR9tKCG/A0RHsgG8CnZAKaZwoHYJ9hSysBbXkdnMRHD4FXP3r9LunP+dWvt4Z
biXXeH/L1zaxwtPHulW9UTuZ+3Zi+NHoFbdPscePygvfKwyzmZLyVCyPqtdXH7nUqHhT7d5v3hbP
d9ub8qL3/jR9jH90nss3m96gWFqVHhPxbXHMVSSuNpHu1OLjuFB944r5UZ57W3dapWS0nn1V88hJ
bY9vpMdFPVGfP0qxPJ/t3iWEeVnuVeSXxLRfe/6Ir8ti4zEqZWbaY3NajK923cpoPswUxtvdc3Uj
rcq5x8W9tnovD66vOq+bh4rSnaQWo+GyJVTeM8NKQrzdlN633UlOWhUfEg9Ke1mqJbK1mdYsZOOJ
ZbTcqebF8mO70RkupPamoVXuasMdovacfIxOdrXOSig8vneVZ6l0U0lnonN+Nuz0u53q7kV6zbel
506jOHnrvcyeKq/dRqPID54fp6VV8yFeXaj39w9pYb69Ady2b6X390GrsnzQPurxVLrIj9JZRV70
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
mPk9MzLoZV6ydEskaM/c9Z/Zr/8DijRjaJz+DwA=</Form>
  <Code><![CDATA[#region Control Helper Functions
function Load-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.

	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.

	.PARAMETER  ComboBox
		The ComboBox control you want to add items to.

	.PARAMETER  Items
		The object or objects you wish to load into the ComboBox's Items collection.

	.PARAMETER  DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER  Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Load-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Load-ComboBox $combobox1 "Red" -Append
		Load-ComboBox $combobox1 "White" -Append
		Load-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Load-ComboBox $combobox1 (Get-Process) "ProcessName"
#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		[System.Windows.Forms.ComboBox]$ComboBox,
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
}
#endregion

###GLOBAL Static VARIABLES###

#Version information
$Version = "4.1.3.1"
$UpdateDate = "11/13/2021"

$TempDir = $env:temp
$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter")


###FORM ITEMS###

	#Form

$FormO365AdministrationCenter_Load = {
	$FormO365AdministrationCenter.Cursor = 'Default'
	
	$TenantConnectButton.Enabled = $False
	$PartnerComboBox.Enabled = $False
	
	$ArchPreReqPrompt = (Get-ItemProperty 'HKCU:\Software\O365 Admin Center' -Name DisableArchPrompt).DisableArchPrompt
	#Arch Type
	$Archtype = ((Get-WmiObject Win32_OperatingSystem).OSArchitecture)
	
	
	If (($Archtype -eq '32-bit') -and ($ArchPreReqPrompt -ne 1))
	{
		Show-PreReq_ArchType_psf
		$FormO365AdministrationCenter.close()
	}
	Else
	{
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableArchPrompt -Value 1 -Force | Out-Null
	}
	
	#Sets the text for the button
	$ButtonConnectTo365.Text = "Connect to Office 365"
	
	#Sets the text for the button
	$ButtonDisconnect.Text = "Disconnect"
	
	#Sets the text for the form
	$FormO365AdministrationCenter.Text = "O365 Admin Center"
	
	#Allows copy/paste in the texbpx
	$TextboxResults.ShortcutsEnabled = $True
	
	#Sets the dialog result
	$ButtonRunCustomCommand.DialogResult = 'None'
	
	#Sets the default button
	$FormO365AdministrationCenter.acceptbutton = $ButtonRunCustomCommand
	
	#Disabled disconnect from partner button
	$ButtonDisconnect.Enabled = $False
	
	#Alphabitcally sorts combobox
	$PartnerComboBox.Sorted = $True
	
	#Disables word wrap on the text box
	$TextboxResults.WordWrap = $False
	
	#Disables the disconnect button
	$ButtonDisconnect.Enabled = $False
	
	#$ButtonConnectTo365.Enabled = $false 
	
	#Place objects on the bottom
	$ButtonConnectTo365.Anchor = 'Bottom'
	$Partner_Groupbox.Anchor = 'Bottom'
	$ButtonDisconnect.Anchor = 'Bottom'
	$ButtonRunCustomCommand.Anchor = 'Bottom'
	$groupboxO365Services.Anchor = 'Bottom'
	$TabPageMaster.Anchor = 'Bottom, Top, Left, Right'
	
	#$menustripCompliance.Size = "991, 24"
	
	#Make form sizable
	$FormO365AdministrationCenter.FormBorderStyle = 'Sizable'
	
	#Hide the progrss bar
	$progressbar1.Visible = $false
	
	
}

$PartnerComboBox_SelectedIndexChanged = {
	$checkboxComplianceCenter.Checked = $false
	$checkboxExchangeOnline.Checked = $true
	$checkboxSharepoint.Checked = $false
	$checkboxSkypeForBusiness.Checked = $false
	
	
}

$saveToFileToolStripMenuItem_Click = {
	$savedialog = New-Object windows.forms.savefiledialog
	$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
	$savedialog.title = "Export to File"
	$savedialog.filter = ".doc|*.doc|.txt|*.txt|.xls|*.xls"
	$savedialog.ShowHelp = $True
	$result = $savedialog.ShowDialog(); $result
	if ($result -eq "OK")
	{
		$TextboxResults.Text | out-file -Encoding Default $savedialog.filename
		
	}
	
}

$printToolStripMenuItem_Click = {
	$Printdialog = New-Object System.Windows.Forms.PrintDialog
	$Printdialog.ShowHelp = $False
	$Printdialog.AllowSelection = $true
	$Printdialog.AllowPrintToFile = $true
	$Printdialog.AllowSomePages = $false
	$Printdialog.ShowNetwork = $true
	$result = $Printdialog.ShowDialog(); $result
	If ($result -eq 'OK')
	{
		$TextboxResults.Text | Out-Printer $Printdialog.PrinterSettings.PrinterName
	}
	
}

$disconnectToolStripMenuItem_Click = {
	$FormO365AdministrationCenter.Cursor = 'WaitCursor'
	$TextboxResults.Text = ""
	$textboxDetails.Text = ""
	
	#Disconnects O365 Session
	Get-PSSession | Remove-PSSession
	
	#Enables the connect to partner Button
	#$PartnerConnectButton.Enabled = $True
	#Disabled the disconnect from partner button
	#$ButtonDisconnect.Enabled = $False
	#Sets custom button text
	$TenantConnectButton.Text = "Connect to Partner"
	#Sets the form name
	$FormO365AdministrationCenter.Text = "O365 Admin Center"
	#Enables the partner combobox
	$PartnerComboBox.Enabled = $True
	#Enables the connect to o365 button
	$ButtonConnectTo365.Enabled = $True
	#Clears the combobox
	#$PartnerComboBox.Items.clear()
		<# Creates a pop up box telling the user they are disconnected from the o365 session. This is commented out as it will show True every time as the command will never error out even if there 
		is no session to disconnect from #>
	#[void][System.Windows.Forms.MessageBox]::Show("You are disconnected from O365", "Message")
	
	$checkboxComplianceCenter.Checked = $false
	$checkboxExchangeOnline.Checked = $false
	$checkboxSharepoint.Checked = $false
	$checkboxSkypeForBusiness.Checked = $false
	$checkboxComplianceCenter.Enabled = $true
	$checkboxExchangeOnline.Enabled = $true
	$checkboxSharepoint.Enabled = $true
	$checkboxSkypeForBusiness.Enabled = $true
	$TenantConnectButton.Enabled = $True
	$FormO365AdministrationCenter.Cursor = 'Default'
	
}

$exitToolStripMenuItem_Click = {
	#Remove session
	Get-PSSession | Remove-PSSession
	
	#Deletes the old cached files
	$CachedFiles = ("$TempDir" + "\O365AdminCenter")
	Remove-Item $CachedFiles\* -recurse
	
	$FormO365AdministrationCenter.Close()
}

	#Buttons

$ButtonDisconnect_Click = {
	$TenantStatus = Get-ItemProperty 'HKCU:\Software\O365 Admin Center' -Name TenantStatus | Select-Object -ExpandProperty TenantStatus
	If ($Tenantstatus -eq 1)
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		#Clear textboxes 
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		
		#Show progress bar
		$progressbar1.Visible = $true
		
		#Disconnects O365 Session
		$progressbar1.Value = 90
		Get-PSSession | Remove-PSSession
		$progressbar1.Value = 95
		
		#Sets custom button text
		$TenantConnectButton.Text = "Connect to Partner"
		$TenantConnectButton.Enabled = $True
		
		#Sets the form name
		$FormO365AdministrationCenter.Text = "O365 Admin Center"
		
		$PartnerComboBox.Enabled = $true
		
		#Enable the connect to tenant button
		#$TenantConnectButton.Enabled = $true
		
		$checkboxExchangeOnline.Checked = $true
		$checkboxComplianceCenter.Enabled = $false
		$checkboxExchangeOnline.Enabled = $false
		$checkboxSharepoint.Enabled = $false
		$checkboxSkypeForBusiness.Enabled = $false
		$progressbar1.Value = 100
		#Hide the progress bar
		$progressbar1.Visible = $false
		
		Get-Item 'HKCU:\Software\O365 Admin Center' -Force | New-ItemProperty -Name TenantStatus -Value 0 -Force | Out-Null
		
		$ButtonDisconnect.Text = "Disconnect"
		
		$CachedPF = ("$TempDir" + "\O365AdminCenter" + "\pf.txt")
		If ((Test-Path $CachedPF) -eq $true)
		{
			Remove-Item $CachedPF -Force -Confirm:$false
		}
		Get-MSOLUser -All | Select-Object -ExpandProperty UserPrincipalName | Out-File "$O365AdminTempFolder\upn.txt"
		Get-MSOLUser -All | Select-Object -ExpandProperty DisplayName | Out-File "$O365AdminTempFolder\names.txt"
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Else
	{
		#Clears the combobox
		#$PartnerComboBox.Text = ""
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		#Clear textboxes 
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		
		#Show progress bar
		$progressbar1.Visible = $true
		
		#Disconnects O365 Session
		$progressbar1.Value = 90
		Get-PSSession | Remove-PSSession
		$progressbar1.Value = 95
		
		#Sets custom button text
		$TenantConnectButton.Text = "Connect to Partner"
		$TenantConnectButton.Enabled = $False
		$PartnerComboBox.Enabled = $False
		
		#Sets the form name
		$FormO365AdministrationCenter.Text = "O365 Admin Center"
		
		#Enables the partner combobox
		$PartnerComboBox.Enabled = $True
		$PartnerComboBox.Text = ""
		
		#Enable the connect to tenant button
		#$TenantConnectButton.Enabled = $true
		
		#Enables the connect to o365 button
		$ButtonConnectTo365.Enabled = $True
		$ButtonConnectTo365.Text = "Connect to O365"
		
		$ButtonDisconnect.Enabled = $False
		
		
		#Disables tenant combobox
		$PartnerComboBox.Enabled = $False
		
		$checkboxComplianceCenter.Checked = $false
		$checkboxExchangeOnline.Checked = $false
		$checkboxSharepoint.Checked = $false
		$checkboxSkypeForBusiness.Checked = $false
		$checkboxComplianceCenter.Enabled = $true
		$checkboxExchangeOnline.Enabled = $true
		$checkboxSharepoint.Enabled = $true
		$checkboxSkypeForBusiness.Enabled = $true
		#$TenantConnectButton.Enabled = $True
		$progressbar1.Value = 100
		
		#Hide the progress bar
		$progressbar1.Visible = $false
		
		Get-Item 'HKCU:\Software\O365 Admin Center' -Force | New-ItemProperty -Name TenantStatus -Value 0 -Force | Out-Null
		
		$ButtonDisconnect.Text = "Disconnect"
		
		$CachedPF = ("$TempDir" + "\O365AdminCenter" + "\pf.txt")
		If ((Test-Path $CachedPF) -eq $true)
		{
			Remove-Item $CachedPF -Force -Confirm:$false
		}
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
}

$ButtonConnectTo365_Click = {
	$AzurePreReqPrompt = (Get-ItemProperty 'HKCU:\Software\O365 Admin Center' -Name DisableAzurePrompt).DisableAzurePrompt
	$MSOnlinePreReqPrompt = (Get-ItemProperty 'HKCU:\Software\O365 Admin Center' -Name DisableMSOnlinePrompt).DisableMSOnlinePrompt
	$SkypeOnlineConnectorPreReqPrompt = (Get-ItemProperty 'HKCU:\Software\O365 Admin Center' -Name DisableSkypeOnlineConnectorPrompt).DisableSkypeOnlineConnectorPrompt
	$SharePointPreReqPrompt = (Get-ItemProperty 'HKCU:\Software\O365 Admin Center' -Name DisableSharePointOnlinePrompt).DisableSharePointOnlinePrompt
	$ExecutionPolicy = Get-ExecutionPolicy
	$ExecutionPolicyPreReq = (Get-ItemProperty 'HKCU:\Software\O365 Admin Center' -Name ExecutionPolicy).ExecutionPolicy
	$SignOnAss = Get-ItemProperty HKLM:\SOFTWARE\Classes\Installer\Products\0B39BA8DFBF60A4479F10C66B9A56EDD -Name ProductName | Select-Object -ExpandProperty ProductName
	$2FA = (Get-ItemProperty 'HKCU:\Software\O365 Admin Center' -Name TFA).TFA
	$2FAPath = (Get-ItemProperty 'HKCU:\Software\O365 Admin Center' -Name TFAPath).TFAPath
	$TFAMSONLINE = (Get-ItemProperty 'HKCU:\Software\O365 Admin Center' -Name DisableMSOnlineTFA).DisableMSOnlineTFA
	try
	{
		If ($checkboxComplianceCenter.Checked -eq $False -and $checkboxExchangeOnline.Checked -eq $False -and $checkboxSharepoint.Checked -eq $False -and $checkboxSkypeForBusiness.Checked -eq $False)
		{
			[System.Windows.Forms.MessageBox]::Show("Please select a service to connect to", "Error")
		}
		ElseIf ($2FA -eq 1)
		{
			If ((((Get-Module -ListAvailable -Name MSOnline).Version.Build) -ge 166 ) -or ($TFAMSONLINE -eq 1) )
			{
				$Path = (Get-ChildItem -Recurse -Force "$env:LOCALAPPDATA\Apps\2.0" -ErrorAction SilentlyContinue | Where-Object { ($_.PSIsContainer -eq $false) -and ($_.Name -contains "Microsoft.Online.CSE.PSModule.Client.cdf-ms") }).Fullname
				$CleanPath = ($Path.TrimEnd("\Microsoft.Online.CSE.PSModule.Client.cdf-ms")) + "\"
				If ($2FAPath -notcontains "Apps")
				{
					
					#Show progress bar
					$progressbar1.Visible = $true
					
					#Disable the connect to o365 button
					$ButtonConnectTo365.Enabled = $False
					
					#Enable the disconnect button
					$ButtonDisconnect.Enabled = $True
					
					#Disable the checkboxes
					$checkboxExchangeOnline.Enabled = $False
					$checkboxSkypeForBusiness.Checked = $false
					$checkboxSkypeForBusiness.Enabled = $False
					$checkboxSharepoint.Checked = $False
					$checkboxSharepoint.Enabled = $False
					$checkboxComplianceCenter.Checked = $False
					$checkboxComplianceCenter.Enabled = $False
					
					$progressbar1.Value = 10
					$TextboxResults.Text = "Saving Module Path..."
					Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name 2FAPath -Value $CleanPath -Force | Out-Null
					$TextboxResults.Text = "Changing folder to 2FA Module..."
					Set-Location $CleanPath
					$progressbar1.Value = 20
					$TextboxResults.Text = "Importing 2FA Module..."
					Import-Module .\CreateExoPSSession.ps1
					$progressbar1.Value = 30
					$TextboxResults.Text = "Connecting to Office 365..."
					Connect-EXOPSSession
					$progressbar1.Value = 40
					Connect-MsolService
					#Change button text
					$ButtonConnectTo365.Text = "Connected to O365"
					$progressbar1.Value = 42
					#The first checked check box for services will load the appropriate tab as default. 
					
					$TabPageMaster.SelectedTab = $tabpageExchangeOnline
					
					$progressbar1.Value = 50
					#Set Tenant Status to 0 as we have not connected to any tenants yet
					Get-Item 'HKCU:\Software\O365 Admin Center' -Force | New-ItemProperty -Name TenantStatus -Value 0 -Force | Out-Null
					$progressbar1.Value = 60
					
					$partnerTIDs = Get-MsolPartnerContract -All | Select-Object TenantID
					$progressbar1.Value = 70
					
					#If tenant domains are available then load combobox with all tenants
					<#
					If ($partnerTIDs -ne $Null)
					{
						#Enables the Tenant button
						$TenantConnectButton.Enabled = $True
						$PartnerComboBox.Enabled = $True
						
						$domains = @()
						foreach ($TID in $partnerTIDs)
						{
							$domainName = Get-MsolDomain -TenantId $TID.TenantId | Where-Object { $_.IsDefault -eq 'True' }
							#$domainName = Get-MsolDomain -TenantId $TID.TenantId | Where-Object { $_.Name -notlike '*.onmicrosoft*' -and $_.Name -notlike '*.microsoftonline*' -and $_.Status -eq "Verified" }
							#$domainName = Get-MsolDomain -TenantId $TID.TenantId
							$domain = New-Object -TypeName PSObject
							$domain | Add-Member -Name 'Name' -MemberType NoteProperty -Value ($domainName.Name | Select-Object -First 1) #Deals with Tenants with multiple domain names asociated
							#$domain | Add-Member -Name 'Name' -MemberType NoteProperty -Value $domainName.Name
							$domain | Add-Member -Name TenantID -MemberType NoteProperty -Value $TID.TenantId
							$domains += $domain
						}
						$progressbar1.Value = 60
						#Loads Combobox with Tenants
						Load-ComboBox $PartnerComboBox $domains -DisplayMember Name
						
						#Enable the connect to tenant button
						$TenantConnectButton.Enabled = $true
					}
					
					#If no tenant domains are available then do the following
					Else
					{
						#Clear the combobox of items
						$PartnerComboBox.Text = ""
						
						#Disable combobox
						$PartnerComboBox.Enabled = $False
						
						#Disable the connect to tenant button
						$TenantConnectButton.Enabled = $false
					}
					#>
					#Clear the combobox of items
					$PartnerComboBox.Text = ""
					
					#Disable combobox
					$PartnerComboBox.Enabled = $False
					
					#Disable the connect to tenant button
					$TenantConnectButton.Enabled = $false
					
					$progressbar1.Value = 80
					
					
					
					$TextboxResults.Text = "Caching Users..."
					$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter")
					$UserListcombo = Get-MSOLUser -All | Select-Object -ExpandProperty UserPrincipalName | Out-File "$O365AdminTempFolder\upn.txt"
					Get-MSOLUser -All | Select-Object -ExpandProperty DisplayName | Out-File "$O365AdminTempFolder\names.txt"
					$progressbar1.Value = 100
					$progressbar1.Enabled = $false
					
					$TextboxResults.Text = ""
				}
				Else
				{
					
					#Show progress bar
					$progressbar1.Visible = $true
					
					#Disable the connect to o365 button
					$ButtonConnectTo365.Enabled = $False
					
					#Enable the disconnect button
					$ButtonDisconnect.Enabled = $True
					
					#Disable the checkboxes
					#Disable the checkboxes
					$checkboxExchangeOnline.Enabled = $False
					$checkboxSkypeForBusiness.Checked = $false
					$checkboxSkypeForBusiness.Enabled = $False
					$checkboxSharepoint.Checked = $False
					$checkboxSharepoint.Enabled = $False
					$checkboxComplianceCenter.Checked = $False
					$checkboxComplianceCenter.Enabled = $False
					$progressbar1.Value = 10
					
					$TextboxResults.Text = "Changing folder to 2FA Module..."
					Set-Location $CleanPath
					$progressbar1.Value = 20
					$TextboxResults.Text = "Importing 2FA Module..."
					Import-Module .\CreateExoPSSession.ps1
					$progressbar1.Value = 30
					$TextboxResults.Text = "Connecting to Office 365"
					Connect-EXOPSSession
					$progressbar1.Value = 40
					Connect-MsolService
					#Change button text
					$ButtonConnectTo365.Text = "Connected to O365"
					$progressbar1.Value = 42
					#The first checked check box for services will load the appropriate tab as default. 
					
					$TabPageMaster.SelectedTab = $tabpageExchangeOnline
					
					$progressbar1.Value = 50
					#Set Tenant Status to 0 as we have not connected to any tenants yet
					Get-Item 'HKCU:\Software\O365 Admin Center' -Force | New-ItemProperty -Name TenantStatus -Value 0 -Force | Out-Null
					$progressbar1.Value = 60
					
					$partnerTIDs = Get-MsolPartnerContract -All | Select-Object TenantID
					$progressbar1.Value = 70
					
					<#
					#If tenant domains are available then load combobox with all tenants
					If ($partnerTIDs -ne $Null)
					{
						#Enables the Tenant button
						$TenantConnectButton.Enabled = $True
						$PartnerComboBox.Enabled = $True
						
						$domains = @()
						foreach ($TID in $partnerTIDs)
						{
							$domainName = Get-MsolDomain -TenantId $TID.TenantId | Where-Object { $_.IsDefault -eq 'True' }
							#$domainName = Get-MsolDomain -TenantId $TID.TenantId | Where-Object { $_.Name -notlike '*.onmicrosoft*' -and $_.Name -notlike '*.microsoftonline*' -and $_.Status -eq "Verified" }
							#$domainName = Get-MsolDomain -TenantId $TID.TenantId
							$domain = New-Object -TypeName PSObject
							$domain | Add-Member -Name 'Name' -MemberType NoteProperty -Value ($domainName.Name | Select-Object -First 1) #Deals with Tenants with multiple domain names asociated
							#$domain | Add-Member -Name 'Name' -MemberType NoteProperty -Value $domainName.Name
							$domain | Add-Member -Name TenantID -MemberType NoteProperty -Value $TID.TenantId
							$domains += $domain
						}
						$progressbar1.Value = 60
						#Loads Combobox with Tenants
						Load-ComboBox $PartnerComboBox $domains -DisplayMember Name
						
						#Enable the connect to tenant button
						$TenantConnectButton.Enabled = $true
					}
					
					#If no tenant domains are available then do the following
					Else
					{
						#Clear the combobox of items
						$PartnerComboBox.Text = ""
						
						#Disable combobox
						$PartnerComboBox.Enabled = $False
						
						#Disable the connect to tenant button
						$TenantConnectButton.Enabled = $false
					}
					#>
					
					#Clear the combobox of items
					$PartnerComboBox.Text = ""
					
					#Disable combobox
					$PartnerComboBox.Enabled = $False
					
					#Disable the connect to tenant button
					$TenantConnectButton.Enabled = $false
					
					$progressbar1.Value = 80
					
					
					
					$TextboxResults.Text = "Caching Users..."
					$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter")
					$UserListcombo = Get-MSOLUser -All | Select-Object -ExpandProperty UserPrincipalName | Out-File "$O365AdminTempFolder\upn.txt"
					Get-MSOLUser -All | Select-Object -ExpandProperty DisplayName | Out-File "$O365AdminTempFolder\names.txt"
					$progressbar1.Value = 100
					$progressbar1.Enabled = $false
					
					$TextboxResults.Text = ""
				}
			}
			Else
			{
			Show-PreReqTFA_MSONLINE_psf
			}
		}
		Else
		{
			If (($ExecutionPolicy -eq "RemoteSigned") -or ($ExecutionPolicy -eq "Unrestricted") -or ($ExecutionPolicyPreReq -eq 1))
			{
				$CredMem = (Get-ItemProperty 'HKCU:\Software\O365 Admin Center' -Name CredMem).CredMem
				If (!$CredMem)
				{
					$global:o365credentials = (Get-Credential -Message "Please enter your Office 365 credentials")
					Show-CachedCreds_psf
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Connecting to Office 365..."
					
					If (($SignOnAss -ne $Null) -or ($MSOnlinePreReqPrompt -eq 1))
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableMSOnlinePrompt -Value 1 -Force | Out-Null
						
						#$TextboxResults.Text = "Checking for the Azure module..."
						If ((Get-Module -ListAvailable -Name MSOnline) -or ($AzurePreReqPrompt -eq 1))
						{
							$FormO365AdministrationCenter.Cursor = 'WaitCursor'
							Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableAzurePrompt -Value 1 -Force | Out-Null
							
							#Show progress bar
							$progressbar1.Visible = $true
							
							#$TextboxResults.Text = "Connecting to O365..."
							$Ranges = 1 .. 50
							foreach ($range in $ranges)
							{
								$progressbar1.Value = $Range
							}
							
							Connect-MsolService -Credential $global:o365credentials
							$progressbar1.Value = 50
							
							
							#Disable the connect to o365 button
							$ButtonConnectTo365.Enabled = $False
							
							#Enable the disconnect button
							$ButtonDisconnect.Enabled = $True
							
							#Disable the checkboxes
							$checkboxExchangeOnline.Enabled = $false
							$checkboxSkypeForBusiness.Enabled = $false
							$checkboxSharepoint.Enabled = $false
							$checkboxComplianceCenter.Enabled = $False
							$progressbar1.Value = 51
							#Change button text
							$ButtonConnectTo365.Text = "Connected to O365"
							$progressbar1.Value = 52
							#The first checked check box for services will load the appropriate tab as default. 
							If ($checkboxComplianceCenter.checked)
							{
								$TabPageMaster.SelectedTab = $tabpageComplianceCenter
							}
							elseif ($checkboxExchangeOnline.Checked)
							{
								$TabPageMaster.SelectedTab = $tabpageExchangeOnline
							}
							elseif ($checkboxSharepoint.checked)
							{
								$TabPageMaster.SelectedTab = $tabpageSharePoint
							}
							elseif ($checkboxSkypeForBusiness.checked)
							{
								$TabPageMaster.SelectedTab = $tabpageSkypeForBusiness
							}
							$progressbar1.Value = 53
							#Set Tenant Status to 0 as we have not connected to any tenants yet
							Get-Item 'HKCU:\Software\O365 Admin Center' -Force | New-ItemProperty -Name TenantStatus -Value 0 -Force | Out-Null
							$progressbar1.Value = 54
							
							$partnerTIDs = Get-MsolPartnerContract -All | Select-Object TenantID
							$progressbar1.Value = 55
							
							#If tenant domains are available then load combobox with all tenants
							If ($partnerTIDs -ne $Null)
							{
								#Enables the Tenant button
								$TenantConnectButton.Enabled = $True
								$PartnerComboBox.Enabled = $True
								
								$domains = @()
								foreach ($TID in $partnerTIDs)
								{
									$domainName = Get-MsolDomain -TenantId $TID.TenantId | Where-Object { $_.IsDefault -eq 'True' }
									#$domainName = Get-MsolDomain -TenantId $TID.TenantId | Where-Object { $_.Name -notlike '*.onmicrosoft*' -and $_.Name -notlike '*.microsoftonline*' -and $_.Status -eq "Verified" }
									#$domainName = Get-MsolDomain -TenantId $TID.TenantId
									$domain = New-Object -TypeName PSObject
									$domain | Add-Member -Name 'Name' -MemberType NoteProperty -Value ($domainName.Name | Select-Object -First 1) #Deals with Tenants with multiple domain names asociated
									#$domain | Add-Member -Name 'Name' -MemberType NoteProperty -Value $domainName.Name
									$domain | Add-Member -Name TenantID -MemberType NoteProperty -Value $TID.TenantId
									$domains += $domain
								}
								$progressbar1.Value = 60
								#Loads Combobox with Tenants
								Load-ComboBox $PartnerComboBox $domains -DisplayMember Name
								
								#Enable the connect to tenant button
								$TenantConnectButton.Enabled = $true
							}
							
							#If no tenant domains are available then do the following
							Else
							{
								#Clear the combobox of items
								$PartnerComboBox.Text = ""
								
								#Disable combobox
								$PartnerComboBox.Enabled = $False
								
								#Disable the connect to tenant button
								$TenantConnectButton.Enabled = $false
							}
							
							$progressbar1.Value = 65
							
							#If compliance center checkbox is checked
							If ($checkboxComplianceCenter.Checked)
							{
								$TextboxResults.Text = "Connecting to Compliance Center..."
								$ccSession = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri https://ps.compliance.protection.outlook.com/powershell-liveid/ -Credential $global:o365credentials -Authentication Basic -AllowRedirection
								Import-PSSession $ccSession
								$TextboxResults.Text = ""
							}
							
							$progressbar1.Value = 70
							
							#If exchange online checkbox is checked
							If ($checkboxExchangeOnline.Checked)
							{
								
								$TextboxResults.Text = "Connecting to Exchange Online..."
								$exchangeSession = New-PSSession -Name MainAccount -ConfigurationName Microsoft.Exchange -ConnectionUri https://outlook.office365.com/powershell-liveid/ -Credential $global:o365credentials -Authentication Basic -AllowRedirection
								Import-PSSession $exchangeSession -AllowClobber
								
								
								$TextboxResults.Text = "Caching Users..."
								$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter")
								$UserListcombo = Get-MSOLUser -All | Select-Object -ExpandProperty UserPrincipalName | Out-File "$O365AdminTempFolder\upn.txt"
								Get-MSOLUser -All | Select-Object -ExpandProperty DisplayName | Out-File "$O365AdminTempFolder\names.txt"
								
								
								$TextboxResults.Text = ""
							}
							
							$progressbar1.Value = 80
							
							If ($checkboxSharepoint.Checked -and $checkboxExchangeOnline.Checked)
							{
								$TextboxResults.Text = "Checking for the SharePoint Online module..."
								if ((Get-Module -ListAvailable -Name Microsoft.Online.SharePoint.PowerShell) -or ($SharePointPreReqPrompt -eq 1))
								{
									Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableSharePointOnlinePrompt -Value 1 -Force | Out-Null
									
									$TextboxResults.Text = "Connecting to SharePoint Online..."
									#Grabs the Sharepoint URL attribtue with Absoluteuri header
									$SPOheaders = Get-OrganizationConfig | Select-Object -ExpandProperty SharepointUrl
									#Clears the header so we have a clean variable
									$SPOSite = $SPOheaders | Select-Object -ExpandProperty AbsoluteUri
									#Splits the URl into two parts so we can inject -admin
									$firsthalf = $SPOSite -split ('.sharepoint.com') | Select-Object -First 1
									$secondhalf = $SPOSite -split '(.sharepoint.com/)' | Select-Object -Last 2
									#Wrap it all up into a single URL with the -admin
									$SPOadminSite = "$Firsthalf" + "-admin" + "$secondhalf"
									$TextboxResults.Text = "Connecting to Sharepoint Online..."
									Import-Module Microsoft.Online.SharePoint.PowerShell -DisableNameChecking
									Connect-SPOService -Url $SPOadminSite -credential $global:o365credentials
									$TextboxResults.Text = ""
								}
								Else
								{
									$TextboxResults.Text = ""
									$textboxDetails.Text = ""
									$PartnerComboBox.Enabled = $True
									$ButtonConnectTo365.Enabled = $True
									$ButtonDisconnect.Enabled = $False
									#$TenantConnectButton.Enabled = $True
									$checkboxComplianceCenter.Enabled = $true
									$checkboxExchangeOnline.Enabled = $true
									$checkboxSharepoint.Enabled = $true
									$checkboxComplianceCenter.Checked = $False
									$checkboxSharepoint.Checked = $False
									$checkboxSkypeForBusiness.Checked = $False
									$checkboxExchangeOnline.Checked = $False
									$checkboxSkypeForBusiness.Enabled = $True
									$FormO365AdministrationCenter.Cursor = 'Default'
									$ButtonConnectTo365.Text = "Connect to O365"
									Show-PreRep_SharePoint_psf
								}
							}
							
							#If sharepoint checkbox is checked
							If ($checkboxSharepoint.Checked)
							{
								$TextboxResults.Text = "Checking for the SharePoint Online module..."
								if ((Get-Module -ListAvailable -Name Microsoft.Online.SharePoint.PowerShell) -or ($SharePointPreReqPrompt -eq 1))
								{
									#$Sharepointdomain = Read-Host "Enter the domain name. EX: contoso, yahoo"
									#Connect to Exchange online so we can grab the Sharepoint URL attribute 
									$TextboxResults.Text = "Connecting to SharePoint Online..."
									$exchangeSession = New-PSSession -Name MainAccount -ConfigurationName Microsoft.Exchange -ConnectionUri https://outlook.office365.com/powershell-liveid/ -Credential $global:o365credentials -Authentication Basic -AllowRedirection
									Import-PSSession $exchangeSession -AllowClobber
									$progressbar1.Value = 83
									#Grabs the Sharepoint URL attribtue with Absoluteuri header
									$SPOheaders = Get-OrganizationConfig | Select-Object -ExpandProperty SharepointUrl
									#Clears the header so we have a clean variable
									$SPOSite = $SPOheaders | Select-Object -ExpandProperty AbsoluteUri
									#Splits the URl into two parts so we can inject -admin
									$firsthalf = $SPOSite -split ('.sharepoint.com') | Select-Object -First 1
									$secondhalf = $SPOSite -split '(.sharepoint.com/)' | Select-Object -Last 2
									#Wrap it all up into a single URL with the -admin
									$SPOadminSite = "$Firsthalf" + "-admin" + "$secondhalf"
									$TextboxResults.Text = "Connecting to Sharepoint Online..."
									Import-Module Microsoft.Online.SharePoint.PowerShell -DisableNameChecking
									Connect-SPOService -Url $SPOadminSite -credential $global:o365credentials
									$TextboxResults.Text = ""
								}
								Else
								{
									$TextboxResults.Text = ""
									$textboxDetails.Text = ""
									$PartnerComboBox.Enabled = $True
									$ButtonConnectTo365.Enabled = $True
									$ButtonDisconnect.Enabled = $False
									#$TenantConnectButton.Enabled = $True
									$checkboxComplianceCenter.Enabled = $true
									$checkboxExchangeOnline.Enabled = $true
									$checkboxSharepoint.Enabled = $true
									$checkboxComplianceCenter.Checked = $False
									$checkboxSharepoint.Checked = $False
									$checkboxSkypeForBusiness.Checked = $False
									$checkboxExchangeOnline.Checked = $False
									$checkboxSkypeForBusiness.Enabled = $True
									$FormO365AdministrationCenter.Cursor = 'Default'
									$ButtonConnectTo365.Text = "Connect to O365"
									Show-PreRep_SharePoint_psf
								}
							}
							
							$progressbar1.Value = 90
							
							#If skype for business checkbox is checked
							If ($checkboxSkypeForBusiness.Checked)
							{
								$TextboxResults.Text = "Checking for the SkypeOnlineConnector module..."
								if ((Get-Module -ListAvailable -Name SkypeOnlineConnector) -or ($SkypeOnlineConnectorPreReqPrompt -eq 1))
								{
									$TextboxResults.Text = "Connecting to Skype for Business.."
									Import-Module SkypeOnlineConnector
									#Skype for business session
									$sfboSession = New-CsOnlineSession -Credential $global:o365credentials
									#Import Skype For Business Session
									Import-PSSession $sfboSession
									$TextboxResults.Text = ""
								}
								Else
								{
									$TextboxResults.Text = ""
									$textboxDetails.Text = ""
									$PartnerComboBox.Enabled = $True
									$ButtonConnectTo365.Enabled = $True
									$ButtonDisconnect.Enabled = $False
									#$TenantConnectButton.Enabled = $True
									$checkboxComplianceCenter.Enabled = $true
									$checkboxExchangeOnline.Enabled = $true
									$checkboxSharepoint.Enabled = $true
									$checkboxComplianceCenter.Checked = $False
									$checkboxSharepoint.Checked = $False
									$checkboxSkypeForBusiness.Checked = $False
									$checkboxExchangeOnline.Checked = $False
									$checkboxSkypeForBusiness.Enabled = $True
									$FormO365AdministrationCenter.Cursor = 'Default'
									$ButtonConnectTo365.Text = "Connect to O365"
									Show-PreReq_SkypeForBusiness_psf
								}
								
								
							}
							
							$progressbar1.Value = 100
							$FormO365AdministrationCenter.Cursor = 'Default'
						}
						Else
						{
							$TextboxResults.Text = ""
							$textboxDetails.Text = ""
							$PartnerComboBox.Enabled = $True
							$ButtonConnectTo365.Enabled = $True
							$ButtonDisconnect.Enabled = $False
							#$TenantConnectButton.Enabled = $True
							$checkboxComplianceCenter.Enabled = $true
							$checkboxExchangeOnline.Enabled = $true
							$checkboxSharepoint.Enabled = $true
							$checkboxComplianceCenter.Checked = $False
							$checkboxSharepoint.Checked = $False
							$checkboxSkypeForBusiness.Checked = $False
							$checkboxExchangeOnline.Checked = $False
							$checkboxSkypeForBusiness.Enabled = $True
							$FormO365AdministrationCenter.Cursor = 'Default'
							$ButtonConnectTo365.Text = "Connect to O365"
							Show-PreReq_Azure_psf
						}
					}
					Else
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						$PartnerComboBox.Enabled = $True
						$ButtonConnectTo365.Enabled = $True
						$ButtonDisconnect.Enabled = $False
						#$TenantConnectButton.Enabled = $True
						$checkboxComplianceCenter.Enabled = $true
						$checkboxExchangeOnline.Enabled = $true
						$checkboxSharepoint.Enabled = $true
						$checkboxComplianceCenter.Checked = $False
						$checkboxSharepoint.Checked = $False
						$checkboxSkypeForBusiness.Checked = $False
						$checkboxExchangeOnline.Checked = $False
						$checkboxSkypeForBusiness.Enabled = $True
						$FormO365AdministrationCenter.Cursor = 'Default'
						$ButtonConnectTo365.Text = "Connect to O365"
						
						Show-PreReq_MSOnline_psf
					}
					
				}
				ElseIf ($CredMem -eq 1)
				{
					$TempDir = $env:temp
					$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter_Creds")
					$CachedCredXML = "$O365AdminTempFolder\Creds.xml"
					$global:o365credentials = Import-Clixml -Path $CachedCredXML
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Connecting to Office 365..."
					
					If (($SignOnAss -ne $Null) -or ($MSOnlinePreReqPrompt -eq 1))
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableMSOnlinePrompt -Value 1 -Force | Out-Null
						
						#$TextboxResults.Text = "Checking for the Azure module..."
						If ((Get-Module -ListAvailable -Name MSOnline) -or ($AzurePreReqPrompt -eq 1))
						{
							$FormO365AdministrationCenter.Cursor = 'WaitCursor'
							Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableAzurePrompt -Value 1 -Force | Out-Null
							
							#Show progress bar
							$progressbar1.Visible = $true
							
							#$TextboxResults.Text = "Connecting to O365..."
							$Ranges = 1 .. 50
							foreach ($range in $ranges)
							{
								$progressbar1.Value = $Range
							}
							
							Connect-MsolService -Credential $global:o365credentials
							$progressbar1.Value = 50
							
							#Disable the connect to o365 button
							$ButtonConnectTo365.Enabled = $False
							
							#Enable the disconnect button
							$ButtonDisconnect.Enabled = $True
							
							#Disable the checkboxes
							$checkboxExchangeOnline.Enabled = $false
							$checkboxSkypeForBusiness.Enabled = $false
							$checkboxSharepoint.Enabled = $false
							$checkboxComplianceCenter.Enabled = $False
							$progressbar1.Value = 51
							#Change button text
							$ButtonConnectTo365.Text = "Connected to O365"
							$progressbar1.Value = 52
							#The first checked check box for services will load the appropriate tab as default. 
							If ($checkboxComplianceCenter.checked)
							{
								$TabPageMaster.SelectedTab = $tabpageComplianceCenter
							}
							elseif ($checkboxExchangeOnline.Checked)
							{
								$TabPageMaster.SelectedTab = $tabpageExchangeOnline
							}
							elseif ($checkboxSharepoint.checked)
							{
								$TabPageMaster.SelectedTab = $tabpageSharePoint
							}
							elseif ($checkboxSkypeForBusiness.checked)
							{
								$TabPageMaster.SelectedTab = $tabpageSkypeForBusiness
							}
							$progressbar1.Value = 53
							#Set Tenant Status to 0 as we have not connected to any tenants yet
							Get-Item 'HKCU:\Software\O365 Admin Center' -Force | New-ItemProperty -Name TenantStatus -Value 0 -Force | Out-Null
							$progressbar1.Value = 54
							
							$partnerTIDs = Get-MsolPartnerContract -All | Select-Object TenantID
							$progressbar1.Value = 55
							
							#If tenant domains are available then load combobox with all tenants
							If ($partnerTIDs -ne $Null)
							{
								#Enables the Tenant button
								$TenantConnectButton.Enabled = $True
								$PartnerComboBox.Enabled = $True
								
								$domains = @()
								foreach ($TID in $partnerTIDs)
								{
									$domainName = Get-MsolDomain -TenantId $TID.TenantId | Where-Object { $_.IsDefault -eq 'True' }
									#$domainName = Get-MsolDomain -TenantId $TID.TenantId | Where-Object { $_.Name -notlike '*.onmicrosoft*' -and $_.Name -notlike '*.microsoftonline*' -and $_.Status -eq "Verified" }
									#$domainName = Get-MsolDomain -TenantId $TID.TenantId
									$domain = New-Object -TypeName PSObject
									$domain | Add-Member -Name 'Name' -MemberType NoteProperty -Value ($domainName.Name | Select-Object -First 1) #Deals with Tenants with multiple domain names asociated
									#$domain | Add-Member -Name 'Name' -MemberType NoteProperty -Value $domainName.Name
									$domain | Add-Member -Name TenantID -MemberType NoteProperty -Value $TID.TenantId
									$domains += $domain
								}
								$progressbar1.Value = 60
								#Loads Combobox with Tenants
								Load-ComboBox $PartnerComboBox $domains -DisplayMember Name
								
								#Enable the connect to tenant button
								$TenantConnectButton.Enabled = $true
							}
							
							#If no tenant domains are available then do the following
							Else
							{
								#Clear the combobox of items
								$PartnerComboBox.Text = ""
								
								#Disable combobox
								$PartnerComboBox.Enabled = $False
								
								#Disable the connect to tenant button
								$TenantConnectButton.Enabled = $false
							}
							
							$progressbar1.Value = 65
							
							#If compliance center checkbox is checked
							If ($checkboxComplianceCenter.Checked)
							{
								$TextboxResults.Text = "Connecting to Compliance Center..."
								$ccSession = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri https://ps.compliance.protection.outlook.com/powershell-liveid/ -Credential $global:o365credentials -Authentication Basic -AllowRedirection
								Import-PSSession $ccSession
								$TextboxResults.Text = ""
							}
							
							$progressbar1.Value = 70
							
							#If exchange online checkbox is checked
							If ($checkboxExchangeOnline.Checked)
							{
								
								$TextboxResults.Text = "Connecting to Exchange Online..."
								$exchangeSession = New-PSSession -Name MainAccount -ConfigurationName Microsoft.Exchange -ConnectionUri https://outlook.office365.com/powershell-liveid/ -Credential $global:o365credentials -Authentication Basic -AllowRedirection
								Import-PSSession $exchangeSession -AllowClobber
								
								
								$TextboxResults.Text = "Caching Users..."
								$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter")
								$UserListcombo = Get-MSOLUser -All | Select-Object -ExpandProperty UserPrincipalName | Out-File "$O365AdminTempFolder\upn.txt"
								Get-MSOLUser -All | Select-Object -ExpandProperty DisplayName | Out-File "$O365AdminTempFolder\names.txt"
								
								
								$TextboxResults.Text = ""
							}
							
							$progressbar1.Value = 80
							
							If ($checkboxSharepoint.Checked -and $checkboxExchangeOnline.Checked)
							{
								$TextboxResults.Text = "Checking for the SharePoint Online module..."
								if ((Get-Module -ListAvailable -Name Microsoft.Online.SharePoint.PowerShell) -or ($SharePointPreReqPrompt -eq 1))
								{
									Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableSharePointOnlinePrompt -Value 1 -Force | Out-Null
									
									$TextboxResults.Text = "Connecting to SharePoint Online..."
									#Grabs the Sharepoint URL attribtue with Absoluteuri header
									$SPOheaders = Get-OrganizationConfig | Select-Object -ExpandProperty SharepointUrl
									#Clears the header so we have a clean variable
									$SPOSite = $SPOheaders | Select-Object -ExpandProperty AbsoluteUri
									#Splits the URl into two parts so we can inject -admin
									$firsthalf = $SPOSite -split ('.sharepoint.com') | Select-Object -First 1
									$secondhalf = $SPOSite -split '(.sharepoint.com/)' | Select-Object -Last 2
									#Wrap it all up into a single URL with the -admin
									$SPOadminSite = "$Firsthalf" + "-admin" + "$secondhalf"
									$TextboxResults.Text = "Connecting to Sharepoint Online..."
									Import-Module Microsoft.Online.SharePoint.PowerShell -DisableNameChecking
									Connect-SPOService -Url $SPOadminSite -credential $global:o365credentials
									$TextboxResults.Text = ""
								}
								Else
								{
									$TextboxResults.Text = ""
									$textboxDetails.Text = ""
									$PartnerComboBox.Enabled = $True
									$ButtonConnectTo365.Enabled = $True
									$ButtonDisconnect.Enabled = $False
									#$TenantConnectButton.Enabled = $True
									$checkboxComplianceCenter.Enabled = $true
									$checkboxExchangeOnline.Enabled = $true
									$checkboxSharepoint.Enabled = $true
									$checkboxComplianceCenter.Checked = $False
									$checkboxSharepoint.Checked = $False
									$checkboxSkypeForBusiness.Checked = $False
									$checkboxExchangeOnline.Checked = $False
									$checkboxSkypeForBusiness.Enabled = $True
									$FormO365AdministrationCenter.Cursor = 'Default'
									$ButtonConnectTo365.Text = "Connect to O365"
									Show-PreRep_SharePoint_psf
								}
							}
							
							#If sharepoint checkbox is checked
							If ($checkboxSharepoint.Checked)
							{
								$TextboxResults.Text = "Checking for the SharePoint Online module..."
								if ((Get-Module -ListAvailable -Name Microsoft.Online.SharePoint.PowerShell) -or ($SharePointPreReqPrompt -eq 1))
								{
									#$Sharepointdomain = Read-Host "Enter the domain name. EX: contoso, yahoo"
									#Connect to Exchange online so we can grab the Sharepoint URL attribute 
									$TextboxResults.Text = "Connecting to SharePoint Online..."
									$exchangeSession = New-PSSession -Name MainAccount -ConfigurationName Microsoft.Exchange -ConnectionUri https://outlook.office365.com/powershell-liveid/ -Credential $global:o365credentials -Authentication Basic -AllowRedirection
									Import-PSSession $exchangeSession -AllowClobber
									$progressbar1.Value = 83
									#Grabs the Sharepoint URL attribtue with Absoluteuri header
									$SPOheaders = Get-OrganizationConfig | Select-Object -ExpandProperty SharepointUrl
									#Clears the header so we have a clean variable
									$SPOSite = $SPOheaders | Select-Object -ExpandProperty AbsoluteUri
									#Splits the URl into two parts so we can inject -admin
									$firsthalf = $SPOSite -split ('.sharepoint.com') | Select-Object -First 1
									$secondhalf = $SPOSite -split '(.sharepoint.com/)' | Select-Object -Last 2
									#Wrap it all up into a single URL with the -admin
									$SPOadminSite = "$Firsthalf" + "-admin" + "$secondhalf"
									$TextboxResults.Text = "Connecting to Sharepoint Online..."
									Import-Module Microsoft.Online.SharePoint.PowerShell -DisableNameChecking
									Connect-SPOService -Url $SPOadminSite -credential $global:o365credentials
									$TextboxResults.Text = ""
								}
								Else
								{
									$TextboxResults.Text = ""
									$textboxDetails.Text = ""
									$PartnerComboBox.Enabled = $True
									$ButtonConnectTo365.Enabled = $True
									$ButtonDisconnect.Enabled = $False
									#$TenantConnectButton.Enabled = $True
									$checkboxComplianceCenter.Enabled = $true
									$checkboxExchangeOnline.Enabled = $true
									$checkboxSharepoint.Enabled = $true
									$checkboxComplianceCenter.Checked = $False
									$checkboxSharepoint.Checked = $False
									$checkboxSkypeForBusiness.Checked = $False
									$checkboxExchangeOnline.Checked = $False
									$checkboxSkypeForBusiness.Enabled = $True
									$FormO365AdministrationCenter.Cursor = 'Default'
									$ButtonConnectTo365.Text = "Connect to O365"
									Show-PreRep_SharePoint_psf
								}
							}
							
							$progressbar1.Value = 90
							
							#If skype for business checkbox is checked
							If ($checkboxSkypeForBusiness.Checked)
							{
								$TextboxResults.Text = "Checking for the SkypeOnlineConnector module..."
								if ((Get-Module -ListAvailable -Name SkypeOnlineConnector) -or ($SkypeOnlineConnectorPreReqPrompt -eq 1))
								{
									$TextboxResults.Text = "Connecting to Skype for Business.."
									Import-Module SkypeOnlineConnector
									#Skype for business session
									$sfboSession = New-CsOnlineSession -Credential $global:o365credentials
									#Import Skype For Business Session
									Import-PSSession $sfboSession
									$TextboxResults.Text = ""
								}
								Else
								{
									$TextboxResults.Text = ""
									$textboxDetails.Text = ""
									$PartnerComboBox.Enabled = $True
									$ButtonConnectTo365.Enabled = $True
									$ButtonDisconnect.Enabled = $False
									#$TenantConnectButton.Enabled = $True
									$checkboxComplianceCenter.Enabled = $true
									$checkboxExchangeOnline.Enabled = $true
									$checkboxSharepoint.Enabled = $true
									$checkboxComplianceCenter.Checked = $False
									$checkboxSharepoint.Checked = $False
									$checkboxSkypeForBusiness.Checked = $False
									$checkboxExchangeOnline.Checked = $False
									$checkboxSkypeForBusiness.Enabled = $True
									$FormO365AdministrationCenter.Cursor = 'Default'
									$ButtonConnectTo365.Text = "Connect to O365"
									Show-PreReq_SkypeForBusiness_psf
								}
								
								
							}
							
							$progressbar1.Value = 100
							$FormO365AdministrationCenter.Cursor = 'Default'
						}
						Else
						{
							$TextboxResults.Text = ""
							$textboxDetails.Text = ""
							$PartnerComboBox.Enabled = $True
							$ButtonConnectTo365.Enabled = $True
							$ButtonDisconnect.Enabled = $False
							#$TenantConnectButton.Enabled = $True
							$checkboxComplianceCenter.Enabled = $true
							$checkboxExchangeOnline.Enabled = $true
							$checkboxSharepoint.Enabled = $true
							$checkboxComplianceCenter.Checked = $False
							$checkboxSharepoint.Checked = $False
							$checkboxSkypeForBusiness.Checked = $False
							$checkboxExchangeOnline.Checked = $False
							$checkboxSkypeForBusiness.Enabled = $True
							$FormO365AdministrationCenter.Cursor = 'Default'
							$ButtonConnectTo365.Text = "Connect to O365"
							Show-PreReq_Azure_psf
						}
					}
					Else
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						$PartnerComboBox.Enabled = $True
						$ButtonConnectTo365.Enabled = $True
						$ButtonDisconnect.Enabled = $False
						#$TenantConnectButton.Enabled = $True
						$checkboxComplianceCenter.Enabled = $true
						$checkboxExchangeOnline.Enabled = $true
						$checkboxSharepoint.Enabled = $true
						$checkboxComplianceCenter.Checked = $False
						$checkboxSharepoint.Checked = $False
						$checkboxSkypeForBusiness.Checked = $False
						$checkboxExchangeOnline.Checked = $False
						$checkboxSkypeForBusiness.Enabled = $True
						$FormO365AdministrationCenter.Cursor = 'Default'
						$ButtonConnectTo365.Text = "Connect to O365"
						
						Show-PreReq_MSOnline_psf
					}
				}
				Elseif ($CredMem -eq 2)
				{
					$global:o365credentials = (Get-Credential -Message "Please enter your Office 365 credentials")
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Connecting to Office 365..."
					
					If (($SignOnAss -ne $Null) -or ($MSOnlinePreReqPrompt -eq 1))
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableMSOnlinePrompt -Value 1 -Force | Out-Null
						
						#$TextboxResults.Text = "Checking for the Azure module..."
						If ((Get-Module -ListAvailable -Name MSOnline) -or ($AzurePreReqPrompt -eq 1))
						{
							$FormO365AdministrationCenter.Cursor = 'WaitCursor'
							Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableAzurePrompt -Value 1 -Force | Out-Null
							
							#Show progress bar
							$progressbar1.Visible = $true
							
							#$TextboxResults.Text = "Connecting to O365..."
							$Ranges = 1 .. 50
							foreach ($range in $ranges)
							{
								$progressbar1.Value = $Range
							}
							
							Connect-MsolService -Credential $global:o365credentials
							$progressbar1.Value = 50
							
							#Disable the connect to o365 button
							$ButtonConnectTo365.Enabled = $False
							
							#Enable the disconnect button
							$ButtonDisconnect.Enabled = $True
							
							#Disable the checkboxes
							$checkboxExchangeOnline.Enabled = $false
							$checkboxSkypeForBusiness.Enabled = $false
							$checkboxSharepoint.Enabled = $false
							$checkboxComplianceCenter.Enabled = $False
							$progressbar1.Value = 51
							#Change button text
							$ButtonConnectTo365.Text = "Connected to O365"
							$progressbar1.Value = 52
							#The first checked check box for services will load the appropriate tab as default. 
							If ($checkboxComplianceCenter.checked)
							{
								$TabPageMaster.SelectedTab = $tabpageComplianceCenter
							}
							elseif ($checkboxExchangeOnline.Checked)
							{
								$TabPageMaster.SelectedTab = $tabpageExchangeOnline
							}
							elseif ($checkboxSharepoint.checked)
							{
								$TabPageMaster.SelectedTab = $tabpageSharePoint
							}
							elseif ($checkboxSkypeForBusiness.checked)
							{
								$TabPageMaster.SelectedTab = $tabpageSkypeForBusiness
							}
							$progressbar1.Value = 53
							#Set Tenant Status to 0 as we have not connected to any tenants yet
							Get-Item 'HKCU:\Software\O365 Admin Center' -Force | New-ItemProperty -Name TenantStatus -Value 0 -Force | Out-Null
							$progressbar1.Value = 54
							
							$partnerTIDs = Get-MsolPartnerContract -All | Select-Object TenantID
							$progressbar1.Value = 55
							
							#If tenant domains are available then load combobox with all tenants
							If ($partnerTIDs -ne $Null)
							{
								#Enables the Tenant button
								$TenantConnectButton.Enabled = $True
								$PartnerComboBox.Enabled = $True
								
								$domains = @()
								foreach ($TID in $partnerTIDs)
								{
									$domainName = Get-MsolDomain -TenantId $TID.TenantId | Where-Object { $_.IsDefault -eq 'True' }
									#$domainName = Get-MsolDomain -TenantId $TID.TenantId | Where-Object { $_.Name -notlike '*.onmicrosoft*' -and $_.Name -notlike '*.microsoftonline*' -and $_.Status -eq "Verified" }
									#$domainName = Get-MsolDomain -TenantId $TID.TenantId
									$domain = New-Object -TypeName PSObject
									$domain | Add-Member -Name 'Name' -MemberType NoteProperty -Value ($domainName.Name | Select-Object -First 1) #Deals with Tenants with multiple domain names asociated
									#$domain | Add-Member -Name 'Name' -MemberType NoteProperty -Value $domainName.Name
									$domain | Add-Member -Name TenantID -MemberType NoteProperty -Value $TID.TenantId
									$domains += $domain
								}
								$progressbar1.Value = 60
								#Loads Combobox with Tenants
								Load-ComboBox $PartnerComboBox $domains -DisplayMember Name
								
								#Enable the connect to tenant button
								$TenantConnectButton.Enabled = $true
							}
							
							#If no tenant domains are available then do the following
							Else
							{
								#Clear the combobox of items
								$PartnerComboBox.Text = ""
								
								#Disable combobox
								$PartnerComboBox.Enabled = $False
								
								#Disable the connect to tenant button
								$TenantConnectButton.Enabled = $false
							}
							
							$progressbar1.Value = 65
							
							#If compliance center checkbox is checked
							If ($checkboxComplianceCenter.Checked)
							{
								$TextboxResults.Text = "Connecting to Compliance Center..."
								$ccSession = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri https://ps.compliance.protection.outlook.com/powershell-liveid/ -Credential $global:o365credentials -Authentication Basic -AllowRedirection
								Import-PSSession $ccSession
								$TextboxResults.Text = ""
							}
							
							$progressbar1.Value = 70
							
							#If exchange online checkbox is checked
							If ($checkboxExchangeOnline.Checked)
							{
								
								$TextboxResults.Text = "Connecting to Exchange Online..."
								$exchangeSession = New-PSSession -Name MainAccount -ConfigurationName Microsoft.Exchange -ConnectionUri https://outlook.office365.com/powershell-liveid/ -Credential $global:o365credentials -Authentication Basic -AllowRedirection
								Import-PSSession $exchangeSession -AllowClobber
								
								
								$TextboxResults.Text = "Caching Users..."
								$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter")
								$UserListcombo = Get-MSOLUser -All | Select-Object -ExpandProperty UserPrincipalName | Out-File "$O365AdminTempFolder\upn.txt"
								Get-MSOLUser -All | Select-Object -ExpandProperty DisplayName | Out-File "$O365AdminTempFolder\names.txt"
								
								
								$TextboxResults.Text = ""
							}
							
							$progressbar1.Value = 80
							
							If ($checkboxSharepoint.Checked -and $checkboxExchangeOnline.Checked)
							{
								$TextboxResults.Text = "Checking for the SharePoint Online module..."
								if ((Get-Module -ListAvailable -Name Microsoft.Online.SharePoint.PowerShell) -or ($SharePointPreReqPrompt -eq 1))
								{
									Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableSharePointOnlinePrompt -Value 1 -Force | Out-Null
									
									$TextboxResults.Text = "Connecting to SharePoint Online..."
									#Grabs the Sharepoint URL attribtue with Absoluteuri header
									$SPOheaders = Get-OrganizationConfig | Select-Object -ExpandProperty SharepointUrl
									#Clears the header so we have a clean variable
									$SPOSite = $SPOheaders | Select-Object -ExpandProperty AbsoluteUri
									#Splits the URl into two parts so we can inject -admin
									$firsthalf = $SPOSite -split ('.sharepoint.com') | Select-Object -First 1
									$secondhalf = $SPOSite -split '(.sharepoint.com/)' | Select-Object -Last 2
									#Wrap it all up into a single URL with the -admin
									$SPOadminSite = "$Firsthalf" + "-admin" + "$secondhalf"
									$TextboxResults.Text = "Connecting to Sharepoint Online..."
									Import-Module Microsoft.Online.SharePoint.PowerShell -DisableNameChecking
									Connect-SPOService -Url $SPOadminSite -credential $global:o365credentials
									$TextboxResults.Text = ""
								}
								Else
								{
									$TextboxResults.Text = ""
									$textboxDetails.Text = ""
									$PartnerComboBox.Enabled = $True
									$ButtonConnectTo365.Enabled = $True
									$ButtonDisconnect.Enabled = $False
									#$TenantConnectButton.Enabled = $True
									$checkboxComplianceCenter.Enabled = $true
									$checkboxExchangeOnline.Enabled = $true
									$checkboxSharepoint.Enabled = $true
									$checkboxComplianceCenter.Checked = $False
									$checkboxSharepoint.Checked = $False
									$checkboxSkypeForBusiness.Checked = $False
									$checkboxExchangeOnline.Checked = $False
									$checkboxSkypeForBusiness.Enabled = $True
									$FormO365AdministrationCenter.Cursor = 'Default'
									$ButtonConnectTo365.Text = "Connect to O365"
									Show-PreRep_SharePoint_psf
								}
							}
							
							#If sharepoint checkbox is checked
							If ($checkboxSharepoint.Checked)
							{
								$TextboxResults.Text = "Checking for the SharePoint Online module..."
								if ((Get-Module -ListAvailable -Name Microsoft.Online.SharePoint.PowerShell) -or ($SharePointPreReqPrompt -eq 1))
								{
									#$Sharepointdomain = Read-Host "Enter the domain name. EX: contoso, yahoo"
									#Connect to Exchange online so we can grab the Sharepoint URL attribute 
									$TextboxResults.Text = "Connecting to SharePoint Online..."
									$exchangeSession = New-PSSession -Name MainAccount -ConfigurationName Microsoft.Exchange -ConnectionUri https://outlook.office365.com/powershell-liveid/ -Credential $global:o365credentials -Authentication Basic -AllowRedirection
									Import-PSSession $exchangeSession -AllowClobber
									$progressbar1.Value = 83
									#Grabs the Sharepoint URL attribtue with Absoluteuri header
									$SPOheaders = Get-OrganizationConfig | Select-Object -ExpandProperty SharepointUrl
									#Clears the header so we have a clean variable
									$SPOSite = $SPOheaders | Select-Object -ExpandProperty AbsoluteUri
									#Splits the URl into two parts so we can inject -admin
									$firsthalf = $SPOSite -split ('.sharepoint.com') | Select-Object -First 1
									$secondhalf = $SPOSite -split '(.sharepoint.com/)' | Select-Object -Last 2
									#Wrap it all up into a single URL with the -admin
									$SPOadminSite = "$Firsthalf" + "-admin" + "$secondhalf"
									$TextboxResults.Text = "Connecting to Sharepoint Online..."
									Import-Module Microsoft.Online.SharePoint.PowerShell -DisableNameChecking
									Connect-SPOService -Url $SPOadminSite -credential $global:o365credentials
									$TextboxResults.Text = ""
								}
								Else
								{
									$TextboxResults.Text = ""
									$textboxDetails.Text = ""
									$PartnerComboBox.Enabled = $True
									$ButtonConnectTo365.Enabled = $True
									$ButtonDisconnect.Enabled = $False
									#$TenantConnectButton.Enabled = $True
									$checkboxComplianceCenter.Enabled = $true
									$checkboxExchangeOnline.Enabled = $true
									$checkboxSharepoint.Enabled = $true
									$checkboxComplianceCenter.Checked = $False
									$checkboxSharepoint.Checked = $False
									$checkboxSkypeForBusiness.Checked = $False
									$checkboxExchangeOnline.Checked = $False
									$checkboxSkypeForBusiness.Enabled = $True
									$FormO365AdministrationCenter.Cursor = 'Default'
									$ButtonConnectTo365.Text = "Connect to O365"
									Show-PreRep_SharePoint_psf
								}
							}
							
							$progressbar1.Value = 90
							
							#If skype for business checkbox is checked
							If ($checkboxSkypeForBusiness.Checked)
							{
								$TextboxResults.Text = "Checking for the SkypeOnlineConnector module..."
								if ((Get-Module -ListAvailable -Name SkypeOnlineConnector) -or ($SkypeOnlineConnectorPreReqPrompt -eq 1))
								{
									$TextboxResults.Text = "Connecting to Skype for Business.."
									Import-Module SkypeOnlineConnector
									#Skype for business session
									$sfboSession = New-CsOnlineSession -Credential $global:o365credentials
									#Import Skype For Business Session
									Import-PSSession $sfboSession
									$TextboxResults.Text = ""
								}
								Else
								{
									$TextboxResults.Text = ""
									$textboxDetails.Text = ""
									$PartnerComboBox.Enabled = $True
									$ButtonConnectTo365.Enabled = $True
									$ButtonDisconnect.Enabled = $False
									#$TenantConnectButton.Enabled = $True
									$checkboxComplianceCenter.Enabled = $true
									$checkboxExchangeOnline.Enabled = $true
									$checkboxSharepoint.Enabled = $true
									$checkboxComplianceCenter.Checked = $False
									$checkboxSharepoint.Checked = $False
									$checkboxSkypeForBusiness.Checked = $False
									$checkboxExchangeOnline.Checked = $False
									$checkboxSkypeForBusiness.Enabled = $True
									$FormO365AdministrationCenter.Cursor = 'Default'
									$ButtonConnectTo365.Text = "Connect to O365"
									Show-PreReq_SkypeForBusiness_psf
								}
								
								
							}
							
							$progressbar1.Value = 100
							$FormO365AdministrationCenter.Cursor = 'Default'
						}
						Else
						{
							$TextboxResults.Text = ""
							$textboxDetails.Text = ""
							$PartnerComboBox.Enabled = $True
							$ButtonConnectTo365.Enabled = $True
							$ButtonDisconnect.Enabled = $False
							#$TenantConnectButton.Enabled = $True
							$checkboxComplianceCenter.Enabled = $true
							$checkboxExchangeOnline.Enabled = $true
							$checkboxSharepoint.Enabled = $true
							$checkboxComplianceCenter.Checked = $False
							$checkboxSharepoint.Checked = $False
							$checkboxSkypeForBusiness.Checked = $False
							$checkboxExchangeOnline.Checked = $False
							$checkboxSkypeForBusiness.Enabled = $True
							$FormO365AdministrationCenter.Cursor = 'Default'
							$ButtonConnectTo365.Text = "Connect to O365"
							Show-PreReq_Azure_psf
						}
					}
					Else
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						$PartnerComboBox.Enabled = $True
						$ButtonConnectTo365.Enabled = $True
						$ButtonDisconnect.Enabled = $False
						#$TenantConnectButton.Enabled = $True
						$checkboxComplianceCenter.Enabled = $true
						$checkboxExchangeOnline.Enabled = $true
						$checkboxSharepoint.Enabled = $true
						$checkboxComplianceCenter.Checked = $False
						$checkboxSharepoint.Checked = $False
						$checkboxSkypeForBusiness.Checked = $False
						$checkboxExchangeOnline.Checked = $False
						$checkboxSkypeForBusiness.Enabled = $True
						$FormO365AdministrationCenter.Cursor = 'Default'
						$ButtonConnectTo365.Text = "Connect to O365"
						
						Show-PreReq_MSOnline_psf
					}
				}
				Else
				{
					$global:o365credentials = (Get-Credential -Message "Please enter your Office 365 credentials")
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Connecting to Office 365..."
					
					If (($SignOnAss -ne $Null) -or ($MSOnlinePreReqPrompt -eq 1))
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableMSOnlinePrompt -Value 1 -Force | Out-Null
						
						#$TextboxResults.Text = "Checking for the Azure module..."
						If ((Get-Module -ListAvailable -Name MSOnline) -or ($AzurePreReqPrompt -eq 1))
						{
							$FormO365AdministrationCenter.Cursor = 'WaitCursor'
							Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableAzurePrompt -Value 1 -Force | Out-Null
							
							#Show progress bar
							$progressbar1.Visible = $true
							
							#$TextboxResults.Text = "Connecting to O365..."
							$Ranges = 1 .. 50
							foreach ($range in $ranges)
							{
								$progressbar1.Value = $Range
							}
							
							Connect-MsolService -Credential $global:o365credentials
							$progressbar1.Value = 50
							
							#Disable the connect to o365 button
							$ButtonConnectTo365.Enabled = $False
							
							#Enable the disconnect button
							$ButtonDisconnect.Enabled = $True
							
							#Disable the checkboxes
							$checkboxExchangeOnline.Enabled = $false
							$checkboxSkypeForBusiness.Enabled = $false
							$checkboxSharepoint.Enabled = $false
							$checkboxComplianceCenter.Enabled = $False
							$progressbar1.Value = 51
							#Change button text
							$ButtonConnectTo365.Text = "Connected to O365"
							$progressbar1.Value = 52
							#The first checked check box for services will load the appropriate tab as default. 
							If ($checkboxComplianceCenter.checked)
							{
								$TabPageMaster.SelectedTab = $tabpageComplianceCenter
							}
							elseif ($checkboxExchangeOnline.Checked)
							{
								$TabPageMaster.SelectedTab = $tabpageExchangeOnline
							}
							elseif ($checkboxSharepoint.checked)
							{
								$TabPageMaster.SelectedTab = $tabpageSharePoint
							}
							elseif ($checkboxSkypeForBusiness.checked)
							{
								$TabPageMaster.SelectedTab = $tabpageSkypeForBusiness
							}
							$progressbar1.Value = 53
							#Set Tenant Status to 0 as we have not connected to any tenants yet
							Get-Item 'HKCU:\Software\O365 Admin Center' -Force | New-ItemProperty -Name TenantStatus -Value 0 -Force | Out-Null
							$progressbar1.Value = 54
							
							$partnerTIDs = Get-MsolPartnerContract -All | Select-Object TenantID
							$progressbar1.Value = 55
							
							#If tenant domains are available then load combobox with all tenants
							If ($partnerTIDs -ne $Null)
							{
								#Enables the Tenant button
								$TenantConnectButton.Enabled = $True
								$PartnerComboBox.Enabled = $True
								
								$domains = @()
								foreach ($TID in $partnerTIDs)
								{
									$domainName = Get-MsolDomain -TenantId $TID.TenantId | Where-Object { $_.IsDefault -eq 'True' }
									#$domainName = Get-MsolDomain -TenantId $TID.TenantId | Where-Object { $_.Name -notlike '*.onmicrosoft*' -and $_.Name -notlike '*.microsoftonline*' -and $_.Status -eq "Verified" }
									#$domainName = Get-MsolDomain -TenantId $TID.TenantId
									$domain = New-Object -TypeName PSObject
									$domain | Add-Member -Name 'Name' -MemberType NoteProperty -Value ($domainName.Name | Select-Object -First 1) #Deals with Tenants with multiple domain names asociated
									#$domain | Add-Member -Name 'Name' -MemberType NoteProperty -Value $domainName.Name
									$domain | Add-Member -Name TenantID -MemberType NoteProperty -Value $TID.TenantId
									$domains += $domain
								}
								$progressbar1.Value = 60
								#Loads Combobox with Tenants
								Load-ComboBox $PartnerComboBox $domains -DisplayMember Name
								
								#Enable the connect to tenant button
								$TenantConnectButton.Enabled = $true
							}
							
							#If no tenant domains are available then do the following
							Else
							{
								#Clear the combobox of items
								$PartnerComboBox.Text = ""
								
								#Disable combobox
								$PartnerComboBox.Enabled = $False
								
								#Disable the connect to tenant button
								$TenantConnectButton.Enabled = $false
							}
							
							$progressbar1.Value = 65
							
							#If compliance center checkbox is checked
							If ($checkboxComplianceCenter.Checked)
							{
								$TextboxResults.Text = "Connecting to Compliance Center..."
								$ccSession = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri https://ps.compliance.protection.outlook.com/powershell-liveid/ -Credential $global:o365credentials -Authentication Basic -AllowRedirection
								Import-PSSession $ccSession
								$TextboxResults.Text = ""
							}
							
							$progressbar1.Value = 70
							
							#If exchange online checkbox is checked
							If ($checkboxExchangeOnline.Checked)
							{
								
								$TextboxResults.Text = "Connecting to Exchange Online..."
								$exchangeSession = New-PSSession -Name MainAccount -ConfigurationName Microsoft.Exchange -ConnectionUri https://outlook.office365.com/powershell-liveid/ -Credential $global:o365credentials -Authentication Basic -AllowRedirection
								Import-PSSession $exchangeSession -AllowClobber
								
								
								$TextboxResults.Text = "Caching Users..."
								$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter")
								$UserListcombo = Get-MSOLUser -All | Select-Object -ExpandProperty UserPrincipalName | Out-File "$O365AdminTempFolder\upn.txt"
								Get-MSOLUser -All | Select-Object -ExpandProperty DisplayName | Out-File "$O365AdminTempFolder\names.txt"
								
								
								$TextboxResults.Text = ""
							}
							
							$progressbar1.Value = 80
							
							If ($checkboxSharepoint.Checked -and $checkboxExchangeOnline.Checked)
							{
								$TextboxResults.Text = "Checking for the SharePoint Online module..."
								if ((Get-Module -ListAvailable -Name Microsoft.Online.SharePoint.PowerShell) -or ($SharePointPreReqPrompt -eq 1))
								{
									Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableSharePointOnlinePrompt -Value 1 -Force | Out-Null
									
									$TextboxResults.Text = "Connecting to SharePoint Online..."
									#Grabs the Sharepoint URL attribtue with Absoluteuri header
									$SPOheaders = Get-OrganizationConfig | Select-Object -ExpandProperty SharepointUrl
									#Clears the header so we have a clean variable
									$SPOSite = $SPOheaders | Select-Object -ExpandProperty AbsoluteUri
									#Splits the URl into two parts so we can inject -admin
									$firsthalf = $SPOSite -split ('.sharepoint.com') | Select-Object -First 1
									$secondhalf = $SPOSite -split '(.sharepoint.com/)' | Select-Object -Last 2
									#Wrap it all up into a single URL with the -admin
									$SPOadminSite = "$Firsthalf" + "-admin" + "$secondhalf"
									$TextboxResults.Text = "Connecting to Sharepoint Online..."
									Import-Module Microsoft.Online.SharePoint.PowerShell -DisableNameChecking
									Connect-SPOService -Url $SPOadminSite -credential $global:o365credentials
									$TextboxResults.Text = ""
								}
								Else
								{
									$TextboxResults.Text = ""
									$textboxDetails.Text = ""
									$PartnerComboBox.Enabled = $True
									$ButtonConnectTo365.Enabled = $True
									$ButtonDisconnect.Enabled = $False
									#$TenantConnectButton.Enabled = $True
									$checkboxComplianceCenter.Enabled = $true
									$checkboxExchangeOnline.Enabled = $true
									$checkboxSharepoint.Enabled = $true
									$checkboxComplianceCenter.Checked = $False
									$checkboxSharepoint.Checked = $False
									$checkboxSkypeForBusiness.Checked = $False
									$checkboxExchangeOnline.Checked = $False
									$checkboxSkypeForBusiness.Enabled = $True
									$FormO365AdministrationCenter.Cursor = 'Default'
									$ButtonConnectTo365.Text = "Connect to O365"
									Show-PreRep_SharePoint_psf
								}
							}
							
							#If sharepoint checkbox is checked
							If ($checkboxSharepoint.Checked)
							{
								$TextboxResults.Text = "Checking for the SharePoint Online module..."
								if ((Get-Module -ListAvailable -Name Microsoft.Online.SharePoint.PowerShell) -or ($SharePointPreReqPrompt -eq 1))
								{
									#$Sharepointdomain = Read-Host "Enter the domain name. EX: contoso, yahoo"
									#Connect to Exchange online so we can grab the Sharepoint URL attribute 
									$TextboxResults.Text = "Connecting to SharePoint Online..."
									$exchangeSession = New-PSSession -Name MainAccount -ConfigurationName Microsoft.Exchange -ConnectionUri https://outlook.office365.com/powershell-liveid/ -Credential $global:o365credentials -Authentication Basic -AllowRedirection
									Import-PSSession $exchangeSession -AllowClobber
									$progressbar1.Value = 83
									#Grabs the Sharepoint URL attribtue with Absoluteuri header
									$SPOheaders = Get-OrganizationConfig | Select-Object -ExpandProperty SharepointUrl
									#Clears the header so we have a clean variable
									$SPOSite = $SPOheaders | Select-Object -ExpandProperty AbsoluteUri
									#Splits the URl into two parts so we can inject -admin
									$firsthalf = $SPOSite -split ('.sharepoint.com') | Select-Object -First 1
									$secondhalf = $SPOSite -split '(.sharepoint.com/)' | Select-Object -Last 2
									#Wrap it all up into a single URL with the -admin
									$SPOadminSite = "$Firsthalf" + "-admin" + "$secondhalf"
									$TextboxResults.Text = "Connecting to Sharepoint Online..."
									Import-Module Microsoft.Online.SharePoint.PowerShell -DisableNameChecking
									Connect-SPOService -Url $SPOadminSite -credential $global:o365credentials
									$TextboxResults.Text = ""
								}
								Else
								{
									$TextboxResults.Text = ""
									$textboxDetails.Text = ""
									$PartnerComboBox.Enabled = $True
									$ButtonConnectTo365.Enabled = $True
									$ButtonDisconnect.Enabled = $False
									#$TenantConnectButton.Enabled = $True
									$checkboxComplianceCenter.Enabled = $true
									$checkboxExchangeOnline.Enabled = $true
									$checkboxSharepoint.Enabled = $true
									$checkboxComplianceCenter.Checked = $False
									$checkboxSharepoint.Checked = $False
									$checkboxSkypeForBusiness.Checked = $False
									$checkboxExchangeOnline.Checked = $False
									$checkboxSkypeForBusiness.Enabled = $True
									$FormO365AdministrationCenter.Cursor = 'Default'
									$ButtonConnectTo365.Text = "Connect to O365"
									Show-PreRep_SharePoint_psf
								}
							}
							
							$progressbar1.Value = 90
							
							#If skype for business checkbox is checked
							If ($checkboxSkypeForBusiness.Checked)
							{
								$TextboxResults.Text = "Checking for the SkypeOnlineConnector module..."
								if ((Get-Module -ListAvailable -Name SkypeOnlineConnector) -or ($SkypeOnlineConnectorPreReqPrompt -eq 1))
								{
									$TextboxResults.Text = "Connecting to Skype for Business.."
									Import-Module SkypeOnlineConnector
									#Skype for business session
									$sfboSession = New-CsOnlineSession -Credential $global:o365credentials
									#Import Skype For Business Session
									Import-PSSession $sfboSession
									$TextboxResults.Text = ""
								}
								Else
								{
									$TextboxResults.Text = ""
									$textboxDetails.Text = ""
									$PartnerComboBox.Enabled = $True
									$ButtonConnectTo365.Enabled = $True
									$ButtonDisconnect.Enabled = $False
									#$TenantConnectButton.Enabled = $True
									$checkboxComplianceCenter.Enabled = $true
									$checkboxExchangeOnline.Enabled = $true
									$checkboxSharepoint.Enabled = $true
									$checkboxComplianceCenter.Checked = $False
									$checkboxSharepoint.Checked = $False
									$checkboxSkypeForBusiness.Checked = $False
									$checkboxExchangeOnline.Checked = $False
									$checkboxSkypeForBusiness.Enabled = $True
									$FormO365AdministrationCenter.Cursor = 'Default'
									$ButtonConnectTo365.Text = "Connect to O365"
									Show-PreReq_SkypeForBusiness_psf
								}
								
								
							}
							
							$progressbar1.Value = 100
							$FormO365AdministrationCenter.Cursor = 'Default'
						}
						Else
						{
							$TextboxResults.Text = ""
							$textboxDetails.Text = ""
							$PartnerComboBox.Enabled = $True
							$ButtonConnectTo365.Enabled = $True
							$ButtonDisconnect.Enabled = $False
							#$TenantConnectButton.Enabled = $True
							$checkboxComplianceCenter.Enabled = $true
							$checkboxExchangeOnline.Enabled = $true
							$checkboxSharepoint.Enabled = $true
							$checkboxComplianceCenter.Checked = $False
							$checkboxSharepoint.Checked = $False
							$checkboxSkypeForBusiness.Checked = $False
							$checkboxExchangeOnline.Checked = $False
							$checkboxSkypeForBusiness.Enabled = $True
							$FormO365AdministrationCenter.Cursor = 'Default'
							$ButtonConnectTo365.Text = "Connect to O365"
							Show-PreReq_Azure_psf
						}
					}
					Else
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						$PartnerComboBox.Enabled = $True
						$ButtonConnectTo365.Enabled = $True
						$ButtonDisconnect.Enabled = $False
						#$TenantConnectButton.Enabled = $True
						$checkboxComplianceCenter.Enabled = $true
						$checkboxExchangeOnline.Enabled = $true
						$checkboxSharepoint.Enabled = $true
						$checkboxComplianceCenter.Checked = $False
						$checkboxSharepoint.Checked = $False
						$checkboxSkypeForBusiness.Checked = $False
						$checkboxExchangeOnline.Checked = $False
						$checkboxSkypeForBusiness.Enabled = $True
						$FormO365AdministrationCenter.Cursor = 'Default'
						$ButtonConnectTo365.Text = "Connect to O365"
						
						Show-PreReq_MSOnline_psf
					}
				}
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'Default'
				Show-SelecPreReqExecutionPolicy_psf
			}
		}
	}
	Catch
	{
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		$PartnerComboBox.Enabled = $True
		$ButtonConnectTo365.Enabled = $True
		$ButtonDisconnect.Enabled = $False
		#$TenantConnectButton.Enabled = $True
		$checkboxComplianceCenter.Enabled = $true
		$checkboxExchangeOnline.Enabled = $true
		$checkboxSharepoint.Enabled = $true
		$checkboxComplianceCenter.Checked = $False
		$checkboxSharepoint.Checked = $False
		$checkboxSkypeForBusiness.Checked = $False
		$checkboxExchangeOnline.Checked = $False
		$checkboxSkypeForBusiness.Enabled = $True
		$FormO365AdministrationCenter.Cursor = 'Default'
		$ButtonConnectTo365.Text = "Connect to O365"
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	#Hide the progress bar
	$progressbar1.Visible = $false
	
}

$TenantConnectButton_Click = {
	try
	{
		
		#Show the proress bar
		$progressbar1.Visible = $true
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$URI = "https://outlook.office365.com/powershell-liveid?DelegatedOrg=" + $PartnerComboBox.SelectedItem.Name
		
		#Remove all sessions
		Get-PSSession | Remove-PSSession
		$progressbar1.Value = 65
		
		#CONNECT TO EXCHANGE ONLINE
		$TextboxResults.Text = "Connecting to partner account..."
		$progressbar1.Value = 70
		$PartnerSession = New-PSSession -Name PartnerAccount -ConfigurationName Microsoft.Exchange -ConnectionUri $URI -Credential $global:o365credentials -Authentication Basic -AllowRedirection
		$progressbar1.Value = 75
		Import-PSSession $PartnerSession -AllowClobber
		$progressbar1.Value = 80
		
		Connect-MsolService -Credential $global:o365credentials
		
		$TextboxResults.Text = "Caching User Principal Names..."
		$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter")
		$UserListcombo = Get-MSOLUser -TenantId $PartnerComboBox.SelectedItem.TenantID -All | Select-Object -ExpandProperty UserPrincipalName | Out-File "$O365AdminTempFolder\upn.txt"
		Get-MSOLUser -TenantId $PartnerComboBox.SelectedItem.TenantID -All | Select-Object -ExpandProperty DisplayName | Out-File "$O365AdminTempFolder\names.txt"
		
		$progressbar1.Value = 90
		
		#Disable the connect to tenant button
		$TenantConnectButton.Enabled = $false
		
		#Sets custom form text
		$FormO365AdministrationCenter.Text = "-Connected to " + $PartnerComboBox.SelectedItem.Name + "-"
		
		#Clear textboxes
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		
		#Disable the partner combobox
		$PartnerComboBox.Enabled = $false
		
		#Enable the disconnect button
		$ButtonDisconnect.Enabled = $True
		
		#Sets custom button text
		$TenantConnectButton.Text = "Connected to Partner"
		$progressbar1.Value = 100
		
		If ($checkboxComplianceCenter.checked)
		{
			$TabPageMaster.SelectedTab = $tabpageComplianceCenter
		}
		elseif ($checkboxExchangeOnline.Checked)
		{
			$TabPageMaster.SelectedTab = $tabpageExchangeOnline
		}
		elseif ($checkboxSharepoint.checked)
		{
			$TabPageMaster.SelectedTab = $tabpageSharePoint
		}
		elseif ($checkboxSkypeForBusiness.checked)
		{
			$TabPageMaster.SelectedTab = $tabpageSkypeForBusiness
		}
		
		Get-Item 'HKCU:\Software\O365 Admin Center' -Force | New-ItemProperty -Name TenantStatus -Value 1 -Force | Out-Null
		
		#Disable the checkboxes
		$checkboxExchangeOnline.Enabled = $false
		$checkboxSkypeForBusiness.Enabled = $false
		$checkboxSharepoint.Enabled = $false
		$checkboxComplianceCenter.Enabled = $False
		
		$ButtonConnectTo365.Enabled = $false
		
		$ButtonDisconnect.Text = "Disconnect from Tenant"
		
		#Deletes the old pf  files
		$TempDir = $env:temp
		$CachedFiles = ("$TempDir" + "\O365AdminCenter\pf.txt")
		Remove-Item $CachedFiles
		$FormO365AdministrationCenter.Cursor = 'Default'
		
	}
	catch
	{
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	#Hide the progress bar
	$progressbar1.Visible = $false
}

$ButtonExportToFile_Click = {
<#	$SavedFile = Read-Host "Enter the Path for file (Eg. C:\DG.csv, C:\Users.txt, C:\output\info.doc)"
	try
	{
		$TextboxResults.Text | out-file $SavedFile
		[System.Windows.Forms.MessageBox]::Show("Saved $SavedFile", "Info")
	}
	Catch
	{
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}

	$savedialog = New-Object windows.forms.savefiledialog
	$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
	$savedialog.title = "Export to File"
	$savedialog.filter = ".doc|*.doc|.csv|*.csv|.txt|*.txt"
	$savedialog.ShowHelp = $True
	$result = $savedialog.ShowDialog(); $result
	if ($result -eq "OK")
	{
		$TextboxResults.Text | Out-File -Encoding Default $savedialog.filename 
	}
	else
	{
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("Could not save the file", "Error")
	}
	#>
}

$ButtonRunCustomCommand_Click = {
	$userinput = $TextboxResults.text
	try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		#Takes the user input to a variable and passes it to the shell
		$TextboxResults.text = Invoke-Expression $userinput | Out-String
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		$FormO365AdministrationCenter.Cursor = 'Default'
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}



###USERS###

	#User General Items

$createOutOfOfficeAutoReplyForAUserToolStripMenuItem_Click = {
	Do
	{
		#$OOOautoreplyUser = Read-Host "What user is the Out Of Office auto reply for?"
		$SelectUsersFormText = "Select the User you want to create an Out of Office Reply for"
		#Call-SelectUsersForm_psf
		Show-SelectCachedDisplayNames_psf
		#$GlobalUPNooouser = $SelectUsersForm_comboboxUsers
		$GlobalUPNooouser = $SelectCachedDisplayNames_comboboxNames
		
		Try
		{
			If (!$GlobalUPNooouser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("Please select a user you want to create an Out of Office Reply for", "Error")
			}
			Else
			{
				$OOOInternal = Read-Host "What is the Internal Message"
				If (!$OOOInternal)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("Please enter an Internal out of office message", "Error")
				}
				Else
				{
					$OOOExternal = Read-Host "What is the External Message"
					If (!$OOOExternal)
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						[System.Windows.Forms.MessageBox]::Show("Please enter an External Out of Office Reply", "Error")
					}
					Else
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Creating an Out of Office reply for $GlobalUPNooouser..."
						$textboxDetails.Text = "Set-MailboxAutoReplyConfiguration -Identity $GlobalUPNooouser -AutoReplyState Enabled -ExternalMessage $OOOExternal -InternalMessage $OOOInternal"
						Set-MailboxAutoReplyConfiguration -Identity $GlobalUPNooouser -AutoReplyState Enabled -ExternalMessage $OOOExternal -InternalMessage $OOOInternal
						$TextboxResults.Text = Get-MailboxAutoReplyConfiguration -Identity $GlobalUPNooouser | Format-List | Out-String -Width 2147483647
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
				}
				
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to create an Out of Office Message for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$disableOutOfOfficeReplyForAUserToolStripMenuItem_Click = {
	Do
	{
		#$OOOautoreplyUser = Read-Host "What user is the Out Of Office auto reply for?"
		$SelectUsersFormText = "Select the user you want to disable an Out of Office reply for"
		#Call-SelectUsersForm_psf
		Show-SelectCachedDisplayNames_psf
		#$GlobalUPNooouser = $SelectUsersForm_comboboxUsers
		$GlobalUPNooouser = $SelectCachedDisplayNames_comboboxNames
		
		Try
		{
			If (!$GlobalUPNooouser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User selected, please select a User.", "Error")
				
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Disabling an Out of Office reply for $GlobalUPNooouser..."
				$textboxDetails.Text = "Set-MailboxAutoReplyConfiguration -Identity $GlobalUPNooouser -AutoReplyState Disabled"
				Set-MailboxAutoReplyConfiguration -Identity $GlobalUPNooouser -AutoReplyState Disabled
				$TextboxResults.Text = Get-MailboxAutoReplyConfiguration -Identity $GlobalUPNooouser | Format-List | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to disable an Out of Office reply for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getListOfUsersToolStripMenuItem_Click = {
	Try
	{
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting list of users..."
			$textboxDetails.Text = "Get-MSOLUser -All | Sort-Object DisplayName |  Format-Table DisplayName, UserPrincipalName -AutoSize"
			$TextboxResults.text = Get-MSOLUser -All | Sort-Object DisplayName | Format-Table DisplayName, UserPrincipalName -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting list of users..."
			$textboxDetails.Text = "Get-MSOLUser -TenantId $TenantText -All | Sort-Object DisplayName |  Format-Table DisplayName, UserPrincipalName -AutoSize "
			$TextboxResults.text = Get-MSOLUser -TenantId $PartnerComboBox.SelectedItem.TenantID -All | Sort-Object DisplayName | Format-Table DisplayName, UserPrincipalName -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting list of users..."
			$textboxDetails.Text = "Get-MSOLUser -All | Sort-Object DisplayName |  Format-Table DisplayName, UserPrincipalName -AutoSize"
			$TextboxResults.text = Get-MSOLUser -All | Sort-Object DisplayName | Format-Table DisplayName, UserPrincipalName -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getDetailedInfoForAUserToolStripMenuItem_Click = {
	Do
	{
		$SelectUsersFormText = "Select the User you want to view detailed information for"
		#Call-SelectUsersForm_psf
		Show-SelectCachedUserPrincipalName_psf
		#$GlobalUPN = $SelectUsersForm_comboboxUsers
		$GlobalUPN = $SelectCachedUserPrincipalName_comboboxUPN
		Try
		{
			If (!$GlobalUPN)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User selected, please select a User.", "Error")
			}
			ElseIf (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting detailed info for $GlobalUPN..."
				$textboxDetails.Text = "Get-MsolUser -UserPrincipalName $GlobalUPN | Format-List"
				$TextboxResults.text = Get-MsolUser -UserPrincipalName $GlobalUPN | Format-List | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
			{
				$TenantText = $PartnerComboBox.text
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting detailed info for $GlobalUPN..."
				$textboxDetails.Text = "Get-MsolUser -UserPrincipalName $GlobalUPN -TenantId $TenantText | Format-List"
				$TextboxResults.text = Get-MsolUser -UserPrincipalName $GlobalUPN -TenantId $PartnerComboBox.SelectedItem.TenantID | Format-List | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting detailed info for $GlobalUPN..."
				$textboxDetails.Text = "Get-MsolUser -UserPrincipalName $GlobalUPN | Format-List"
				$TextboxResults.text = Get-MsolUser -UserPrincipalName $GlobalUPN | Format-List | Out-String -Width 2147483647
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get detailed information for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$changeUsersLoginNameToolStripMenuItem_Click = {
	Do
	{
		$SelectUsersFormText = "Select the User you want to change the User Principal Name for"
		#Call-SelectUsersForm_psf
		Show-SelectCachedUserPrincipalName_psf
		#$GlobalUPN = $SelectUsersForm_comboboxUsers
		$GlobalUPN = $SelectCachedUserPrincipalName_comboboxUPN
		$NewUserUPN = Read-Host "What would you like the new username to be?"
		Try
		{
			If ((!$GlobalUPN) -or (!$NewUserUPN))
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("One of the values appears to be empty. Please select a user that you want to change the UPN for and enter a valid new UPN.", "Error")
			}
			ElseIf (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Changing $GlobalUPN UPN to $NewUserUPN..."
				$textboxDetails.Text = "Set-MsolUserPrincipalname -UserPrincipalName $GlobalUPN -NewUserPrincipalName $NewUserUPN"
				Set-MsolUserPrincipalname -UserPrincipalName $GlobalUPN -NewUserPrincipalName $NewUserUPN
				$TextboxResults.text = Get-MSOLUser -UserPrincipalName $NewUserUPN | Format-List UserPrincipalName | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TenantText = $PartnerComboBox.text
				$TextboxResults.Text = "Changing $GlobalUPN UPN to $NewUserUPN..."
				$textboxDetails.Text = "Set-MsolUserPrincipalname -UserPrincipalName $GlobalUPN -TenantId $TenantText -NewUserPrincipalName $NewUserUPN"
				Set-MsolUserPrincipalname -UserPrincipalName $GlobalUPN -TenantId $PartnerComboBox.SelectedItem.TenantID -NewUserPrincipalName $NewUserUPN
				$TextboxResults.text = Get-MSOLUser -UserPrincipalName $NewUserUPN -TenantId $PartnerComboBox.SelectedItem.TenantID | Format-List UserPrincipalName | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Changing $GlobalUPN UPN to $NewUserUPN..."
				$textboxDetails.Text = "Set-MsolUserPrincipalname -UserPrincipalName $GlobalUPN -NewUserPrincipalName $NewUserUPN"
				Set-MsolUserPrincipalname -UserPrincipalName $GlobalUPN -NewUserPrincipalName $NewUserUPN
				$TextboxResults.text = Get-MSOLUser -UserPrincipalName $NewUserUPN | Format-List UserPrincipalName | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
			
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to change the UPN for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$deleteAUserToolStripMenuItem_Click = {
	Do
	{
		#$DeleteUser = Read-Host "Enter the UPN of the user you want to delete"
		$SelectUsersFormText = "Select the User you want to delete"
		#Call-SelectUsersForm_psf
		Show-SelectCachedUserPrincipalName_psf
		#$GlobalUPNdelete = $SelectUsersForm_comboboxUsers
		$GlobalUPNdelete = $SelectCachedUserPrincipalName_comboboxUPN
		Try
		{
			If (!$GlobalUPNdelete)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User selected, please select a User.", "Error")
			}
			Else
			{
				$OUTPUT = [System.Windows.Forms.MessageBox]::Show("Are you sure you want to delete $GlobalUPNdelete ?", "Warning!", 4)
				If ($OUTPUT -eq "YES")
				{
					#What to do if connected to main o365 account
					If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Deleting $GlobalUPNdelete..."
						$textboxDetails.Text = "Remove-MsolUser –UserPrincipalName $GlobalUPNdelete"
						$TextboxResults.text = Remove-MsolUser –UserPrincipalName $GlobalUPNdelete | Format-List UserPrincipalName | Out-String -Width 2147483647
						$TempDir = $env:temp
						$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter")
						$FullFile = "$O365AdminTempFolder\upn.txt"
						Remove-Item $FullFile -Force
						#$TextboxResults.Text = "re-caching Users..."
						$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter")
						$UserListcombo = Get-MSOLUser -All | Select-Object -ExpandProperty UserPrincipalName | Out-File "$O365AdminTempFolder\upn.txt"
						Get-MSOLUser -All | Select-Object -ExpandProperty DisplayName | Out-File "$O365AdminTempFolder\names.txt"
						$FormO365AdministrationCenter.Cursor = 'Default'
						$TextboxResults.Text = "$GlobalUPNdelete was deleted"
					}
					#What to do if connected to partner account
					ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
					{
						$TenantText = $PartnerComboBox.text
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Deleting $GlobalUPNdelete..."
						$textboxDetails.Text = "Remove-MsolUser –UserPrincipalName $GlobalUPNdelete -TenantId $TenantText"
						$TextboxResults.text = Remove-MsolUser –UserPrincipalName $GlobalUPNdelete -TenantId $PartnerComboBox.SelectedItem.TenantID | Format-List UserPrincipalName | Out-String -Width 2147483647
						$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter")
						$FullFile = "$O365AdminTempFolder\upn.txt"
						Remove-Item $FullFile -Force
						#$TextboxResults.Text = "re-caching Users..."
						$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter")
						$UserListcombo = Get-MSOLUser -TenantId $PartnerComboBox.SelectedItem.TenantID -All | Select-Object -ExpandProperty UserPrincipalName | Out-File "$O365AdminTempFolder\upn.txt"
						Get-MSOLUser -TenantId $PartnerComboBox.SelectedItem.TenantID -All | Select-Object -ExpandProperty DisplayName | Out-File "$O365AdminTempFolder\names.txt"
						$FormO365AdministrationCenter.Cursor = 'Default'
						$TextboxResults.Text = "$GlobalUPNdelete was deleted"
					}
					Else
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Deleting $GlobalUPNdelete..."
						$textboxDetails.Text = "Remove-MsolUser –UserPrincipalName $GlobalUPNdelete"
						$TextboxResults.text = Remove-MsolUser –UserPrincipalName $GlobalUPNdelete | Format-List UserPrincipalName | Out-String -Width 2147483647
						$TempDir = $env:temp
						$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter")
						$FullFile = "$O365AdminTempFolder\upn.txt"
						Remove-Item $FullFile -Force
						#$TextboxResults.Text = "re-caching Users..."
						$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter")
						$UserListcombo = Get-MSOLUser -All | Select-Object -ExpandProperty UserPrincipalName | Out-File "$O365AdminTempFolder\upn.txt"
						Get-MSOLUser -All | Select-Object -ExpandProperty DisplayName | Out-File "$O365AdminTempFolder\names.txt"
						$FormO365AdministrationCenter.Cursor = 'Default'
						$TextboxResults.Text = "$GlobalUPNdelete was deleted"
					}
				}
				Else
				{
					[System.Windows.Forms.MessageBox]::Show("$GlobalUPNdelete was not deleted", "Info")
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to delete another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$createANewUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$Firstname = Read-Host "Enter the First Name for the new User"
			If (!$Firstname)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No first name was entered for the new User. Please enter a valid first name", "Error")
				
			}
			Else
			{
				$LastName = Read-Host "Enter the Last Name for the new User"
				If (!$LastName)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No last name was entered for the new User. Please enter a valid last name", "Error")
				}
				Else
				{
					$DisplayName = Read-Host "Enter the Display Name for the new User"
					If (!$DisplayName)
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						[System.Windows.Forms.MessageBox]::Show("No Display Name was entered for the new User. Please enter a valid Display Name", "Error")
					}
					Else
					{
						$NewUser = Read-Host "Enter the UPN for the new user"
						If (!$NewUser)
						{
							$TextboxResults.Text = ""
							$textboxDetails.Text = ""
							[System.Windows.Forms.MessageBox]::Show("No UPN was entered for the new User. Please enter a valid UPN", "Error")
						}
						Else
						{
							#What to do if connected to main o365 account
							If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
							{
								$FormO365AdministrationCenter.Cursor = 'WaitCursor'
								$TextboxResults.Text = "Creating user $NewUser..."
								$textboxDetails.Text = "New-MsolUser -UserPrincipalName $NewUser -FirstName $Firstname -LastName $LastName -DisplayName $DisplayName"
								$TextboxResults.text = New-MsolUser -UserPrincipalName $NewUser -FirstName $Firstname -LastName $LastName -DisplayName $DisplayName | Format-List | Out-String -Width 2147483647
								$TempDir = $env:temp
								$upns = ("$TempDir" + "\O365AdminCenter\upn.txt")
								$names = ("$TempDir" + "\O365AdminCenter\names.txt")
								Remove-Item $upns -Force
								Remove-Item $names -Force
								#$TextboxResults.Text = "re-caching Users..."
								$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter")
								$UserListcombo = Get-MSOLUser -All | Select-Object -ExpandProperty UserPrincipalName | Out-File "$O365AdminTempFolder\upn.txt"
								Get-MSOLUser -All | Select-Object -ExpandProperty DisplayName | Out-File "$O365AdminTempFolder\names.txt"
								$FormO365AdministrationCenter.Cursor = 'Default'
							}
							#What to do if connected to partner account
							ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
							{
								$TenantText = $PartnerComboBox.text
								$FormO365AdministrationCenter.Cursor = 'WaitCursor'
								$TextboxResults.Text = "Creating user $NewUser..."
								$textboxDetails.Text = "New-MsolUser -TenantId $TenantText -UserPrincipalName $NewUser -FirstName $Firstname -LastName $LastName -DisplayName $DisplayName"
								$TextboxResults.text = New-MsolUser -TenantId $PartnerComboBox.SelectedItem.TenantID -UserPrincipalName $NewUser -FirstName $Firstname -LastName $LastName -DisplayName $DisplayName | Format-List | Out-String -Width 2147483647
								$TempDir = $env:temp
								$upns = ("$TempDir" + "\O365AdminCenter\upn.txt")
								$names = ("$TempDir" + "\O365AdminCenter\names.txt")
								Remove-Item $upns -Force
								Remove-Item $names -Force
								#$TextboxResults.Text = "re-caching User Principal Names..."
								$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter")
								$UserListcombo = Get-MSOLUser -TenantId $PartnerComboBox.SelectedItem.TenantID -All | Select-Object -ExpandProperty UserPrincipalName | Out-File "$O365AdminTempFolder\upn.txt"
								Get-MSOLUser -TenantId $PartnerComboBox.SelectedItem.TenantID -All | Select-Object -ExpandProperty DisplayName | Out-File "$O365AdminTempFolder\names.txt"
								$FormO365AdministrationCenter.Cursor = 'Default'
							}
							Else
							{
								$FormO365AdministrationCenter.Cursor = 'WaitCursor'
								$TextboxResults.Text = "Creating user $NewUser..."
								$textboxDetails.Text = "New-MsolUser -UserPrincipalName $NewUser -FirstName $Firstname -LastName $LastName -DisplayName $DisplayName"
								$TextboxResults.text = New-MsolUser -UserPrincipalName $NewUser -FirstName $Firstname -LastName $LastName -DisplayName $DisplayName | Format-List | Out-String -Width 2147483647
								$TempDir = $env:temp
								$upns = ("$TempDir" + "\O365AdminCenter\upn.txt")
								$names = ("$TempDir" + "\O365AdminCenter\names.txt")
								Remove-Item $upns -Force
								Remove-Item $names -Force
								#$TextboxResults.Text = "re-caching Users..."
								$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter")
								$UserListcombo = Get-MSOLUser -All | Select-Object -ExpandProperty UserPrincipalName | Out-File "$O365AdminTempFolder\upn.txt"
								Get-MSOLUser -All | Select-Object -ExpandProperty DisplayName | Out-File "$O365AdminTempFolder\names.txt"
								$FormO365AdministrationCenter.Cursor = 'Default'
							}
						}
					}
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to create another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$disableUserAccountToolStripMenuItem_Click = {
	Do
	{
		#$BlockUser = Read-Host "Enter the UPN of the user you want to disable"
		$SelectUsersFormText = "Select the User you want to disable"
		#Call-SelectUsersForm_psf
		Show-SelectCachedUserPrincipalName_psf
		#$GlobalUPNdisable = $SelectUsersForm_comboboxUsers
		$GlobalUPNdisable = $SelectCachedUserPrincipalName_comboboxUPN
		#What to do if connected to main o365 account
		Try
		{
			If (!$GlobalUPNdisable)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User selected, please select a User.", "Error")
			}
			Else
			{
				If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Disabling $GlobalUPNdisable..."
					$textboxDetails.Text = "Set-MsolUser -UserPrincipalName $GlobalUPNdisable -blockcredential `$True"
					Set-MsolUser -UserPrincipalName $GlobalUPNdisable -blockcredential $True
					$TextboxResults.text = Get-MsolUser -UserPrincipalName $GlobalUPNdisable | Format-List DisplayName, BlockCredential | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
				#What to do if connected to partner account
				ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
				{
					$TenantText = $PartnerComboBox.text
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Disabling $GlobalUPNdisable..."
					$textboxDetails.Text = "Set-MsolUser -UserPrincipalName $GlobalUPNdisable -blockcredential `$True -TenantId $TenantText"
					Set-MsolUser -UserPrincipalName $GlobalUPNdisable -blockcredential $True -TenantId $PartnerComboBox.SelectedItem.TenantID
					$TextboxResults.text = Get-MsolUser -UserPrincipalName $GlobalUPNdisable -TenantId $PartnerComboBox.SelectedItem.TenantID | Format-List DisplayName, BlockCredential | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Disabling $GlobalUPNdisable..."
					$textboxDetails.Text = "Set-MsolUser -UserPrincipalName $GlobalUPNdisable -blockcredential `$True"
					Set-MsolUser -UserPrincipalName $GlobalUPNdisable -blockcredential $True
					$TextboxResults.text = Get-MsolUser -UserPrincipalName $GlobalUPNdisable | Format-List DisplayName, BlockCredential | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to disable another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$enableAccountToolStripMenuItem_Click = {
	Do
	{
		#$EnableUser = Read-Host "Enter the UPN of the user you want to enable"
		$SelectUsersFormText = "Select the User you want to enable"
		#Call-SelectUsersForm_psf
		Show-SelectCachedUserPrincipalName_psf
		#$GlobalUPNenable = $SelectUsersForm_comboboxUsers
		$GlobalUPNenable = $SelectCachedUserPrincipalName_comboboxUPN
		Try
		{
			If (!$GlobalUPNenable)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User selected, please select a User.", "Error")
			}
			Else
			{
				#What to do if connected to main o365 account
				If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Enabling $GlobalUPNenable..."
					$textboxDetails.Text = "Set-MsolUser -UserPrincipalName $GlobalUPNenable -blockcredential `$False"
					Set-MsolUser -UserPrincipalName $GlobalUPNenable -blockcredential $False
					$TextboxResults.text = Get-MsolUser -UserPrincipalName $GlobalUPNenable | Format-List DisplayName, BlockCredential | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
				#What to do if connected to partner account
				ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
				{
					$TenantText = $PartnerComboBox.text
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Enabling $GlobalUPNenable..."
					$textboxDetails.Text = "Set-MsolUser -UserPrincipalName $GlobalUPNenable -blockcredential `$False -TenantId $TenantText"
					Set-MsolUser -UserPrincipalName $GlobalUPNenable -blockcredential $False -TenantId $PartnerComboBox.SelectedItem.TenantID
					$TextboxResults.text = Get-MsolUser -UserPrincipalName $GlobalUPNenable -TenantId $PartnerComboBox.SelectedItem.TenantID | Format-List DisplayName, BlockCredential | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Enabling $GlobalUPNenable..."
					$textboxDetails.Text = "Set-MsolUser -UserPrincipalName $GlobalUPNenable -blockcredential `$False"
					Set-MsolUser -UserPrincipalName $GlobalUPNenable -blockcredential $False
					$TextboxResults.text = Get-MsolUser -UserPrincipalName $GlobalUPNenable | Format-List DisplayName, BlockCredential | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to enable another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getDetailedMailboxInfoToolStripMenuItem_Click = {
	Do
	{
		#$GetDetailedMailboxInfoUser = Read-Host "Enter the UPN of the user you want to view detailed info for"
		$SelectUsersFormText = "Select the User you want to get detailed Mailbox information for"
		#Call-SelectUsersForm_psf
		Show-SelectCachedDisplayNames_psf
		#$GlobalUPNdetailedmailbox = $SelectUsersForm_comboboxUsers
		$GlobalUPNdetailedmailbox = $SelectCachedDisplayNames_comboboxNames
		Try
		{
			If (!$GlobalUPNdetailedmailbox)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User selected, please select a User.", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting detailed Mailbox info for $GlobalUPNdetailedmailbox..."
				$textboxDetails.Text = "Get-mailbox -identity $GlobalUPNdetailedmailbox | Format-List"
				$TextboxResults.Text = Get-mailbox -identity $GlobalUPNdetailedmailbox | Format-List | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get detailed Mailbox information for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$searchForAnEmailAddressToolStripMenuItem_Click = {
	Do
	{
		$SpecificEmail = Read-Host "Enter the E-mail Address you're looking for. Accepts wildcards (d*@bwya77.com, d*@*.com)"
		Try
		{
			If (!$SpecificEmail)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No E-mail was entered, please enter a valid E-mail Address.", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Finding an E-mail Address like $SpecificEmail..."
				$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited -Identity * | Where-Object { `$_.EmailAddresses -like 'smtp:$SpecificEmail'' } | Sort-Object Identity | Format-List Identity, EmailAddresses, PrimarySmtpAddress, RecipientType"
				$TextboxResults.Text = Get-Mailbox -ResultSize unlimited -Identity * | Where-Object { $_.EmailAddresses -like "smtp:$SpecificEmail" } | Sort-Object Identity | Format-List Identity, EmailAddresses, PrimarySmtpAddress, RecipientType | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to search for another E-mail Address?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

#Last Logon

$getAllUsersLastLogonToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting all users last logon timestamp..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | ForEach-Object { Get-MailboxStatistics `$_.Identity | Select-Object DisplayName, LastLogonTime } | Format-Table -AutoSize "
		$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | ForEach-Object { Get-MailboxStatistics $_.Identity | Select-Object DisplayName, LastLogonTime } | Sort-Object DisplayName | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getAUsersLastLogonToolStripMenuItem_Click = {
	Do
	{
		$SelectUsersFormText = "Select the User you want to get get last logon timestamp for"
		#Call-SelectUsersForm_psf
		Show-SelectCachedDisplayNames_psf
		#$LastLogonUser = $SelectUsersForm_comboboxUsers
		$LastLogonUser = $SelectCachedDisplayNames_comboboxNames
		Try
		{
			If (!$LastLogonUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User selected, please select a User.", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting last logon timestamp for $LastLogonUser..."
				$textboxDetails.Text = "Get-MailboxStatistics -identity $LastLogonUser | Select-Object DisplayName, LastLogonTime | Format-Table -AutoSize "
				$TextboxResults.Text = Get-MailboxStatistics -identity $LastLogonUser | Select-Object DisplayName, LastLogonTime | Format-Table -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get the Last Logon for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

#GAL

$hideAUserFromTheGALToolStripMenuItem_Click = {
	Do
	{
		#$HidefromGALUser = Read-Host "Enter the UPN of the user you want to hide from the GAL"
		$SelectUsersFormText = "Select the User you want to hide from the Global Address List"
		#Call-SelectUsersForm_psf
		Show-SelectCachedDisplayNames_psf
		#$GlobalUPNhideGAL = $SelectUsersForm_comboboxUsers
		$GlobalUPNhideGAL = $SelectCachedDisplayNames_comboboxNames
		Try
		{
			If (!$GlobalUPNhideGAL)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User selected, please select a user.", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Hiding $GlobalUPNhideGAL from the GAL..."
				$textboxDetails.Text = "set-Mailbox -Identity $GlobalUPNhideGAL -HiddenFromAddressListsEnabled `$True"
				set-Mailbox -Identity $GlobalUPNhideGAL -HiddenFromAddressListsEnabled $True
				$TextboxResults.Text = Get-Mailbox -Identity $GlobalUPNhideGAL | Format-List DisplayName, HiddenFromAddressListsEnabled | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to hide another User from the Global Address List?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getUsersThatAreHiddenFromTheGALToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting all mailboxes hidden from the GAL..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Where-Object { `$_.HiddenFromAddressListsEnabled -eq `$True } | Format-Table -AutoSize"
		$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Where-Object { $_.HiddenFromAddressListsEnabled -eq $True } | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getUsersThatAreNotHiddenFromTheGALToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting all mailboxes not hidden from the GAL..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Where-Object { `$_.HiddenFromAddressListsEnabled -eq `$False } | Format-Table -AutoSize"
		$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Where-Object { $_.HiddenFromAddressListsEnabled -eq $False } | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$unhideAUserFromTheGALToolStripMenuItem_Click = {
	Do
	{
		#$unHidefromGALUser = Read-Host "Enter the UPN of the user you want to unhide from the GAL"
		$SelectUsersFormText = "Select the User you want to unhide from the Global Address List"
		Show-SelectCachedDisplayNames_psf
		#Call-SelectUsersForm_psf
		#$GlobalUPNunhideGAL = $SelectUsersForm_comboboxUsers
		$GlobalUPNunhideGAL = $SelectCachedDisplayNames_comboboxNames
		Try
		{
			If (!$GlobalUPNunhideGAL)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User selected, please select a User.", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Unhiding $GlobalUPNunhideGAL from the Global Address List..."
				$textboxDetails.Text = "Set-Mailbox -Identity $GlobalUPNunhideGAL -HiddenFromAddressListsEnabled `$False"
				set-Mailbox -Identity $GlobalUPNunhideGAL -HiddenFromAddressListsEnabled $False
				$TextboxResults.Text = Get-Mailbox -Identity $GlobalUPNunhideGAL | Format-List DisplayName, HiddenFromAddressListsEnabled | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to unhide another User from the Global Address List?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

#Quota

$getUserQuotaToolStripMenuItem_Click = {
	Do
	{
		#$QuotaUser = Read-Host "Enter the Email of the user you want to view Quota information for"
		$SelectUsersFormText = "Select the User you want to view Quota information for"
		Show-SelectCachedDisplayNames_psf
		#Call-SelectUsersForm_psf
		#$GlobalUPNviewQuota = $SelectUsersForm_comboboxUsers
		$GlobalUPNviewQuota = $SelectCachedDisplayNames_comboboxNames
		try
		{
			If (!$GlobalUPNviewQuota)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User selected, please select a User.", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting user Quota for $GlobalUPNviewQuota..."
				$textboxDetails.Text = "Get-Mailbox -identity $GlobalUPNviewQuota | Format-List DisplayName, UserPrincipalName, *Quota"
				$TextboxResults.text = Get-Mailbox -identity $GlobalUPNviewQuota | Format-List DisplayName, UserPrincipalName, *Quota | Format-List | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to view Quota information for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getAllUsersQuotaToolStripMenuItem_Click = {
	try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting quota for all users..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Format-List DisplayName, UserPrincipalName, *Quota -AutoSize"
		$TextboxResults.text = Get-Mailbox -ResultSize unlimited | Sort-Object DisplayName | Format-Table DisplayName, UserPrincipalName, *Quota -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$setUserMailboxQuotaToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$MailboxSetQuota = Read-Host "Enter the UPN of the user you want to edit quota for"
			$SelectUsersFormText = "Select the User you want to edit the Quota for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedDisplayNames_psf
			#$GlobalUPNeditQuota = $SelectUsersForm_comboboxUsers
			$GlobalUPNeditQuota = $SelectCachedDisplayNames_comboboxNames
			If (!$GlobalUPNeditQuota)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User selected, please select a User.", "Error")
			}
			Else
			{
				$ProhibitSendReceiveQuota = Read-Host "Enter the ProhibitSendReceiveQuota value (EX: '50GB') Max:50GB"
				If (!$ProhibitSendReceiveQuota)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Prohibit Send and Receive Quota value was entered. Please enter a valid number.", "Error")
				}
				Else
				{
					$ProhibitSendQuota = Read-Host "Enter the ProhibitSendQuota value (EX: '48GB') Max:50GB"
					If (!$ProhibitSendQuota)
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						[System.Windows.Forms.MessageBox]::Show("No Prohibit Send Quota value was entered. Please enter a valid number.", "Error")
					}
					Else
					{
						$IssueWarningQuota = Read-Host "Enter theIssueWarningQuota value (EX: '45GB') Max:50GB"
						If (!$IssueWarningQuota)
						{
							$TextboxResults.Text = ""
							$textboxDetails.Text = ""
							[System.Windows.Forms.MessageBox]::Show("No Issue Warning Quota value was entered. Please enter a valid number.", "Error")
						}
						Else
						{
							$FormO365AdministrationCenter.Cursor = 'WaitCursor'
							$TextboxResults.Text = "Setting quota for $GlobalUPNeditQuota... "
							$textboxDetails.Text = "Set-Mailbox -identity $GlobalUPNeditQuota -ProhibitSendReceiveQuota $ProhibitSendReceiveQuota -ProhibitSendQuota $ProhibitSendQuota -IssueWarningQuota $IssueWarningQuota"
							Set-Mailbox -identity $GlobalUPNeditQuota -ProhibitSendReceiveQuota $ProhibitSendReceiveQuota -ProhibitSendQuota $ProhibitSendQuota -IssueWarningQuota $IssueWarningQuota
							$TextboxResults.text = Get-Mailbox $GlobalUPNeditQuota | Format-List DisplayName, UserPrincipalName, *Quota | Out-String -Width 2147483647
							$FormO365AdministrationCenter.Cursor = 'Default'
						}
					}
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to modify the Quota for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$setMailboxQuotaForAllToolStripMenuItem_Click = {
	Try
	{
		$ProhibitSendReceiveQuota2 = Read-Host "Enter (GB) the ProhibitSendReceiveQuota value (EX: '50GB') Max:50GB"
		If (!$ProhibitSendReceiveQuota2)
		{
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("No Prohibit Send and Receive Quota value was entered. Please enter a valid number.", "Error")
		}
		Else
		{
			$ProhibitSendQuota2 = Read-Host "Enter (GB) the ProhibitSendQuota value (EX: '48GB') Max:50GB"
			If (!$ProhibitSendQuota2)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Prohibit Send Quota value was entered. Please enter a valid number.", "Error")
			}
			Else
			{
				$IssueWarningQuota2 = Read-Host "Enter (GB) theIssueWarningQuota value (EX: '45GB') Max:50GB"
				If (!$IssueWarningQuota2)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Issue Warning Quota value was entered. Please enter a valid number.", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Setting quota for all... "
					$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Set-Mailbox -ProhibitSendReceiveQuota $ProhibitSendReceiveQuota2 -ProhibitSendQuota $ProhibitSendQuota2 -IssueWarningQuota $IssueWarningQuota2"
					Get-Mailbox -ResultSize unlimited | Set-Mailbox -ProhibitSendReceiveQuota $ProhibitSendReceiveQuota2 -ProhibitSendQuota $ProhibitSendQuota2 -IssueWarningQuota $IssueWarningQuota2
					$TextboxResults.text = Get-Mailbox -ResultSize unlimited | Format-List DisplayName, UserPrincipalName, *Quota | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

#Licenses

$getLicensedUsersToolStripMenuItem_Click = {
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all users with a license..."
			$textboxDetails.Text = "Get-MsolUser -All | Where-Object { `$_.isLicensed -eq `$TRUE } | Sort-Object DisplayName | Format-Table DisplayName, Licenses -AutoSize"
			$TextboxResults.text = Get-MsolUser -All | Where-Object { $_.isLicensed -eq $True } | Sort-Object DisplayName | Format-Table DisplayName, Licenses -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TenantText = $PartnerComboBox.text
			$TextboxResults.Text = "Getting all users with a license..."
			$textboxDetails.Text = "Get-MsolUser -All -TenantID $TenantText | Where-Object { `$_.isLicensed -eq `$TRUE } | Sort-Object DisplayName | Format-Table DisplayName, Licenses -AutoSize"
			$TextboxResults.text = Get-MsolUser -All -TenantId $PartnerComboBox.SelectedItem.TenantID | Where-Object { $_.isLicensed -eq $True } | Sort-Object DisplayName | Format-Table DisplayName, Licenses -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all users with a license..."
			$textboxDetails.Text = "Get-MsolUser -All | Where-Object { `$_.isLicensed -eq `$TRUE } | Sort-Object DisplayName | Format-Table DisplayName, Licenses -AutoSize"
			$TextboxResults.text = Get-MsolUser -All | Where-Object { $_.isLicensed -eq $True } | Sort-Object DisplayName | Format-Table DisplayName, Licenses -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$displayAllUsersWithoutALicenseToolStripMenuItem_Click = {
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all users without a license..."
			$textboxDetails.Text = "Get-MsolUser -All | Where-Object { `$_.isLicensed -like `$False } | Sort-Object UserPrincipalName | Format-Table UserPrincipalName -AutoSize"
			$TextboxResults.text = Get-MsolUser -All | Where-Object { $_.isLicensed -like "False" } | Sort-Object UserPrincipalName | Format-Table UserPrincipalName -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all users without a license..."
			$textboxDetails.Text = "Get-MsolUser -TenantId $TenantText -All | Where-Object { `$_.isLicensed -like `$False } | Sort-Object UserPrincipalName | Format-Table UserPrincipalName -AutoSize"
			$TextboxResults.text = Get-MsolUser -TenantId $PartnerComboBox.SelectedItem.TenantID -All | Where-Object { $_.isLicensed -like $False } | Sort-Object UserPrincipalName | Format-Table UserPrincipalName -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all users without a license..."
			$textboxDetails.Text = "Get-MsolUser -All | Where-Object { `$_.isLicensed -like `$False } | Sort-Object UserPrincipalName | Format-Table UserPrincipalName -AutoSize"
			$TextboxResults.text = Get-MsolUser -All | Where-Object { $_.isLicensed -like "False" } | Sort-Object UserPrincipalName | Format-Table UserPrincipalName -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$removeAllUnlicensedUsersToolStripMenuItem_Click = {
	Try
	{
		$OUTPUT = [System.Windows.Forms.MessageBox]::Show("Are you sure you want to remove all unlicensed users?", "Warning!", 4)
		If ($OUTPUT -eq "YES")
		{
			#What to do if connected to main o365 account
			If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Removing all users without a license..."
				$textboxDetails.Text = "Get-MsolUser -All | Where-Object { `$_.isLicensed -ne `$True } | Remove-MsolUser -Force"
				Get-MsolUser -All | Where-Object { $_.isLicensed -ne $True } | Remove-MsolUser -Force
				$TextboxResults.text = Get-MsolUser -All | Where-Object { $_.isLicensed -like $True } | Format-List UserPrincipalName | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			#What to do if connected to partner account
			ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
			{
				$TenantText = $PartnerComboBox.text
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Removing all users without a license..."
				$textboxDetails.Text = "Get-MsolUser -TenantId $TenantText -All | Where-Object { `$_.isLicensed -ne `$True } | Remove-MsolUser -Force"
				Get-MsolUser -all -TenantId $PartnerComboBox.SelectedItem.TenantID -All | Where-Object { $_.isLicensed -ne $True } | Remove-MsolUser -Force -TenantId $PartnerComboBox.SelectedItem.TenantID
				$TextboxResults.text = Get-MsolUser -TenantId $PartnerComboBox.SelectedItem.TenantID -All | Where-Object { $_.isLicensed -like $True } | Format-List UserPrincipalName | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Removing all users without a license..."
				$textboxDetails.Text = "Get-MsolUser -All | Where-Object { `$_.isLicensed -ne `$True } | Remove-MsolUser -Force"
				Get-MsolUser -All | Where-Object { $_.isLicensed -ne $True } | Remove-MsolUser -Force
				$TextboxResults.text = Get-MsolUser -All | Where-Object { $_.isLicensed -like $True } | Format-List UserPrincipalName | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Else
		{
			[System.Windows.Forms.MessageBox]::Show("No users were removed", "Info")
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$displayAllLicenseInfoToolStripMenuItem_Click = {
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all license information..."
			$textboxDetails.Text = "Get-MsolAccountSku | Format-Table"
			$TextboxResults.text = Get-MsolAccountSku | Select-Object -Property AccountSkuId, ActiveUnits, WarningUnits, ConsumedUnits, @{
				Name = 'Unused'
				Expression = {
					$_.ActiveUnits - $_.ConsumedUnits
				}
			} | Sort-Object Unused | Format-Table AccountSkuId, ActiveUnits, WarningUnits, ConsumedUnits, Unused -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all license information..."
			$textboxDetails.Text = "Get-MsolAccountSku -TenantId $TenantText | Format-Table"
			$TextboxResults.text = Get-MsolAccountSku -TenantId $PartnerComboBox.SelectedItem.TenantID | Select-Object -Property AccountSkuId, ActiveUnits, WarningUnits, ConsumedUnits, @{
				Name = 'Unused'
				Expression = {
					$_.ActiveUnits - $_.ConsumedUnits
				}
			} | Sort-Object Unused | Format-Table AccountSkuId, ActiveUnits, WarningUnits, ConsumedUnits, Unused -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all license information..."
			$textboxDetails.Text = "Get-MsolAccountSku | Format-Table"
			$TextboxResults.text = Get-MsolAccountSku | Select-Object -Property AccountSkuId, ActiveUnits, WarningUnits, ConsumedUnits, @{
				Name = 'Unused'
				Expression = {
					$_.ActiveUnits - $_.ConsumedUnits
				}
			} | Sort-Object Unused | Format-Table AccountSkuId, ActiveUnits, WarningUnits, ConsumedUnits, Unused -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$addALicenseToAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#What to do if connected to main o365 account
			If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
			{
				#$LicenseUserAdd = Read-Host "Enter the User Principal Name of the User you want to license"
				$SelectUsersFormText = "Select the User you want to add a license to"
				Show-SelectUnlicensedUsers_psf
				$LicenseUserAdd = $SelectUnlicensedUsers_comboboxSelectUnlicensedUsers
				If (!$LicenseUserAdd)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No User selected, please select a User.", "Error")
				}
				Else
				{
					#$LicenseUserAddLocation = Read-Host "Enter the 2 digit location code for the user. Example: US"
					$locationCodeText = "Select the 2 digit location code"
					Show-SelectLocationCode_psf
					$LicenseUserAddLocation = $SelectLocationCode_comboboxSelectLocationCode_SelectedItem
					If (!$LicenseUserAddLocation)
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						[System.Windows.Forms.MessageBox]::Show("No location was selected. Please enter a valid location code.", "Error")
					}
					Else
					{
						#$TextboxResults.text = Get-MsolAccountSku | Format-Table | Out-String
						#$LicenseType = Read-Host "Enter the AccountSku of the License you want to assign to this user"
						$LicensesText = "Select a license for $LicenseUserAdd"
						Show-SelectLicenses_psf
						$LicenseType = $SelectLicenses_comboboxSelectAvailableLicenses
						If (!$LicenseType)
						{
							$TextboxResults.Text = ""
							$textboxDetails.Text = ""
							[System.Windows.Forms.MessageBox]::Show("No license was selected. Please select a valid license", "Error")
						}
						Else
						{
							$FormO365AdministrationCenter.Cursor = 'WaitCursor'
							$TextboxResults.Text = "Adding $LicenseType license to $LicenseUserAdd..."
							
							$textboxDetails.Text = "Set-MsolUser -UserPrincipalName $LicenseUserAdd –UsageLocation $LicenseUserAddLocation
Set-MsolUserLicense -UserPrincipalName $LicenseUserAdd -AddLicenses $LicenseType"
							Set-MsolUser -UserPrincipalName $LicenseUserAdd –UsageLocation $LicenseUserAddLocation
							Set-MsolUserLicense -UserPrincipalName $LicenseUserAdd -AddLicenses $LicenseType
							$TextboxResults.Text = Get-MsolUser -UserPrincipalName $LicenseUserAdd | Format-List DisplayName, Licenses | Out-String -Width 2147483647
							$FormO365AdministrationCenter.Cursor = 'Default'
						}
					}
				}
			}
			#What to do if connected to partner account
			ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
			{
				$TenantText = $PartnerComboBox.text
				
				#$LicenseUserAdd = Read-Host "Enter the User Principal Name of the User you want to license"
				$SelectUsersFormText = "Select the user you want to add a license to"
				Show-SelectUnlicensedUsers_psf
				$LicenseUserAdd = $SelectUnlicensedUsers_comboboxSelectUnlicensedUsers
				If (!$LicenseUserAdd)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No User selected, please select a User.", "Error")
				}
				Else
				{
					#$LicenseUserAddLocation = Read-Host "Enter the 2 digit location code for the user. Example: US"
					$locationCodeText = "Select the 2 digit location code"
					Show-SelectLocationCode_psf
					$LicenseUserAddLocation = $SelectLocationCode_comboboxSelectLocationCode_SelectedItem
					If (!$LicenseUserAddLocation)
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						[System.Windows.Forms.MessageBox]::Show("No location was selected. Please enter a valid location code.", "Error")
					}
					Else
					{
						#$TextboxResults.text = Get-MsolAccountSku -TenantId $PartnerComboBox.SelectedItem.TenantID | Format-Table | Out-String
						#$LicenseType = Read-Host "Enter the AccountSku of the License you want to assign to this user"
						$LicensesText = "Select a license for $LicenseUserAdd"
						Show-SelectLicenses_psf
						$LicenseType = $SelectLicenses_comboboxSelectAvailableLicenses
						If (!$LicenseType)
						{
							$TextboxResults.Text = ""
							$textboxDetails.Text = ""
							[System.Windows.Forms.MessageBox]::Show("No license was selected. Please select a valid license", "Error")
						}
						Else
						{
							$FormO365AdministrationCenter.Cursor = 'WaitCursor'
							$TextboxResults.Text = "Adding $LicenseType license to $LicenseUserAdd..."
							$textboxDetails.Text = "Set-MsolUser -TenantId $TenantText -UserPrincipalName $LicenseUserAdd –UsageLocation $LicenseUserAddLocation
Set-MsolUserLicense -TenantId $PartnerComboBox.SelectedItem.TenantID -UserPrincipalName $LicenseUserAdd -AddLicenses $LicenseType"
							Set-MsolUser -TenantId $PartnerComboBox.SelectedItem.TenantID -UserPrincipalName $LicenseUserAdd –UsageLocation $LicenseUserAddLocation
							Set-MsolUserLicense -TenantId $PartnerComboBox.SelectedItem.TenantID -UserPrincipalName $LicenseUserAdd -AddLicenses $LicenseType
							$TextboxResults.Text = Get-MsolUser -TenantId $PartnerComboBox.SelectedItem.TenantID -UserPrincipalName $LicenseUserAdd | Format-List DisplayName, Licenses | Out-String -Width 2147483647
							$FormO365AdministrationCenter.Cursor = 'Default'
						}
					}
				}
			}
			Else
			{
				#$LicenseUserAdd = Read-Host "Enter the User Principal Name of the User you want to license"
				$SelectUsersFormText = "Select the user you want to add a license to"
				Show-SelectUnlicensedUsers_psf
				$LicenseUserAdd = $SelectUnlicensedUsers_comboboxSelectUnlicensedUsers
				If (!$LicenseUserAdd)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No User selected, please select a User.", "Error")
				}
				Else
				{
					#$LicenseUserAddLocation = Read-Host "Enter the 2 digit location code for the user. Example: US"
					$locationCodeText = "Select the 2 digit location code"
					Show-SelectLocationCode_psf
					$LicenseUserAddLocation = $SelectLocationCode_comboboxSelectLocationCode_SelectedItem
					If (!$LicenseUserAddLocation)
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						[System.Windows.Forms.MessageBox]::Show("No location was selected. Please enter a valid location code.", "Error")
					}
					Else
					{
						#$TextboxResults.text = Get-MsolAccountSku | Format-Table | Out-String
						#$LicenseType = Read-Host "Enter the AccountSku of the License you want to assign to this user"
						$LicensesText = "Select a license for $LicenseUserAdd"
						Show-SelectLicenses_psf
						$LicenseType = $SelectLicenses_comboboxSelectAvailableLicenses
						If (!$LicenseType)
						{
							$TextboxResults.Text = ""
							$textboxDetails.Text = ""
							[System.Windows.Forms.MessageBox]::Show("No license was selected. Please select a valid license", "Error")
						}
						Else
						{
							$FormO365AdministrationCenter.Cursor = 'WaitCursor'
							$TextboxResults.Text = "Adding $LicenseType license to $LicenseUserAdd..."
							
							$textboxDetails.Text = "Set-MsolUser -UserPrincipalName $LicenseUserAdd –UsageLocation $LicenseUserAddLocation
Set-MsolUserLicense -UserPrincipalName $LicenseUserAdd -AddLicenses $LicenseType"
							Set-MsolUser -UserPrincipalName $LicenseUserAdd –UsageLocation $LicenseUserAddLocation
							Set-MsolUserLicense -UserPrincipalName $LicenseUserAdd -AddLicenses $LicenseType
							$TextboxResults.Text = Get-MsolUser -UserPrincipalName $LicenseUserAdd | Format-List DisplayName, Licenses | Out-String -Width 2147483647
							$FormO365AdministrationCenter.Cursor = 'Default'
						}
					}
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to add a License to another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$removeLicenseFromAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#What to do if connected to main o365 account
			If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
			{
				#$RemoveLicenseFromUser = Read-Host "Enter the User Principal Name of the user you want to remove a license from"
				$SelectUsersFormText = "Select the User you want to remove a License from"
				#Call-SelectUsersForm_psf
				Show-SelectCachedUserPrincipalName_psf
				#$RemoveLicenseFromUser = $SelectUsersForm_comboboxUsers
				$RemoveLicenseFromUser = $SelectCachedUserPrincipalName_comboboxUPN
				If (!$RemoveLicenseFromUser)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid User", "Error")
				}
				Else
				{
					#$TextboxResults.Text = Get-MsolUser -UserPrincipalName $RemoveLicenseFromUser | Format-List DisplayName, Licenses | Out-String
					#$RemoveLicenseType = Read-Host "Enter the AccountSku of the license you want to remove"
					$UserLicenseText = "Select a license to remove from $RemoveLicenseFromUser"
					Show-SelectUserLicenses_psf
					$RemoveLicenseType = $SelectUserLicenses_comboboxSelectCurrentLicense
					If (!$RemoveLicenseType)
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						[System.Windows.Forms.MessageBox]::Show("No License was selected. Please select a valid License", "Error")
					}
					Else
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Removing the $RemoveLicenseType license from $RemoveLicenseFromUser..."
						
						$textboxDetails.Text = "Set-MsolUserLicense -UserPrincipalName $RemoveLicenseFromUser -RemoveLicenses $RemoveLicenseType"
						Set-MsolUserLicense -UserPrincipalName $RemoveLicenseFromUser -RemoveLicenses $RemoveLicenseType
						$TextboxResults.Text = Get-MsolUser -UserPrincipalName $RemoveLicenseFromUser | Format-List DisplayName, Licenses | Out-String -Width 2147483647
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
				}
			}
			#What to do if connected to partner account
			ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
			{
				$TenantText = $PartnerComboBox.text
				
				#$RemoveLicenseFromUser = Read-Host "Enter the User Principal Name of the user you want to remove a license from"
				$SelectUsersFormText = "Select the User you want to remove a License from"
				#Call-SelectUsersForm_psf
				Show-SelectCachedUserPrincipalName_psf
				#$RemoveLicenseFromUser = $SelectUsersForm_comboboxUsers
				$RemoveLicenseFromUser = $SelectCachedUserPrincipalName_comboboxUPN
				#$TextboxResults.Text = Get-MsolUser -TenantId $PartnerComboBox.SelectedItem.TenantID -UserPrincipalName $RemoveLicenseFromUser | Format-List DisplayName, Licenses | Out-String
				If (!$RemoveLicenseFromUser)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
				}
				Else
				{
					#$RemoveLicenseType = Read-Host "Enter the AccountSku of the license you want to remove"
					$UserLicenseText = "Select a license to remove from $RemoveLicenseFromUser"
					Show-SelectUserLicenses_psf
					$RemoveLicenseType = $SelectUserLicenses_comboboxSelectCurrentLicense
					If (!$RemoveLicenseType)
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						[System.Windows.Forms.MessageBox]::Show("No License was selected. Please select a valid License", "Error")
					}
					Else
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Removing the $RemoveLicenseType license from $RemoveLicenseFromUser..."
						
						$textboxDetails.Text = "Set-MsolUserLicense -TenantId $TenantText -UserPrincipalName $RemoveLicenseFromUser -RemoveLicenses $RemoveLicenseType"
						Set-MsolUserLicense -TenantId $PartnerComboBox.SelectedItem.TenantID -UserPrincipalName $RemoveLicenseFromUser -RemoveLicenses $RemoveLicenseType
						$TextboxResults.Text = Get-MsolUser -TenantId $PartnerComboBox.SelectedItem.TenantID -UserPrincipalName $RemoveLicenseFromUser | Format-List DisplayName, Licenses | Out-String -Width 2147483647
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
				}
			}
			Else
			{
				#$RemoveLicenseFromUser = Read-Host "Enter the User Principal Name of the user you want to remove a license from"
				$SelectUsersFormText = "Select the User you want to remove a License from"
				#Call-SelectUsersForm_psf
				Show-SelectCachedUserPrincipalName_psf
				#$RemoveLicenseFromUser = $SelectUsersForm_comboboxUsers
				$RemoveLicenseFromUser = $SelectCachedUserPrincipalName_comboboxUPN
				If (!$RemoveLicenseFromUser)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid User", "Error")
				}
				Else
				{
					#$TextboxResults.Text = Get-MsolUser -UserPrincipalName $RemoveLicenseFromUser | Format-List DisplayName, Licenses | Out-String
					#$RemoveLicenseType = Read-Host "Enter the AccountSku of the license you want to remove"
					$UserLicenseText = "Select a license to remove from $RemoveLicenseFromUser"
					Show-SelectUserLicenses_psf
					$RemoveLicenseType = $SelectUserLicenses_comboboxSelectCurrentLicense
					If (!$RemoveLicenseType)
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						[System.Windows.Forms.MessageBox]::Show("No License was selected. Please select a valid License", "Error")
					}
					Else
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Removing the $RemoveLicenseType license from $RemoveLicenseFromUser..."
						
						$textboxDetails.Text = "Set-MsolUserLicense -UserPrincipalName $RemoveLicenseFromUser -RemoveLicenses $RemoveLicenseType"
						Set-MsolUserLicense -UserPrincipalName $RemoveLicenseFromUser -RemoveLicenses $RemoveLicenseType
						$TextboxResults.Text = Get-MsolUser -UserPrincipalName $RemoveLicenseFromUser | Format-List DisplayName, Licenses | Out-String -Width 2147483647
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to remove a License for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getAUsersLicenseToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$licensedUsersText = "Select the User you want to view Licenses for"
			#Show-SelectLicensedUsers_psf
			Show-SelectCachedUserPrincipalName_psf
			#$UserLicInfo = $SelectLicensedUsers_comboboxSelectlicensedUsers
			$UserLicInfo = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$UserLicInfo)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			Else
			{
				#What to do if connected to main o365 account
				If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$textboxDetails.Text = "Get-MsolUser -UserPrincipalName $UserLicInfo | Select-Object Licenses"
					$TextboxResults.Text = Get-MsolUser -UserPrincipalName $UserLicInfo | Select-Object Licenses | Format-Table -AutoSize | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
					
				}
				#What to do if connected to partner account
				ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
				{
					$TenantText = $PartnerComboBox.text
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$textboxDetails.Text = "Get-MsolUser -UserPrincipalName $UserLicInfo -TenantId $TenantText | Select-Object Licenses"
					$TextboxResults.Text = Get-MsolUser -UserPrincipalName $UserLicInfo -TenantId $PartnerComboBox.SelectedItem.TenantID | Select-Object Licenses | Format-Table -AutoSize | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$textboxDetails.Text = "Get-MsolUser -UserPrincipalName $UserLicInfo | Select-Object Licenses"
					$TextboxResults.Text = Get-MsolUser -UserPrincipalName $UserLicInfo | Select-Object Licenses | Format-Table -AutoSize | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
					
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to view Licenses for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

#Calendar Items

$AddCalendarPermissionsForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$Calendaruser = Read-Host "Enter the UPN of the user whose Calendar you want to give access to"
			$SelectUsersFormText = "Select the user you want to modify calendar permissions for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedDisplayNames_psf
			#$Calendaruserchangepermission = $SelectUsersForm_comboboxUsers
			$Calendaruserchangepermission = $SelectCachedDisplayNames_comboboxNames
			If (!$Calendaruserchangepermission)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a user", "Error")
			}
			Else
			{
				#$Calendaruser2 = Read-Host "Enter the UPN of the user who you want to give access to"
				$SelectUsersFormText = "Select the user you want to give permission to $Calendaruserchangepermission calendar"
				#Call-SelectUsersForm_psf
				Show-SelectCachedDisplayNames_psf
				#$Calendarusergrantpermission = $SelectUsersForm_comboboxUsers
				$Calendarusergrantpermission = $SelectCachedDisplayNames_comboboxNames
				If (!$Calendarusergrantpermission)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a user", "Error")
				}
				Else
				{
					$LabelPermissionsText = "Select the level of access you want $Calendarusergrantpermission to have on $Calendaruserchangepermission  calendar"
					Show-AccessPermissions_psf
					$level = $AccessPermissions_comboboxPermissions_SelectedItem
					If (!$level)
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						[System.Windows.Forms.MessageBox]::Show("No level of access was selected, please select a valid level of access", "Error")
					}
					Else
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Adding $Calendarusergrantpermission to $Calendaruserchangepermission calender with $level permissions..."
						$textboxDetails.Text = "Add-MailboxFolderPermission -Identity ${Calendaruserchangepermission}:\calendar -user $Calendarusergrantpermission -AccessRights $level"
						Remove-MailboxFolderPermission -identity ${Calendaruserchangepermission}:\calendar -user $Calendarusergrantpermission -Confirm:$False
						Add-MailboxFolderPermission -Identity ${Calendaruserchangepermission}:\calendar -user $Calendarusergrantpermission -AccessRights $level
						$TextboxResults.Text = Get-MailboxFolderPermission -Identity ${Calendaruserchangepermission}:\calendar | Sort-Object User, AccessRights | Format-Table User, AccessRights, Identity, FolderName, IsValid -AutoSize | Out-String -Width 2147483647
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to modify Calendar Permissions for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$GetUsersCalendarPermissionsToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$CalUserPermissions = Read-Host "What user would you like calendar permissions for?"
			$SelectUsersFormText = "Select the user you want to view calendar permissions for"
			Show-SelectCachedDisplayNames_psf
			$CalUserPermissions = $SelectCachedDisplayNames_comboboxNames
			If (!$CalUserPermissions)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a user", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting $CalUserPermissions calendar permissions..."
				$textboxDetails.Text = "Get-MailboxFolderPermission -Identity ${CalUserPermissions}:\calendar | Sort-Object User, AccessRights | Format-Table User, AccessRights, Identity, FolderName, IsValid -AutoSize"
				$TextboxResults.Text = Get-MailboxFolderPermission -Identity ${CalUserPermissions}:\calendar | Sort-Object User, AccessRights | Format-Table User, AccessRights, Identity, FolderName, IsValid -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to view Calendar Permissions for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$AddASingleUserPermissionsOnAllCalendarsToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$MasterUser = Read-Host "Enter the UPN of the user you want permission on all users calendars"
			$SelectUsersFormText = "Select the user you want permission on all users calendars"
			#Call-SelectUsersForm_psf
			Show-SelectCachedDisplayNames_psf
			#$MasterUser = $SelectUsersForm_comboboxUsers
			$MasterUser = $SelectCachedDisplayNames_comboboxNames
			If (!$MasterUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a user", "Error")
			}
			Else
			{
				$LabelPermissionsText = "Select the level of access you want $MasterUser to have on all calendars"
				Show-AccessPermissions_psf
				$level2 = $AccessPermissions_comboboxPermissions_SelectedItem
				If (!$level2)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No level of access was selected, please select a valid level of access", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Adding $MasterUser to everyones calendars with $level2 permissions..."
					$textboxDetails.Text = "(Get-Mailbox) | Foreach-Object { Set-MailboxFolderPermission `$_':\Calendar' -User $MasterUser -AccessRights $level2 }"
					(Get-Mailbox) | Foreach-Object { Set-MailboxFolderPermission $_":\Calendar" -User $MasterUser -AccessRights $level2 }
					
						#(Get-Mailbox) | Foreach-Object Set-MailboxFolderPermission "$($_):\Calendar" -user $MasterUser -AccessRights $level2
					
					$TextboxResults.Text = "Successfully added $MasterUser to everyones calendars with $level2 permissions"
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to add another User on everyones calendar?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$removeAUserFromAllCalendarsToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$RemoveUserFromAll = Read-Host "Enter the UPN of the user you want to remove from all calendars"
			$SelectUsersFormText = "Select the user you want to remove from all calendars"
			#Call-SelectUsersForm_psf
			Show-SelectCachedDisplayNames_psf
			#$RemoveUserFromAll = $SelectUsersForm_comboboxUsers
			$RemoveUserFromAll = $SelectCachedDisplayNames_comboboxNames
			If (!$RemoveUserFromAll)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a user", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Removing $RemoveUserFromAll from all users calendar..."
				$textboxDetails.Text = "`$users = Get-Mailbox -ResultSize unlimited | Select-Object -ExpandProperty Alias
Foreach (`$user in `$users) { Remove-MailboxFolderPermission `${user}:\Calendar -user $RemoveUserFromAll -Confirm:`$false}﻿"
				$users = Get-Mailbox -ResultSize unlimited | Select-Object -ExpandProperty Alias
				Foreach ($user in $users)
				{
					Remove-MailboxFolderPermission "$($user):\Calendar" -user $RemoveUserFromAll -Confirm:$false
				}
				$TextboxResults.Text = "Successfully removed $RemoveUserFromAll from all users calendar..."
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		#Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to remove another User from everyones Calendar?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$removeAUserFromSomeonesCalendarToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$Calendaruserremove = Read-Host "Enter the UPN of the user whose calendar you want to remove access to"
			$SelectUsersFormText = "Select the user you want to modify calendar permissions for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedDisplayNames_psf
			#$GlobalCalUser = $SelectUsersForm_comboboxUsers
			$GlobalCalUser = $SelectCachedDisplayNames_comboboxNames
			If (!$GlobalCalUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a user", "Error")
			}
			Else
			{
				#$Calendaruser2remove = Read-Host "Enter the UPN of the user who you want to remove access"
				$CalendarPermissionsText = "Select the user you want to remove from $GlobalCalUser calendar"
				Show-SelectUserCalendarPermissions_psf
				$Calendaruser2remove = $SelectUserCalendarPermissions_comboboxSelectCalendarPermissions
				If (!$Calendaruser2remove)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a user", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Removing $Calendaruser2remove from $GlobalCalUser calendar..."
					$textboxDetails.Text = "Remove-MailboxFolderPermission -Identity ${GlobalCalUser}:\calendar -user $Calendaruser2remove"
					Remove-MailboxFolderPermission -Identity ${GlobalCalUser}:\calendar -user $Calendaruser2remove
					$TextboxResults.Text = Get-MailboxFolderPermission -Identity ${GlobalCalUser}:\calendar | Sort-Object User, AccessRights | Format-Table User, AccessRights, Identity, FolderName, IsValid -AutoSize | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to remove another User from someones Calendar?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

#Calendar Repair

$disableCalendarRepairForAllUsersToolStripMenuItem_Click = {
	$OUTPUT = [System.Windows.Forms.MessageBox]::Show("Are you sure you want to disable Calendar Repair for all users?", "Warning!", 4)
	If ($OUTPUT -eq "YES")
	{
		Try
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Disabling Calendar Repair for all mailboxes..."
			$TextboxDetails.Text = "Get-mailbox -ResultSize unlimited | Set-Mailbox -CalendarRepairDisabled `$true"
			Get-mailbox -ResultSize unlimited | Set-Mailbox -CalendarRepairDisabled $true
			$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Select-Object DisplayName, CalendarRepairDisabled | Sort-Object DisplayName | Format-Table -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$TextboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
	}
	Else
	{
		[System.Windows.Forms.MessageBox]::Show("Calendar Repair has not been modified", "Info")
	}
	
	
}

$enableCalendarRepairForAllUsersToolStripMenuItem_Click = {
	$OUTPUT = [System.Windows.Forms.MessageBox]::Show("Are you sure you want to enable Calendar Repair for all users?", "Warning!", 4)
	If ($OUTPUT -eq "YES")
	{
		Try
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Enabling Calendar Repair for all mailboxes..."
			$TextboxDetails.Text = "Get-mailbox -ResultSize unlimited | Set-Mailbox -CalendarRepairDisabled `$false"
			Get-mailbox -ResultSize unlimited | Set-Mailbox -CalendarRepairDisabled $false
			$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Select-Object DisplayName, CalendarRepairDisabled | Sort-Object DisplayName | Format-Table -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$TextboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
	}
	Else
	{
		[System.Windows.Forms.MessageBox]::Show("Calendar Repair has not been modified", "Info")
	}
	
}

$disableCalendarRepairForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$SelectUsersFormText = "Select the user you want disable Calendar Repair for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedDisplayNames_psf
			#$DisableCalRepairUser = $SelectUsersForm_comboboxUsers
			$DisableCalRepairUser = $SelectCachedDisplayNames_comboboxNames
			If (!$DisableCalRepairUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Disabling Calendar Repair for $DisableCalRepairUser..."
				$TextboxDetails.Text = "Set-Mailbox -identity $DisableCalRepairUser -CalendarRepairDisabled `$true"
				Set-Mailbox -identity $DisableCalRepairUser -CalendarRepairDisabled $true
				$TextboxResults.Text = Get-Mailbox -identity $DisableCalRepairUser | Select-Object DisplayName, CalendarRepairDisabled | Format-Table -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$TextboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to disable Calendar Repair for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$enableCalendarRepairForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$SelectUsersFormText = "Select the user you want disable Calendar Repair for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedDisplayNames_psf
			#$EnableCalRepairUser = $SelectUsersForm_comboboxUsers
			$EnableCalRepairUser = $SelectCachedDisplayNames_comboboxNames
			If (!$EnableCalRepairUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a user", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Disabling Calendar Repair for $EnableCalRepairUser..."
				$TextboxDetails.Text = "Set-Mailbox -identity $EnableCalRepairUser -CalendarRepairDisabled `$false"
				Set-Mailbox -identity $EnableCalRepairUser -CalendarRepairDisabled $false
				$TextboxResults.Text = Get-Mailbox -identity $EnableCalRepairUser | Select-Object DisplayName, CalendarRepairDisabled | Format-Table -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$TextboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to enable Calendar Repair for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getAllUsersWithCalendarRepairEnabledToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting all users that have Calendar Repair enabled..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Where-Object { `$_.CalendarRepairDisabled -eq `$false | Select-Object DisplayName, CalendarRepairDisabled | Sort-Object DisplayName | Format-Table -AutoSize"
		$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Where-Object { $_.CalendarRepairDisabled -eq $false } | Select-Object DisplayName, CalendarRepairDisabled | Sort-Object DisplayName | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$TextboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getAllUsersWithCalendarRepairDisabledToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting all users that have Calendar Repair enabled..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Where-Object { `$_.CalendarRepairDisabled -eq `$true | Select-Object DisplayName, CalendarRepairDisabled | Sort-Object DisplayName | Format-Table -AutoSize"
		$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Where-Object { $_.CalendarRepairDisabled -eq $true } | Select-Object DisplayName, CalendarRepairDisabled | Sort-Object DisplayName | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$TextboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getCalendarRepairInfoForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$SelectUsersFormText = "Select the User you want get Calendar Repair info for"
			Show-SelectCachedDisplayNames_psf
			#$CalRepairUserinfo = $SelectUsersForm_comboboxUsers
			$CalRepairUserinfo = $SelectCachedDisplayNames_comboboxNames
			If (!$CalRepairUserinfo)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting Calendar Repair info for $CalRepairUserinfo..."
				$TextboxDetails.Text = "Get-Mailbox -identity $CalRepairUserinfo | Select-Object DisplayName, CalendarRepairDisabled"
				$TextboxResults.Text = Get-Mailbox -identity $CalRepairUserinfo | Select-Object DisplayName, CalendarRepairDisabled | Format-Table -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$TextboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get Calendar Repair status for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

#Clutter

$disableClutterForAllToolStripMenuItem_Click = {
	$TenantStatus = Get-ItemProperty 'HKCU:\Software\O365 Admin Center' -Name TenantStatus | Select-Object -ExpandProperty TenantStatus
	If ($TenantStatus -eq 0)
	{
		try
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Disabling Clutter for all users..."
			$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Set-Clutter -Enable `$false"
			$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Get-Clutter | Sort-Object MailboxIdentity | Format-Table IsEnabled, MailboxIdentity -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
	}
	elseif ($TenantStatus -eq 1)
	{
		[System.Windows.Forms.MessageBox]::Show("Microsoft currently does not support configuring Clutter when connected to a tenant", "Info")
	}
}

$enableClutterForAllToolStripMenuItem_Click = {
	$TenantStatus = Get-ItemProperty 'HKCU:\Software\O365 Admin Center' -Name TenantStatus | Select-Object -ExpandProperty TenantStatus
	If ($TenantStatus -eq 0)
	{
		try
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Enabling Clutter for all users..."
			$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Set-Clutter -Enable `$True | Format-List MailboxIdentity, IsEnabled -AutoSize"
			$TextboxResults.text = Get-Mailbox -ResultSize unlimited | Set-Clutter -Enable $True | Format-Table MailboxIdentity, IsEnabled -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
	}
	elseif ($TenantStatus -eq 1)
	{
		[System.Windows.Forms.MessageBox]::Show("Microsoft currently does not support configuring Clutter when connected to a tenant", "Info")
	}
}

$enableClutterForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$TenantStatus = Get-ItemProperty 'HKCU:\Software\O365 Admin Center' -Name TenantStatus | Select-Object -ExpandProperty TenantStatus
			If ($TenantStatus -eq 0)
			{
				
				#$UserEnableClutter = Read-Host "Which user would you like to enable Clutter for?"
				$SelectUsersFormText = "Select the User you want to enable Clutter for"
				#Call-SelectUsersForm_psf
				Show-SelectCachedDisplayNames_psf
				#$GlobalUPNenableClutter = $SelectUsersForm_comboboxUsers
				$GlobalUPNenableClutter = $SelectCachedDisplayNames_comboboxNames
				If (!$GlobalUPNenableClutter)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Enabling Clutter for $GlobalUPNenableClutter..."
					$textboxDetails.Text = "Get-Mailbox $GlobalUPNenableClutter | Set-Clutter -Enable `$True"
					$TextboxResults.text = Get-Mailbox $GlobalUPNenableClutter | Set-Clutter -Enable $True | Format-Table -AutoSize | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
				
			}
			elseif ($TenantStatus -eq 1)
			{
				[System.Windows.Forms.MessageBox]::Show("Microsoft currently does not support configuring Clutter when connected to a tenant", "Info")
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to enable Clutter for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$disableClutterForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$TenantStatus = Get-ItemProperty 'HKCU:\Software\O365 Admin Center' -Name TenantStatus | Select-Object -ExpandProperty TenantStatus
			If ($TenantStatus -eq 0)
			{
				
				#$UserDisableClutter = Read-Host "Which user would you like to disable Clutter for?"
				$SelectUsersFormText = "Select the User you want to disable Clutter for"
				#Call-SelectUsersForm_psf
				Show-SelectCachedDisplayNames_psf
				#$GlobalUPNdisableClutter = $SelectUsersForm_comboboxUsers
				$GlobalUPNdisableClutter = $SelectCachedDisplayNames_comboboxNames
				If (!$GlobalUPNdisableClutter)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Disabling Clutter for $GlobalUPNdisableClutter..."
					$textboxDetails.Text = "Set-Clutter -Identity $GlobalUPNdisableClutter -Enable `$False"
					$TextboxResults.text = Set-Clutter -Identity $GlobalUPNdisableClutter -Enable $False | Format-Table MailboxIdentity, IsEnabled -AutoSize | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
			elseif ($TenantStatus -eq 1)
			{
				[System.Windows.Forms.MessageBox]::Show("Microsoft currently does not support configuring Clutter when connected to a tenant", "Info")
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to Disable Clutter for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getClutterInfoForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$TenantStatus = Get-ItemProperty 'HKCU:\Software\O365 Admin Center' -Name TenantStatus | Select-Object -ExpandProperty TenantStatus
			If ($TenantStatus -eq 0)
			{
				#$GetCluterInfoUser = Read-Host "What user would you like to view Clutter information about?"
				$SelectUsersFormText = "Select the User you want to get Clutter information for"
				#Call-SelectUsersForm_psf
				Show-SelectCachedDisplayNames_psf
				#$GlobalUPNinfoClutter = $SelectUsersForm_comboboxUsers
				$GlobalUPNinfoClutter = $SelectCachedDisplayNames_comboboxNames
				If (!$GlobalUPNinfoClutter)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Getting Clutter information for $GlobalUPNinfoClutter..."
					$textboxDetails.Text = "Get-Clutter -Identity $GlobalUPNinfoClutter"
					$TextboxResults.Text = Get-Clutter -Identity $GlobalUPNinfoClutter | Format-Table MailboxIdentity, IsEnabled -AutoSize | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
			elseif ($TenantStatus -eq 1)
			{
				[System.Windows.Forms.MessageBox]::Show("Microsoft currently does not support configuring/viewing Clutter when connected to a tenant", "Info")
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get Clutter status for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

#Recycle Bin

$displayAllDeletedUsersToolStripMenuItem_Click = {
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all deleted users..."
			$textboxDetails.Text = "Get-MsolUser -All -ReturnDeletedUsers |  Sort-Object UserprincipalName | Format-Table UserPrincipalName, ObjectID -Autosize "
			$TextboxResults.Text = Get-MsolUser -All -ReturnDeletedUsers | Sort-Object UserprincipalName | Format-Table UserPrincipalName, ObjectID -Autosize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all deleted users..."
			$textboxDetails.Text = "Get-MsolUser -All -TenantId $TenantText -ReturnDeletedUsers |  Sort-Object UserprincipalName | Format-Table UserPrincipalName, ObjectID -Autosize "
			$TextboxResults.Text = Get-MsolUser -All -TenantId $PartnerComboBox.SelectedItem.TenantID -ReturnDeletedUsers | Sort-Object UserPrincipalName | Format-Table UserPrincipalName, ObjectID -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all deleted users..."
			$textboxDetails.Text = "Get-MsolUser -All -ReturnDeletedUsers |  Sort-Object UserprincipalName | Format-Table UserPrincipalName, ObjectID -Autosize "
			$TextboxResults.Text = Get-MsolUser -All -ReturnDeletedUsers | Sort-Object UserprincipalName | Format-Table UserPrincipalName, ObjectID -Autosize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$deleteAllUsersInRecycleBinToolStripMenuItem_Click = {
	Try
	{
		$OUTPUT = [System.Windows.Forms.MessageBox]::Show("Are you sure you want to delete all users in the recycle bin?.", "Warning!", 4)
		If ($OUTPUT -eq "YES")
		{
			#What to do if connected to main o365 account
			If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Deleting all users in the recycle bin..."
				$textboxDetails.Text = "Get-MsolUser -ReturnDeletedUsers -All | Remove-MsolUser -RemoveFromRecycleBin –Force"
				$TextboxResults.Text = Get-MsolUser -ReturnDeletedUsers -All | Remove-MsolUser -RemoveFromRecycleBin –Force | Format-List | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			#What to do if connected to partner account
			ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
			{
				$TenantText = $PartnerComboBox.text
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Deleting all users in the recycle bin..."
				$textboxDetails.Text = "Get-MsolUser -TenantId $TenantText -ReturnDeletedUsers -All | Remove-MsolUser -RemoveFromRecycleBin –Force"
				$TextboxResults.Text = Get-MsolUser -TenantId $PartnerComboBox.SelectedItem.TenantID -ReturnDeletedUsers -All | Remove-MsolUser -RemoveFromRecycleBin –Force | Format-List | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Deleting all users in the recycle bin..."
				$textboxDetails.Text = "Get-MsolUser -ReturnDeletedUsers -All | Remove-MsolUser -RemoveFromRecycleBin –Force"
				$TextboxResults.Text = Get-MsolUser -ReturnDeletedUsers -All | Remove-MsolUser -RemoveFromRecycleBin –Force | Format-List | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Else
		{
			[System.Windows.Forms.MessageBox]::Show("All users in the recycle bin have not been deleted", "Info")
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
	
}

$deleteSpecificUsersInRecycleBinToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$DeletedUserRecycleBin = Read-Host "Please enter the User Principal Name of the user you want to permanently delete"
			$AliasRecycleBinText = "Select the User you want to delete from the Recycle Bin"
			Show-SelectUserRecycleBin_psf
			$GlobalUPNdeleteRecycle = $SelectUserRecycleBin_comboboxSelectRecycleBin
			$OUTPUT = [System.Windows.Forms.MessageBox]::Show("Are you sure you want to delete $GlobalUPNdeleteRecycle ?", "Warning!", 4)
			If ($OUTPUT -eq "YES")
			{
				#What to do if connected to main o365 account
				If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Deleting  $GlobalUPNdeleteRecycle from the Recycle Bin..."
					$textboxDetails.Text = "Remove-MsolUser -UserPrincipalName $GlobalUPNdeleteRecycle -RemoveFromRecycleBin -Force"
					Remove-MsolUser -UserPrincipalName $GlobalUPNdeleteRecycle -RemoveFromRecycleBin -Force
					$TextboxResults.Text = "Getting users in the recycle bin..."
					$TextboxResults.Text = Get-MsolUser -ReturnDeletedUsers | Sort-Object UserprincipalName | Format-Table UserPrincipalName, ObjectID -Autosize | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
				#What to do if connected to partner account
				ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
				{
					$TenantText = $PartnerComboBox.text
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Deleting  $GlobalUPNdeleteRecycle from the Recycle Bin..."
					$textboxDetails.Text = "Remove-MsolUser -TenantId $TenantText -UserPrincipalName $GlobalUPNdeleteRecycle -RemoveFromRecycleBin -Force"
					Remove-MsolUser -TenantId $PartnerComboBox.SelectedItem.TenantID -UserPrincipalName $GlobalUPNdeleteRecycle -RemoveFromRecycleBin -Force
					$TextboxResults.Text = "Getting users in the recycle bin..."
					$TextboxResults.Text = Get-MsolUser -TenantId $PartnerComboBox.SelectedItem.TenantID -ReturnDeletedUsers | Sort-Object UserprincipalName | Format-Table UserPrincipalName, ObjectID -Autosize | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Deleting  $GlobalUPNdeleteRecycle from the Recycle Bin..."
					$textboxDetails.Text = "Remove-MsolUser -UserPrincipalName $GlobalUPNdeleteRecycle -RemoveFromRecycleBin -Force"
					Remove-MsolUser -UserPrincipalName $GlobalUPNdeleteRecycle -RemoveFromRecycleBin -Force
					$TextboxResults.Text = "Getting users in the recycle bin..."
					$TextboxResults.Text = Get-MsolUser -ReturnDeletedUsers | Sort-Object UserprincipalName | Format-Table UserPrincipalName, ObjectID -Autosize | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
			Else
			{
				[System.Windows.Forms.MessageBox]::Show("$GlobalUPNdeleteRecycle was not deleted", "Info")
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to delete another User from the Recycle Bin?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$restoreDeletedUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$RestoredUserFromRecycleBin = Read-Host "Enter the User Principal Name of the user you want to restore"
			$SelectUsersFormText = "Select the User you want to restore from the Recycle Bin"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPNrestoreuser = $SelectUsersForm_comboboxUsers
			$GlobalUPNrestoreuser = $SelectCachedUserPrincipalName_comboboxUPN
			#What to do if connected to main o365 account
			If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Restoring $GlobalUPNrestoreuser from the Recycle Bin..."
				$textboxDetails.Text = "Restore-MsolUser –UserPrincipalName $GlobalUPNrestoreuser -AutoReconcileProxyConflicts"
				Restore-MsolUser –UserPrincipalName $GlobalUPNrestoreuser -AutoReconcileProxyConflicts
				$TextboxResults.Text = "Getting list of deleted users"
				$TextboxResults.Text = Get-MsolUser -ReturnDeletedUsers | Sort-Object UserprincipalName | Format-Table UserPrincipalName, ObjectID -Autosize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			#What to do if connected to partner account
			ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
			{
				$TenantText = $PartnerComboBox.text
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Restoring $GlobalUPNrestoreuser from the Recycle Bin..."
				$textboxDetails.Text = "Restore-MsolUser -TenantId $TenantText –UserPrincipalName $GlobalUPNrestoreuser -AutoReconcileProxyConflicts"
				Restore-MsolUser -TenantId $PartnerComboBox.SelectedItem.TenantID –UserPrincipalName $GlobalUPNrestoreuser -AutoReconcileProxyConflicts
				$TextboxResults.Text = "Getting list of deleted users"
				$TextboxResults.Text = Get-MsolUser -TenantId $PartnerComboBox.SelectedItem.TenantID -ReturnDeletedUsers | Sort-Object UserprincipalName | Format-Table UserPrincipalName, ObjectID -Autosize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Restoring $GlobalUPNrestoreuser from the Recycle Bin..."
				$textboxDetails.Text = "Restore-MsolUser –UserPrincipalName $GlobalUPNrestoreuser -AutoReconcileProxyConflicts"
				Restore-MsolUser –UserPrincipalName $GlobalUPNrestoreuser -AutoReconcileProxyConflicts
				$TextboxResults.Text = "Getting list of deleted users"
				$TextboxResults.Text = Get-MsolUser -ReturnDeletedUsers | Sort-Object UserprincipalName | Format-Table UserPrincipalName, ObjectID -Autosize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to restore another User from the Recycle Bin?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$restoreAllDeletedUsersToolStripMenuItem_Click = {
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Restoring all deleted users..."
			$textboxDetails.Text = "Get-MsolUser -All -ReturnDeletedUsers | Restore-MsolUser"
			Get-MsolUser -ReturnDeletedUsers -All | Restore-MsolUser
			$TextboxResults.Text = "Users that were deleted have now been restored"
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Restoring all deleted users..."
			$textboxDetails.Text = "Get-MsolUser -ReturnDeletedUsers -TenantID $TenantText -All | Restore-MsolUser"
			Get-MsolUser -ReturnDeletedUsers -TenantId $PartnerComboBox.SelectedItem.TenantID -All | Restore-MsolUser -TenantId $PartnerComboBox.SelectedItem.TenantID
			$TextboxResults.Text = "Users that were deleted have now been restored"
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Restoring all deleted users..."
			$textboxDetails.Text = "Get-MsolUser -All -ReturnDeletedUsers | Restore-MsolUser"
			Get-MsolUser -ReturnDeletedUsers -All | Restore-MsolUser
			$TextboxResults.Text = "Users that were deleted have now been restored"
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

#Quarentine

$getQuarantineBetweenDatesToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$StartDateQuarentine = Read-Host "Enter the beginning date. (Format MM/DD/YYYY)"
			$StartDateText = "Select the beginning date to view quarantine"
			$StartDateFormText = "Start Date"
			Show-SelectDatePicker_psf
			$startdate = $SelectDatePicker_monthcalendar1
			$StartDateQuarentine = "$startdate".trimend('00:00:00')
			If (!$startdate)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No beginning date was selected, please enter a beginning date", "Error")
			}
			Else
			{
				#$EndDateQuarentine = Read-Host "Enter the end date. (Format MM/DD/YYYY)"
				$StartDateText = "Select the ending date to view quarantine"
				$StartDateFormText = "End Date"
				Show-SelectDatePicker_psf
				$enddate = $SelectDatePicker_monthcalendar1
				$EndDateQuarentine = "$enddate".trimend('00:00:00')
				If (!$enddate)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No ending date was selected, please enter a ending date", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Getting quarantine between $StartDateQuarentine and $EndDateQuarentine..."
					$textboxDetails.Text = "Get-QuarantineMessage -StartReceivedDate $StartDateQuarentine -EndReceivedDate $EndDateQuarentine | Format-List ReceivedTime, SenderAddress, RecipientAddress, Subject, Size, Type, Expires, QuarantinedUser, ReleasedUser, Direction "
					$TextboxResults.Text = Get-QuarantineMessage -StartReceivedDate $StartDateQuarentine -EndReceivedDate $EndDateQuarentine | Format-List ReceivedTime, SenderAddress, RecipientAddress, Subject, Size, Type, Expires, QuarantinedUser, ReleasedUser, Direction | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get the Quarentine for another time?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getQuarantineFromASpecificUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$QuarentineFromUser = Read-Host "Enter the E-mail Address you want to see quarentine from"
			If (!$QuarentineFromUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No E-mail Address was entered, please enter a valid E-mail Address", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting Quarantine sent from $QuarentineFromUser ..."
				$textboxDetails.Text = "Get-QuarantineMessage -SenderAddress $QuarentineFromUser | Format-List ReceivedTime, SenderAddress, RecipientAddress, Subject, Size, Type, Expires, QuarantinedUser, ReleasedUser, Direction"
				$TextboxResults.Text = Get-QuarantineMessage -SenderAddress $QuarentineFromUser | Format-List ReceivedTime, SenderAddress, RecipientAddress, Subject, Size, Type, Expires, QuarantinedUser, ReleasedUser, Direction | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to view the Quarantine from a different E-mail Address?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getQuarantineToASpecificUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$QuarentineInfoForUser = Read-Host "Enter the email of the user you want to view quarantine for"
			$AllUsersEmailsText = "Select the E-mail Address or enter in one you want to view Quarantine for"
			Show-SelectAllEmailPrimaryAddresses_psf
			$QuarentineInfoForUser = $SelectAllEmailPrimaryAddresses_comboboxSelectAllEmailAddresses
			If (!$QuarentineInfoForUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No E-mail Address was selected, please select a valid E-mail Address", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting Auarantine sent to $QuarentineInfoForUser..."
				$textboxDetails.Text = " Get-QuarantineMessage -RecipientAddress $QuarentineInfoForUser | Format-List ReceivedTime, SenderAddress, Subject, Size, Type, Expires, QuarantinedUser, ReleasedUser, Direction"
				$TextboxResults.Text = Get-QuarantineMessage -RecipientAddress $QuarentineInfoForUser | Format-List ReceivedTime, SenderAddress, Subject, Size, Type, Expires, QuarantinedUser, ReleasedUser, Direction | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to view the Quarantine sent to another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

#Passwords

$enableStrongPasswordForAUserToolStripMenuItem_Click = {
	Do
	{
		#$UserEnableStrongPasswords = Read-Host "Enter the User Principal Name of the user you want to enable strong password policy for"
		$SelectUsersFormText = "Select the User you want to enable Strong Password Policy for"
		#Call-SelectUsersForm_psf
		Show-SelectCachedUserPrincipalName_psf
		#$GlobalUPNespp = $SelectUsersForm_comboboxUsers
		$GlobalUPNespp = $SelectCachedUserPrincipalName_comboboxUPN
		If (!$GlobalUPNespp)
		{
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
		}
		Else
		{
			#What to do if connected to main o365 account
			If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Enabling Strong Password Policy for $GlobalUPNespp..."
				$textboxDetails.Text = "Set-MsolUser -UserPrincipalName $GlobalUPNespp -StrongPasswordRequired `$True"
				Set-MsolUser -UserPrincipalName $GlobalUPNespp -StrongPasswordRequired $True
				$TextboxResults.text = Get-MsolUser -UserPrincipalName $GlobalUPNespp | Format-List UserPrincipalName, StrongPasswordRequired | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			#What to do if connected to partner account
			ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
			{
				$TenantText = $PartnerComboBox.text
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Enabling Strong Password Policy for $GlobalUPNespp..."
				$textboxDetails.Text = "Set-MsolUser -UserPrincipalName $GlobalUPNespp -StrongPasswordRequired `$True -TenantId $TenantText"
				Set-MsolUser -UserPrincipalName $GlobalUPNespp -StrongPasswordRequired $True -TenantId $PartnerComboBox.SelectedItem.TenantID
				$TextboxResults.text = Get-MsolUser -UserPrincipalName $GlobalUPNespp -TenantId $PartnerComboBox.SelectedItem.TenantID | Format-List UserPrincipalName, StrongPasswordRequired | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Enabling Strong Password Policy for $GlobalUPNespp..."
				$textboxDetails.Text = "Set-MsolUser -UserPrincipalName $GlobalUPNespp -StrongPasswordRequired `$True"
				Set-MsolUser -UserPrincipalName $GlobalUPNespp -StrongPasswordRequired $True
				$TextboxResults.text = Get-MsolUser -UserPrincipalName $GlobalUPNespp | Format-List UserPrincipalName, StrongPasswordRequired | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to enable Strong Password Policy for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getAllUsersStrongPasswordPolicyInfoToolStripMenuItem_Click = {
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting strong password policy for all users..."
			$textboxDetails.Text = "Get-MsolUser -All | Sort-Object DisplayName | Format-Table DisplayName, strongpasswordrequired -AutoSize"
			$TextboxResults.text = Get-MsolUser -All | Sort-Object DisplayName | Format-Table  DisplayName, strongpasswordrequired -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting strong password policy for all users..."
			$textboxDetails.Text = "Get-MsolUser -All -TenantId $TenantText  | Sort-Object DisplayName | Format-Table  DisplayName, strongpasswordrequired -AutoSize"
			$TextboxResults.text = Get-MsolUser -All -TenantId $PartnerComboBox.SelectedItem.TenantID | Sort-Object DisplayName | Format-Table DisplayName, strongpasswordrequired -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting strong password policy for all users..."
			$textboxDetails.Text = "Get-MsolUser -All | Sort-Object DisplayName | Format-Table DisplayName, strongpasswordrequired -AutoSize"
			$TextboxResults.text = Get-MsolUser -All | Sort-Object DisplayName | Format-Table  DisplayName, strongpasswordrequired -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$disableStrongPasswordsForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$UserdisableStrongPasswords = Read-Host "Enter the User Principal Name of the user you want to disable strong password policy for"
			$SelectUsersFormText = "Select the User you want to disable Strong Password Policy for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPNdspp = $SelectUsersForm_comboboxUsers
			$GlobalUPNdspp = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$GlobalUPNdspp)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			Else
			{
				#What to do if connected to main o365 account
				If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Disabling Strong Password Policy for $GlobalUPNdspp..."
					$textboxDetails.Text = "Set-MsolUser -UserPrincipalName $GlobalUPNdspp -StrongPasswordRequired `$False"
					Set-MsolUser -UserPrincipalName $GlobalUPNdspp -StrongPasswordRequired $False
					$TextboxResults.text = Get-MsolUser -UserPrincipalName $GlobalUPNdspp | Format-List UserPrincipalName, StrongPasswordRequired | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
				#What to do if connected to partner account
				ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
				{
					$TenantText = $PartnerComboBox.text
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Disabling Strong Password Policy for $GlobalUPNdspp..."
					$textboxDetails.Text = "Set-MsolUser -UserPrincipalName $GlobalUPNdspp -StrongPasswordRequired `$False -TenantID $TenantText"
					Set-MsolUser -UserPrincipalName $GlobalUPNdspp -StrongPasswordRequired $False -TenantId $PartnerComboBox.SelectedItem.TenantID
					$TextboxResults.text = Get-MsolUser -UserPrincipalName $GlobalUPNdspp -TenantId $PartnerComboBox.SelectedItem.TenantID | Format-List UserPrincipalName, StrongPasswordRequired | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Disabling Strong Password Policy for $GlobalUPNdspp..."
					$textboxDetails.Text = "Set-MsolUser -UserPrincipalName $GlobalUPNdspp -StrongPasswordRequired `$False"
					Set-MsolUser -UserPrincipalName $GlobalUPNdspp -StrongPasswordRequired $False
					$TextboxResults.text = Get-MsolUser -UserPrincipalName $GlobalUPNdspp | Format-List UserPrincipalName, StrongPasswordRequired | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to disable Strong Password Policy for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$enableStrongPasswordsForAllToolStripMenuItem_Click = {
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Enabling strong password policy for all users..."
			$textboxDetails.Text = "Get-MsolUser -All | Set-MsolUser -StrongPasswordRequired `$True"
			Get-MsolUser -All | Set-MsolUser -StrongPasswordRequired $True
			$TextboxResults.text = Get-MsolUser -All | Sort-Object DisplayName | Format-Table  DisplayName, strongpasswordrequired -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Enabling strong password policy for all users..."
			$textboxDetails.Text = "Get-MsolUser -All -TenantId $TenantText | Set-MsolUser -StrongPasswordRequired -TenantId $TenantText `$True"
			Get-MsolUser -All -TenantId $PartnerComboBox.SelectedItem.TenantID | Set-MsolUser -StrongPasswordRequired $True -TenantId $PartnerComboBox.SelectedItem.TenantID
			$TextboxResults.text = Get-MsolUser -All -TenantId $PartnerComboBox.SelectedItem.TenantID | Sort-Object DisplayName | Format-Table  DisplayName, strongpasswordrequired -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Enabling strong password policy for all users..."
			$textboxDetails.Text = "Get-MsolUser -All | Set-MsolUser -StrongPasswordRequired `$True"
			Get-MsolUser -All | Set-MsolUser -StrongPasswordRequired $True
			$TextboxResults.text = Get-MsolUser -All | Sort-Object DisplayName | Format-Table  DisplayName, strongpasswordrequired -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$disableStrongPasswordsForAllToolStripMenuItem_Click = {
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Disabling strong password policy for all users..."
			$textboxDetails.Text = "Get-MsolUser -All | Set-MsolUser -StrongPasswordRequired `$False"
			Get-MsolUser -All | Set-MsolUser -StrongPasswordRequired $False
			$TextboxResults.text = Get-MsolUser -All | Sort-Object DisplayName | Format-Table  DisplayName, strongpasswordrequired -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Disabling strong password policy for all users..."
			$textboxDetails.Text = "Get-MsolUser -All -TenantId $TenantText | Set-MsolUser -StrongPasswordRequired `$False -TenantId $TenantText"
			Get-MsolUser -All -TenantId $PartnerComboBox.SelectedItem.TenantID | Set-MsolUser -StrongPasswordRequired $False -TenantId $PartnerComboBox.SelectedItem.TenantID
			$TextboxResults.text = Get-MsolUser -All -TenantId $PartnerComboBox.SelectedItem.TenantID | Sort-Object DisplayName | Format-Table  DisplayName, strongpasswordrequired -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Disabling strong password policy for all users..."
			$textboxDetails.Text = "Get-MsolUser -All | Set-MsolUser -StrongPasswordRequired `$False"
			Get-MsolUser -All | Set-MsolUser -StrongPasswordRequired $False
			$TextboxResults.text = Get-MsolUser -All | Sort-Object DisplayName | Format-Table  DisplayName, strongpasswordrequired -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$resetPasswordForAUserToolStripMenuItem1_Click = {
	Do
	{
		Try
		{
			#$ResetPasswordUser = Read-Host "Enter the UPN of the user you want to reset the password for"
			$SelectUsersFormText = "Select the User you want to reset the password for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPNrpp = $SelectUsersForm_comboboxUsers
			$GlobalUPNrpp = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$GlobalUPNrpp)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			Else
			{
				$NewPassword = Read-Host "What would you like the new password to be?"
				If (!$NewPassword)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No password was entered for $GlobalUPNrpp, please enter a password", "Error")
				}
				Else
				{
					#What to do if connected to main o365 account
					If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Resetting $GlobalUPNrpp password to $NewPassword..."
						$textboxDetails.Text = "Set-MsolUserPassword –UserPrincipalName $GlobalUPNrpp –NewPassword $NewPassword -ForceChangePassword `$False"
						Set-MsolUserPassword –UserPrincipalName $GlobalUPNrpp –NewPassword $NewPassword -ForceChangePassword $False
						$TextboxResults.Text = "The password for $GlobalUPNrpp has been set to $NewPassword"
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
					#What to do if connected to partner account
					ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
					{
						$TenantText = $PartnerComboBox.text
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Resetting $GlobalUPNrpp password to $NewPassword..."
						$textboxDetails.Text = "Set-MsolUserPassword –UserPrincipalName $GlobalUPNrpp –NewPassword $NewPassword -ForceChangePassword `$False -TenantId $TenantText"
						Set-MsolUserPassword –UserPrincipalName $GlobalUPNrpp –NewPassword $NewPassword -ForceChangePassword $False -TenantId $PartnerComboBox.SelectedItem.TenantID
						$TextboxResults.Text = "The password for $GlobalUPNrpp has been set to $NewPassword"
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
					Else
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Resetting $GlobalUPNrpp password to $NewPassword..."
						$textboxDetails.Text = "Set-MsolUserPassword –UserPrincipalName $GlobalUPNrpp –NewPassword $NewPassword -ForceChangePassword `$False"
						Set-MsolUserPassword –UserPrincipalName $GlobalUPNrpp –NewPassword $NewPassword -ForceChangePassword $False
						$TextboxResults.Text = "The password for $GlobalUPNrpp has been set to $NewPassword"
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to reset another Users password?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$setPasswordToNeverExpireForAllToolStripMenuItem1_Click = {
	Try
	{
		$OUTPUT = [System.Windows.Forms.MessageBox]::Show("Are you sure you want to set everyones password to never expire?", "Warning!", 4)
		If ($OUTPUT -eq "YES")
		{
			#What to do if connected to main o365 account
			If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Setting password to never expire for all..."
				$textboxDetails.Text = "Get-MsolUser -All | Set-MsolUser –PasswordNeverExpires `$True"
				Get-MsolUser -All | Set-MsolUser –PasswordNeverExpires $True
				$TextboxResults.text = Get-MSOLUser -All | Sort-Object UserPrincipalName | Format-Table UserPrincipalName, PasswordNeverExpires -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			#What to do if connected to partner account
			ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
			{
				$TenantText = $PartnerComboBox.text
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Setting password to never expire for all..."
				$textboxDetails.Text = "Get-MsolUser -All -TenantId $TenantText | Set-MsolUser –PasswordNeverExpires `$True -TenantId $TenantText"
				Get-MsolUser -All -TenantId $PartnerComboBox.SelectedItem.TenantID | Set-MsolUser –PasswordNeverExpires $True -TenantId $PartnerComboBox.SelectedItem.TenantID
				$TextboxResults.text = Get-MSOLUser -All -TenantId $PartnerComboBox.SelectedItem.TenantID | Sort-Object UserPrincipalName | Format-Table UserPrincipalName, PasswordNeverExpires -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Setting password to never expire for all..."
				$textboxDetails.Text = "Get-MsolUser -All | Set-MsolUser –PasswordNeverExpires `$True"
				Get-MsolUser -All | Set-MsolUser –PasswordNeverExpires $True
				$TextboxResults.text = Get-MSOLUser -All | Sort-Object UserPrincipalName | Format-Table UserPrincipalName, PasswordNeverExpires -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Else
		{
			[System.Windows.Forms.MessageBox]::Show("No changes have been made", "Info")
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$setPasswordToExpireForAllToolStripMenuItem1_Click = {
	Try
	{
		$OUTPUT = [System.Windows.Forms.MessageBox]::Show("Are you sure you want to set everyones password to expire?", "Warning!", 4)
		If ($OUTPUT -eq "YES")
		{
			#What to do if connected to main o365 account
			If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Setting password to expire for all..."
				$textboxDetails.Text = "Get-MsolUser -All | Set-MsolUser –PasswordNeverExpires `$False"
				Get-MsolUser -All | Set-MsolUser –PasswordNeverExpires $False
				$TextboxResults.text = Get-MSOLUser -All | Sort-Object UserPrincipalName | Format-Table UserPrincipalName, PasswordNeverExpires -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			#What to do if connected to partner account
			ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
			{
				$TenantText = $PartnerComboBox.text
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Setting password to expire for all..."
				$textboxDetails.Text = "Get-MsolUser -All -Tenant $TenantText | Set-MsolUser –PasswordNeverExpires `$False -TenantId $TenantText"
				Get-MsolUser -All -TenantId $PartnerComboBox.SelectedItem.TenantID | Set-MsolUser –PasswordNeverExpires $False -TenantId $PartnerComboBox.SelectedItem.TenantID
				$TextboxResults.text = Get-MSOLUser -All -TenantId $PartnerComboBox.SelectedItem.TenantID | Sort-Object UserPrincipalName | Format-Table UserPrincipalName, PasswordNeverExpires -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Setting password to expire for all..."
				$textboxDetails.Text = "Get-MsolUser -All | Set-MsolUser –PasswordNeverExpires `$False"
				Get-MsolUser -All | Set-MsolUser –PasswordNeverExpires $False
				$TextboxResults.text = Get-MSOLUser -All | Sort-Object UserPrincipalName | Format-Table UserPrincipalName, PasswordNeverExpires -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Else
		{
			[System.Windows.Forms.MessageBox]::Show("No changes have been made", "Info")
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$resetPasswordForAllToolStripMenuItem_Click = {
	Try
	{
		$SetPasswordforAll = Read-Host "What password would you like to set for all users?"
		If (!$SetPasswordforAll)
		{
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("No password was entered, please enter a valid password", "Error")
		}
		Else
		{
			$OUTPUT = [System.Windows.Forms.MessageBox]::Show("Are you sure you want to change all users password to $SetPasswordforAll", "Warning!", 4)
			If ($OUTPUT -eq "YES")
			{
				#What to do if connected to main o365 account
				If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Resetting all users passwords to $SetPasswordforAll..."
					$textboxDetails.Text = "Get-MsolUser -All | ForEach-Object{ 
Set-MsolUserPassword -userPrincipalName `$_.UserPrincipalName –NewPassword $SetPasswordforAll -ForceChangePassword `$False }"
					Get-MsolUser -All | ForEach-Object{ Set-MsolUserPassword -UserPrincipalName $_.UserPrincipalName –NewPassword $SetPasswordforAll -ForceChangePassword $False }
					$TextboxResults.Text = "Password for all users has been set to $SetPasswordforAll"
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
				#What to do if connected to partner account
				ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
				{
					$TenantText = $PartnerComboBox.text
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Resetting all users passwords to $SetPasswordforAll..."
					$textboxDetails.Text = "Get-MsolUser -All -TenantId $TenantText | ForEach-Object{ 
Set-MsolUserPassword -TenantId $TenantText -userPrincipalName `$_.UserPrincipalName –NewPassword $SetPasswordforAll -ForceChangePassword `$False }"
					Get-MsolUser -All -TenantId $PartnerComboBox.SelectedItem.TenantID | ForEach-Object { Set-MsolUserPassword -TenantId $PartnerComboBox.SelectedItem.TenantID -UserPrincipalName $_.UserPrincipalName –NewPassword $SetPasswordforAll -ForceChangePassword $False }
					$TextboxResults.Text = "Password for all users has been set to $SetPasswordforAll"
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Resetting all users passwords to $SetPasswordforAll..."
					$textboxDetails.Text = "Get-MsolUser -All | ForEach-Object{ 
Set-MsolUserPassword -userPrincipalName `$_.UserPrincipalName –NewPassword $SetPasswordforAll -ForceChangePassword `$False }"
					Get-MsolUser -All | ForEach-Object{ Set-MsolUserPassword -UserPrincipalName $_.UserPrincipalName –NewPassword $SetPasswordforAll -ForceChangePassword $False }
					$TextboxResults.Text = "Password for all users has been set to $SetPasswordforAll"
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
			Else
			{
				[System.Windows.Forms.MessageBox]::Show("No user passwords have not been changed", "Info")
			}
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$setATemporaryPasswordForAllToolStripMenuItem_Click = {
	Try
	{
		$SetTempPasswordforAll = Read-Host "What password would you like to set for all users?"
		If (!$SetTempPasswordforAll)
		{
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("No password was entered, please enter a valid password", "Error")
		}
		Else
		{
			$OUTPUT = [System.Windows.Forms.MessageBox]::Show("Are you sure you want change all users passwords to $SetTempPasswordforAll", "Warning!", 4)
			If ($OUTPUT -eq "YES")
			{
				#What to do if connected to main o365 account
				If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Setting $SetTempPasswordforAll as the temporary password for all users..."
					$textboxDetails.Text = "Get-MsolUser -All | Set-MsolUserPassword –NewPassword $SetTempPasswordforAll -ForceChangePassword `$True"
					Get-MsolUser -All | Set-MsolUserPassword –NewPassword $SetTempPasswordforAll -ForceChangePassword $True
					$TextboxResults.Text = "Temporary password has been set to $SetTempPasswordforAll Please note that users will be prompted to change it upon logon"
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
				#What to do if connected to partner account
				ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
				{
					$TenantText = $PartnerComboBox.text
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Setting $SetTempPasswordforAll as the temporary password for all users..."
					$textboxDetails.Text = "Get-MsolUser -TenantId $PartnerComboBox.SelectedItem.TenantID -All | Set-MsolUserPassword -TenantId $TenantText –NewPassword $SetTempPasswordforAll -ForceChangePassword `$True"
					Get-MsolUser -TenantId $PartnerComboBox.SelectedItem.TenantID -All | Set-MsolUserPassword -TenantId $PartnerComboBox.SelectedItem.TenantID –NewPassword $SetTempPasswordforAll -ForceChangePassword $True
					$TextboxResults.Text = "Temporary password has been set to $SetTempPasswordforAll Please note that users will be prompted to change it upon logon"
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Setting $SetTempPasswordforAll as the temporary password for all users..."
					$textboxDetails.Text = "Get-MsolUser -All | Set-MsolUserPassword –NewPassword $SetTempPasswordforAll -ForceChangePassword `$True"
					Get-MsolUser -All | Set-MsolUserPassword –NewPassword $SetTempPasswordforAll -ForceChangePassword $True
					$TextboxResults.Text = "Temporary password has been set to $SetTempPasswordforAll Please note that users will be prompted to change it upon logon"
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
			Else
			{
				[System.Windows.Forms.MessageBox]::Show("No user passwords have not been changed", "Info")
			}
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
	
}

$TemporaryPasswordForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$ResetPasswordUser2 = Read-Host "Enter the UPN of the user you want to reset the password for"
			$SelectUsersFormText = "Select the User you want to reset the password for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPNrtp = $SelectUsersForm_comboboxUsers
			$GlobalUPNrtp = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$GlobalUPNrtp)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			Else
			{
				$NewPassword2 = Read-Host "What would you like the new password to be?"
				If (!$NewPassword2)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No password was entered, please enter a valid password", "Error")
				}
				Else
				{
					#What to do if connected to main o365 account
					If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Setting $NewPassword2 as the temporary password for $GlobalUPNrtp..."
						$textboxDetails.Text = "Set-MsolUserPassword –UserPrincipalName $GlobalUPNrtp –NewPassword $NewPassword2 -ForceChangePassword `$True"
						Set-MsolUserPassword –UserPrincipalName $GlobalUPNrtp –NewPassword $NewPassword2 -ForceChangePassword $True
						$TextboxResults.Text = "Temporary password has been set to $NewPassword2 Please note that $GlobalUPNrtp will be prompted to change it upon logon"
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
					#What to do if connected to partner account
					ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
					{
						$TenantText = $PartnerComboBox.text
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Setting $NewPassword2 as the temporary password for $GlobalUPNrtp..."
						$textboxDetails.Text = "Set-MsolUserPassword -TenantId $TenantText –UserPrincipalName $GlobalUPNrtp –NewPassword $NewPassword2 -ForceChangePassword `$True"
						Set-MsolUserPassword -TenantId $PartnerComboBox.SelectedItem.TenantID –UserPrincipalName $GlobalUPNrtp –NewPassword $NewPassword2 -ForceChangePassword $True
						$TextboxResults.Text = "Temporary password has been set to $NewPassword2 Please note that $GlobalUPNrtp will be prompted to change it upon logon"
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
					Else
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Setting $NewPassword2 as the temporary password for $GlobalUPNrtp..."
						$textboxDetails.Text = "Set-MsolUserPassword –UserPrincipalName $GlobalUPNrtp –NewPassword $NewPassword2 -ForceChangePassword `$True"
						Set-MsolUserPassword –UserPrincipalName $GlobalUPNrtp –NewPassword $NewPassword2 -ForceChangePassword $True
						$TextboxResults.Text = "Temporary password has been set to $NewPassword2 Please note that $GlobalUPNrtp will be prompted to change it upon logon"
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to set a temporary password for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getPasswordResetDateForAUserToolStripMenuItem_Click = {
	Try
	{
		#$GetPasswordInfoUser = Read-Host "Enter the UPN of the user you want to view the password last changed date for"
		$SelectUsersFormText = "Select the user you want to view last password changed date for"
		#Call-SelectUsersForm_psf
		Show-SelectCachedUserPrincipalName_psf
		#$GlobalUPNgpifu = $SelectUsersForm_comboboxUsers
		$GlobalUPNgpifu = $SelectCachedUserPrincipalName_comboboxUPN
		If (!$GlobalUPNgpifu)
		{
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a user", "Error")
		}
		Else
		{
			#What to do if connected to main o365 account
			If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting last password reset date for $GlobalUPNgpifu..."
				$textboxDetails.Text = "Get-MsolUser -userprincipalname $GlobalUPNgpifu | Format-List UserPrincipalName, lastpasswordchangetimestamp"
				$TextboxResults.Text = Get-MsolUser -userprincipalname $GlobalUPNgpifu | Format-List UserPrincipalName, lastpasswordchangetimestamp | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			#What to do if connected to partner account
			ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
			{
				$TenantText = $PartnerComboBox.text
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting last password reset date for $GlobalUPNgpifu..."
				$textboxDetails.Text = "Get-MsolUser -TenantId $TenantText -userprincipalname $GlobalUPNgpifu | Format-List UserPrincipalName, lastpasswordchangetimestamp"
				$TextboxResults.Text = Get-MsolUser -TenantId $PartnerComboBox.SelectedItem.TenantID -userprincipalname $GlobalUPNgpifu | Format-List UserPrincipalName, lastpasswordchangetimestamp | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting last password reset date for $GlobalUPNgpifu..."
				$textboxDetails.Text = "Get-MsolUser -userprincipalname $GlobalUPNgpifu | Format-List UserPrincipalName, lastpasswordchangetimestamp"
				$TextboxResults.Text = Get-MsolUser -userprincipalname $GlobalUPNgpifu | Format-List UserPrincipalName, lastpasswordchangetimestamp | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
	
}

$getPasswordLastResetDateForAllToolStripMenuItem_Click = {
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting last password reset date for all users..."
			$textboxDetails.Text = "Get-MsolUser -All | Sort-Object UserPrincipalName | Format-Table UserPrincipalName, lastpasswordchangetimestamp -AutoSize "
			$TextboxResults.Text = Get-MsolUser -All | Sort-Object UserPrincipalName | Format-Table UserPrincipalName, lastpasswordchangetimestamp -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting last password reset date for all users..."
			$textboxDetails.Text = "Get-MsolUser -All -TenantId $TenantText | Sort-Object UserPrincipalName | Format-Table UserPrincipalName, lastpasswordchangetimestamp -AutoSize "
			$TextboxResults.Text = Get-MsolUser -All -TenantId $PartnerComboBox.SelectedItem.TenantID | Sort-Object UserPrincipalName | Format-Table UserPrincipalName, lastpasswordchangetimestamp -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting last password reset date for all users..."
			$textboxDetails.Text = "Get-MsolUser -All | Sort-Object UserPrincipalName | Format-Table UserPrincipalName, lastpasswordchangetimestamp -AutoSize "
			$TextboxResults.Text = Get-MsolUser -All | Sort-Object UserPrincipalName | Format-Table UserPrincipalName, lastpasswordchangetimestamp -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$setPasswordToExpireForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$PasswordtoExpireforUser = Read-Host "Enter the UPN of the user you want the password to expire for"
			$SelectUsersFormText = "Select the User you want to set password to expire for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPNspte = $SelectUsersForm_comboboxUsers
			$GlobalUPNspte = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$GlobalUPNspte)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			Else
			{
				#What to do if connected to main o365 account
				If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Setting password to expire for $GlobalUPNspte..."
					$textboxDetails.Text = "Set-MsolUser -UserPrincipalName $GlobalUPNspte –PasswordNeverExpires `$False"
					Set-MsolUser -UserPrincipalName $GlobalUPNspte –PasswordNeverExpires $False
					$TextboxResults.text = Get-MSOLUser -UserPrincipalName $GlobalUPNspte | Format-List UserPrincipalName, PasswordNeverExpires | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
				#What to do if connected to partner account
				ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
				{
					$TenantText = $PartnerComboBox.text
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Setting password to expire for $GlobalUPNspte..."
					$textboxDetails.Text = "Set-MsolUser -TenantId $TenantText -UserPrincipalName $GlobalUPNspte –PasswordNeverExpires `$False"
					Set-MsolUser -TenantId $PartnerComboBox.SelectedItem.TenantID -UserPrincipalName $GlobalUPNspte –PasswordNeverExpires $False
					$TextboxResults.text = Get-MSOLUser -TenantId $PartnerComboBox.SelectedItem.TenantID -UserPrincipalName $GlobalUPNspte | Format-List UserPrincipalName, PasswordNeverExpires | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Setting password to expire for $GlobalUPNspte..."
					$textboxDetails.Text = "Set-MsolUser -UserPrincipalName $GlobalUPNspte –PasswordNeverExpires `$False"
					Set-MsolUser -UserPrincipalName $GlobalUPNspte –PasswordNeverExpires $False
					$TextboxResults.text = Get-MSOLUser -UserPrincipalName $GlobalUPNspte | Format-List UserPrincipalName, PasswordNeverExpires | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to set the password to expire for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$setPasswordToNeverExpireForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$PasswordtoNeverExpireforUser = Read-Host "Enter the UPN of the user you want the password to never expire for"
			$SelectUsersFormText = "Select the User you want to set the password to never expire"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$PasswordtoNeverExpireforUser = $SelectUsersForm_comboboxUsers
			$PasswordtoNeverExpireforUser = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$PasswordtoNeverExpireforUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			Else
			{
				#What to do if connected to main o365 account
				If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Setting password to never expire for $PasswordtoNeverExpireforUser..."
					$textboxDetails.Text = "Set-MsolUser -UserPrincipalName $PasswordtoNeverExpireforUser –PasswordNeverExpires `$True"
					Set-MsolUser -UserPrincipalName $PasswordtoNeverExpireforUser –PasswordNeverExpires $True
					$TextboxResults.text = Get-MSOLUser -UserPrincipalName $PasswordtoNeverExpireforUser | Format-List UserPrincipalName, PasswordNeverExpires | Out-String -Width 2147483647
					
				}
				#What to do if connected to partner account
				ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
				{
					$TenantText = $PartnerComboBox.text
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Setting password to never expire for $PasswordtoNeverExpireforUser..."
					$textboxDetails.Text = "Set-MsolUser -TenantId $TenantText -UserPrincipalName $PasswordtoNeverExpireforUser –PasswordNeverExpires `$True"
					Set-MsolUser -TenantId $PartnerComboBox.SelectedItem.TenantID -UserPrincipalName $PasswordtoNeverExpireforUser –PasswordNeverExpires $True
					$TextboxResults.text = Get-MSOLUser -TenantId $PartnerComboBox.SelectedItem.TenantID -UserPrincipalName $PasswordtoNeverExpireforUser | Format-List UserPrincipalName, PasswordNeverExpires | Out-String -Width 2147483647
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Setting password to never expire for $PasswordtoNeverExpireforUser..."
					$textboxDetails.Text = "Set-MsolUser -UserPrincipalName $PasswordtoNeverExpireforUser –PasswordNeverExpires `$True"
					Set-MsolUser -UserPrincipalName $PasswordtoNeverExpireforUser –PasswordNeverExpires $True
					$TextboxResults.text = Get-MSOLUser -UserPrincipalName $PasswordtoNeverExpireforUser | Format-List UserPrincipalName, PasswordNeverExpires | Out-String -Width 2147483647
					
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to set the password to never expire for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getUsersWhosPasswordNeverExpiresToolStripMenuItem_Click = {
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting users where the password is set to never expire..."
			$textboxDetails.Text = "Get-MsolUser -All | Where-Object { `$_.PasswordNeverExpires -eq `$True } | Sort-Object UserPrincipalName | Format-Table UserPrincipalName, PasswordNeverExpires"
			$TextboxResults.text = Get-MsolUser -All | Where-Object { $_.PasswordNeverExpires -eq $True } | Sort-Object UserPrincipalName | Format-Table UserPrincipalName, PasswordNeverExpires | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting users where the password is set to never expire..."
			$textboxDetails.Text = "Get-MsolUser -All -TenantId $TenantText | Where-Object { `$_.PasswordNeverExpires -eq `$True } | Sort-Object UserPrincipalName | Format-Table UserPrincipalName, PasswordNeverExpires"
			$TextboxResults.text = Get-MsolUser -All -TenantId $PartnerComboBox.SelectedItem.TenantID | Where-Object { $_.PasswordNeverExpires -eq $True } | Sort-Object UserPrincipalName | Format-Table UserPrincipalName, PasswordNeverExpires | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting users where the password is set to never expire..."
			$textboxDetails.Text = "Get-MsolUser -All | Where-Object { `$_.PasswordNeverExpires -eq `$True } | Sort-Object UserPrincipalName | Format-Table UserPrincipalName, PasswordNeverExpires"
			$TextboxResults.text = Get-MsolUser -All | Where-Object { $_.PasswordNeverExpires -eq $True } | Sort-Object UserPrincipalName | Format-Table UserPrincipalName, PasswordNeverExpires | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getUsersWhosPasswordWillExpireToolStripMenuItem_Click = {
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting users where the password is set to expire..."
			$textboxDetails.Text = "Get-MsolUser -All | Where-Object { `$_.PasswordNeverExpires -eq `$False } | Sort-Object UserPrincipalName | Format-Table UserPrincipalName, PasswordNeverExpires"
			$TextboxResults.text = Get-MsolUser -All | Where-Object { $_.PasswordNeverExpires -eq $False } | Sort-Object UserPrincipalName | Format-Table UserPrincipalName, PasswordNeverExpires | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting users where the password is set to expire..."
			$textboxDetails.Text = "Get-MsolUser -All -TenantId $TenantText | Where-Object { `$_.PasswordNeverExpires -eq `$False } | Sort-Object UserPrincipalName | Format-Table UserPrincipalName, PasswordNeverExpires"
			$TextboxResults.text = Get-MsolUser -All -TenantId $PartnerComboBox.SelectedItem.TenantID | Where-Object { $_.PasswordNeverExpires -eq $False } | Sort-Object UserPrincipalName | Format-Table UserPrincipalName, PasswordNeverExpires | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
			}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting users where the password is set to expire..."
			$textboxDetails.Text = "Get-MsolUser -All | Where-Object { `$_.PasswordNeverExpires -eq `$False } | Sort-Object UserPrincipalName | Format-Table UserPrincipalName, PasswordNeverExpires"
			$TextboxResults.text = Get-MsolUser -All | Where-Object { $_.PasswordNeverExpires -eq $False } | Sort-Object UserPrincipalName | Format-Table UserPrincipalName, PasswordNeverExpires | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getPasswordLastResetDateForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$GetPasswordInfoUser = Read-Host "Enter the UPN of the user you want to view the password last changed date for"
			$SelectUsersFormText = "Select the User you want to view the password last changed date for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GetPasswordInfoUser = $SelectUsersForm_comboboxUsers
			$GetPasswordInfoUser = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$GetPasswordInfoUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			Else
			{
				#What to do if connected to main o365 account
				If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Getting last password reset date for $GetPasswordInfoUser..."
					$textboxDetails.Text = "Get-MsolUser -userprincipalname $GetPasswordInfoUser | Format-List UserPrincipalName, lastpasswordchangetimestamp"
					$TextboxResults.Text = Get-MsolUser -userprincipalname $GetPasswordInfoUser | Format-List UserPrincipalName, lastpasswordchangetimestamp | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
				#What to do if connected to partner account
				ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
				{
					$TenantText = $PartnerComboBox.text
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Getting last password reset date for $GetPasswordInfoUser..."
					$textboxDetails.Text = "Get-MsolUser -TenantId $TenantText -UserPrincipalName $GetPasswordInfoUser | Format-List UserPrincipalName, lastpasswordchangetimestamp"
					$TextboxResults.Text = Get-MsolUser -TenantId $PartnerComboBox.SelectedItem.TenantID -userprincipalname $GetPasswordInfoUser | Format-List UserPrincipalName, lastpasswordchangetimestamp | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Getting last password reset date for $GetPasswordInfoUser..."
					$textboxDetails.Text = "Get-MsolUser -userprincipalname $GetPasswordInfoUser | Format-List UserPrincipalName, lastpasswordchangetimestamp"
					$TextboxResults.Text = Get-MsolUser -userprincipalname $GetPasswordInfoUser | Format-List UserPrincipalName, lastpasswordchangetimestamp | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get the last password reset date for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getUsersNextPasswordResetDateToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$NextUserResetDateUser = Read-Host "Enter the UPN of the user"
			$SelectUsersFormText = "Select the User you want to view the next password reset date for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$NextUserResetDateUser = $SelectUsersForm_comboboxUsers
			$NextUserResetDateUser = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$NextUserResetDateUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			Else
			{
				$VarDate = Read-Host "Enter days before passwords expires. EX: 90"
				If (!$VarDate)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No number was entered, please enter a valid number", "Error")
				}
				Else
				{
					#What to do if connected to main o365 account
					If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Getting $NextUserResetDateUser next password reset date..."
						$textboxDetails.Text = "(Get-MSOLUser -All -userprincipalname $NextUserResetDateUser).lastpasswordchangetimestamp.adddays($VarDate) | Format-List DateTime"
						$TextboxResults.Text = (Get-MSOLUser -All -userprincipalname $NextUserResetDateUser).lastpasswordchangetimestamp.adddays($VarDate) | Format-List DateTime | Out-String -Width 2147483647
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
					#What to do if connected to partner account
					ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
					{
						$TenantText = $PartnerComboBox.text
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Getting $NextUserResetDateUser next password reset date..."
						$textboxDetails.Text = "(Get-MSOLUser -All -TenantId $TenantText -userprincipalname $NextUserResetDateUser).lastpasswordchangetimestamp.adddays($VarDate) | Format-List DateTime"
						$TextboxResults.Text = (Get-MsolUser -All -TenantId $PartnerComboBox.SelectedItem.TenantID -userprincipalname $NextUserResetDateUser).lastpasswordchangetimestamp.adddays($VarDate) | Format-List DateTime | Out-String -Width 2147483647
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
					Else
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Getting $NextUserResetDateUser next password reset date..."
						$textboxDetails.Text = "(Get-MSOLUser -All -userprincipalname $NextUserResetDateUser).lastpasswordchangetimestamp.adddays($VarDate) | Format-List DateTime"
						$TextboxResults.Text = (Get-MSOLUser -All -userprincipalname $NextUserResetDateUser).lastpasswordchangetimestamp.adddays($VarDate) | Format-List DateTime | Out-String -Width 2147483647
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get the next password reset date for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
}

#Mailbox Permissions

$addFullPermissionsToAMailboxToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$SelectUsersFormText = "Select the User you are changing permissions for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedDisplayNames_psf
			#$mailboxAccess = $SelectUsersForm_comboboxUsers
			$mailboxAccess = $SelectCachedDisplayNames_comboboxNames
			#$mailboxAccess = read-host "Mailbox you want to give full-access to"
			If (!$mailboxAccess)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			Else
			{
				$SelectUsersFormText = "Select the User you want to give full access to $mailboxAccess"
				#Call-SelectUsersForm_psf
				Show-SelectCachedDisplayNames_psf
				#$mailboxUser = $SelectUsersForm_comboboxUsers
				$mailboxUser = $SelectCachedDisplayNames_comboboxNames
				#$mailboxUser = read-host "Enter the UPN of the user that will have full access"
				If (!$mailboxUser)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Assigning full access permissions to $mailboxUser for the account $mailboxAccess..."
					$textboxDetails.Text = "Add-MailboxPermission -identity $mailboxAccess -User $mailboxUser -AccessRights FullAccess -InheritanceType All"
					$TextboxResults.text = Add-MailboxPermission -identity $mailboxAccess -User $mailboxUser -AccessRights FullAccess -InheritanceType All | Format-List | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to modify permissions for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$addSendAsPermissionToAMailboxToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$SendAsAccess = read-host "Mailbox you want to give Send As access to"
			$SelectUsersFormText = "Select the User you want to modify Send As access permissions for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedDisplayNames_psf
			#$SendAsAccess = $SelectUsersForm_comboboxUsers
			$SendAsAccess = $SelectCachedDisplayNames_comboboxNames
			If (!$SendAsAccess)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			Else
			{
				#$mailboxUserAccess = read-host "Enter the UPN of the user that will have Send As access"
				$SelectUsersFormText = "Select the User you want to give Send As access to $SendAsAccess"
				#Call-SelectUsersForm_psf
				Show-SelectCachedDisplayNames_psf
				#$mailboxUserAccess = $SelectUsersForm_comboboxUsers
				$mailboxUserAccess = $SelectCachedDisplayNames_comboboxNames
				If (!$mailboxUserAccess)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Assigning Send-As access to $mailboxUserAccess for the account $SendAsAccess..."
					$textboxDetails.Text = "Add-RecipientPermission $SendAsAccess -Trustee $mailboxUserAccess -AccessRights SendAs"
					$TextboxResults.text = Add-RecipientPermission $SendAsAccess -Trustee $mailboxUserAccess -AccessRights SendAs | Format-List | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to modify permissions for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$assignSendOnBehalfPermissionsForAMailboxToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$SendonBehalfof = read-host "Mailbox you want to give Send on Behalf access to"
			$SelectUsersFormText = "Select the User you want to modify Send on Behalf permissions for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedDisplayNames_psf
			#$SendonBehalfof = $SelectUsersForm_comboboxUsers
			$SendonBehalfof = $SelectCachedDisplayNames_comboboxNames
			If (!$SendonBehalfof)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			Else
			{
				#$mailboxUserSendonBehalfAccess = read-host "Enter the UPN of the user that will have Send As access"
				$SelectUsersFormText = "Select the User you want to give Send on Behalf permissions for $SendonBehalfof"
				#Call-SelectUsersForm_psf
				Show-SelectCachedDisplayNames_psf
				#$mailboxUserSendonBehalfAccess = $SelectUsersForm_comboboxUsers
				$mailboxUserSendonBehalfAccess = $SelectCachedDisplayNames_comboboxNames
				If (!$mailboxUserSendonBehalfAccess)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a user", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Assigning Send On Behalf of permissions to $mailboxUserSendonBehalfAccess for the account $SendonBehalfof..."
					$textboxDetails.Text = "Set-Mailbox -Identity $SendonBehalfof -GrantSendOnBehalfTo $mailboxUserSendonBehalfAccess"
					Set-Mailbox -Identity $SendonBehalfof -GrantSendOnBehalfTo $mailboxUserSendonBehalfAccess
					$TextboxResults.text = Get-Mailbox -Identity $SendonBehalfof | Format-List Identity, GrantSendOnBehalfTo | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to modify permissions for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$displayMailboxPermissionsForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$MailboxUserFullAccessPermission = Read-Host "Enter the UPN of the user want to view Full Access permissions for"
			$SelectUsersFormText = "Select the user you want to view Full Access permissions for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedDisplayNames_psf
			#$MailboxUserFullAccessPermission = $SelectUsersForm_comboboxUsers
			$MailboxUserFullAccessPermission = $SelectCachedDisplayNames_comboboxNames
			If (!$MailboxUserFullAccessPermission)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a user", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting Full Access permissions for $MailboxUserFullAccessPermission..."
				$textboxDetails.Text = "Get-MailboxPermission $MailboxUserFullAccessPermission | Where-Object { (`$_.IsInherited -eq `$False) -and (`$_.User -notcontains 'NT AUTHORITY\SELF') } | Sort-Object User | Format-Table -AutoSize"
				$TextboxResults.text = Get-MailboxPermission $MailboxUserFullAccessPermission | Where-Object { ($_.IsInherited -eq $False) -and ($_.User -notcontains 'NT AUTHORITY\SELF') } | Sort-Object User | Format-Table -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to view Mailboxes permission for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

<# $displaySendAsPermissionForAMailboxToolStripMenuItem_Click = {
	#$MailboxUserSendAsPermission = Read-Host "Enter the UPN of the user you want to view Send As permissions for"
	$SelectUsersFormText = "Select the user you want to view Send As permissions for"
	Call-SelectUsersForm_psf
	$MailboxUserSendAsPermission = $SelectUsersForm_comboboxUsers
	try
	{
		$TextboxResults.Text = "Getting Send As Permissions for $MailboxUserSendAsPermission..."
		$textboxDetails.Text = "Get-RecipientPermission $MailboxUserSendAsPermission | Where-Object { (`$_.IsInherited -eq `$False) -and -not (`$_.Trustee -like 'NT AUTHORITY\SELF') } | Sort-Object User | Format-Table -AutoSize"
		$TextboxResults.text = Get-RecipientPermission $MailboxUserSendAsPermission | Where-Object { ($_.IsInherited -eq $False) -and -not ($_.Trustee -like "NT AUTHORITY\SELF") } | Sort-Object User | Format-Table -AutoSize | Out-String
	}
	Catch
	{
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}

}
#>

<#
$displaySendOnBehalfPermissionsForMailboxToolStripMenuItem_Click = {
	#$MailboxUserSendonPermission = Read-Host "Enter the UPN of the user you want to view Send On Behalf Of permission for"
	$SelectUsersFormText = "Select the user you want to view Send on Behalf permissions for"
	Call-SelectUsersForm_psf
	$MailboxUserSendonPermission = $SelectUsersForm_comboboxUsers
	try
	{
		$TextboxResults.Text = "Getting Send On Behalf permissions for $MailboxUserSendonPermission..."
		$textboxDetails.Text = "Get-RecipientPermission $MailboxUserSendonPermission | Where-Object { (`$_.IsInherited -eq `$False) -and -not (`$_.Trustee -like 'NT AUTHORITY\SELF') } | Sort-Object User | Format-Table"
		$TextboxResults.text = Get-RecipientPermission $MailboxUserSendonPermission | Where-Object { ($_.IsInherited -eq $False) -and -not ($_.Trustee -like "NT AUTHORITY\SELF") } | Sort-Object User | Format-Table | Out-String
	}
	Catch
	{
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}
#>

$removeFullAccessPermissionsForAMailboxToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$UserRemoveFullAccessRights = Read-Host "What user mailbox would you like modify Full Access rights to"
			$SelectUsersFormText = "Select the User you want to modify Full Access rights for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedDisplayNames_psf
			#$UserRemoveFullAccessRights = $SelectUsersForm_comboboxUsers
			$UserRemoveFullAccessRights = $SelectCachedDisplayNames_comboboxNames
			If (!$UserRemoveFullAccessRights)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			Else
			{
				#$RemoveFullAccessRightsUser = Read-Host "Enter the UPN of the user you want to remove"
				$FullPermissionsText = "Select the User you want to remove"
				Show-SelectUserFullPermissions_psf
				$RemoveFullAccessRightsUser = $SelectUserFullPermissions_comboboxSelectFullAccessUsers
				If (!$RemoveFullAccessRightsUser)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Removing Full Access Permissions for $RemoveFullAccessRightsUser on account $UserRemoveFullAccessRights..."
					$textboxDetails.Text = "Remove-MailboxPermission  $UserRemoveFullAccessRights -User $RemoveFullAccessRightsUser -AccessRights FullAccess -Confirm:`$False -ea 1"
					Remove-MailboxPermission  $UserRemoveFullAccessRights -User $RemoveFullAccessRightsUser -AccessRights FullAccess -Confirm:$False -ea 1
					$TextboxResults.text = Get-MailboxPermission $UserRemoveFullAccessRights | Where-Object { ($_.IsInherited -eq $False) -and -not ($_.User -like "NT AUTHORITY\SELF") } | Sort-Object User | Format-Table | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to modify permissions for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$revokeSendAsPermissionsForAMailboxToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$UserDeleteSendAsAccessOn = Read-Host "What user mailbox would you like to modify Send As permission for?"
			$SelectUsersFormText = "Select the User you want to modify Send As permissions for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedDisplayNames_psf
			#$GlobalUserCurrentPermissions = $SelectUsersForm_comboboxUsers
			$GlobalUserCurrentPermissions = $SelectCachedDisplayNames_comboboxNames
			If (!$GlobalUserCurrentPermissions)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			Else
			{
				#$UserDeleteSendAsAccess = Read-Host "Enter the UPN of the user you want to remove Send As access to?"
				$CurrentMailboxPermissionsText = "Select the user you want to remove Send As access to"
				Show-SelectExistingMailboxPermissions_psf
				$UserDeleteSendAsAccess = $SelectExistingMailboxPermissions_comboboxSelectCurrentPermissions
				If (!$UserDeleteSendAsAccess)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Removing Send As permission for $UserDeleteSendAsAccess on account $GlobalUserCurrentPermissions..."
					$textboxDetails.Text = "Remove-RecipientPermission $GlobalUserCurrentPermissions -AccessRights SendAs -Trustee $UserDeleteSendAsAccess"
					$TextboxResults.Text = Remove-RecipientPermission $GlobalUserCurrentPermissions -AccessRights SendAs -Trustee $UserDeleteSendAsAccess | Sort-Object User | Format-Table | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
					
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to modify permissions for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$viewAllMailboxesAUserHasFullAccessToToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$ViewAllFullAccess = Read-Host "Enter the UPN of the account you want to view"
			$SelectUsersFormText = "Select the User you want to view"
			#Call-SelectUsersForm_psf
			Show-SelectCachedDisplayNames_psf
			#$ViewAllFullAccess = $SelectUsersForm_comboboxUsers
			$ViewAllFullAccess = $SelectCachedDisplayNames_comboboxNames
			If (!$ViewAllFullAccess)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting all mailboxes $ViewAllFullAccess has Full Access permissions to..."
				$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Get-MailboxPermission -User $ViewAllFullAccess |  Sort-Object Identity | Format-Table"
				$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Get-MailboxPermission -User $ViewAllFullAccess | Sort-Object Identity | Format-Table | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to view all Mailboxes another user has Full Access to?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$viewAllMailboxesAUserHasSendAsPermissionsToToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$ViewSendAsAccess = Read-Host "Enter the UPN of the account you want to view"
			$SelectUsersFormText = "Select the user you want to view all accounts they have Send As permissions for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedDisplayNames_psf
			$ViewSendAsAccess = $SelectUsersForm_comboboxUsers
			$ViewSendAsAccess = $SelectCachedDisplayNames_comboboxNames
			If (!$ViewSendAsAccess)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a user", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting all mailboxes $ViewSendAsAccess has Send As permissions to..."
				$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Get-RecipientPermission -Trustee $ViewSendAsAccess | Sort-Object Identity | Format-Table"
				$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Get-RecipientPermission -Trustee $ViewSendAsAccess | Sort-Object Identity | Format-Table | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to view all Mailboxes another user has Send As Permission to?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$viewAllMailboxesAUserHasSendOnBehaldPermissionsToToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$ViewSendonBehalf = Read-Host "Enter the Name of the account you want to view"
			$SelectUsersFormText = "Select the User you want to view all accounts they have Send On Behalf Of permissiosn for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedDisplayNames_psf
			#$ViewSendonBehalf = $SelectUsersForm_comboboxUsers
			$ViewSendonBehalf = $SelectCachedDisplayNames_comboboxNames
			If (!$ViewSendonBehalf)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting all mailboxes $ViewSendonBehalf has Send On Behalf permissions to..."
				$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Where-Object { `$_.GrantSendOnBehalfTo -match $ViewSendonBehalf } | Sort-Object DisplayName | Format-Table DisplayName, GrantSendOnBehalfTo, PrimarySmtpAddress, RecipientType"
				$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Where-Object { $_.GrantSendOnBehalfTo -match $ViewSendonBehalf } | Sort-Object DisplayName | Format-Table DisplayName, GrantSendOnBehalfTo, PrimarySmtpAddress, RecipientType | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to view all Mailboxes another user has Send on Behalf to?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$removeAllPermissionsToAMailboxToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$UserDeleteAllAccessOn = Read-Host "What user mailbox would you like to modify permissions for?"
			$SelectUsersFormText = "Select the User you want to modify permissions for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedDisplayNames_psf
			#$GlobalUserCurrentPermissions = $SelectUsersForm_comboboxUsers
			$GlobalUserCurrentPermissions = $SelectCachedDisplayNames_comboboxNames
			If (!$GlobalUserCurrentPermissions)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			Else
			{
				#$UserDeleteAllAccess = Read-Host "Enter the UPN of the user you want to remove access to?"
				$CurrentMailboxPermissionsText = "Select the User you want to remove access to"
				Show-SelectExistingMailboxPermissions_psf
				$UserDeleteAllAccess = $SelectExistingMailboxPermissions_comboboxSelectCurrentPermissions
				If (!$UserDeleteAllAccess)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Removing all permissions for $UserDeleteAllAccess on account $GlobalUserCurrentPermissions..."
					$textboxDetails.Text = "Remove-MailboxPermission -Identity $GlobalUserCurrentPermissions -User $UserDeleteAllAccess -AccessRights FullAccess -InheritanceType All"
					Remove-MailboxPermission -Identity $GlobalUserCurrentPermissions -User $UserDeleteAllAccess -AccessRights FullAccess -InheritanceType All
					$TextboxResults.Text = "Getting mailbox permissions for $GlobalUserCurrentPermissions..."
					$TextboxResults.Text = Get-MailboxPermission -Identity $GlobalUserCurrentPermissions | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to modify permissions for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

#Forwarding

$getAllUsersForwardinToInternalRecipientToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting all users forwarding to internal users..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Where-Object { `$_.ForwardingAddress -ne `$Null -and `$_.RecipientType -eq 'UserMailbox' } | Sort-Object Name | Format-Table Name, ForwardingAddress, DeliverToMailboxAndForward -AutoSize"
		$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Where-Object { $_.ForwardingAddress -ne $Null -and $_.RecipientType -eq "UserMailbox" } | Sort-Object Name | Format-Table Name, ForwardingAddress, DeliverToMailboxAndForward -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		$FormO365AdministrationCenter.Cursor = 'Default'
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$forwardToInternalRecipientAndDontSaveLocalCopyToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$UsertoFWD2 = Read-Host "Enter the users UPN, Display Name, Alias, or Email Address of the user to forward"
			$SelectUsersFormText = "Select the user you want to modify fowarding for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedDisplayNames_psf
			#$UsertoFWD2 = $SelectUsersForm_comboboxUsers
			$UsertoFWD2 = $SelectCachedDisplayNames_comboboxNames
			If (!$UsertoFWD2)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a user", "Error")
			}
			Else
			{
				#$Fwd2me2 = Read-Host "Enter the Name, Display Name, Alias, or Email Address of the user to forward to"
				$SelectUsersFormText = "Select the User you want $UsertoFWD2 to forward to"
				#Call-SelectUsersForm_psf
				Show-SelectCachedDisplayNames_psf
				#$Fwd2me2 = $SelectUsersForm_comboboxUsers
				$Fwd2me2 = $SelectCachedDisplayNames_comboboxNames
				If (!$Fwd2me2)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Setting up forwarding from $UsertoFWD2 to $Fwd2me2..."
					$textboxDetails.Text = "Set-Mailbox  $UsertoFWD2 -ForwardingAddress $Fwd2me2 -DeliverToMailboxAndForward `$False"
					Set-Mailbox  $UsertoFWD2 -ForwardingAddress $Fwd2me2 -DeliverToMailboxAndForward $False
					$TextboxResults.Text = Get-Mailbox $UsertoFWD2 | Format-List Name, DeliverToMailboxAndForward, ForwardingAddress | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to modify forwarding for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$forwardToExternalAddressAndSaveLocalCopyToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$UsertoFWD3 = Read-Host "Enter the users UPN, Display Name, Alias, or Email Address of the user to forward"
			$SelectUsersFormText = "Select the User you want to modify fowarding for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedDisplayNames_psf
			#$UsertoFWD3 = $SelectUsersForm_comboboxUsers
			$UsertoFWD3 = $SelectCachedDisplayNames_comboboxNames
			If (!$UsertoFWD3)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			Else
			{
				$Fwd2me2External = Read-Host "Enter the external Email Address to forward to"
				If (!$Fwd2me2External)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No external E-mail Address was entered, please enter a valid E-mail Address", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Setting up forwarding from $UsertoFWD3 to $Fwd2me2External..."
					$textboxDetails.Text = "Set-Mailbox $UsertoFWD3 -ForwardingsmtpAddress $Fwd2me2External -DeliverToMailboxAndForward `$true"
					Set-Mailbox $UsertoFWD3 -ForwardingsmtpAddress $Fwd2me2External -DeliverToMailboxAndForward $true
					$TextboxResults.Text = Get-Mailbox $UsertoFWD3 | Format-List Name, DeliverToMailboxAndForward, ForwardingSmtpAddress | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to modify forwarding for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$forwardToExternalAddressAndDontSaveLocalCopyToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$UsertoFWD4 = Read-Host "Enter the users UPN, Display Name, Alias, or Email Address of the user to forward"
			$SelectUsersFormText = "Select the User you want to modify fowarding for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedDisplayNames_psf
			#$UsertoFWD4 = $SelectUsersForm_comboboxUsers
			$UsertoFWD4 = $SelectCachedDisplayNames_comboboxNames
			If (!$UsertoFWD4)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			Else
			{
				$Fwd2me2External2 = Read-Host "Enter the external Email Address to forward to"
				If (!$Fwd2me2External2)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No external E-mail Address was entered, please enter a valid external E-mail Address", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Setting up forwarding from $UsertoFWD4 to $Fwd2me2External2..."
					$textboxDetails.Text = "Set-Mailbox $UsertoFWD4 -ForwardingsmtpAddress $Fwd2me2External2 -DeliverToMailboxAndForward `$False"
					Set-Mailbox $UsertoFWD4 -ForwardingsmtpAddress $Fwd2me2External2 -DeliverToMailboxAndForward $False
					$TextboxResults.Text = Get-Mailbox $UsertoFWD4 | Format-List Name, DeliverToMailboxAndForward, ForwardingSmtpAddress | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to modify forwarding for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getForwardingInfoForAUserToolStripMenuItem_Click = {
	Do
	{
		try
		{
			#$UserFwdInfo = Read-Host "Enter the users UPN, Display Name, Alias, or Email Address of the user"
			$SelectUsersFormText = "Select the user you want view Forwarding information for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedDisplayNames_psf
			#$UserFwdInfo = $SelectUsersForm_comboboxUsers
			$UserFwdInfo = $SelectCachedDisplayNames_comboboxNames
			If (!$UserFwdInfo)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a user", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting forwarding info for $UserFwdInfo..."
				$textboxDetails.Text = "Get-Mailbox $UserFwdInfo | Format-List Name, DeliverToMailboxAndForward, ForwardingAddress, ForwardingSmtpAddress"
				$TextboxResults.Text = Get-Mailbox $UserFwdInfo | Format-List Name, DeliverToMailboxAndForward, ForwardingAddress, ForwardingSmtpAddress | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get forwarding information for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$removeExternalForwadingForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$RemoveFWDfromUserExternal = Read-Host "Enter the users UPN, Display Name, Alias, or Email Address"
			$SelectUsersWithForwardingFormText = "Select the user you want remove forwarding for"
			Show-SelectExternalUsersWithForwarding_psf
			$RemoveFWDfromUserExternal = $SelectExternalUsersWithForwarding_comboboxUsersWithForwarding
			If (!$RemoveFWDfromUserExternal)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a user", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Removing all external forwarding from $RemoveFWDfromUserExternal..."
				$textboxDetails.Text = "Set-Mailbox $RemoveFWDfromUserExternal -ForwardingSmtpAddress `$Null"
				Set-Mailbox $RemoveFWDfromUserExternal -ForwardingSmtpAddress $Null
				$TextboxResults.Text = Get-Mailbox $RemoveFWDfromUserExternal | Sort-Object Name | Format-Table Name, DeliverToMailboxAndForward, ForwardingSmtpAddress -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to remove all external forwarding for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$removeAllForwardingForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$RemoveAllFWDforUser = Read-Host "Enter the users UPN, Display Name, Alias, or Email Address"
			$SelectUsersAllForwaringFormText = "Select the user you want to remove forwarding for"
			Show-SelectUsersAnyForwarding_psf
			$RemoveAllFWDforUser = $SelectUsersForm_comboboxUsers
			If (!$RemoveAllFWDforUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a user", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Removing all forwarding from $RemoveAllFWDforUser..."
				$textboxDetails.Text = "Set-Mailbox $RemoveAllFWDforUser -ForwardingAddress `$Null -ForwardingSmtpAddress `$Null"
				Set-Mailbox $RemoveAllFWDforUser -ForwardingAddress $Null -ForwardingSmtpAddress $Null
				$TextboxResults.Text = Get-Mailbox $RemoveAllFWDforUser | Format-List Name, DeliverToMailboxAndForward, ForwardingAddress, ForwardingSmtpAddress | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to remove all forwarding another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$removeInternalForwardingForUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$RemoveFWDfromUser = Read-Host "Enter the users UPN, Display Name, Alias, or Email Address"
			$SelectUsersInternalForwaringFormText = "Select the User to remove forwarding for"
			Show-SelectUsersInternalForwarding_psf
			$RemoveFWDfromUser = $SelectUsersInternalForwarding_comboboxUsersInternalForwarding
			If (!$RemoveFWDfromUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Removing all internal forwarding from $RemoveFWDfromUser..."
				$textboxDetails.Text = "Set-Mailbox $RemoveFWDfromUser -ForwardingAddress `$Null"
				Set-Mailbox $RemoveFWDfromUser -ForwardingAddress $Null
				$TextboxResults.Text = Get-Mailbox $RemoveFWDfromUser | Format-List Name, DeliverToMailboxAndForward, ForwardingAddress | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to remove all internal forwarding another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$forwardToInternalRecipientAndSaveLocalCopyToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$UsertoFWD = Read-Host "Enter the users UPN, Display Name, Alias, or Email Address of the user to forward"
			$SelectUsersFormText = "Select the User you want to modify fowarding for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedDisplayNames_psf
			#$UsertoFWD = $SelectUsersForm_comboboxUsers
			$UsertoFWD = $SelectCachedDisplayNames_comboboxNames
			If (!$UsertoFWD)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			Else
			{
				#$Fwd2me = Read-Host "Enter the Name, Display Name, Alias, or Email Address of the user to forward to"
				$SelectUsersFormText = "Select the User you want to $UsertoFWD to forward to"
				#Call-SelectUsersForm_psf
				Show-SelectCachedDisplayNames_psf
				#$Fwd2me = $SelectUsersForm_comboboxUsers
				$Fwd2me = $SelectCachedDisplayNames_comboboxNames
				If (!$Fwd2me)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Setting up forwarding from $UsertoFWD to $Fwd2me..."
					$textboxDetails.Text = "Set-Mailbox  $UsertoFWD -ForwardingAddress $Fwd2me -DeliverToMailboxAndForward `$True"
					Set-Mailbox  $UsertoFWD -ForwardingAddress $Fwd2me -DeliverToMailboxAndForward $True
					$TextboxResults.Text = Get-Mailbox $UsertoFWD | Format-List Name, DeliverToMailboxAndForward, ForwardingAddress | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to modify forwarding for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getAllUsersForwardingToExternalRecipientToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting all users forwarding to external users..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Where-Object { `$_.ForwardingSmtpAddress -ne `$Null -and `$_.RecipientType -eq 'UserMailbox' } | Sort-Object Name | Format-Table Name, DeliverToMailboxAndForward, ForwardingSmtpAddress -AutoSize"
		$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Where-Object { $_.ForwardingSmtpAddress -ne $Null -and $_.RecipientType -eq "UserMailbox" } | Sort-Object Name | Format-Table Name, DeliverToMailboxAndForward, ForwardingSmtpAddress -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
	
}

$removeAllForwardingForAllUsersToolStripMenuItem_Click = {
	Try
	{
		$OUTPUT = [System.Windows.Forms.MessageBox]::Show("Are you sure you want to remove all forwarding from all users?", "Warning!", 4)
		If ($OUTPUT -eq "YES")
		{
			Try
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Removing all forwarding from all users..."
				$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Where-Object { `$_.RecipientType -eq 'UserMailbox' } | Set-Mailbox -ForwardingAddress `$Null -ForwardingSmtpAddress `$Null"
				$AllMailboxes = Get-Mailbox -ResultSize unlimited | Where-Object { $_.RecipientType -eq "UserMailbox" } | Set-Mailbox -ForwardingAddress $Null -ForwardingSmtpAddress $Null
				$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Where-Object { $_.RecipientType -eq "UserMailbox" } | Sort-Object Name | Format-Table Name, DeliverToMailboxAndForward, ForwardingAddress, ForwardingSmtpAddress -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			Catch
			{
				$FormO365AdministrationCenter.Cursor = 'Default'
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("$_", "Error")
			}
		}
		Else
		{
			[System.Windows.Forms.MessageBox]::Show("All users forwarding has not been changed", "Info")
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$removeExternalForwardingForAllUsersToolStripMenuItem_Click = {
	Try
	{
		$OUTPUT = [System.Windows.Forms.MessageBox]::Show("Are you sure you want to remove external forwarding for all users?", "Warning!", 4)
		If ($OUTPUT -eq "YES")
		{
			Try
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Removing all external forwarding from all users..."
				$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Where-Object { `$_.RecipientType -eq 'UserMailbox' } | Set-Mailbox -ForwardingSmtpAddress `$Null"
				Get-Mailbox -ResultSize unlimited | Where-Object { $_.RecipientType -eq "UserMailbox" } | Set-Mailbox -ForwardingSmtpAddress $Null
				$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Where-Object { $_.RecipientType -eq "UserMailbox" } | Sort-Object Name | Format-Table Name, DeliverToMailboxAndForward, ForwardingSmtpAddress -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			Catch
			{
				$FormO365AdministrationCenter.Cursor = 'Default'
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("$_", "Error")
			}
		}
		Else
		{
			[System.Windows.Forms.MessageBox]::Show("External forwarding for all users has not been changed", "Info")
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
	
}

$removeInternalForwardingForAllUsersToolStripMenuItem_Click = {
	Try
	{
		$OUTPUT = [System.Windows.Forms.MessageBox]::Show("Are you sure you want to remove internal forwarding for all users?", "Warning!", 4)
		If ($OUTPUT -eq "YES")
		{
			Try
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Removing all internal forwarding from all users..."
				$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Where-Object { `$_.RecipientType -eq 'UserMailbox' } | Set-Mailbox -ForwardingAddress `$Null"
				Get-Mailbox -ResultSize unlimited | Where-Object { $_.RecipientType -eq "UserMailbox" } | Set-Mailbox -ForwardingAddress $Null
				$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Where-Object { $_.RecipientType -eq "UserMailbox" } | Sort-Object Name | Format-Table Name, DeliverToMailboxAndForward, ForwardingAddress -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			Catch
			{
				$FormO365AdministrationCenter.Cursor = 'Default'
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("$_", "Error")
			}
		}
		Else
		{
			[System.Windows.Forms.MessageBox]::Show("Internal forwarding for all users has not been changed", "Info")
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
	
}

$forwardAllUsersEmailToExternalRecipientAndSaveALocalCopyToolStripMenuItem_Click = {
	Try
	{
		$ForwardAllToExternal = Read-Host "Enter the email to forward all email to"
		If (!$ForwardAllToExternal)
		{
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("No e-mail address was entered, please enter a valid e-mail address", "Error")
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Setting up forwarding for all users to $ForwardAllToExternal..."
			$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Where-Object { `$_.RecipientType -eq 'UserMailbox' } | Set-Mailbox -ForwardingsmtpAddress $ForwardAllToExternal -DeliverToMailboxAndForward `$True"
			Get-Mailbox -ResultSize unlimited | Where-Object { $_.RecipientType -eq "UserMailbox" } | Set-Mailbox -ForwardingsmtpAddress $ForwardAllToExternal -DeliverToMailboxAndForward $True
			$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Where-Object { $_.RecipientType -eq "UserMailbox" } | Sort-Object Name | Format-Table Name, DeliverToMailboxAndForward, ForwardingSmtpAddress -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$forwardAllUsersEmailToExternalRecipientAndDontSaveALocalCopyToolStripMenuItem_Click = {
	Try
	{
		$ForwardAllToExternal2 = Read-Host "Enter the email to forward all email to"
		If (!$ForwardAllToExternal2)
		{
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("No e-mail was entered, please enter a valid e-mail", "Error")
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Setting up forwarding for all users to $ForwardAllToExternal2..."
			$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Where-Object { `$_.RecipientType -eq 'UserMailbox' } | Set-Mailbox -ForwardingsmtpAddress $ForwardAllToExternal2 -DeliverToMailboxAndForward `$False"
			Get-Mailbox -ResultSize unlimited | Where-Object { $_.RecipientType -eq "UserMailbox" } | Set-Mailbox -ForwardingsmtpAddress $ForwardAllToExternal2 -DeliverToMailboxAndForward $False
			$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Where-Object { $_.RecipientType -eq "UserMailbox" } | Sort-Object Name | Format-Table Name, DeliverToMailboxAndForward, ForwardingSmtpAddress -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$forwardAllUsersEmailToInternalRecipientAndSaveLocalCopyToolStripMenuItem_Click = {
	Try
	{
		#$ForwardAllToInternal = Read-Host "Enter the users UPN, Display Name, Alias, or Email Address of the user to forward"
		$SelectUsersFormText = "Select the user you want to forward all email to"
		#Call-SelectUsersForm_psf
		Show-SelectCachedDisplayNames_psf
		#$ForwardAllToInternal = $SelectUsersForm_comboboxUsers
		$ForwardAllToInternal = $SelectCachedDisplayNames_comboboxNames
		If (!$ForwardAllToInternal)
		{
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a user", "Error")
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Setting up forwarding for all users to $ForwardAllToInternal..."
			$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Where-Object { `$_.RecipientType -eq 'UserMailbox' } | Set-Mailbox -ForwardingAddress $ForwardAllToInternal -DeliverToMailboxAndForward `$True"
			Get-Mailbox -ResultSize unlimited | Where-Object { $_.RecipientType -eq "UserMailbox" } | Set-Mailbox -ForwardingAddress $ForwardAllToInternal -DeliverToMailboxAndForward $True
			$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Where-Object { $_.RecipientType -eq "UserMailbox" } | Sort-Object Name | Format-Table Name, DeliverToMailboxAndForward, ForwardingAddress | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$forwardAllUsersEmailToInternalRecipientAndDontSaveLocalCopyToolStripMenuItem_Click = {
	Try
	{
		#$ForwardAllToInternal2 = Read-Host "Enter the users UPN, Display Name, Alias, or Email Address of the user to forward"
		$SelectUsersFormText = "Select the user you want to forward all email to"
		#Call-SelectUsersForm_psf
		Show-SelectCachedDisplayNames_psf
		#$ForwardAllToInternal2 = $SelectUsersForm_comboboxUsers
		$ForwardAllToInternal2 = $SelectCachedDisplayNames_comboboxNames
		If (!$ForwardAllToInternal2)
		{
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a user", "Error")
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Setting up forwarding for all users to $ForwardAllToInternal2..."
			$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Where-Object { `$_.RecipientType -eq 'UserMailbox' } | Set-Mailbox -ForwardingAddress $ForwardAllToInternal2 -DeliverToMailboxAndForward `$True"
			Get-Mailbox -ResultSize unlimited | Where-Object { $_.RecipientType -eq "UserMailbox" } | Set-Mailbox -ForwardingAddress $ForwardAllToInternal2 -DeliverToMailboxAndForward $True
			$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Where-Object { $_.RecipientType -eq "UserMailbox" } | Sort-Object Name | Format-Table Name, DeliverToMailboxAndForward, ForwardingAddress -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

#Aliases

$addEmailAddressForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$AddAliasforUser = Read-Host "Enter the UPN of the user you want to add an alias for"
			$SelectUsersFormText = "Select the User you want to add an Alias for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedDisplayNames_psf
			#$AddAliasforUser = $SelectUsersForm_comboboxUsers
			$AddAliasforUser = $SelectCachedDisplayNames_comboboxNames
			If (!$AddAliasforUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			Else
			{
				$AddAlias = Read-Host "Enter the Alias Address"
				If (!$AddAlias)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Alias Address was entered, please enter a valid Alias Address", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Adding $AddAlias as an Alias for $AddAliasforUser..."
					$textboxDetails.Text = "Set-Mailbox $AddAliasforUser -EmailAddresses @{ add = '$AddAlias' }"
					Set-Mailbox $AddAliasforUser -EmailAddresses @{ add = $AddAlias }
					$TextboxResults.Text = "Getting all aliases for $AddAliasforUser..."
					$TextboxResults.Text = Get-Mailbox $AddAliasforUser | Format-List EmailAddresses | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to add an Alias for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$removeAnEmailAddressForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$RemoveAliasforUser = Read-Host "Enter the UPN of the user you want to remove an alias for"
			$SelectUsersFormText = "Select the user you want to remove an Alias for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedDisplayNames_psf
			#$EmailAddressUser = $SelectUsersForm_comboboxUsers
			$EmailAddressUser = $SelectCachedDisplayNames_comboboxNames
			If (!$EmailAddressUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a user", "Error")
			}
			Else
			{
				$EmailAddressText = "Select the users Alias you want to remove"
				Show-SelectEmailAddresses_psf
				$removeAlias = $SelectEmailAddresses_comboboxSelectEmailAddresses
				#$removeAlias = Read-Host "Enter the alias address"
				If (!$removeAlias)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Alias was selected, please select a valid Alias address you want to remove", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Removing $removeAlias as an Alias for $EmailAddressUser..."
					$textboxDetails.Text = "Set-Mailbox $EmailAddressUser -EmailAddresses @{ remove = '$removeAlias' }"
					Set-Mailbox $EmailAddressUser -EmailAddresses @{ remove = $removeAlias }
					$TextboxResults.Text = "Getting all aliases for $EmailAddressUser..."
					$TextboxResults.Text = Get-Mailbox $EmailAddressUser | Format-List EmailAddresses | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to remove an Alias for another user?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getAUsersEmailAddressesToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$ViewAliasforaUser = Read-Host "Enter the UPN of the user you want to view email addresses for"
			$SelectUsersFormText = "Select the User you want to view all Email Addresses for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedDisplayNames_psf
			#$ViewAliasforaUser = $SelectUsersForm_comboboxUsers
			$ViewAliasforaUser = $SelectCachedDisplayNames_comboboxNames
			If (!$ViewAliasforaUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting all Email Addresses for $ViewAliasforaUser..."
				$textboxDetails.Text = "Get-Mailbox -identity $ViewAliasforaUser | Format-List EmailAddresses"
				$TextboxResults.Text = Get-Mailbox -identity $ViewAliasforaUser | Format-List EmailAddresses | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to view all Email Addresses for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}



###GROUPS###

	#Distribution Groups

$displayDistributionGroupsToolStripMenuItem_Click = {
	try
	{
		$TempDir = $env:temp
		$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter\distros.txt")
		If ((Test-Path $O365AdminTempFolder) -eq $false)
		{
			$Textboxresults.text = "Caching Distribution Groups…"
			(Get-DistributionGroup -ResultSize unlimited | Where-Object { $_.GroupType -notlike 'Universal, SecurityEnabled' }).DisplayName | Out-File "$O365AdminTempFolder"
			$Textboxresults.text = ""
			
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all Distribution Groups..."
			$textboxDetails.Text = "Get-DistributionGroup -ResultSize unlimited | Where-Object { `$_.GroupType -notlike 'Universal, SecurityEnabled'} | Sort-Object DisplayName | Format-Table DisplayName -AutoSize"
			#$TextboxResults.text = Get-DistributionGroup -ResultSize unlimited | Where-Object { $_.GroupType -notlike "Universal, SecurityEnabled" } | Sort-Object DisplayName | Format-Table DisplayName -AutoSize | Out-String -Width 2147483647
			$TextboxResults.Text = Get-Content $O365AdminTempFolder | Format-Table DisplayName -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all Distribution Groups..."
			$textboxDetails.Text = "Get-DistributionGroup -ResultSize unlimited | Where-Object { `$_.GroupType -notlike 'Universal, SecurityEnabled'} | Sort-Object DisplayName | Format-Table DisplayName -AutoSize"
			#$TextboxResults.text = Get-DistributionGroup -ResultSize unlimited | Where-Object { $_.GroupType -notlike "Universal, SecurityEnabled" } | Sort-Object DisplayName | Format-Table DisplayName -AutoSize | Out-String -Width 2147483647
			$TextboxResults.Text = Get-Content $O365AdminTempFolder | Format-Table DisplayName -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$createADistributionGroupToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$NewDistroGroup = Read-Host "What is the name of the new Distribution Group?"
			If (!$NewDistroGroup)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Distribution Group name was entered, please enter a valid name", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Creating the $NewDistroGroup Distribution Group..."
				$textboxDetails.Text = "New-DistributionGroup -Name $NewDistroGroup | Format-List"
				$TextboxResults.Text = New-DistributionGroup -Name $NewDistroGroup | Format-List | Out-String -Width 2147483647
				$TempDir = $env:temp
				$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter\distros.txt")
				Remove-Item $O365AdminTempFolder -Force
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to create another Distribution Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$deleteADistributionGroupToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			
			$TempDir = $env:temp
			$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter\distros.txt")
			If ((Test-Path $O365AdminTempFolder) -eq $false)
			{
				$Textboxresults.text = "Caching Distribution Groups…"
				(Get-DistributionGroup -ResultSize unlimited | Where-Object { $_.GroupType -notlike 'Universal, SecurityEnabled' }).DisplayName | Out-File "$O365AdminTempFolder"
				$Textboxresults.text = ""
				
				#$DeleteDistroGroup = Read-Host "Enter the name of the Distribtuion group you want deleted."
				$DistroGroupsText = "Select the Distribution Group you want to delete"
				Show-SelectCachedDistroGroups_psf
				$DeleteDistroGroup = $SelectCachedDistroGroups_comboboxNames
				If (!$DeleteDistroGroup)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group to delete", "Error")
				}
				Else
				{
					$OUTPUT = [System.Windows.Forms.MessageBox]::Show("Are you sure you want to delete $DeleteDistroGroup ?", "Warning!", 4)
					If ($OUTPUT -eq "YES")
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Deleting the $DeleteDistroGroup Distribution Group..."
						$textboxDetails.Text = "Remove-DistributionGroup $DeleteDistroGroup"
						Remove-DistributionGroup $DeleteDistroGroup
						$TextboxResults.Text = "Getting list of distribution groups"
						$TextboxResults.text = Get-DistributionGroup -ResultSize unlimited | Where-Object { $_.GroupType -notlike "Universal, SecurityEnabled" } | Sort-Object DisplayName | Format-Table DisplayName -AutoSize | Out-String -Width 2147483647
						$TempDir = $env:temp
						$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter\distros.txt")
						Remove-Item $O365AdminTempFolder -Force
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
					Else
					{
						[System.Windows.Forms.MessageBox]::Show("$DeleteDistroGroup was not deleted", "Info")
					}
				}
			}
			Else
			{
				
				#$DeleteDistroGroup = Read-Host "Enter the name of the Distribtuion group you want deleted."
				$DistroGroupsText = "Select the Distribution Group you want to delete"
				Show-SelectCachedDistroGroups_psf
				$DeleteDistroGroup = $SelectCachedDistroGroups_comboboxNames
				If (!$DeleteDistroGroup)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group to delete", "Error")
				}
				Else
				{
					$OUTPUT = [System.Windows.Forms.MessageBox]::Show("Are you sure you want to delete $DeleteDistroGroup ?", "Warning!", 4)
					If ($OUTPUT -eq "YES")
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Deleting the $DeleteDistroGroup Distribution Group..."
						$textboxDetails.Text = "Remove-DistributionGroup $DeleteDistroGroup"
						Remove-DistributionGroup $DeleteDistroGroup
						$TextboxResults.Text = "Getting list of distribution groups"
						$TextboxResults.text = Get-DistributionGroup -ResultSize unlimited | Where-Object { $_.GroupType -notlike "Universal, SecurityEnabled" } | Sort-Object DisplayName | Format-Table DisplayName -AutoSize | Out-String -Width 2147483647
						$TempDir = $env:temp
						$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter\distros.txt")
						Remove-Item $O365AdminTempFolder -Force
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
					Else
					{
						[System.Windows.Forms.MessageBox]::Show("$DeleteDistroGroup was not deleted", "Info")
					}
				}
			}
		}
		
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to delete another Distribution Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$allowDistributionGroupToReceiveExternalEmailToolStripMenuItem_Click = {
	Try
	{
		$TempDir = $env:temp
		$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter\distros.txt")
		If ((Test-Path $O365AdminTempFolder) -eq $false)
		{
			$Textboxresults.text = "Caching Distribution Groups…"
			(Get-DistributionGroup -ResultSize unlimited | Where-Object { $_.GroupType -notlike 'Universal, SecurityEnabled' }).DisplayName | Out-File $O365AdminTempFolder
			$Textboxresults.text = ""
			#$AllowExternalEmail = Read-Host "Enter the name of the Distribtuion Group you want to allow external email to"
			$DistroGroupsText = "Select the Distribution Group you want to allow External Email to"
			Show-SelectCachedDistroGroups_psf
			$AllowExternalEmail = $SelectCachedDistroGroups_comboboxNames
			If (!$AllowExternalEmail)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group you want to allow external e-mail to", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Allowing extneral senders for the $AllowExternalEmail Distribution Group..."
				$textboxDetails.Text = "Set-DistributionGroup $AllowExternalEmail -RequireSenderAuthenticationEnabled `$False"
				Set-DistributionGroup $AllowExternalEmail -RequireSenderAuthenticationEnabled $False
				$TextboxResults.text = Get-DistributionGroup $AllowExternalEmail | Format-List Name, RequireSenderAuthenticationEnabled | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Else
		{
			#$AllowExternalEmail = Read-Host "Enter the name of the Distribtuion Group you want to allow external email to"
			$DistroGroupsText = "Select the Distribution Group you want to allow External Email to"
			Show-SelectCachedDistroGroups_psf
			$AllowExternalEmail = $SelectCachedDistroGroups_comboboxNames
			If (!$AllowExternalEmail)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group you want to allow external e-mail to", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Allowing extneral senders for the $AllowExternalEmail Distribution Group..."
				$textboxDetails.Text = "Set-DistributionGroup $AllowExternalEmail -RequireSenderAuthenticationEnabled `$False"
				Set-DistributionGroup $AllowExternalEmail -RequireSenderAuthenticationEnabled $False
				$TextboxResults.text = Get-DistributionGroup $AllowExternalEmail | Format-List Name, RequireSenderAuthenticationEnabled | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$hideDistributionGroupFromGALToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$TempDir = $env:temp
			$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter\distros.txt")
			If ((Test-Path $O365AdminTempFolder) -eq $false)
			{
				$Textboxresults.text = "Caching Distribution Groups…"
				(Get-DistributionGroup -ResultSize unlimited | Where-Object { $_.GroupType -notlike 'Universal, SecurityEnabled' }).DisplayName | Out-File "$O365AdminTempFolder"
				$Textboxresults.text = ""
				
				#$GroupHideGAL = Read-Host "Enter the name of the Distribtuion Group you want to hide from the GAL"
				$DistroGroupsText = "Select the Distribution Group you want to hide from the Global Address List"
				Show-SelectCachedDistroGroups_psf
				$GroupHideGAL = $SelectCachedDistroGroups_comboboxNames
				If (!$GroupHideGAL)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group you want to hide from the Global Address List", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Hiding the $GroupHideGAL from the Global Address List..."
					$textboxDetails.Text = "Set-DistributionGroup $GroupHideGAL -HiddenFromAddressListsEnabled `$True"
					Set-DistributionGroup $GroupHideGAL -HiddenFromAddressListsEnabled $True
					$TextboxResults.text = Get-DistributionGroup $GroupHideGAL | Format-List Name, HiddenFromAddressListsEnabled | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
			Else
			{
				#$GroupHideGAL = Read-Host "Enter the name of the Distribtuion Group you want to hide from the GAL"
				$DistroGroupsText = "Select the Distribution Group you want to hide from the Global Address List"
				Show-SelectCachedDistroGroups_psf
				$GroupHideGAL = $SelectCachedDistroGroups_comboboxNames
				If (!$GroupHideGAL)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group you want to hide from the Global Address List", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Hiding the $GroupHideGAL from the Global Address List..."
					$textboxDetails.Text = "Set-DistributionGroup $GroupHideGAL -HiddenFromAddressListsEnabled `$True"
					Set-DistributionGroup $GroupHideGAL -HiddenFromAddressListsEnabled $True
					$TextboxResults.text = Get-DistributionGroup $GroupHideGAL | Format-List Name, HiddenFromAddressListsEnabled | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to hide another Distribution Group from the Global Address List?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$displayDistributionGroupMembersToolStripMenuItem_Click = {
	Try
	{
		$TempDir = $env:temp
		$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter\distros.txt")
		If ((Test-Path $O365AdminTempFolder) -eq $false)
		{
			$Textboxresults.text = "Caching Distribution Groups…"
			(Get-DistributionGroup -ResultSize unlimited | Where-Object { $_.GroupType -notlike 'Universal, SecurityEnabled' }).DisplayName | Out-File "$O365AdminTempFolder"
			$Textboxresults.text = ""
			
			#$ListDistributionGroupMembers = Read-Host "Enter the name of the Distribution Group you want to list members of"
			$DistroGroupsText = "Select the Distribution Group you want to view the members of"
			Show-SelectCachedDistroGroups_psf
			$ListDistributionGroupMembers = $SelectCachedDistroGroups_comboboxNames
			If (!$ListDistributionGroupMembers)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group you want to view members of", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting all members of the $ListDistributionGroupMembers Distrubution Group..."
				$textboxDetails.Text = "Get-DistributionGroupMember $ListDistributionGroupMembers | Sort-Object DisplayName | Format-Table -AutoSize"
				$TextboxResults.Text = Get-DistributionGroupMember $ListDistributionGroupMembers | Sort-Object DisplayName | Format-Table -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Else
		{
			#$ListDistributionGroupMembers = Read-Host "Enter the name of the Distribution Group you want to list members of"
			$DistroGroupsText = "Select the Distribution Group you want to view the members of"
			Show-SelectCachedDistroGroups_psf
			$ListDistributionGroupMembers = $SelectCachedDistroGroups_comboboxNames
			If (!$ListDistributionGroupMembers)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group you want to view members of", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting all members of the $ListDistributionGroupMembers Distrubution Group..."
				$textboxDetails.Text = "Get-DistributionGroupMember $ListDistributionGroupMembers | Sort-Object DisplayName | Format-Table -AutoSize"
				$TextboxResults.Text = Get-DistributionGroupMember $ListDistributionGroupMembers | Sort-Object DisplayName | Format-Table -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$addAUserToADistributionGroupToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$TempDir = $env:temp
			$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter\distros.txt")
			If ((Test-Path $O365AdminTempFolder) -eq $false)
			{
				$Textboxresults.text = "Caching Distribution Groups…"
				(Get-DistributionGroup -ResultSize unlimited | Where-Object { $_.GroupType -notlike 'Universal, SecurityEnabled' }).DisplayName | Out-File "$O365AdminTempFolder"
				$Textboxresults.text = ""
				
				#$DistroGroupAdd = Read-Host "Enter the name of the Distribution Group"
				$DistroGroupsText = "Select the Distribution Group you want to add a user to"
				Show-SelectCachedDistroGroups_psf
				$DistroGroupAdd = $SelectCachedDistroGroups_comboboxNames
				If (!$DistroGroupAdd)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group you want to add a user to", "Error")
				}
				Else
				{
					#$DistroGroupAddUser = Read-Host "Enter the UPN of the user you wish to add to $DistroGroupAdd"
					$SelectUsersFormText = "Select the user you want to add to $DistroGroupAdd"
					Show-SelectCachedDisplayNames_psf
					$DistroGroupAddUser = $SelectCachedDisplayNames_comboboxNames
					If (!$DistroGroupAddUser)
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a user you want to add to $DistroGroupAdd", "Error")
					}
					Else
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Adding $DistroGroupAddUser to the $DistroGroupAdd Distribution Group..."
						$textboxDetails.Text = "Add-DistributionGroupMember -Identity $DistroGroupAdd -Member $DistroGroupAddUser"
						Add-DistributionGroupMember -Identity $DistroGroupAdd -Member $DistroGroupAddUser
						$TextboxResults.Text = "Getting members of $DistroGroupAdd..."
						$TextboxResults.Text = Get-DistributionGroupMember $DistroGroupAdd | Sort-Object DisplayName | Format-Table -AutoSize | Out-String -Width 2147483647
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
				}
			}
			Else
			{
				#$DistroGroupAdd = Read-Host "Enter the name of the Distribution Group"
				$DistroGroupsText = "Select the Distribution Group you want to add a user to"
				Show-SelectCachedDistroGroups_psf
				$DistroGroupAdd = $SelectCachedDistroGroups_comboboxNames
				If (!$DistroGroupAdd)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group you want to add a user to", "Error")
				}
				Else
				{
					#$DistroGroupAddUser = Read-Host "Enter the UPN of the user you wish to add to $DistroGroupAdd"
					$SelectUsersFormText = "Select the user you want to add to $DistroGroupAdd"
					Show-SelectCachedDisplayNames_psf
					$DistroGroupAddUser = $SelectCachedDisplayNames_comboboxNames
					If (!$DistroGroupAddUser)
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a user you want to add to $DistroGroupAdd", "Error")
					}
					Else
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Adding $DistroGroupAddUser to the $DistroGroupAdd Distribution Group..."
						$textboxDetails.Text = "Add-DistributionGroupMember -Identity $DistroGroupAdd -Member $DistroGroupAddUser"
						Add-DistributionGroupMember -Identity $DistroGroupAdd -Member $DistroGroupAddUser
						$TextboxResults.Text = "Getting members of $DistroGroupAdd..."
						$TextboxResults.Text = Get-DistributionGroupMember $DistroGroupAdd | Sort-Object DisplayName | Format-Table -AutoSize | Out-String -Width 2147483647
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to add another User to a Distribution Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$removeAUserADistributionGroupToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$TempDir = $env:temp
			$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter\distros.txt")
			If ((Test-Path $O365AdminTempFolder) -eq $false)
			{
				$Textboxresults.text = "Caching Distribution Groups…"
				(Get-DistributionGroup -ResultSize unlimited | Where-Object { $_.GroupType -notlike 'Universal, SecurityEnabled' }).DisplayName | Out-File "$O365AdminTempFolder"
				$Textboxresults.text = ""
				
				#$DistroGroupRemove = Read-Host "Enter the name of the Distribution Group"
				$DistroGroupsText = "Select the Distribution Group you want to remove a user from"
				Show-SelectCachedDistroGroups_psf
				$GlobalDistroGroupMembers = $SelectCachedDistroGroups_comboboxNames
				If (!$GlobalDistroGroupMembers)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group you want to remove a user from", "Error")
				}
				Else
				{
					#$DistroGroupRemoveUser = Read-Host "Enter the UPN of the user you wish to remove from $GlobalDistroGroupMembers"
					$DistroGroupMembersText = "Select the User you want to remove from $GlobalDistroGroupMembers"
					Show-SelectCachedDistroGroups_psf
					$DistroGroupRemoveUser = $SelectCachedDistroGroups_comboboxNames
					If (!$DistroGroupRemoveUser)
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a user you want to remove from $GlobalDistroGroupMembers", "Error")
					}
					Else
					{
						$OUTPUT = [System.Windows.Forms.MessageBox]::Show("Are you sure you want to remove $DistroGroupRemoveUser from $GlobalDistroGroupMembers ?", "Warning!", 4)
						If ($OUTPUT -eq "YES")
						{
							$FormO365AdministrationCenter.Cursor = 'WaitCursor'
							$TextboxResults.Text = "Removing $DistroGroupRemoveUser from the $GlobalDistroGroupMembers Distribution Group..."
							$textboxDetails.Text = "Remove-DistributionGroupMember -Identity $GlobalDistroGroupMembers -Member $DistroGroupRemoveUser"
							Remove-DistributionGroupMember -Identity $GlobalDistroGroupMembers -Member $DistroGroupRemoveUser
							$TextboxResults.Text = "Getting members of $GlobalDistroGroupMembers"
							$TextboxResults.Text = Get-DistributionGroupMember $GlobalDistroGroupMembers | Sort-Object DisplayName | Format-Table -AutoSize | Out-String -Width 2147483647
							$FormO365AdministrationCenter.Cursor = 'Default'
						}
						Else
						{
							[System.Windows.Forms.MessageBox]::Show("$DistroGroupRemoveUser was not removed from $DistroGroupRemove ?", "Info")
						}
					}
				}
			}
			Else
			{
				#$DistroGroupRemove = Read-Host "Enter the name of the Distribution Group"
				$DistroGroupsText = "Select the Distribution Group you want to remove a user from"
				Show-SelectCachedDistroGroups_psf
				$GlobalDistroGroupMembers = $SelectCachedDistroGroups_comboboxNames
				If (!$GlobalDistroGroupMembers)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group you want to remove a user from", "Error")
				}
				Else
				{
					#$DistroGroupRemoveUser = Read-Host "Enter the UPN of the user you wish to remove from $GlobalDistroGroupMembers"
					$DistroGroupMembersText = "Select the User you want to remove from $GlobalDistroGroupMembers"
					Show-SelectDistroGroupMembers_psf
					$DistroGroupRemoveUser = $SelectDistroGroupMembers_comboboxSelectDistroGroupMembers
					If (!$DistroGroupRemoveUser)
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a user you want to remove from $GlobalDistroGroupMembers", "Error")
					}
					Else
					{
						$OUTPUT = [System.Windows.Forms.MessageBox]::Show("Are you sure you want to remove $DistroGroupRemoveUser from $GlobalDistroGroupMembers ?", "Warning!", 4)
						If ($OUTPUT -eq "YES")
						{
							$FormO365AdministrationCenter.Cursor = 'WaitCursor'
							$TextboxResults.Text = "Removing $DistroGroupRemoveUser from the $GlobalDistroGroupMembers Distribution Group..."
							$textboxDetails.Text = "Remove-DistributionGroupMember -Identity $GlobalDistroGroupMembers -Member $DistroGroupRemoveUser"
							Remove-DistributionGroupMember -Identity $GlobalDistroGroupMembers -Member $DistroGroupRemoveUser
							$TextboxResults.Text = "Getting members of $GlobalDistroGroupMembers"
							$TextboxResults.Text = Get-DistributionGroupMember $GlobalDistroGroupMembers | Sort-Object DisplayName | Format-Table -AutoSize | Out-String -Width 2147483647
							$FormO365AdministrationCenter.Cursor = 'Default'
						}
						Else
						{
							[System.Windows.Forms.MessageBox]::Show("$DistroGroupRemoveUser was not removed from $DistroGroupRemove ?", "Info")
						}
					}
				}
			}
		}
		catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to remove another user from a Distribution Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$addAllUsersToADistributionGroupToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$TempDir = $env:temp
			$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter\distros.txt")
			If ((Test-Path $O365AdminTempFolder) -eq $false)
			{
				$Textboxresults.text = "Caching Distribution Groups…"
				(Get-DistributionGroup -ResultSize unlimited | Where-Object { $_.GroupType -notlike 'Universal, SecurityEnabled' }).DisplayName | Out-File "$O365AdminTempFolder"
				$Textboxresults.text = ""
				
				$users = Get-Mailbox -ResultSize unlimited | Select-Object -ExpandProperty Alias
				#$AddAllUsersToSingleDistro = Read-Host "Enter the name of the Distribution Group you want to add all users to"
				$DistroGroupsText = "Select the Distribution Group you want to add all users too"
				Show-SelectCachedDistroGroups_psf
				$AddAllUsersToSingleDistro = $SelectCachedDistroGroups_comboboxNames
				If (!$AddAllUsersToSingleDistro)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group you want to add all users too", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Adding all users to the $AddAllUsersToSingleDistro distribution group..."
					$textboxDetails.Text = "Foreach (`$user in `$users) { Add-DistributionGroupMember -Identity $AddAllUsersToSingleDistro -Member `$user }"
					Foreach ($user in $users) { Add-DistributionGroupMember -Identity $AddAllUsersToSingleDistro -Member $user }
					$TextboxResults.Text = "Getting members of $AddAllUsersToSingleDistro"
					$TextboxResults.Text = Get-DistributionGroupMember $AddAllUsersToSingleDistro | Sort-Object DisplayName | Format-Table -AutoSize | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
			Else
			{
				$users = Get-Mailbox -ResultSize unlimited | Select-Object -ExpandProperty Alias
				#$AddAllUsersToSingleDistro = Read-Host "Enter the name of the Distribution Group you want to add all users to"
				$DistroGroupsText = "Select the Distribution Group you want to add all users too"
				Show-SelectCachedDistroGroups_psf
				$AddAllUsersToSingleDistro = $SelectCachedDistroGroups_comboboxNames
				If (!$AddAllUsersToSingleDistro)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group you want to add all users too", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Adding all users to the $AddAllUsersToSingleDistro distribution group..."
					$textboxDetails.Text = "Foreach (`$user in `$users) { Add-DistributionGroupMember -Identity $AddAllUsersToSingleDistro -Member `$user }"
					Foreach ($user in $users) { Add-DistributionGroupMember -Identity $AddAllUsersToSingleDistro -Member $user }
					$TextboxResults.Text = "Getting members of $AddAllUsersToSingleDistro"
					$TextboxResults.Text = Get-DistributionGroupMember $AddAllUsersToSingleDistro | Sort-Object DisplayName | Format-Table -AutoSize | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to add all Users to another Distribtuion Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getDetailedInfoForDistributionGroupToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$TempDir = $env:temp
			$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter\distros.txt")
			If ((Test-Path $O365AdminTempFolder) -eq $false)
			{
				$Textboxresults.text = "Caching Distribution Groups…"
				(Get-DistributionGroup -ResultSize unlimited | Where-Object { $_.GroupType -notlike 'Universal, SecurityEnabled' }).DisplayName | Out-File "$O365AdminTempFolder"
				$Textboxresults.text = ""
				
				#$DetailedInfoMailDistroGroup = Read-Host "Enter the group name"
				$DistroGroupsText = "Select the Distribution Group you want to view more information on"
				Show-SelectCachedDistroGroups_psf
				$DetailedInfoMailDistroGroup = $SelectCachedDistroGroups_comboboxNames
				If (!$DetailedInfoMailDistroGroup)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group you want to view detailed information for", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Getting detailed info about the $DetailedInfoMailDistroGroup group..."
					$textboxDetails.Text = "Get-DistributionGroup $DetailedInfoMailDistroGroup | Format-List"
					$TextboxResults.text = Get-DistributionGroup $DetailedInfoMailDistroGroup | Format-List | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
			Else
			{
				#$DetailedInfoMailDistroGroup = Read-Host "Enter the group name"
				$DistroGroupsText = "Select the Distribution Group you want to view more information on"
				Show-SelectCachedDistroGroups_psf
				$DetailedInfoMailDistroGroup = $SelectCachedDistroGroups_comboboxNames
				If (!$DetailedInfoMailDistroGroup)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group you want to view detailed information for", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Getting detailed info about the $DetailedInfoMailDistroGroup group..."
					$textboxDetails.Text = "Get-DistributionGroup $DetailedInfoMailDistroGroup | Format-List"
					$TextboxResults.text = Get-DistributionGroup $DetailedInfoMailDistroGroup | Format-List | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get information on another Distribution Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$allowAllDistributionGroupsToReceiveExternalEmailToolStripMenuItem_Click = {
	try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Allowing extneral senders for all Distribution Groups..."
		$textboxDetails.Text = "Get-DistributionGroup -ResultSize unlimited | Set-DistributionGroup -RequireSenderAuthenticationEnabled `$False"
		Get-DistributionGroup -ResultSize unlimited | Set-DistributionGroup -RequireSenderAuthenticationEnabled $False
		$TextboxResults.text = Get-DistributionGroup -ResultSize unlimited | Sort-Object Name | Format-Table Name, RequireSenderAuthenticationEnabled -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$denyDistributionGroupFromReceivingExternalEmailToolStripMenuItem_Click = {
	Try
	{
		$TempDir = $env:temp
		$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter\distros.txt")
		If ((Test-Path $O365AdminTempFolder) -eq $false)
		{
			$Textboxresults.text = "Caching Distribution Groups…"
			(Get-DistributionGroup -ResultSize unlimited | Where-Object { $_.GroupType -notlike 'Universal, SecurityEnabled' }).DisplayName | Out-File "$O365AdminTempFolder"
			$Textboxresults.text = ""
			
			#$DenyExternalEmail = Read-Host "Enter the name of the Distribtuion Group you want to deny external email to"
			$DistroGroupsText = "Select the Distribution Group you want to deny external email to"
			Show-SelectCachedDistroGroups_psf
			$DenyExternalEmail = $SelectCachedDistroGroups_comboboxNames
			If (!$DenyExternalEmail)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Distribution Group selected, please select a valid Distribution Group you want to deny external email to", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Denying extneral senders for the $DenyExternalEmail Distribution Group..."
				$textboxDetails.Text = "Set-DistributionGroup $DenyExternalEmail -RequireSenderAuthenticationEnabled `$True"
				Set-DistributionGroup $DenyExternalEmail -RequireSenderAuthenticationEnabled $True
				$TextboxResults.text = Get-DistributionGroup $DenyExternalEmail | Sort-Object Name | Format-Table Name, RequireSenderAuthenticationEnabled -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
				}
		}
		Else
		{
			#$DenyExternalEmail = Read-Host "Enter the name of the Distribtuion Group you want to deny external email to"
			$DistroGroupsText = "Select the Distribution Group you want to deny external email to"
			Show-SelectCachedDistroGroups_psf
			$DenyExternalEmail = $SelectCachedDistroGroups_comboboxNames
			If (!$DenyExternalEmail)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Distribution Group selected, please select a valid Distribution Group you want to deny external email to", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Denying extneral senders for the $DenyExternalEmail Distribution Group..."
				$textboxDetails.Text = "Set-DistributionGroup $DenyExternalEmail -RequireSenderAuthenticationEnabled `$True"
				Set-DistributionGroup $DenyExternalEmail -RequireSenderAuthenticationEnabled $True
				$TextboxResults.text = Get-DistributionGroup $DenyExternalEmail | Sort-Object Name | Format-Table Name, RequireSenderAuthenticationEnabled -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$denyAllDistributionGroupsFromReceivingExternalEmailToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Denying extneral senders for all Distribution Groups..."
		$textboxDetails.Text = "Get-DistributionGroup -ResultSize unlimited | Set-DistributionGroup -RequireSenderAuthenticationEnabled `$True"
		Get-DistributionGroup -ResultSize unlimited | Set-DistributionGroup -RequireSenderAuthenticationEnabled $True
		$TextboxResults.text = Get-DistributionGroup -ResultSize unlimited | Sort-Objects Name | Format-Table Name, RequireSenderAuthenticationEnabled -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getExternalEmailStatusForADistributionGroupToolStripMenuItem_Click = {
	Try
	{
		$TempDir = $env:temp
		$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter\distros.txt")
		If ((Test-Path $O365AdminTempFolder) -eq $false)
		{
			$Textboxresults.text = "Caching Distribution Groups…"
			(Get-DistributionGroup -ResultSize unlimited | Where-Object { $_.GroupType -notlike 'Universal, SecurityEnabled' }).DisplayName | Out-File "$O365AdminTempFolder"
			$Textboxresults.text = ""
			
			#$ExternalEmailStatus = Read-Host "Enter the Distribution Group"
			$DistroGroupsText = "Select the Distribution Group you want to view external email status for"
			Show-SelectCachedDistroGroups_psf
			$ExternalEmailStatus = $SelectCachedDistroGroups_comboboxNames
			If (!$ExternalEmailStatus)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group you want to view external email status for", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting external email status for $ExternalEmailStatus..."
				$textboxDetails.Text = "Get-DistributionGroup $ExternalEmailStatus | Format-List Name, RequireSenderAuthenticationEnabled"
				$TextboxResults.text = Get-DistributionGroup $ExternalEmailStatus | Format-List Name, RequireSenderAuthenticationEnabled | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Else
		{
			#$ExternalEmailStatus = Read-Host "Enter the Distribution Group"
			$DistroGroupsText = "Select the Distribution Group you want to view external email status for"
			Show-SelectCachedDistroGroups_psf
			$ExternalEmailStatus = $SelectCachedDistroGroups_comboboxNames
			If (!$ExternalEmailStatus)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group you want to view external email status for", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting external email status for $ExternalEmailStatus..."
				$textboxDetails.Text = "Get-DistributionGroup $ExternalEmailStatus | Format-List Name, RequireSenderAuthenticationEnabled"
				$TextboxResults.text = Get-DistributionGroup $ExternalEmailStatus | Format-List Name, RequireSenderAuthenticationEnabled | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getExternalEmailStatusForAllDistributionGroupsToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting external email status for all distribution groups..."
		$textboxDetails.Text = "Get-DistributionGroup -ResultSize unlimited | Sort-Object Name | Format-Table Name, RequireSenderAuthenticationEnabled -AutoSize"
		$TextboxResults.text = Get-DistributionGroup -ResultSize unlimited | Sort-Object Name | Format-Table Name, RequireSenderAuthenticationEnabled -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getDistributionGroupsAcceptMessagesFromInfoToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$TempDir = $env:temp
			$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter\distros.txt")
			If ((Test-Path $O365AdminTempFolder) -eq $false)
			{
				$Textboxresults.text = "Caching Distribution Groups…"
				(Get-DistributionGroup -ResultSize unlimited | Where-Object { $_.GroupType -notlike 'Universal, SecurityEnabled' }).DisplayName | Out-File "$O365AdminTempFolder"
				$Textboxresults.text = ""
				
				$DistroGroupsText = "Select the distro group you want to view Accept Messages Only From info for"
				Show-SelectCachedDistroGroups_psf
				$distro = $SelectCachedDistroGroups_comboboxNames
				If (!$distro)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$textboxDetails.Text = "Get-DistributionGroup -Identity $distro | Format-List Identity, AcceptMessagesOnlyFrom, AcceptMessagesOnlyFromDLMembers, AcceptMessagesOnlyFromSendersOrMember"
					$TextboxResults.Text = "Getting delivery restriction information for $distro..."
					$TextboxResults.text = Get-DistributionGroup -Identity $distro | Format-List Identity, AcceptMessagesOnlyFrom, AcceptMessagesOnlyFromDLMembers, AcceptMessagesOnlyFromSendersOrMembers | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
			Else
			{
				$DistroGroupsText = "Select the distro group you want to view Accept Messages Only From info for"
				Show-SelectCachedDistroGroups_psf
				$distro = $SelectCachedDistroGroups_comboboxNames
				If (!$distro)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$textboxDetails.Text = "Get-DistributionGroup -Identity $distro | Format-List Identity, AcceptMessagesOnlyFrom, AcceptMessagesOnlyFromDLMembers, AcceptMessagesOnlyFromSendersOrMember"
					$TextboxResults.Text = "Getting delivery restriction information for $distro..."
					$TextboxResults.text = Get-DistributionGroup -Identity $distro | Format-List Identity, AcceptMessagesOnlyFrom, AcceptMessagesOnlyFromDLMembers, AcceptMessagesOnlyFromSendersOrMembers | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to view another Distribution Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getDistributionGroupsRejectMessagesFromInfoToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$TempDir = $env:temp
			$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter\distros.txt")
			If ((Test-Path $O365AdminTempFolder) -eq $false)
			{
				$Textboxresults.text = "Caching Distribution Groups…"
				(Get-DistributionGroup -ResultSize unlimited | Where-Object { $_.GroupType -notlike 'Universal, SecurityEnabled' }).DisplayName | Out-File "$O365AdminTempFolder"
				$Textboxresults.text = ""
				
				$DistroGroupsText = "Select the distro group you want to view Reject Messages Only From info for"
				Show-SelectCachedDistroGroups_psf
				$distro = $SelectCachedDistroGroups_comboboxNames
				If (!$distro)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$textboxDetails.Text = "Get-DistributionGroup -Identity $distro | Format-List Identity, RejectMessagesFrom, RejectMessagesFromDLMembers, RejectMessagesFromSendersOrMembers"
					$TextboxResults.Text = "Getting delivery restriction information for $distro..."
					$TextboxResults.text = Get-DistributionGroup -Identity $distro | Format-List Identity, RejectMessagesFrom, RejectMessagesFromDLMembers, RejectMessagesFromSendersOrMembers | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
			Else
			{
				$DistroGroupsText = "Select the distro group you want to view Reject Messages Only From info for"
				Show-SelectCachedDistroGroups_psf
				$distro = $SelectCachedDistroGroups_comboboxNames
				If (!$distro)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$textboxDetails.Text = "Get-DistributionGroup -Identity $distro | Format-List Identity, RejectMessagesFrom, RejectMessagesFromDLMembers, RejectMessagesFromSendersOrMembers"
					$TextboxResults.Text = "Getting delivery restriction information for $distro..."
					$TextboxResults.text = Get-DistributionGroup -Identity $distro | Format-List Identity, RejectMessagesFrom, RejectMessagesFromDLMembers, RejectMessagesFromSendersOrMembers | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to view another Distribution Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
}

$getAllGroupsAndAllMembersToCSVToolStripMenuItem1_Click = {
	Try
	{
		$savedialog = New-Object windows.forms.savefiledialog
		$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
		$savedialog.title = "Export to File"
		$savedialog.filter = ".csv|*.csv"
		$savedialog.ShowHelp = $True
		$result = $savedialog.ShowDialog(); $result
		if ($result -eq "OK")
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			#Constant Variables 
			$OutputFile = $savedialog.filename
			$TextboxResults.Text = "Getting all groups and members..."
			$arrDLMembers = @{ }
			
			#Prepare Output file with headers 
			Out-File -FilePath $OutputFile -InputObject "Distribution Group DisplayName,Distribution Group Email,Member DisplayName, Member Email, Member Type" -Encoding UTF8
			
			#Get all Distribution Groups from Office 365 
			$objDistributionGroups = Get-DistributionGroup -ResultSize Unlimited
			
			#Iterate through all groups, one at a time     
			Foreach ($objDistributionGroup in $objDistributionGroups)
			{
				
				#write-host "Processing $($objDistributionGroup.DisplayName)..."
				
				#Get members of this group 
				$objDGMembers = Get-DistributionGroupMember -Identity $($objDistributionGroup.PrimarySmtpAddress)
				
				#write-host "Found $($objDGMembers.Count) members..."
				
				#Iterate through each member 
				Foreach ($objMember in $objDGMembers)
				{
					Out-File -FilePath $OutputFile -InputObject "$($objDistributionGroup.DisplayName),$($objDistributionGroup.PrimarySMTPAddress),$($objMember.DisplayName),$($objMember.PrimarySMTPAddress),$($objMember.RecipientType)" -Encoding UTF8 -append
					#write-host "`t$($objDistributionGroup.DisplayName),$($objDistributionGroup.PrimarySMTPAddress),$($objMember.DisplayName),$($objMember.PrimarySMTPAddress),$($objMember.RecipientType)"
				}
			}
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		$TextboxResults.Text = ""
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
	
}

$getADistributionGroupsMembersToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$TempDir = $env:temp
			$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter\distros.txt")
			If ((Test-Path $O365AdminTempFolder) -eq $false)
			{
				$Textboxresults.text = "Caching Distribution Groups…"
				(Get-DistributionGroup -ResultSize unlimited | Where-Object { $_.GroupType -notlike 'Universal, SecurityEnabled' }).DisplayName | Out-File "$O365AdminTempFolder"
				$Textboxresults.text = ""
				
				
				#$ListDistributionGroupMembers = Read-Host "Enter the name of the Distribution Group you want to list members of"
				$DistroGroupsText = "Select the Distribution Group you want to view the members of"
				Show-SelectCachedDistroGroups_psf
				$ListDistributionGroupMembers = $SelectCachedDistroGroups_comboboxNames
				If (!$ListDistributionGroupMembers)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group you want to view the members of", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Getting all members of the $ListDistributionGroupMembers Distrubution Group..."
					$textboxDetails.Text = "Get-DistributionGroupMember $ListDistributionGroupMembers | Sort-Object DisplayName | Format-Table -AutoSize"
					$TextboxResults.Text = Get-DistributionGroupMember $ListDistributionGroupMembers | Sort-Object DisplayName | Format-Table -AutoSize | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
			Else
			{
				#$ListDistributionGroupMembers = Read-Host "Enter the name of the Distribution Group you want to list members of"
				$DistroGroupsText = "Select the Distribution Group you want to view the members of"
				Show-SelectCachedDistroGroups_psf
				$ListDistributionGroupMembers = $SelectCachedDistroGroups_comboboxNames
				If (!$ListDistributionGroupMembers)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group you want to view the members of", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Getting all members of the $ListDistributionGroupMembers Distrubution Group..."
					$textboxDetails.Text = "Get-DistributionGroupMember $ListDistributionGroupMembers | Sort-Object DisplayName | Format-Table -AutoSize"
					$TextboxResults.Text = Get-DistributionGroupMember $ListDistributionGroupMembers | Sort-Object DisplayName | Format-Table -AutoSize | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get Members of another Distribution Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getAllDisabledUsersThatAreStillMembersOfDistroGroupsToCSVToolStripMenuItem_Click = {
	Try
	{
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$savedialog = New-Object windows.forms.savefiledialog
			$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
			$savedialog.title = "Export to File"
			$savedialog.filter = ".csv|*.csv"
			$savedialog.ShowHelp = $True
			$result = $savedialog.ShowDialog(); $result
			$TextboxResults.Text = "Getting all users that are disabled and still members of distro groups..."
			if ($result -eq "OK")
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				
				#Get All Groups 
				$Groups = Get-MsolGroup -All
				
				#Build Hash of all disabled users 
				$MSOLDisabledUsers = Get-MsolUser -All -EnabledFilter DisabledOnly | Select-Object ObjectId
				$AllDisabledUsers = @()
				$MSOLDisabledUsers | ForEach-Object { $AllDisabledUsers += $_.ObjectID.Guid }
				
				$DisabledUserMembers = @()
				
				foreach ($Group in $Groups)
				{
					#$TextboxResults.Text = "Processing $($Group.DisplayName)..."
					#Get All Members and Loop through them 
					$GroupMembers = Get-MsolGroupMember -All -GroupObjectID $Group.ObjectID
					foreach ($Member in $GroupMembers)
					{
						#Is this member in our disabled list? 
						if ($AllDisabledUsers -contains $Member.ObjectId)
						{
							#$TextboxResults.Text = "`tFound $($Member.DisplayName)"
							#Add them to the list 
							$DisabledUserMembers += (
								$Object = [pscustomobject][ordered] @{
									GroupName = $Group.DisplayName
									GroupEmail = $Group.EmailAddress
									UserName = $Member.DisplayName
									EmailAddress = $Member.EmailAddress
								}
							)
						}
					}
				}
				$DisabledUserMembers | Export-CSV -NoTypeInformation $savedialog.filename
				$TextboxResults.Text = ""
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$savedialog = New-Object windows.forms.savefiledialog
			$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
			$savedialog.title = "Export to File"
			$savedialog.filter = ".csv|*.csv"
			$savedialog.ShowHelp = $True
			$result = $savedialog.ShowDialog(); $result
			$TextboxResults.Text = "Getting all users that are disabled and still members of distro groups..."
			if ($result -eq "OK")
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				
				#Get All Groups 
				$Groups = Get-MsolGroup -All -TenantId $PartnerComboBox.SelectedItem.TenantID
				
				#Build Hash of all disabled users 
				$MSOLDisabledUsers = Get-MsolUser -All -TenantId $PartnerComboBox.SelectedItem.TenantID -EnabledFilter DisabledOnly | Select-Object ObjectId
				$AllDisabledUsers = @()
				$MSOLDisabledUsers | ForEach-Object { $AllDisabledUsers += $_.ObjectID.Guid }
				
				$DisabledUserMembers = @()
				
				foreach ($Group in $Groups)
				{
					#$TextboxResults.Text = "Processing $($Group.DisplayName)..."
					#Get All Members and Loop through them 
					$GroupMembers = Get-MsolGroupMember -All -GroupObjectID $Group.ObjectID -TenantId $PartnerComboBox.SelectedItem.TenantID
					foreach ($Member in $GroupMembers)
					{
						#Is this member in our disabled list? 
						if ($AllDisabledUsers -contains $Member.ObjectId)
						{
							#$TextboxResults.Text = "`tFound $($Member.DisplayName)"
							#Add them to the list 
							$DisabledUserMembers += (
								$Object = [pscustomobject][ordered] @{
									GroupName = $Group.DisplayName
									GroupEmail = $Group.EmailAddress
									UserName = $Member.DisplayName
									EmailAddress = $Member.EmailAddress
								}
							)
						}
					}
				}
				$DisabledUserMembers | Export-CSV -NoTypeInformation $savedialog.filename
				$TextboxResults.Text = ""
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Else
		{
			$savedialog = New-Object windows.forms.savefiledialog
			$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
			$savedialog.title = "Export to File"
			$savedialog.filter = ".csv|*.csv"
			$savedialog.ShowHelp = $True
			$result = $savedialog.ShowDialog(); $result
			$TextboxResults.Text = "Getting all users that are disabled and still members of distro groups..."
			if ($result -eq "OK")
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				
				#Get All Groups 
				$Groups = Get-MsolGroup -All
				
				#Build Hash of all disabled users 
				$MSOLDisabledUsers = Get-MsolUser -All -EnabledFilter DisabledOnly | Select-Object ObjectId
				$AllDisabledUsers = @()
				$MSOLDisabledUsers | ForEach-Object { $AllDisabledUsers += $_.ObjectID.Guid }
				
				$DisabledUserMembers = @()
				
				foreach ($Group in $Groups)
				{
					#$TextboxResults.Text = "Processing $($Group.DisplayName)..."
					#Get All Members and Loop through them 
					$GroupMembers = Get-MsolGroupMember -All -GroupObjectID $Group.ObjectID
					foreach ($Member in $GroupMembers)
					{
						#Is this member in our disabled list? 
						if ($AllDisabledUsers -contains $Member.ObjectId)
						{
							#$TextboxResults.Text = "`tFound $($Member.DisplayName)"
							#Add them to the list 
							$DisabledUserMembers += (
								$Object = [pscustomobject][ordered] @{
									GroupName = $Group.DisplayName
									GroupEmail = $Group.EmailAddress
									UserName = $Member.DisplayName
									EmailAddress = $Member.EmailAddress
								}
							)
						}
					}
				}
				$DisabledUserMembers | Export-CSV -NoTypeInformation $savedialog.filename
				$TextboxResults.Text = ""
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$rejectMessagesFromSpecificSenderForGroupToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$TempDir = $env:temp
			$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter\distros.txt")
			If ((Test-Path $O365AdminTempFolder) -eq $false)
			{
				$Textboxresults.text = "Caching Distribution Groups…"
				(Get-DistributionGroup -ResultSize unlimited | Where-Object { $_.GroupType -notlike 'Universal, SecurityEnabled' }).DisplayName | Out-File "$O365AdminTempFolder"
				$Textboxresults.text = ""
				
				$DistroGroupsText = "Select the distro group you want to modify delivery restriction for"
				Show-SelectCachedDistroGroups_psf
				$distro = $SelectCachedDistroGroups_comboboxNames
				If (!$distro)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group", "Error")
				}
				Else
				{
					$DistroGroupsText = "Select the distro group you don't want the members to be able to send to $distro"
					Show-SelectCachedDistroGroups_psf
					$rejectfrom = $SelectCachedDistroGroups_comboboxNames
					If (!$rejectfrom)
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group", "Error")
					}
					Else
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$textboxDetails.Text = "Set-DistributionGroup -Identity $distro -RejectMessagesFrom `@{ Add = $Rejectfrom }"
						$TextboxResults.Text = "Modifying delivery restriction information for $distro"
						Set-DistributionGroup -Identity $distro -RejectMessagesFromDLMembers @{ Add = $Rejectfrom }
						$TextboxResults.text = Get-DistributionGroup -Identity $distro | Format-List Identity, RejectMessagesFrom, RejectMessagesFromDLMembers, RejectMessagesFromSendersOrMembers | Out-String -Width 2147483647
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
				}
			}
			Else
			{
				
				$DistroGroupsText = "Select the distro group you want to modify delivery restriction for"
				Show-SelectCachedDistroGroups_psf
				$distro = $SelectCachedDistroGroups_comboboxNames
				If (!$distro)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group", "Error")
				}
				Else
				{
					$DistroGroupsText = "Select the distro group you don't want the members to be able to send to $distro"
					Show-SelectCachedDistroGroups_psf
					$rejectfrom = $SelectCachedDistroGroups_comboboxNames
					If (!$rejectfrom)
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group", "Error")
					}
					Else
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$textboxDetails.Text = "Set-DistributionGroup -Identity $distro -RejectMessagesFrom `@{ Add = $Rejectfrom }"
						$TextboxResults.Text = "Modifying delivery restriction information for $distro"
						Set-DistributionGroup -Identity $distro -RejectMessagesFromDLMembers @{ Add = $Rejectfrom }
						$TextboxResults.text = Get-DistributionGroup -Identity $distro | Format-List Identity, RejectMessagesFrom, RejectMessagesFromDLMembers, RejectMessagesFromSendersOrMembers | Out-String -Width 2147483647
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to modify another Distribution Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$acceptMessagesForAGroupFromMembersOfAGroupToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$TempDir = $env:temp
			$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter\distros.txt")
			If ((Test-Path $O365AdminTempFolder) -eq $false)
			{
				$Textboxresults.text = "Caching Distribution Groups…"
				(Get-DistributionGroup -ResultSize unlimited | Where-Object { $_.GroupType -notlike 'Universal, SecurityEnabled' }).DisplayName | Out-File "$O365AdminTempFolder"
				$Textboxresults.text = ""
				
				$DistroGroupsText = "Select the distro group you want to modify delivery restriction for"
				Show-SelectCachedDistroGroups_psf
				$distro = $SelectCachedDistroGroups_comboboxNames
				If (!$distro)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group", "Error")
				}
				Else
				{
					$DistroGroupsText = "Select the distro group you want the members to be able to send to $distro"
					Show-SelectCachedDistroGroups_psf
					$rejectfrom = $SelectCachedDistroGroups_comboboxNames
					If (!$rejectfrom)
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group", "Error")
					}
					Else
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$textboxDetails.Text = "Set-DistributionGroup -Identity $distro -AllowMessagesFrom `@{ Add = $Rejectfrom }"
						$TextboxResults.Text = "Modifying delivery restriction information for $distro"
						Set-DistributionGroup -Identity $distro -AcceptMessagesOnlyFromDLMembers @{ Add = $Rejectfrom }
						$TextboxResults.text = Get-DistributionGroup -Identity $distro | Format-List Identity, AcceptMessagesOnlyFrom, AcceptMessagesOnlyFromDLMembers, AcceptMessagesOnlyFromSendersOrMembers | Out-String -Width 2147483647
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
				}
			}
			Else
			{
				$DistroGroupsText = "Select the distro group you want to modify delivery restriction for"
				Show-SelectCachedDistroGroups_psf
				$distro = $SelectCachedDistroGroups_comboboxNames
				If (!$distro)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group", "Error")
				}
				Else
				{
					$DistroGroupsText = "Select the distro group you want the members to be able to send to $distro"
					Show-SelectCachedDistroGroups_psf
					$rejectfrom = $SelectCachedDistroGroups_comboboxNames
					If (!$rejectfrom)
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group", "Error")
					}
					Else
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$textboxDetails.Text = "Set-DistributionGroup -Identity $distro -AllowMessagesFrom `@{ Add = $Rejectfrom }"
						$TextboxResults.Text = "Modifying delivery restriction information for $distro"
						Set-DistributionGroup -Identity $distro -AcceptMessagesOnlyFromDLMembers @{ Add = $Rejectfrom }
						$TextboxResults.text = Get-DistributionGroup -Identity $distro | Format-List Identity, AcceptMessagesOnlyFrom, AcceptMessagesOnlyFromDLMembers, AcceptMessagesOnlyFromSendersOrMembers | Out-String -Width 2147483647
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to modify another Distribution Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

#Unified Groups

$getListOfUnifiedGroupsToolStripMenuItem_Click = {
	try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting list of all unified groups..."
		$textboxDetails.Text = "Get-UnifiedGroup | Sort-Object Name | Format-Table -AutoSize"
		$TextboxResults.Text = Get-UnifiedGroup | Sort-Object Name | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$listMembersOfAGroupToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$GetUnifiedGroupMembers = Read-Host "Enter the name of the group you want to view members for."
			$SelectUnifiedGroupsText = "Select the Unified Group you want to view members for"
			Show-SelectUnifiedGroups_psf
			$GetUnifiedGroupMembers = $SelectUnifiedGroups_comboboxUnifiedGroups
			If (!$GetUnifiedGroupMembers)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Unified Group was selected, please enter a valid Unified Group you want to view members for", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting all members of the $GetUnifiedGroupMembers group..."
				$textboxDetails.Text = "Get-UnifiedGroupLinks –Identity $GetUnifiedGroupMembers –LinkType Members | Sort-Object DisplayName | Format-Table DisplayName -AutoSize"
				$TextboxResults.Text = Get-UnifiedGroupLinks –Identity $GetUnifiedGroupMembers –LinkType Members | Sort-Object DisplayName | Format-Table DisplayName -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get Members of another Unified Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$removeAGroupToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$RemoveUnifiedGroup = Read-Host "Enter the name of the group you want to remove"
			$SelectUnifiedGroupsText = "Select the Unified Group you want to remove"
			Show-SelectUnifiedGroups_psf
			$RemoveUnifiedGroup = $SelectUnifiedGroups_comboboxUnifiedGroups
			If (!$RemoveUnifiedGroup)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Unified Group was selected, please select a valid Unified Group to remove", "Error")
			}
			Else
			{
				$OUTPUT = [System.Windows.Forms.MessageBox]::Show("Are you sure you want to delete $RemoveUnifiedGroup ?", "Warning!", 4)
				
				If ($OUTPUT -eq "YES")
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Removing the $RemoveUnifiedGroup group..."
					$textboxDetails.Text = "Remove-UnifiedGroup $RemoveUnifiedGroup"
					Remove-UnifiedGroup $RemoveUnifiedGroup
					$TextboxResults.Text = "Getting list of unified groups..."
					$TextboxResults.Text = Get-UnifiedGroup | Sort-Object Name | Format-Table -AutoSize | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
					
				}
				Else
				{
					[System.Windows.Forms.MessageBox]::Show("$RemoveUnifiedGroup was not deleted", "Info")
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to remove another Unified Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$addAUserToAGroupToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$UnifiedGroupAddUser = Read-Host "Enter the name of the group you want to add a user to"
			$SelectUnifiedGroupsText = "Select the Unified Group you want to add a user to"
			Show-SelectUnifiedGroups_psf
			$UnifiedGroupAddUser = $SelectUnifiedGroups_comboboxUnifiedGroups
			If (!$UnifiedGroupAddUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Unified Group was selected, please select a valid Unified Group you want to add a user to", "Error")
			}
			Else
			{
				#$UnifiedGroupUserAdd = Read-Host "Enter the UPN of the user you want to add to the $UnifiedGroupAddUser group."
				$SelectUsersFormText = "Select the user you want add to $UnifiedGroupAddUser"
				Show-SelectCachedDisplayNames_psf
				$UnifiedGroupUserAdd = $SelectCachedDisplayNames_comboboxNames
				If (!$UnifiedGroupUserAdd)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a user you want to add to $UnifiedGroupAddUser", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Adding $UnifiedGroupUserAdd as a member of the $UnifiedGroupAddUser group..."
					$textboxDetails.Text = "Add-UnifiedGroupLinks $UnifiedGroupAddUser –Links $UnifiedGroupUserAdd –LinkType Members"
					Add-UnifiedGroupLinks $UnifiedGroupAddUser –Links $UnifiedGroupUserAdd –LinkType Members
					$TextboxResults.Text = "Getting members for $UnifiedGroupAddUser..."
					$TextboxResults.Text = Get-UnifiedGroupLinks –Identity $UnifiedGroupAddUser –LinkType Members | Sort-Object DisplayName | Format-Table DisplayName -AutoSize | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to add another User to a Unified Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$createANewGroupToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$NewUnifiedGroupName = Read-Host "Enter the Display Name of the new group"
			If (!$NewUnifiedGroupName)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Display Name was entered, please enter a valid display name for the new group", "Error")
			}
			Else
			{
				#$NewUnifiedGroupAccessType = Read-Host "Enter the Access Type for the group $NewUnifiedGroupName (Public or Private)"
				$UnifiedGroupAccessTypeText = "Select the Access Type for the group $NewUnifiedGroupName"
				Show-SelectUnifiedGroupAccessType_psf
				$NewUnifiedGroupAccessType = $SelectUnifiedGroupAccessType_comboboxAccessType_SelectedItem
				If (!$NewUnifiedGroupAccessType)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Access Type was selected, please select a valid access type", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Creating a the $NewUnifiedGroupName group..."
					$textboxDetails.Text = "New-UnifiedGroup –DisplayName $NewUnifiedGroupName -AccessType $NewUnifiedGroupAccessType"
					New-UnifiedGroup –DisplayName $NewUnifiedGroupName -AccessType $NewUnifiedGroupAccessType
					$TextboxResults.Text = Get-UnifiedGroup $NewUnifiedGroupName | Format-Table -AutoSize | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to create a new Unified Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$listOwnersOfAGroupToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$GetUnifiedGroupOwners = Read-Host "Enter the name of the group you want to view members for."
			$SelectUnifiedGroupsText = "Select the Unified Group you want to view owners for"
			Show-SelectUnifiedGroups_psf
			$GetUnifiedGroupOwners = $SelectUnifiedGroups_comboboxUnifiedGroups
			If (!$GetUnifiedGroupOwners)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Unified Group was selected, please select a valid Unified Group you want to view owners for", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting all owners of the $GetUnifiedGroupOwners group..."
				$textboxDetails.Text = "Get-UnifiedGroupLinks –Identity $GetUnifiedGroupOwners –LinkType Owners | Format-List DisplayName | Format-Table -AutoSize"
				$TextboxResults.Text = Get-UnifiedGroupLinks –Identity $GetUnifiedGroupOwners –LinkType Owners | Sort-Object DisplayName | Format-Table -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get Owners for another Unified Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$listSubscribersOfAGroupToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$GetUnifiedGroupSubscribers = Read-Host "Enter the name of the group you want to view members for."
			$SelectUnifiedGroupsText = "Select the Unified Group you want to view members for"
			Show-SelectUnifiedGroups_psf
			$GetUnifiedGroupSubscribers = $SelectUnifiedGroups_comboboxUnifiedGroups
			If (!$GetUnifiedGroupSubscribers)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Unified Group was selected, please select a valid Unified Group", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting all subscribers of the $GetUnifiedGroupSubscribers group..."
				$textboxDetails.Text = "Get-UnifiedGroupLinks –Identity $GetUnifiedGroupSubscribers –LinkType Subscribers | Sort-Object DisplayName | Format-Table -AutoSize"
				$TextboxResults.Text = Get-UnifiedGroupLinks –Identity $GetUnifiedGroupSubscribers –LinkType Subscribers | Sort-Object DisplayName | Format-Table -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get Subscribers of another Unified Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$addAnOwnerToAGroupToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$TextboxResults.Text = "Important! The user must be a member of the group prior to becoming an owner"
			#$UnifiedGroupAddOwner = Read-Host "Enter the name of the group you want to modify ownership for"
			$SelectUnifiedGroupsText = "Select the Unified Group you want to modify ownership for"
			Show-SelectUnifiedGroups_psf
			$UnifiedGroupModify = $SelectUnifiedGroups_comboboxUnifiedGroups
			If (!$UnifiedGroupModify)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Unified Group was selected, please select a Unified Group you want to modify ownership for", "Error")
			}
			Else
			{
				#$AddUnifiedGroupOwner = Read-Host "Enter the UPN of the user you want to become an owner"
				$UnifiedGroupMembersText = "Select the user you want to add as a owner to $UnifiedGroupModify"
				Show-SelectUnifiedGroupMembers_psf
				$AddUnifiedGroupOwner = $SelectUnifiedGroupMembers_comboboxUnifiedGroupMembers
				If (!$AddUnifiedGroupOwner)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a user you want to be an owner of $UnifiedGroupModify", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Adding $AddUnifiedGroupOwner as an owner of the $UnifiedGroupModify group..."
					$textboxDetails.Text = "Add-UnifiedGroupLinks -Identity $UnifiedGroupModify -LinkType Owners -Links $AddUnifiedGroupOwner"
					Add-UnifiedGroupLinks -Identity $UnifiedGroupModify -LinkType Owners -Links $AddUnifiedGroupOwner
					$TextboxResults.Text = "Getting list of owners for $UnifiedGroupModify..."
					$TextboxResults.Text = Get-UnifiedGroupLinks –Identity $UnifiedGroupModify –LinkType Owners | Sort-Object DisplayName | Format-Table -AutoSize | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to add another User as an Owner of a Unified Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$addASubscriberToAGroupToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$UnifiedGroupAddSubscriber = Read-Host "Enter the name of the group you want to add a subscriber for"
			$SelectUnifiedGroupsText = "Select the Unified Group you want to add a subscriber to"
			Show-SelectUnifiedGroups_psf
			$UnifiedGroupAddSubscriber = $SelectUnifiedGroups_comboboxUnifiedGroups
			If (!$UnifiedGroupAddSubscriber)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Unified Group was selected, please select a valid Unified Group", "Error")
			}
			Else
			{
				#$AddUnifiedGroupSubscriber = Read-Host "Enter the UPN of the user you want to add as a subscriber"
				$SelectUsersFormText = "Select the user you want to add as a subscriber to $UnifiedGroupAddSubscriber"
				Show-SelectCachedDisplayNames_psf
				$AddUnifiedGroupSubscriber = $SelectCachedDisplayNames_comboboxNames
				If (!$AddUnifiedGroupSubscriber)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a valid user you want to add as a subscriber to $UnifiedGroupAddSubscriber", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Adding $AddUnifiedGroupSubscriber as a subscriber to the $UnifiedGroupAddSubscriber group..."
					$textboxDetails.Text = "Add-UnifiedGroupLinks -Identity $UnifiedGroupAddSubscriber -LinkType Owners -Links $AddUnifiedGroupSubscriber"
					Add-UnifiedGroupLinks -Identity $UnifiedGroupAddSubscriber -LinkType Owners -Links $AddUnifiedGroupSubscriber
					$TextboxResults.Text = "Getting list of subscribers for $UnifiedGroupAddSubscriber..."
					$TextboxResults.Text = Get-UnifiedGroupLinks –Identity $UnifiedGroupAddSubscriber –LinkType Subscribers | Sort-Object DisplayName | Format-List | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to add a Subscriber to another Unified Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$removeAMemberFromAGroupToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$SelectUnifiedGroupsText = "Select the Unified Group you want to remove a member from"
			Show-SelectUnifiedGroups_psf
			$UnifiedGroupModify = $SelectUnifiedGroups_comboboxUnifiedGroups
			If (!$UnifiedGroupModify)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Unified Group was selected, please select a Unified Group you want to remove a member from", "Error")
			}
			Else
			{
				$UnifiedGroupMembersText = "Select the user you want to remove from $UnifiedGroupModify"
				Show-SelectUnifiedGroupMembers_psf
				$RemoveUserFromUnifiedGroup = $SelectUnifiedGroupMembers_comboboxUnifiedGroupMembers
				If (!$RemoveUserFromUnifiedGroup)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a user to remove from $UnifiedGroupModify", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Removing $RemoveUserFromUnifiedGroup from the $UnifiedGroupModify group..."
					$textboxDetails.Text = "Remove-UnifiedGroupLinks -Identity $UnifiedGroupModify -LinkType Members -Links $RemoveUserFromUnifiedGroup"
					Remove-UnifiedGroupLinks -Identity $UnifiedGroupModify -LinkType Members -Links $RemoveUserFromUnifiedGroup
					$TextboxResults.Text = "Getting members of $UnifiedGroupModify..."
					$TextboxResults.Text = Get-UnifiedGroupLinks –Identity $UnifiedGroupModify –LinkType Members | Sort-Object Name | Format-Table Name -AutoSize | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to remove another Member from a Unified Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

#Security Groups

$createARegularSecurityGroupToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$SecurityGroupName = Read-Host "Enter a name for the new Security Group"
			If (!$SecurityGroupName)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Name was entered, please enter a valid name for the Security Group", "Error")
			}
			Else
			{
				#What to do if connected to main o365 account
				If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Creating the $SecurityGroupName security group..."
					$textboxDetails.Text = "New-MsolGroup -DisplayName $SecurityGroupName "
					$TextboxResults.Text = New-MsolGroup -DisplayName $SecurityGroupName | Format-List | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
				#What to do if connected to partner account
				ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
				{
					$TenantText = $PartnerComboBox.text
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Creating the $SecurityGroupName security group..."
					$textboxDetails.Text = "New-MsolGroup -DisplayName $SecurityGroupName -TenantId $TenantText"
					$TextboxResults.Text = New-MsolGroup -DisplayName $SecurityGroupName -TenantId $PartnerComboBox.SelectedItem.TenantID | Format-List | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Creating the $SecurityGroupName security group..."
					$textboxDetails.Text = "New-MsolGroup -DisplayName $SecurityGroupName "
					$TextboxResults.Text = New-MsolGroup -DisplayName $SecurityGroupName | Format-List | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to create another Security Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getAllRegularSecurityGroupsToolStripMenuItem_Click = {
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting list of all Security groups..."
			$textboxDetails.Text = "Get-MsolGroup -All -GroupType Security | Sort-Object DisplayName | Format-Table DisplayName, GroupType -AutoSize"
			$TextboxResults.Text = Get-MsolGroup -All -GroupType Security | Sort-Object DisplayName | Format-Table DisplayName, GroupType -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting list of all Security groups..."
			$textboxDetails.Text = "Get-MsolGroup -All -TenantId $TenantText -GroupType Security | Sort-Object DisplayName | Format-Table DisplayName, GroupType -AutoSize"
			$TextboxResults.Text = Get-MsolGroup -All -TenantId $PartnerComboBox.SelectedItem.TenantID -GroupType Security | Sort-Object DisplayName | Format-Table DisplayName, GroupType -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting list of all Security groups..."
			$textboxDetails.Text = "Get-MsolGroup -All -GroupType Security | Sort-Object DisplayName | Format-Table DisplayName, GroupType -AutoSize"
			$TextboxResults.Text = Get-MsolGroup -All -GroupType Security | Sort-Object DisplayName | Format-Table DisplayName, GroupType -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
	
}

$getAllMailEnabledSecurityGroupsToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting all Mail Enabled Security Groups..."
		$textboxDetails.Text = "Get-DistributionGroup -ResultSize unlimited | Where-Object { `$_.GroupType -like 'Universal, SecurityEnabled' } | Sort-Object DisplayName | Format-Table DisplayName, SamAccountName, GroupType, IsDirSynced, EmailAddresses -AutoSize "
		$TextboxResults.text = Get-DistributionGroup -ResultSize unlimited | Where-Object { $_.GroupType -like "Universal, SecurityEnabled" } | Sort-Object DisplayName | Format-Table DisplayName, SamAccountName, GroupType, IsDirSynced, EmailAddresses -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$createAMailEnabledSecurityGroupToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$MailEnabledSecurityGroup = Read-Host "Enter the name of the Security Group"
			If (!$MailEnabledSecurityGroup)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No name was entered, please enter a valid name for the new Security Group", "Error")
			}
			Else
			{
				$MailEnabledSMTPAddress = Read-Host "Enter the Primary SMTP address for $MailEnabledSecurityGroup"
				If (!$MailEnabledSMTPAddress)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Primary SMTP address was entered, please enter a valid Primary SMTP address", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Creating the $MailEnabledSecurityGroup security group..."
					$textboxDetails.Text = "New-DistributionGroup -Name $MailEnabledSecurityGroup -Type Security -PrimarySmtpAddress $MailEnabledSMTPAddress"
					$TextboxResults.Text = New-DistributionGroup -Name $MailEnabledSecurityGroup -Type Security -PrimarySmtpAddress $MailEnabledSMTPAddress | Format-List | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to create another Mail Enabled Security Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$addAUserToAMailEnabledSecurityGroupToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$MailEnabledGroupAdd = Read-Host "Enter the name of the Group"
			$MailEnabledSecurityGroupText = "Select the Mail Enabled Security Group you want to add a user to"
			Show-SelectMailEnabledSecurityGroups_psf
			$MailEnabledGroupAdd = $SelectMailEnabledSecurityGroups_comboboxSelectMailEnabledSecurityGroups
			If (!$MailEnabledGroupAdd)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Mail Enabled Security Group was selected, please select a valid Mail Enabled Security Group", "Error")
			}
			Else
			{
				#$MailEnabledGroupAddUser = Read-Host "Enter the UPN of the user you wish to add to $MailEnabledGroupAdd"
				$SelectUsersFormText = "Select the user you want to add to $MailEnabledGroupAdd"
				Show-SelectCachedDisplayNames_psf
				$MailEnabledGroupAddUser = $SelectCachedDisplayNames_comboboxNames
				If (!$MailEnabledGroupAddUser)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a valid user to add to $MailEnabledGroupAdd", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Adding $MailEnabledGroupAddUser to the $MailEnabledGroupAdd Group..."
					$textboxDetails.Text = "Add-DistributionGroupMember -Identity $MailEnabledGroupAdd -Member $MailEnabledGroupAddUser"
					Add-DistributionGroupMember -Identity $MailEnabledGroupAdd -Member $MailEnabledGroupAddUser
					$TextboxResults.Text = "Getting members of $MailEnabledGroupAdd..."
					$TextboxResults.Text = Get-DistributionGroupMember $MailEnabledGroupAdd | Sort-Object DisplayName | Format-Table Displayname -AutoSize | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to add another User to a Mail Enabled Security Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$allowSecurityGroupToRecieveExternalMailToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$AllowExternalEmailSecurity = Read-Host "Enter the name of the Group you want to allow external email to"
			$MailEnabledSecurityGroupText = "Select the Mail Enabled Security Group you want to allow external email to"
			Show-SelectMailEnabledSecurityGroups_psf
			$AllowExternalEmailSecurity = $SelectMailEnabledSecurityGroups_comboboxSelectMailEnabledSecurityGroups
			If (!$AllowExternalEmailSecurity)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Mail Enabled Security Group was selected, please select a valid Mail Enabled Security Group", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Allowing extneral senders for the $AllowExternalEmailSecurity Group..."
				$textboxDetails.Text = "Set-DistributionGroup $AllowExternalEmailSecurity -RequireSenderAuthenticationEnabled `$False"
				Set-DistributionGroup $AllowExternalEmailSecurity -RequireSenderAuthenticationEnabled $False
				$TextboxResults.text = Get-DistributionGroup $AllowExternalEmailSecurity | Format-List Name, RequireSenderAuthenticationEnabled | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to Allow another Security Group to Recieve External Mail?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getDetailedInfoForMailEnabledSecurityGroupToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$DetailedInfoMailEnabledSecurityGroup = Read-Host "Enter the group name"
			$MailEnabledSecurityGroupText = "Select the Mail Enabled Security Group you want to get detailed information for"
			Show-SelectMailEnabledSecurityGroups_psf
			$DetailedInfoMailEnabledSecurityGroup = $SelectMailEnabledSecurityGroups_comboboxSelectMailEnabledSecurityGroups
			If (!$DetailedInfoMailEnabledSecurityGroup)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Mail Enabled Security Group was selected, please select a valid Mail Enabled Security Group to view detailed information about", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting detailed info about the $DetailedInfoMailEnabledSecurityGroup group..."
				$textboxDetails.Text = "Get-DistributionGroup $DetailedInfoMailEnabledSecurityGroup | Format-List"
				$TextboxResults.text = Get-DistributionGroup $DetailedInfoMailEnabledSecurityGroup | Format-List | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get detailed information for another Security Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$removeMailENabledSecurityGroupToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$DeleteMailEnabledSecurityGroup = Read-Host "Enter the name of the group you want deleted."
			$MailEnabledSecurityGroupText = "Select the Mail Enabled Security Group you want to remove"
			Show-SelectMailEnabledSecurityGroups_psf
			$DeleteMailEnabledSecurityGroup = $SelectMailEnabledSecurityGroups_comboboxSelectMailEnabledSecurityGroups
			If (!$DeleteMailEnabledSecurityGroup)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Mail Enabled Security Group was selected, please select a Mail Enabled Security Group that you want to delete", "Error")
			}
			Else
			{
				
				$OUTPUT = [System.Windows.Forms.MessageBox]::Show("Are you sure you want to delete $DeleteMailEnabledSecurityGroup ?", "Warning!", 4)
				
				If ($OUTPUT -eq "YES")
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Deleting the $DeleteMailEnabledSecurityGroup Group..."
					$textboxDetails.Text = "Remove-DistributionGroup $DeleteMailEnabledSecurityGroup"
					Remove-DistributionGroup $DeleteMailEnabledSecurityGroup
					$TextboxResults.Text = "Getting list of mail enabled security groups..."
					$TextboxResults.text = Get-DistributionGroup -ResultSize unlimited | Where-Object { $_.GroupType -like "Universal, SecurityEnabled" } | Sort-Object DisplayName | Format-Table DisplayName -AutoSize | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
				Else
				{
					[System.Windows.Forms.MessageBox]::Show("$DeleteMailEnabledSecurityGroup was not deleted", "Info")
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to remove another Mail Enabled Security Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$denySecurityGroupFromRecievingExternalEmailToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$DenyExternalEmailSecurity = Read-Host "Enter the name of the Group you want to deny external email to"
			$MailEnabledSecurityGroupText = "Select the Mail Enabled Security Group you want to deny external email to"
			Show-SelectMailEnabledSecurityGroups_psf
			$DenyExternalEmailSecurity = $SelectMailEnabledSecurityGroups_comboboxSelectMailEnabledSecurityGroups
			If (!$DenyExternalEmailSecurity)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Mail Enabled Security Group was selected, please select a valid Mail Enabled Security Group", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Denying extneral senders for the $DenyExternalEmailSecurity Group..."
				$textboxDetails.Text = "Set-DistributionGroup $DenyExternalEmailSecurity -RequireSenderAuthenticationEnabled `$True"
				Set-DistributionGroup $DenyExternalEmailSecurity -RequireSenderAuthenticationEnabled $True
				$TextboxResults.text = Get-DistributionGroup $DenyExternalEmailSecurity | Format-List Name, RequireSenderAuthenticationEnabled | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to Deny another Security Group from recieving External Email?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}



###RESOURCE MAILBOX###

	#Booking Options

$allowConflictMeetingsToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$ConflictMeetingAllow = Read-Host "Enter the Room Name of the Resource Calendar you want to allow conflicts"
			$RoomMailboxText = "Select a Room Mailbox to allow conflict meetings for"
			Show-SelectRoomMailbox_psf
			$ConflictMeetingAllow = $SelectRoomMailbox_comboboxSelectRoomMailbox
			If (!$ConflictMeetingAllow)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Room Mailbox was selected, please select a valid Room Mailbox", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Allowing conflict meetings $ConflictMeetingAllow..."
				$textboxDetails.Text = "Set-CalendarProcessing $ConflictMeetingAllow -AllowConflicts `$True"
				Set-CalendarProcessing $ConflictMeetingAllow -AllowConflicts $True
				$TextboxResults.Text = Get-CalendarProcessing -identity $ConflictMeetingAllow | Format-List Identity, AllowConflicts | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to allow conflict meetings on another Resource Mailbox?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$denyConflictMeetingsForAllResourceMailboxesToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Denying conflict meeting for all room calendars..."
		$textboxDetails.Text = "Get-MailBox -ResultSize unlimited | Where-Object { `$_.ResourceType -eq 'Room' } | Set-CalendarProcessing -AllowConflicts `$False"
		Get-MailBox -ResultSize unlimited | Where-Object { $_.ResourceType -eq "Room" } | Set-CalendarProcessing -AllowConflicts $False
		$TextboxResults.Text = Get-MailBox -ResultSize unlimited | Where-Object { $_.ResourceType -eq "Room" } | Get-CalendarProcessing | Sort-Object Identity | Format-Table Identity, AllowConflicts -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$allowConflicMeetingsForAllResourceMailboxesToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Allowing conflict meeting for all room calendars..."
		$textboxDetails.Text = "Get-MailBox -ResultSize unlimited | Where-Object { `$_.ResourceType -eq 'Room' } | Set-CalendarProcessing -AllowConflicts `$True"
		Get-MailBox -ResultSize unlimited | Where-Object { $_.ResourceType -eq "Room" } | Set-CalendarProcessing -AllowConflicts $True
		$TextboxResults.Text = Get-MailBox -ResultSize unlimited | Where-Object { $_.ResourceType -eq "Room" } | Get-CalendarProcessing | Sort-Object Identity | Format-Table Identity, AllowConflicts -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$disallowconflictmeetingsToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$ConflictMeetingDeny = Read-Host "Enter the Room Name of the Resource Calendar you want to disallow conflicts"
			$RoomMailboxText = "Select a Room Mailbox to disallow conflict meetings for"
			Show-SelectRoomMailbox_psf
			$ConflictMeetingDeny = $SelectRoomMailbox_comboboxSelectRoomMailbox
			If (!$ConflictMeetingDeny)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Room Mailbox was selected, please select a valid Room Mailbox", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Denying conflict meetings for $ConflictMeetingDeny..."
				$textboxDetails.Text = "Set-CalendarProcessing $ConflictMeetingDeny -AllowConflicts `$False"
				Set-CalendarProcessing $ConflictMeetingDeny -AllowConflicts $False
				$TextboxResults.Text = Get-CalendarProcessing -identity $ConflictMeetingDeny | Format-List Identity, AllowConflicts | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to deny conflict meetings on another Resource Mailbox?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$enableAutomaticBookingForAllResourceMailboxToolStripMenuItem1_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Enabling automatic booking on all room calendars..."
		$textboxDetails.Text = "Get-MailBox -ResultSize unlimited | Where-Object { `$_.ResourceType -eq 'Room' } | Set-CalendarProcessing -AutomateProcessing:AutoAccept"
		Get-MailBox -ResultSize unlimited | Where-Object { $_.ResourceType -eq "Room" } | Set-CalendarProcessing -AutomateProcessing:AutoAccept
		$TextboxResults.Text = Get-MailBox -ResultSize unlimited | Where-Object { $_.ResourceType -eq "Room" } | Get-CalendarProcessing | Sort-Object Identity | Format-Table Identity, AutomateProcessing -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$GetRoomMailBoxCalendarProcessingToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$RoomMailboxCalProcessing = Read-Host "Enter the Calendar Name you want to view calendar processing information for"
			$RoomMailboxText = "Select a Room Mailbox to view calendar processing for"
			Show-SelectRoomMailbox_psf
			$RoomMailboxCalProcessing = $SelectRoomMailbox_comboboxSelectRoomMailbox
			If (!$RoomMailboxCalProcessing)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Room Mailbox was selected, please select a valid Room Mailox", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting calendar processing information for $RoomMailboxCalProcessing..."
				$textboxDetails.Text = "Get-Mailbox $RoomMailboxCalProcessing | Get-CalendarProcessing | Format-List"
				$TextboxResults.Text = Get-Mailbox $RoomMailboxCalProcessing | Get-CalendarProcessing | Format-List | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get Calendar Processing for another Resource Mailbox?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

#Room Mailbox

$convertAMailboxToARoomMailboxToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$MailboxtoRoom = Read-Host "What user would you like to convert to a Room Mailbox? Please enter the full email address"
			$MailboxText = "Select a Mailbox to convert to a Room Mailbox"
			Show-SelectMailboxes_psf
			$MailboxtoRoom = $SelectMailboxes_comboboxSelectMailbox
			If (!$MailboxtoRoom)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Mailbox was selected, please select a valid Mailbox to convert to a Room Mailbox", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Converting $MailboxtoRoom to a Room Mailbox..."
				$textboxDetails.Text = "Set-Mailbox $MailboxtoRoom -Type Room"
				Set-Mailbox $MailboxtoRoom -Type Room
				$TextboxResults.Text = Get-MailBox $MailboxtoRoom | Format-List Name, ResourceType, PrimarySmtpAddress, EmailAddresses, UserPrincipalName, IsMailboxEnabled | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to convert another Mailbox to a Room Mailbox?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$createANewRoomMailboxToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$NewRoomMailbox = Read-Host "Enter the name of the new Room Mailbox"
			If (!$NewRoomMailbox)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No name was entered for the new Room Mailbox, please enter a valid name", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Creating the $NewRoomMailbox Room Mailbox..."
				$textboxDetails.Text = "New-Mailbox -Name $NewRoomMailbox -Room "
				$TextboxResults.Text = New-Mailbox -Name $NewRoomMailbox -Room | Format-List | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to create another Room Mailbox?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getListOfRoomMailboxesToolStripMenuItem_Click = {
	try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting list of all Room Mailboxes..."
		$textboxDetails.Text = "Get-MailBox -ResultSize unlimited | Where-Object { `$_.ResourceType -eq 'Room' } | Sort-Object Name | Format-Table -AutoSize"
		$TextboxResults.Text = Get-MailBox -ResultSize unlimited | Where-Object { $_.ResourceType -eq "Room" } | Sort-Object Name | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$removeARoomMailboxToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$RemoveRoomMailbox = Read-Host "Enter the name of the room mailbox"
			$RoomMailboxText = "Select a Room Mailbox to remove"
			Show-SelectRoomMailbox_psf
			$RemoveRoomMailbox = $SelectRoomMailbox_comboboxSelectRoomMailbox
			If (!$RemoveRoomMailbox)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Room Mailbox was selected, please select a valid Room Mailbox to remove", "Error")
			}
			Else
			{
				
				$OUTPUT = [System.Windows.Forms.MessageBox]::Show("Are you sure you want to remove $RemoveRoomMailbox ?", "Warning!", 4)
				
				If ($OUTPUT -eq "YES")
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Removing the $RemoveRoomMailbox Room Mailbox..."
					$textboxDetails.Text = "Remove-Mailbox $RemoveRoomMailbox"
					Remove-Mailbox $RemoveRoomMailbox
					$TextboxResults.Text = "Getting list of Room Mailboxes..."
					$TextboxResults.Text = Get-MailBox -ResultSize unlimited | Where-Object { $_.ResourceType -eq "Room" } | Sort-Object Name | Format-Table -AutoSize | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
				Else
				{
					[System.Windows.Forms.MessageBox]::Show("$RemoveRoomMailbox was not removed", "Info")
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to remove another Room Mailbox?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}




###JUNK EMAIL CONFIGURATION###

	#Blacklist

$blacklistDomainForAllToolStripMenuItem_Click = {
	Try
	{
		$BlacklistDomain = Read-Host "Enter the domain you want to blacklist for all users. EX: google.com"
		If (!$BlacklistDomain)
		{
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("No domain was entered, please enter a valid domain you want to blacklist for all users", "Error")
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Blacklisting $BlacklistDomain for all users..."
			$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Set-MailboxJunkEmailConfiguration -BlockedSendersAndDomains `@{ Add = $BlacklistDomain }"
			Get-Mailbox -ResultSize unlimited | Set-MailboxJunkEmailConfiguration -BlockedSendersAndDomains @{ Add = $BlacklistDomain }
			$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Get-MailboxJunkEmailConfiguration | Sort-Object Identity | Format-Table Identity, BlockedSendersAndDomains, Enabled -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$blacklistDomainForASingleUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$Blockeddomainuser = Read-Host "Enter the UPN of the user you want to modify junk email for"
			$SelectUsersFormText = "Select the User you want to modify the blacklist for"
			Show-SelectCachedDisplayNames_psf
			$Blockeddomainuser = $SelectCachedDisplayNames_comboboxNames
			If (!$Blockeddomainuser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid User", "Error")
			}
			Else
			{
				$BlockedDomain2 = Read-Host "Enter the Domain you want to blacklist"
				If (!$BlockedDomain2)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Domain was entered, please enter a valid Domain to blacklist", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Blacklisting $BlockedDomain2 for $Blockeddomainuser..."
					$textboxDetails.Text = "Set-MailboxJunkEmailConfiguration -Identity $Blockeddomainuser -BlockedSendersAndDomains `@{ Add = $BlockedDomain2 } "
					Set-MailboxJunkEmailConfiguration -Identity $Blockeddomainuser -BlockedSendersAndDomains @{ Add = $BlockedDomain2 }
					$TextboxResults.Text = Get-MailboxJunkEmailConfiguration -Identity $Blockeddomainuser | Format-List Identity, BlockedSendersAndDomains | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to modify the blacklist for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$blacklistASpecificEmailAddressForAllToolStripMenuItem_Click = {
	Try
	{
		$BlockSpecificEmailForAll = Read-Host "Enter the email address you want to blacklist for all"
		If (!$BlockSpecificEmailForAll)
		{
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("No e-mail address was entered, please enter a valid e-mail address you want to blacklist for all users", "Error")
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Blacklisting $BlockSpecificEmailForAll for all users..."
			$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Set-MailboxJunkEmailConfiguration -BlockedSendersAndDomains `@{ Add = $BlockSpecificEmailForAll }"
			Get-Mailbox -ResultSize unlimited | Set-MailboxJunkEmailConfiguration -BlockedSendersAndDomains @{ Add = $BlockSpecificEmailForAll }
			$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Get-MailboxJunkEmailConfiguration | Sort-Object Identity | Format-Table Identity, BlockedSendersAndDomains, Enabled -Autosize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$blacklistASpecificEmailAddressForASingleUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$ModifyblacklistforaUser = Read-Host "Enter the user you want to modify the blacklist for"
			$SelectUsersFormText = "Select the User you want to modify the blacklist for"
			Show-SelectCachedDisplayNames_psf
			$ModifyblacklistforaUser = $SelectCachedDisplayNames_comboboxNames
			If (!$ModifyblacklistforaUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid User", "Error")
			}
			Else
			{
				$DenySpecificEmailForOne = Read-Host "Enter the E-mail Address you want to blacklist for $ModifyblacklistforaUser"
				If (!$DenySpecificEmailForOne)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No E-mail Address was entered, please enter a valid E-mail Address to blacklist for $ModifyblacklistforaUser", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Blacklisting $DenySpecificEmailForOne for $ModifyblacklistforaUser..."
					$textboxDetails.Text = "Set-MailboxJunkEmailConfiguration -Identity $ModifyblacklistforaUser -BlockedSendersAndDomains `@{ Add = $DenySpecificEmailForOne }"
					Set-MailboxJunkEmailConfiguration -Identity $ModifyblacklistforaUser -BlockedSendersAndDomains @{ Add = $DenySpecificEmailForOne }
					$TextboxResults.Text = Get-MailboxJunkEmailConfiguration -Identity $ModifyblacklistforaUser | Format-List Identity, BlockedSendersAndDomains, Enabled | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to modify the blacklist for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

#Junk Email General Items

$checkSafeAndBlockedSendersForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$CheckSpamUser = Read-Host "Enter the UPN of the user you want to check blocked and allowed senders for"
			$SelectUsersFormText = "Select the User you want to check safe and blocked senders for"
			Show-SelectCachedDisplayNames_psf
			$GlobalUPN = $SelectCachedDisplayNames_comboboxNames
			If (!$GlobalUPN)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid User", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting safe and blocked senders for $GlobalUPN..."
				$textboxDetails.Text = "Get-MailboxJunkEmailConfiguration -Identity $GlobalUPN | Format-List Identity, TrustedListsOnly, ContactsTrusted, TrustedSendersAndDomains, BlockedSendersAndDomains, TrustedRecipientsAndDomains, IsValid "
				$TextboxResults.Text = Get-MailboxJunkEmailConfiguration -Identity $GlobalUPN | Format-List Identity, TrustedListsOnly, ContactsTrusted, TrustedSendersAndDomains, BlockedSendersAndDomains, TrustedRecipientsAndDomains, IsValid | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to check Safe and Blocked Senders for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$checkSafeAndBlockedSendersForAllToolStripMenuItem_Click = {
	try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting safe and blocked senders for all users..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Get-MailboxJunkEmailConfiguration | Sort-Object Identity | Format-List Identity, TrustedListsOnly, ContactsTrusted, TrustedSendersAndDomains, BlockedSendersAndDomains, TrustedRecipientsAndDomains, IsValid"
		$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Get-MailboxJunkEmailConfiguration | Sort-Object Identity | Format-List Identity, TrustedListsOnly, ContactsTrusted, TrustedSendersAndDomains, BlockedSendersAndDomains, TrustedRecipientsAndDomains, IsValid | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

	#Whitelist

$whitelistDomainForAllToolStripMenuItem_Click = {
	Try
	{
		$AllowedDomain = Read-Host "Enter the domain you want to whitelist for all users. EX: google.com"
		If (!$AllowedDomain)
		{
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("No domain was entered, please enter a valid domain to whitelist for all users", "Error")
		}
		
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Whitelisting $AllowedDomain for all..."
			$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Set-MailboxJunkEmailConfiguration -TrustedSendersAndDomains `@{ Add = $AllowedDomain }"
			Get-Mailbox -ResultSize unlimited | Set-MailboxJunkEmailConfiguration -TrustedSendersAndDomains @{ Add = $AllowedDomain }
			$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Get-MailboxJunkEmailConfiguration | Sort-Object Identity | Format-Table Identity, TrustedSendersAndDomains, TrustedRecipientsAndDomains -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$whitelistDomainForASingleUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$Alloweddomainuser = Read-Host "Enter the UPN of the user you want to modify junk email for"
			$SelectUsersFormText = "Select the User you want to modify the whitelist for"
			Show-SelectCachedDisplayNames_psf
			$Alloweddomainuser = $SelectCachedDisplayNames_comboboxNames
			If (!$Alloweddomainuser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid User", "Error")
			}
			Else
			{
				$AllowedDomain2 = Read-Host "Enter the Domain you want to whitelist for $Alloweddomainuser"
				If (!$AllowedDomain2)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Domain was entered, please enter a valid Domain you want to whitelist for $Alloweddomainuser", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Whitelisting $AllowedDomain2 for $Alloweddomainuser..."
					$textboxDetails.Text = "Set-MailboxJunkEmailConfiguration -Identity $Alloweddomainuser -TrustedSendersAndDomains `@{ Add = $AllowedDomain2 }"
					Set-MailboxJunkEmailConfiguration -Identity $Alloweddomainuser -TrustedSendersAndDomains @{ Add = $AllowedDomain2 }
					$TextboxResults.Text = Get-MailboxJunkEmailConfiguration -Identity $Alloweddomainuser | Format-List Identity, TrustedSendersAndDomains, TrustedRecipientsAndDomains | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to modify the Whitelist for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$whitelistASpecificEmailAddressForAllToolStripMenuItem_Click = {
	Try
	{
		$AllowSpecificEmailForAll = Read-Host "Enter the email address you want to whitelist for all"
		If (!$AllowSpecificEmailForAll)
		{
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("No e-mail address was entered, please enter a valid e-mail address you want to whitelist for all users", "Error")
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Whitelisting $AllowSpecificEmailForAll for all..."
			$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | | Where-Object { `$_.RecipientType -eq 'UserMailbox' } | Set-MailboxJunkEmailConfiguration -TrustedSendersAndDomains @{ Add = $AllowSpecificEmailForAll }"
			Get-Mailbox -ResultSize unlimited | Where-Object { $_.RecipientType -eq 'UserMailbox' } | Set-MailboxJunkEmailConfiguration -TrustedSendersAndDomains @{ Add = $AllowSpecificEmailForAll }
			$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Where-Object { $_.RecipientType -eq 'UserMailbox' } | Get-MailboxJunkEmailConfiguration | Sort-Object Identity | Format-Table Identity, TrustedSendersAndDomains, TrustedRecipientsAndDomains -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$whitelistASpecificEmailAddressForASingleUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$ModifyWhitelistforaUser = Read-Host "Enter the user you want to modify the whitelist for"
			$SelectUsersFormText = "Select the User you want to modify the Whitelist for"
			Show-SelectCachedDisplayNames_psf
			$ModifyWhitelistforaUser = $SelectCachedDisplayNames_comboboxNames
			If (!$ModifyWhitelistforaUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was slected, Please select a valid user you want to modify the Whitelist for", "Error")
			}
			Else
			{
				$AllowSpecificEmailForOne = Read-Host "Enter the E-mail Address you want to Whitelist for $ModifyWhitelistforaUser"
				If (!$AllowSpecificEmailForOne)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No E-mail Address was entered, please enter a valid E-mail address to add to the Whitelist for $ModifyWhitelistforaUser", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Whitelisting $AllowSpecificEmailForOne for $ModifyWhitelistforaUser..."
					$textboxDetails.Text = "Set-MailboxJunkEmailConfiguration -Identity $ModifyWhitelistforaUser -TrustedSendersAndDomains `@{ Add = $AllowSpecificEmailForOne }"
					Set-MailboxJunkEmailConfiguration -Identity $ModifyWhitelistforaUser -TrustedSendersAndDomains @{ Add = $AllowSpecificEmailForOne }
					$TextboxResults.Text = Get-MailboxJunkEmailConfiguration -Identity $ModifyWhitelistforaUser | Format-List Identity, TrustedSendersAndDomains, TrustedRecipientsAndDomains, Enabled | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to modify the Whitelist for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}


###CONTACTS FOLDER PERMISSIONS

$addContactsPermissionsForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$SelectUsersFormText = "Select the User you want to modify contacts permissions for"
			Show-SelectCachedDisplayNames_psf
			$GlobalUPNmodifycontacts = $SelectCachedDisplayNames_comboboxNames
			If (!$GlobalUPNmodifycontacts)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid User", "Error")
			}
			Else
			{
				$SelectUsersFormText = "Select the User you want to add to $GlobalUPNmodifycontacts contacts"
				Show-SelectCachedDisplayNames_psf
				$GlobalUPNadd2contacts = $SelectCachedDisplayNames_comboboxNames
				If (!$GlobalUPNadd2contacts)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid User", "Error")
				}
				Else
				{
					$LabelPermissionsText = "Select the level of access"
					Show-AccessPermissions_psf
					$GlobalContactsPermissions = $AccessPermissions_comboboxPermissions_SelectedItem
					If (!$GlobalContactsPermissions)
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						[System.Windows.Forms.MessageBox]::Show("No Access Level was selected, please select a valid Access Level", "Error")
					}
					Else
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Adding $GlobalUPNadd2contacts to $GlobalUPNmodifycontacts contacts folder with $GlobalContactsPermissions permissions..."
						$textboxDetails.Text = "Add-MailboxFolderPermission -Identity ${GlobalUPNmodifycontacts}:\contacts -user $GlobalUPNadd2contacts -AccessRights $GlobalContactsPermissions"
						Remove-MailboxFolderPermission -identity ${$GlobalUPNmodifycontacts}:\contacts -user $GlobalUPNadd2contacts -Confirm:$False
						Add-MailboxFolderPermission -Identity ${GlobalUPNmodifycontacts}:\contacts -user $GlobalUPNadd2contacts -AccessRights $GlobalContactsPermissions
						$TextboxResults.Text = "Getting contact folder permissions for $GlobalUPNmodifycontacts..."
						$TextboxResults.Text = Get-MailboxFolderPermission -Identity ${GlobalUPNmodifycontacts}:\contacts | Sort-Object User, AccessRights | Format-Table User, AccessRights, FolderName -AutoSize | Out-String -Width 2147483647
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to modify another Users Contacts Folder permissions?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getUsersContactsPermissionsToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$ContactsUserPermissions = Read-Host "What user would you like contacts folder permissions for?"
			$SelectUsersFormText = "Select the user you want to view contacts permissions for"
			Show-SelectUsersForm_psf
			$GlobalUPNremovecontacts = $SelectUsersForm_comboboxUsers
			If (!$GlobalUPNremovecontacts)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a valid users", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting $GlobalUPNremovecontacts contacts permissions..."
				$textboxDetails.Text = "Get-MailboxFolderPermission -Identity ${GlobalUPNremovecontacts}:\contacts | Sort-Object User, AccessRights | Format-Table User, AccessRights, FolderName "
				$TextboxResults.Text = Get-MailboxFolderPermission -Identity ${GlobalUPNremovecontacts}:\contacts | Sort-Object User, AccessRights | Format-Table User, AccessRights, FolderName -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get Contacts Folder permission for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$removeAUserFromSomeonesContactsPermissionsToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$SelectUsersFormText = "Select the user whose contacts you want to remove access to"
			Show-SelectCachedDisplayNames_psf
			$GlobalUPNremove = $SelectCachedDisplayNames_comboboxNames
			If (!$GlobalUPNremove)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid Users", "Error")
			}
			Else
			{
				$SelectUsersFormText = "Select the user you want to remove access to the contacts of $GlobalUPNremove"
				Show-SelectCachedDisplayNames_psf
				$GlobalUPN2remove = $SelectCachedDisplayNames_comboboxNames
				If (!$GlobalUPN2remove)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid user", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Removing $GlobalUPN2remove from $GlobalUPNremove contacts folder..."
					$textboxDetails.Text = "Remove-MailboxFolderPermission -Identity ${GlobalUPNremove}:\contacts -user $GlobalUPN2remove"
					Remove-MailboxFolderPermission -Identity ${GlobalUPNremove}:\contacts -user $GlobalUPN2remove
					$TextboxResults.Text = "Getting contact folder permissions for $GlobalUPNremove..."
					$TextboxResults.Text = Get-MailboxFolderPermission -Identity ${GlobalUPNremove}:\contacts | Sort-Object User, AccessRights | Format-Table User, AccessRights, FolderName -AutoSize | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to modify permissions for the Contacts Folder for another user?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$removeAUserFromAllContactsFoldersToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$RemoveUserFromAllContacts = Read-Host "Enter the UPN of the user you want to remove from all contacts folders"
			$SelectUsersFormText = "Select the user you want to remove from all users contacts folder"
			Show-SelectCachedDisplayNames_psf
			$GlobalUPNremovefromallcontacts = $SelectCachedDisplayNames_comboboxNames
			If (!$GlobalUPNremovefromallcontacts)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid user", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Removing $GlobalUPNremovefromallcontacts from all users contacts folders..."
				$textboxDetails.Text = "`$users = Get-Mailbox -ResultSize unlimited | Select-Object -ExpandProperty Alias
Foreach (`$user in `$users) { Remove-MailboxFolderPermission `${user}:\Contacts -user $GlobalUPNremovefromallcontacts -Confirm:`$false}﻿"
				$users = Get-Mailbox -ResultSize unlimited | Select-Object -ExpandProperty Alias
				Foreach ($user in $users) { Remove-MailboxFolderPermission ${user}:\Contacts -user $GlobalUPNremovefromallcontacts -Confirm:$false }﻿
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			#[System.Windows.Forms.MessageBox]::Show("$_", "Error")
			$TextboxResults.Text = ""
		}
		$TextboxResults.Text = ""
		
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to remove another user from everyones Contacts Folder?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$addASingleUserPermissionsOnAllContactsFoldersToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$SelectUsersFormText = "Select the user you want to add to everyones contacts folder"
			Show-SelectCachedDisplayNames_psf
			$GlobalUPNremoveaddtoallcontacts = $SelectCachedDisplayNames_comboboxNames
			If (!$GlobalUPNremoveaddtoallcontacts)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid User", "Error")
			}
			Else
			{
				$LabelPermissionsText = "Select the level of access"
				Show-AccessPermissions_psf
				$GlobalContactsPermissions2 = $AccessPermissions_comboboxPermissions_SelectedItem
				If (!$GlobalContactsPermissions2)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Access Level was selected, please select a valid Access Level", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Adding $GlobalUPNremoveaddtoallcontacts to everyones contacts folder with $GlobalContactsPermissions2 permissions..."
					$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Select-Object -ExpandProperty Alias
Foreach (`$user in `$users) { Add-MailboxFolderPermission `${user}:\Contacts -user $GlobalUPNremoveaddtoallcontacts -accessrights $GlobalContactsPermissions2 }﻿"
					$users = Get-Mailbox -ResultSize unlimited | Select-Object -ExpandProperty Alias
					Foreach ($user in $users) { Add-MailboxFolderPermission ${user}:\Contacts -user $GlobalUPNremoveaddtoallcontacts -accessrights $GlobalContactsPermissions2 }﻿
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to add another User to everyones Contacts Folder?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
}



###ADMIN###

	#OWA

$disableAccessToOWAForASingleUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$DisableOWAforUser = Read-Host "Enter the UPN of the user you want to disable OWA access for"
			$SelectUsersFormText = "Select the user you want to disable OWA access for"
			Show-SelectCachedDisplayNames_psf
			$DisableOWAforUser = $SelectCachedDisplayNames_comboboxNames
			If (!$DisableOWAforUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid user", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Disabling OWA access for $DisableOWAforUser..."
				$textboxDetails.Text = "Set-CASMailbox $DisableOWAforUser -OWAEnabled `$False"
				Set-CASMailbox $DisableOWAforUser -OWAEnabled $False
				$TextboxResults.Text = Get-CASMailbox $DisableOWAforUser | Format-List DisplayName, OWAEnabled | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to Disable OWA Access for another user?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$enableOWAAccessForASingleUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$EnableOWAforUser = Read-Host "Enter the UPN of the user you want to enable OWA access for"
			$SelectUsersFormText = "Select the user you want to enable OWA access for"
			Show-SelectCachedDisplayNames_psf
			$EnableOWAforUser = $SelectCachedDisplayNames_comboboxNames
			If (!$EnableOWAforUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid user", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Enabling OWA access for $EnableOWAforUser..."
				$textboxDetails.Text = "Set-CASMailbox $EnableOWAforUser -OWAEnabled `$True"
				Set-CASMailbox $EnableOWAforUser -OWAEnabled $True
				$TextboxResults.Text = Get-CASMailbox $EnableOWAforUser | Format-List DisplayName, OWAEnabled | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to Enable OWA Access for another user?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
}

$disableOWAAccessForAllToolStripMenuItem_Click = {
	Try
	{
		$OUTPUT = [System.Windows.Forms.MessageBox]::Show("Are you sure you want to disable OWA for all users?", "Warning!", 4)
		
		If ($OUTPUT -eq "YES")
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Disabling OWA access for all..."
			$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Set-CASMailbox -OWAEnabled `$False"
			Get-Mailbox -ResultSize unlimited | Set-CASMailbox -OWAEnabled $False
			$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Get-CASMailbox | Sort-Object DisplayName | Format-Table DisplayName, OWAEnabled -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			[System.Windows.Forms.MessageBox]::Show("ActiveSync has not been disabled for all users", "Info")
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
	
}

$enableOWAAccessForAllToolStripMenuItem_Click = {
	try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Enabling OWA access for all..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Set-CASMailbox -OWAEnabled `$True"
		Get-Mailbox -ResultSize unlimited | Set-CASMailbox -OWAEnabled $True
		$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Get-CASMailbox | Sort-Object DisplayName | Format-Table DisplayName, OWAEnabled -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getOWAAccessForAllToolStripMenuItem_Click = {
	try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting OWA info for all users..."
		$textboxDetails.Text = "Get-Mailbox | Get-CASMailbox | Sort-Object DisplayName | Format-Table DisplayName, OWAEnabled, OwaMailboxPolicy, OWAforDevicesEnabled -Autosize"
		$TextboxResults.Text = Get-Mailbox | Get-CASMailbox | Sort-Object DisplayName | Format-Table DisplayName, OWAEnabled, OwaMailboxPolicy, OWAforDevicesEnabled -Autosize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getOWAInfoForASingleUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$OWAAccessUser = Read-Host "Enter the UPN for the User you want to view OWA info for"
			$SelectUsersFormText = "Select the user you want to view OWA information for"
			Show-SelectCachedDisplayNames_psf
			$OWAAccessUser = $SelectCachedDisplayNames_comboboxNames
			If (!$OWAAccessUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid user", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting OWA Access for $OWAAccessUser..."
				$textboxDetails.Text = "Get-CASMailbox -identity $OWAAccessUser | Format-List DisplayName, OWAEnabled, OwaMailboxPolicy, OWAforDevicesEnabled"
				$TextboxResults.Text = Get-CASMailbox -identity $OWAAccessUser | Format-List DisplayName, OWAEnabled, OwaMailboxPolicy, OWAforDevicesEnabled | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get OWA information for another user?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

#ActiveSync

$getActiveSyncDevicesForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$ActiveSyncDevicesUser = Read-Host "Enter the UPN of the user you wish to see ActiveSync Devices for"
			$SelectUsersFormText = "Select the user you want to view ActiveSync devices for"
			Show-SelectCachedDisplayNames_psf
			$ActiveSyncDevicesUser = $SelectCachedDisplayNames_comboboxNames
			If (!$ActiveSyncDevicesUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid user", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting ActiveSync device info for $ActiveSyncDevicesUser..."
				$textboxDetails.Text = "Get-MobileDeviceStatistics -Mailbox $ActiveSyncDevicesUser | Format-List DeviceFriendlyName, DeviceModel, DeviceOS, DeviceMobileOperator, DeviceType, Status, FirstSyncTime, LastPolicyUpdateTime, LastSyncAttemptTime, LastSuccessSync, LastPingHeartbeat, DeviceAccessState, IsValid "
				$TextboxResults.Text = Get-MobileDeviceStatistics -Mailbox $ActiveSyncDevicesUser | Format-List DeviceFriendlyName, DeviceModel, DeviceOS, DeviceMobileOperator, DeviceType, Status, FirstSyncTime, LastPolicyUpdateTime, LastSyncAttemptTime, LastSuccessSync, LastPingHeartbeat, DeviceAccessState, IsValid | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get all ActiveSync devices for another user?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$disableActiveSyncForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$DisableActiveSyncForUser = Read-Host "Enter the UPN of the user you wish to disable ActiveSync for"
			$SelectUsersFormText = "Select the user you want to disable ActiveSync for"
			Show-SelectCachedDisplayNames_psf
			$DisableActiveSyncForUser = $SelectCachedDisplayNames_comboboxNames
			If (!$DisableActiveSyncForUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid user", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Disabling ActiveSync for $DisableActiveSyncForUser..."
				$textboxDetails.Text = "Set-CASMailbox $DisableActiveSyncForUser -ActiveSyncEnabled `$False"
				Set-CASMailbox $DisableActiveSyncForUser -ActiveSyncEnabled $False
				$TextboxResults.Text = Get-CASMailbox -Identity $DisableActiveSyncForUser | Format-List DisplayName, ActiveSyncEnabled | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to Disable ActiveSync for another user?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$enableActiveSyncForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$EnableActiveSyncForUser = Read-Host "Enter the UPN of the user you wish to enable ActiveSync for"
			$SelectUsersFormText = "Select the user you want to enable ActiveSync for"
			Show-SelectCachedDisplayNames_psf
			$EnableActiveSyncForUser = $SelectCachedDisplayNames_comboboxNames
			If (!$EnableActiveSyncForUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid user", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Enabling ActiveSync for $EnableActiveSyncForUser... "
				$textboxDetails.Text = "Set-CASMailbox $EnableActiveSyncForUser -ActiveSyncEnabled `$True"
				Set-CASMailbox $EnableActiveSyncForUser -ActiveSyncEnabled $True
				$TextboxResults.Text = Get-CASMailbox -Identity $EnableActiveSyncForUser | Format-List DisplayName, ActiveSyncEnabled | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to Enable ActiveSync for another user?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$viewActiveSyncInfoForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$ActiveSyncInfoForUser = Read-Host "Enter the UPN for the user you want to view ActiveSync info for"
			$SelectUsersFormText = "Select the user you want to view ActiveSync information for"
			Show-SelectCachedDisplayNames_psf
			$ActiveSyncInfoForUser = $SelectCachedDisplayNames_comboboxNames
			If (!$ActiveSyncInfoForUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid user", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting ActiveSync info for $ActiveSyncInfoForUser..."
				$textboxDetails.Text = "Get-CASMailbox -Identity $ActiveSyncInfoForUser | Format-List DisplayName, ActiveSyncEnabled, ActiveSyncAllowedDeviceIDs, ActiveSyncBlockedDeviceIDs, ActiveSyncMailboxPolicy, ActiveSyncMailboxPolicyIsDefaulted, ActiveSyncDebugLogging, HasActiveSyncDevicePartnership"
				$TextboxResults.Text = Get-CASMailbox -Identity $ActiveSyncInfoForUser | Format-List DisplayName, ActiveSyncEnabled, ActiveSyncAllowedDeviceIDs, ActiveSyncBlockedDeviceIDs, ActiveSyncMailboxPolicy, ActiveSyncMailboxPolicyIsDefaulted, ActiveSyncDebugLogging, HasActiveSyncDevicePartnership | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to view ActiveSync information for another user?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$disableActiveSyncForAllToolStripMenuItem_Click = {
	Try
	{
		$OUTPUT = [System.Windows.Forms.MessageBox]::Show("Are you sure you want to disable ActiveSync for all users?", "Warning!", 4)
		
		If ($OUTPUT -eq "YES")
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Disabling ActiveSync for all..."
			$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Set-CASMailbox -ActiveSyncEnabled `$False"
			Get-Mailbox -ResultSize unlimited | Set-CASMailbox -ActiveSyncEnabled $False
			$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Get-CASMailbox | Sort-Object DisplayName | Format-Table DisplayName, ActiveSyncEnabled -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			[System.Windows.Forms.MessageBox]::Show("ActiveSync has not been disabled for all users", "Info")
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getActiveSyncInfoForAllToolStripMenuItem_Click = {
	try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting ActiveSync info for all..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Get-CASMailbox | Sort-Object DisplayName | Format-Table DisplayName, ActiveSyncEnabled -AutoSize"
		$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Get-CASMailbox | Sort-Object DisplayName | Format-Table DisplayName, ActiveSyncEnabled -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		
	}
}

$enableActiveSyncForAllToolStripMenuItem_Click = {
	try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Enabling ActiveSync for all.."
		$textboxDetails.Text = "Get-Mailbox | Set-CASMailbox -ActiveSyncEnabled `$True"
		Get-Mailbox -ResultSize unlimited | Set-CASMailbox -ActiveSyncEnabled $True
		$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Get-CASMailbox | Sort-Object DisplayName | Format-Table DisplayName, ActiveSyncEnabled -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

	#PowerShell

$disableAccessToPowerShellForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$DisablePowerShellforUser = Read-Host "Enter the UPN of the user you want to disable PowerShell access for"
			$SelectUsersFormText = "Select the user you want to disable PowerShell access for"
			Show-SelectCachedDisplayNames_psf
			$DisablePowerShellforUser = $SelectCachedDisplayNames_comboboxNames
			If (!$DisablePowerShellforUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid user", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Disabling PowerShell access for $DisablePowerShellforUser..."
				$textboxDetails.Text = "Set-User $DisablePowerShellforUser -RemotePowerShellEnabled `$False"
				Set-User $DisablePowerShellforUser -RemotePowerShellEnabled $False
				$TextboxResults.Text = Get-User $DisablePowerShellforUser | Format-List DisplayName, RemotePowerShellEnabled | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to Disable PowerShell Access for another user?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$displayPowerShellRemotingStatusForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$PowerShellRemotingStatusUser = Read-Host "Enter the UPN of the user you want to view PowerShell Remoting for"
			$SelectUsersFormText = "Select the user you want to view PowerShell remoting for"
			Show-SelectCachedDisplayNames_psf
			$PowerShellRemotingStatusUser = $SelectCachedDisplayNames_comboboxNames
			If (!$PowerShellRemotingStatusUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid user", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting PowerShell info for $PowerShellRemotingStatusUser..."
				$textboxDetails.Text = "Get-User $PowerShellRemotingStatusUser | Format-List DisplayName, RemotePowerShellEnabled"
				$TextboxResults.Text = Get-User $PowerShellRemotingStatusUser | Format-List DisplayName, RemotePowerShellEnabled | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get PowerShell Access for another user?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$enableAccessToPowerShellForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$EnablePowerShellforUser = Read-Host "Enter the UPN of the user you want to enable PowerShell access for"
			$SelectUsersFormText = "Select the user you want to enable PowerShell access for"
			Show-SelectCachedDisplayNames_psf
			$EnablePowerShellforUser = $SelectCachedDisplayNames_comboboxNames
			If (!$EnablePowerShellforUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid user", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Enabling PowerShell access for $EnablePowerShellforUser..."
				$textboxDetails.Text = "Set-User $EnablePowerShellforUser -RemotePowerShellEnabled `$True"
				Set-User $EnablePowerShellforUser -RemotePowerShellEnabled $True
				$TextboxResults.Text = Get-User $EnablePowerShellforUser | Format-List DisplayName, RemotePowerShellEnabled | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to enable PowerShell Access for another user?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getPowerShellRemotingStatusForAllToolStripMenuItem_Click = {
	try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting PowerShell info for all users..."
		$textboxDetails.Text = "Get-User -ResultSize unlimited | Sort-Object DisplayName | Format-Table DisplayName, RemotePowerShellEnabled -AutoSize"
		$TextboxResults.Text = Get-User -ResultSize unlimited | Sort-Object DisplayName | Format-Table DisplayName, RemotePowerShellEnabled -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}


	#Message Trace

$messageTraceToolStripMenuItem_Click = {
	
}

$GetAllRecentToolStripMenuItem_Click = {
	try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting recent messages..."
		$textboxDetails.Text = "Get-MessageTrace | Format-List Received, SenderAddress, RecipientAddress, FromIP, ToIP, Subject, Size, Status"
		$TextboxResults.Text = Get-MessageTrace | Format-List Received, SenderAddress, RecipientAddress, FromIP, ToIP, Subject, Size, Status | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$fromACertainSenderToolStripMenuItem1_Click = {
	Do
	{
		Try
		{
			$MessageTraceSender = Read-Host "Enter the senders email address"
			If (!$MessageTraceSender)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No e-mail was entered, please enter a valid sender e-mail", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting messages from $MessageTraceSender..."
				$textboxDetails.Text = "Get-MessageTrace -SenderAddress $MessageTraceSender | Format-List Received, SenderAddress, RecipientAddress, FromIP, ToIP, Subject, Size, Status"
				$TextboxResults.Text = Get-MessageTrace -SenderAddress $MessageTraceSender | Format-List Received, SenderAddress, RecipientAddress, FromIP, ToIP, Subject, Size, Status | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to run another message trace?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$toACertainRecipientToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$MessageTraceRecipient = Read-Host "Enter the recipients email address"
			If (!$MessageTraceRecipient)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No recipient e-mail was entered, please enter a valid e-mail address", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting messages sent to $MessageTraceRecipient..."
				$textboxDetails.Text = "Get-MessageTrace -RecipientAddress $MessageTraceRecipient | Format-List Received, SenderAddress, RecipientAddress, FromIP, ToIP, Subject, Size, Status"
				$TextboxResults.Text = Get-MessageTrace -RecipientAddress $MessageTraceRecipient | Format-List Received, SenderAddress, RecipientAddress, FromIP, ToIP, Subject, Size, Status | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to run another message trace?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getFailedMessagesToolStripMenuItem_Click = {
	try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting failed messages..."
		$textboxDetails.Text = "Get-MessageTrace -Status 'Failed' | Format-Table Received, SenderAddress, RecipientAddress, FromIP, ToIP, Subject, Size, Status"
		$TextboxResults.Text = Get-MessageTrace -Status "Failed" | Format-List Received, SenderAddress, RecipientAddress, FromIP, ToIP, Subject, Size, Status | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$GetMessagesBetweenDatesToolStripMenuItem_Click = {
	Do
	{
		#$MessageTraceStartDate = Read-Host "Enter the start date. EX: 06/13/2015 or 09/01/2015 5:00 PM"
		$StartDateText = "Select the beginning date for the message trace"
		$StartDateFormText = "Start Date"
		Show-SelectDatePicker_psf
		$startdate = $SelectDatePicker_monthcalendar1
		$MessageTraceStartDate = "$startdate".trimend('00:00:00')
		
		#$MessageTraceEndDate = Read-Host "Enter the end date. EX: 06/15/2015 or 09/01/2015 5:00 PM"
		$StartDateText = "Select the ending date for the message trace"
		$StartDateFormText = "End Date"
		Show-SelectDatePicker_psf
		$enddate = $SelectDatePicker_monthcalendar1
		$MessageTraceEndDate = "$enddate".trimend('00:00:00')
		
		try
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting messages between $MessageTraceStartDate and $MessageTraceEndDate..."
			$textboxDetails.Text = "Get-MessageTrace -StartDate $MessageTraceStartDate -EndDate $MessageTraceEndDate | Format-List Received, SenderAddress, RecipientAddress, FromIP, ToIP, Subject, Size, Status"
			$TextboxResults.Text = Get-MessageTrace -StartDate $MessageTraceStartDate -EndDate $MessageTraceEndDate | Format-List Received, SenderAddress, RecipientAddress, FromIP, ToIP, Subject, Size, Status | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to run another message trace?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

#Company Info

$getTechnicalNotificationEmailToolStripMenuItem_Click = {
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting technical account info..."
			$textboxDetails.Text = "Get-MsolCompanyInformation | Format-List TechnicalNotificationEmails"
			$TextboxResults.Text = Get-MsolCompanyInformation | Format-List TechnicalNotificationEmails | Out-String
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting technical account info..."
			$textboxDetails.Text = "Get-MsolCompanyInformation -TenantId $TenantText | Format-List TechnicalNotificationEmails"
			$TextboxResults.Text = Get-MsolCompanyInformation -TenantId $PartnerComboBox.SelectedItem.TenantID | Format-List TechnicalNotificationEmails | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting technical account info..."
			$textboxDetails.Text = "Get-MsolCompanyInformation | Format-List TechnicalNotificationEmails"
			$TextboxResults.Text = Get-MsolCompanyInformation | Format-List TechnicalNotificationEmails | Out-String
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$lastDirSyncTimeToolStripMenuItem_Click = {
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting last DirSync time..."
			$textboxDetails.Text = "Get-MsolCompanyInformation | Format-List LastDirSyncTime"
			$TextboxResults.Text = Get-MsolCompanyInformation | Format-List LastDirSyncTime | Out-String
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting last DirSync time..."
			$textboxDetails.Text = "Get-MsolCompanyInformation -TenantId $TenantText | Format-List LastDirSyncTime"
			$TextboxResults.Text = Get-MsolCompanyInformation -TenantId $PartnerComboBox.SelectedItem.TenantID | Format-List LastDirSyncTime | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting last DirSync time..."
			$textboxDetails.Text = "Get-MsolCompanyInformation | Format-List LastDirSyncTime"
			$TextboxResults.Text = Get-MsolCompanyInformation | Format-List LastDirSyncTime | Out-String
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getLastPasswordSyncTimeToolStripMenuItem_Click = {
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting last password sync time..."
			$textboxDetails.Text = "Get-MsolCompanyInformation | Format-List LastPasswordSyncTime"
			$TextboxResults.Text = Get-MsolCompanyInformation | Format-List LastPasswordSyncTime | Out-String
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting last password sync time..."
			$textboxDetails.Text = "Get-MsolCompanyInformation -TenantId $TenantText  | Format-List LastPasswordSyncTime"
			$TextboxResults.Text = Get-MsolCompanyInformation -TenantId $PartnerComboBox.SelectedItem.TenantID | Format-List LastPasswordSyncTime | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting last password sync time..."
			$textboxDetails.Text = "Get-MsolCompanyInformation | Format-List LastPasswordSyncTime"
			$TextboxResults.Text = Get-MsolCompanyInformation | Format-List LastPasswordSyncTime | Out-String
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getAllCompanyInfoToolStripMenuItem_Click = {
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all company info..."
			$textboxDetails.Text = "Get-MsolCompanyInformation | Format-List "
			$TextboxResults.Text = Get-MsolCompanyInformation | Format-List | Out-String
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all company info..."
			$textboxDetails.Text = "Get-MsolCompanyInformation -TenantId $TenantText | Format-List"
			$TextboxResults.Text = Get-MsolCompanyInformation -TenantId $PartnerComboBox.SelectedItem.TenantID | Format-List | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all company info..."
			$textboxDetails.Text = "Get-MsolCompanyInformation | Format-List "
			$TextboxResults.Text = Get-MsolCompanyInformation | Format-List | Out-String
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

#Sharing Policy

$getSharingPolicyToolStripMenuItem_Click = {
	try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting all sharing policies..."
		$textboxDetails.Text = "Get-SharingPolicy | Format-List Name, Domains, Enabled, Default, Identity, WhenChanged, WhenCreated, IsValid, ObjectState"
		$TextboxResults.Text = Get-SharingPolicy | Format-List Name, Domains, Enabled, Default, Identity, WhenChanged, WhenCreated, IsValid, ObjectState | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$disableASharingPolicyToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$DisableSharingPolicy = Read-Host "Enter the name of the policy you want to disable"
			$SharingPolicyText = "Select the Sharing Policy you want to disable"
			Show-SelectSharingPolicy_psf
			$DisableSharingPolicy = $SelectSharingPolicy_comboboxSharingPolicies
			If (!$DisableSharingPolicy)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Sharing Policy was selected, please selected a valid Sharing Policy to disable", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Disabling the sharing policy $DisableSharingPolicy..."
				$textboxDetails.Text = "Set-SharingPolicy -Identity $DisableSharingPolicy -Enabled `$False"
				Set-SharingPolicy -Identity $DisableSharingPolicy -Enabled $False
				$TextboxResults.Text = Get-SharingPolicy -Identity $DisableSharingPolicy | Format-List Name, Enabled, ObjectState | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to disable another Sharing Policy?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$enableASharingPolicyToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$EnableSharingPolicy = Read-Host "Enter the name of the policy you want to Enable"
			$SharingPolicyText = "Select the Sharing Policy you want to enable"
			Show-SelectSharingPolicy_psf
			$EnableSharingPolicy = $SelectSharingPolicy_comboboxSharingPolicies
			If (!$EnableSharingPolicy)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Sharing Policy was selected, please select a valid Sharing Policy to enable", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Enabling the sharing policy $EnableSharingPolicy..."
				$textboxDetails.Text = "Set-SharingPolicy -Identity $EnableSharingPolicy -Enabled `$True"
				Set-SharingPolicy -Identity $EnableSharingPolicy -Enabled $True
				$TextboxResults.Text = Get-SharingPolicy -Identity $EnableSharingPolicy | Format-List Name, Enabled, ObjectState | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to enable another Sharing Policy?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$createANewSharingPolicyToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$TextboxResults.Text = "You may need to enable organization customization if customization status is dehydrated."
			$TextboxResults.Text = Get-OrganizationConfig | Format-List  Identity, IsDehydrated | Out-String
			$NewSharingPolicyName = Read-Host "Enter the name for the Sharing Policy"
			If (!$NewSharingPolicyName)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No name was entered, please enter a valid name for the new Sharing Policy", "Error")
			}
			Else
			{
				$TextboxResults.Text = "The following Sharing Policy Action Values can be used:
CalendarSharingFreeBusySimple: Share free/busy hours only
CalendarSharingFreeBusyDetail: Share free/busy hours, subject, and location
CalendarSharingFreeBusyReviewer: Share free/busy hours, subject, location, and the body of the message or calendar item
ContactsSharing: Share contacts only

EXAMPLE: mail.contoso.com: CalendarSharingFreeBusyDetail, ContactsSharing "
				$SharingPolicy = Read-Host "Enter the domain this policy will apply to and the value"
				If (!$SharingPolicy)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Sharing Policy Action Value was entered, please enter a valid Sharing Policy Action Value", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Creating a new sharing policy $NewSharingPolicyName..."
					$textboxDetails.Text = "New-SharingPolicy -Name $NewSharingPolicyName -Domains $SharingPolicy"
					New-SharingPolicy -Name $NewSharingPolicyName -Domains $SharingPolicy
					$TextboxResults.Text = Get-SharingPolicy -Identity $NewSharingPolicyName | Format-List Name, Domains, Enabled, Default, Identity, WhenChanged, WhenCreated, IsValid, ObjectState | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to create another Sharing Policy?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getInfoForASingleSharingPolicyToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$DetailedInfoForSharingPolicy = Read-Host "Enter the name of the policy you want info for"
			$SharingPolicyText = "Select the Sharing Policy you want to view detailed information for"
			Show-SelectSharingPolicy_psf
			$DetailedInfoForSharingPolicy = $SelectSharingPolicy_comboboxSharingPolicies
			If (!$DetailedInfoForSharingPolicy)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Sharing Policy was selected, please select a valid Sharing Policy to get detailed information on", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting info for the sharing policy $DetailedInfoForSharingPolicy..."
				$textboxDetails.Text = "Get-SharingPolicy -Identity $DetailedInfoForSharingPolicy | Format-List Name, Domains, Enabled, Default, Identity, WhenChanged, WhenCreated, IsValid, ObjectState"
				$TextboxResults.Text = Get-SharingPolicy -Identity $DetailedInfoForSharingPolicy | Format-List Name, Domains, Enabled, Default, Identity, WhenChanged, WhenCreated, IsValid, ObjectState | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get information about another Sharing Policy?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

#Configuration 

$enableCustomizationToolStripMenuItem_Click = {
	try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Enabling customization..."
		$textboxDetails.Text = "Enable-OrganizationCustomization"
		Enable-OrganizationCustomization
		$TextboxResults.Text = "Success"
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getCustomizationStatusToolStripMenuItem_Click = {
	try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting customization status..."
		$textboxDetails.Text = "Get-OrganizationConfig | Format-Table  Identity, IsDehydrated -AutoSize "
		$TextboxResults.Text = Get-OrganizationConfig | Format-Table  Identity, IsDehydrated -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getOrganizationCustomizationToolStripMenuItem_Click = {
	try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting customization information..."
		$textboxDetails.Text = "Get-OrganizationConfig | Format-List"
		$TextboxResults.Text = Get-OrganizationConfig | Format-List | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getSharepointSiteToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting sharepoint URL..."
		$textboxDetails.Text = "Get-OrganizationConfig | Format-List SharePointUrl"
		$TextboxResults.Text = Get-OrganizationConfig | Format-List SharePointUrl | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}



###REPORTING###

$getAllMailboxSizesToolStripMenuItem_Click = {
	try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Generating mailbox sizes report..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize Unlimited | Get-MailboxStatistics | Select-Object DisplayName,`@{name = 'TotalItemSize (MB)'; expression = {[math]::Round( `
(`$_.TotalItemSize.ToString().Split('(')[1].Split(' ')[0].Replace(', ', '')/1MB), 2)}}, `
ItemCount | Sort-Object 'TotalItemSize (MB)' -Descending | Format-Table -AutoSize"
		$TextboxResults.Text =
		Get-Mailbox -ResultSize Unlimited | Get-MailboxStatistics | Select-Object DisplayName, `
		
		@{
			name = "TotalItemSize (MB)"; expression = {
				[math]::Round( `
					($_.TotalItemSize.ToString().Split("(")[1].Split(" ")[0].Replace(",", "")/1MB), 2)
			}
		}, `
		
		ItemCount | Sort-Object "TotalItemSize (MB)" -Descending | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getLicenceReconciliationReportToolStripMenuItem_Click = {
	$textboxDetails.Text = ""
	$TextboxResults.Text = ""
	Try
	{
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$savedialog = New-Object windows.forms.savefiledialog
			$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
			$savedialog.title = "Export to File"
			$savedialog.filter = ".csv|*.csv"
			$savedialog.ShowHelp = $True
			$result = $savedialog.ShowDialog(); $result
			if ($result -eq "OK")
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$LogFile = $savedialog.filename
				$TextboxResults.Text = "Getting License Report..."
				
				# Define Hashtables for lookup 
				$Sku = @{
					"DESKLESSPACK" = "Office 365 (Plan K1)"
					"DESKLESSWOFFPACK" = "Office 365 (Plan K2)"
					"LITEPACK" = "Office 365 (Plan P1)"
					"EXCHANGESTANDARD" = "Office 365 Exchange Online Only"
					"STANDARDPACK" = "Office 365 (Plan E1)"
					"STANDARDWOFFPACK" = "Office 365 (Plan E2)"
					"ENTERPRISEPACK" = "Office 365 (Plan E3)"
					"ENTERPRISEPACKLRG" = "Office 365 (Plan E3)"
					"ENTERPRISEWITHSCAL" = "Office 365 (Plan E4)"
					"STANDARDPACK_STUDENT" = "Office 365 (Plan A1) for Students"
					"STANDARDWOFFPACKPACK_STUDENT" = "Office 365 (Plan A2) for Students"
					"ENTERPRISEPACK_STUDENT" = "Office 365 (Plan A3) for Students"
					"ENTERPRISEWITHSCAL_STUDENT" = "Office 365 (Plan A4) for Students"
					"STANDARDPACK_FACULTY" = "Office 365 (Plan A1) for Faculty"
					"STANDARDWOFFPACKPACK_FACULTY" = "Office 365 (Plan A2) for Faculty"
					"ENTERPRISEPACK_FACULTY" = "Office 365 (Plan A3) for Faculty"
					"ENTERPRISEWITHSCAL_FACULTY" = "Office 365 (Plan A4) for Faculty"
					"ENTERPRISEPACK_B_PILOT" = "Office 365 (Enterprise Preview)"
					"STANDARD_B_PILOT" = "Office 365 (Small Business Preview)"
				}
				
				# Get a list of all licences that exist within the tenant 
				$licensetype = Get-MsolAccountSku | Where-Object { $_.ConsumedUnits -ge 1 }
				
				# Loop through all licence types found in the tenant 
				foreach ($license in $licensetype)
				{
					# Build and write the Header for the CSV file 
					$headerstring = "DisplayName,UserPrincipalName,AccountSku"
					
					foreach ($row in $($license.ServiceStatus))
					{
						
						# Build header string 
						switch -wildcard ($($row.ServicePlan.servicename))
						{
							"EXC*" { $thisLicence = "Exchange Online" }
							"MCO*" { $thisLicence = "Lync Online" }
							"LYN*" { $thisLicence = "Lync Online" }
							"OFF*" { $thisLicence = "Office Profesional Plus" }
							"SHA*" { $thisLicence = "Sharepoint Online" }
							"*WAC*" { $thisLicence = "Office Web Apps" }
							"WAC*" { $thisLicence = "Office Web Apps" }
							default { $thisLicence = $row.ServicePlan.servicename }
						}
						
						$headerstring = ($headerstring + "," + $thisLicence)
					}
					
					Out-File -FilePath $LogFile -InputObject $headerstring -Encoding UTF8 -append
					
					# Gather users for this particular AccountSku 
					$users = Get-MsolUser -all | Where-Object { $_.isLicensed -eq "True" -and $_.licenses[0].accountskuid.tostring() -eq $license.accountskuid }
					
					# Loop through all users and write them to the CSV file 
					foreach ($user in $users)
					{
						
						#write-host ("Processing " + $user.displayname)
						
						$datastring = ($user.displayname + "," + $user.userprincipalname + "," + $Sku.Item($user.licenses[0].AccountSku.SkuPartNumber))
						
						foreach ($row in $($user.licenses[0].servicestatus))
						{
							
							# Build data string 
							$datastring = ($datastring + "," + $($row.provisioningstatus))
						}
						
						Out-File -FilePath $LogFile -InputObject $datastring -Encoding UTF8 -append
						
					}
				}
				$FormO365AdministrationCenter.Cursor = 'Default'
				
			}
			$TextboxResults.Text = ""
		}
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$savedialog = New-Object windows.forms.savefiledialog
			$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
			$savedialog.title = "Export to File"
			$savedialog.filter = ".csv|*.csv"
			$savedialog.ShowHelp = $True
			$result = $savedialog.ShowDialog(); $result
			if ($result -eq "OK")
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$LogFile = $savedialog.filename
				$TextboxResults.Text = "Getting License Report..."
				
				# Define Hashtables for lookup 
				$Sku = @{
					"DESKLESSPACK" = "Office 365 (Plan K1)"
					"DESKLESSWOFFPACK" = "Office 365 (Plan K2)"
					"LITEPACK" = "Office 365 (Plan P1)"
					"EXCHANGESTANDARD" = "Office 365 Exchange Online Only"
					"STANDARDPACK" = "Office 365 (Plan E1)"
					"STANDARDWOFFPACK" = "Office 365 (Plan E2)"
					"ENTERPRISEPACK" = "Office 365 (Plan E3)"
					"ENTERPRISEPACKLRG" = "Office 365 (Plan E3)"
					"ENTERPRISEWITHSCAL" = "Office 365 (Plan E4)"
					"STANDARDPACK_STUDENT" = "Office 365 (Plan A1) for Students"
					"STANDARDWOFFPACKPACK_STUDENT" = "Office 365 (Plan A2) for Students"
					"ENTERPRISEPACK_STUDENT" = "Office 365 (Plan A3) for Students"
					"ENTERPRISEWITHSCAL_STUDENT" = "Office 365 (Plan A4) for Students"
					"STANDARDPACK_FACULTY" = "Office 365 (Plan A1) for Faculty"
					"STANDARDWOFFPACKPACK_FACULTY" = "Office 365 (Plan A2) for Faculty"
					"ENTERPRISEPACK_FACULTY" = "Office 365 (Plan A3) for Faculty"
					"ENTERPRISEWITHSCAL_FACULTY" = "Office 365 (Plan A4) for Faculty"
					"ENTERPRISEPACK_B_PILOT" = "Office 365 (Enterprise Preview)"
					"STANDARD_B_PILOT" = "Office 365 (Small Business Preview)"
				}
				
				# Get a list of all licences that exist within the tenant 
				$licensetype = Get-MsolAccountSku -TenantId $PartnerComboBox.SelectedItem.TenantID | Where-Object { $_.ConsumedUnits -ge 1 }
				
				# Loop through all licence types found in the tenant 
				foreach ($license in $licensetype)
				{
					# Build and write the Header for the CSV file 
					$headerstring = "DisplayName,UserPrincipalName,AccountSku"
					
					foreach ($row in $($license.ServiceStatus))
					{
						
						# Build header string 
						switch -wildcard ($($row.ServicePlan.servicename))
						{
							"EXC*" { $thisLicence = "Exchange Online" }
							"MCO*" { $thisLicence = "Lync Online" }
							"LYN*" { $thisLicence = "Lync Online" }
							"OFF*" { $thisLicence = "Office Profesional Plus" }
							"SHA*" { $thisLicence = "Sharepoint Online" }
							"*WAC*" { $thisLicence = "Office Web Apps" }
							"WAC*" { $thisLicence = "Office Web Apps" }
							default { $thisLicence = $row.ServicePlan.servicename }
						}
						
						$headerstring = ($headerstring + "," + $thisLicence)
					}
					
					Out-File -FilePath $LogFile -InputObject $headerstring -Encoding UTF8 -append
					
					# Gather users for this particular AccountSku 
					$users = Get-MsolUser -all -TenantId $PartnerComboBox.SelectedItem.TenantID | Where-Object { $_.isLicensed -eq "True" -and $_.licenses[0].accountskuid.tostring() -eq $license.accountskuid }
					
					# Loop through all users and write them to the CSV file 
					foreach ($user in $users)
					{
						
						#write-host ("Processing " + $user.displayname)
						
						$datastring = ($user.displayname + "," + $user.userprincipalname + "," + $Sku.Item($user.licenses[0].AccountSku.SkuPartNumber))
						
						foreach ($row in $($user.licenses[0].servicestatus))
						{
							
							# Build data string 
							$datastring = ($datastring + "," + $($row.provisioningstatus))
						}
						
						Out-File -FilePath $LogFile -InputObject $datastring -Encoding UTF8 -append
						
					}
				}
				$FormO365AdministrationCenter.Cursor = 'Default'
				
			}
			$TextboxResults.Text = ""
		}
		Else
		{
			$savedialog = New-Object windows.forms.savefiledialog
			$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
			$savedialog.title = "Export to File"
			$savedialog.filter = ".csv|*.csv"
			$savedialog.ShowHelp = $True
			$result = $savedialog.ShowDialog(); $result
			if ($result -eq "OK")
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$LogFile = $savedialog.filename
				$TextboxResults.Text = "Getting License Report..."
				
				# Define Hashtables for lookup 
				$Sku = @{
					"DESKLESSPACK" = "Office 365 (Plan K1)"
					"DESKLESSWOFFPACK" = "Office 365 (Plan K2)"
					"LITEPACK" = "Office 365 (Plan P1)"
					"EXCHANGESTANDARD" = "Office 365 Exchange Online Only"
					"STANDARDPACK" = "Office 365 (Plan E1)"
					"STANDARDWOFFPACK" = "Office 365 (Plan E2)"
					"ENTERPRISEPACK" = "Office 365 (Plan E3)"
					"ENTERPRISEPACKLRG" = "Office 365 (Plan E3)"
					"ENTERPRISEWITHSCAL" = "Office 365 (Plan E4)"
					"STANDARDPACK_STUDENT" = "Office 365 (Plan A1) for Students"
					"STANDARDWOFFPACKPACK_STUDENT" = "Office 365 (Plan A2) for Students"
					"ENTERPRISEPACK_STUDENT" = "Office 365 (Plan A3) for Students"
					"ENTERPRISEWITHSCAL_STUDENT" = "Office 365 (Plan A4) for Students"
					"STANDARDPACK_FACULTY" = "Office 365 (Plan A1) for Faculty"
					"STANDARDWOFFPACKPACK_FACULTY" = "Office 365 (Plan A2) for Faculty"
					"ENTERPRISEPACK_FACULTY" = "Office 365 (Plan A3) for Faculty"
					"ENTERPRISEWITHSCAL_FACULTY" = "Office 365 (Plan A4) for Faculty"
					"ENTERPRISEPACK_B_PILOT" = "Office 365 (Enterprise Preview)"
					"STANDARD_B_PILOT" = "Office 365 (Small Business Preview)"
				}
				
				# Get a list of all licences that exist within the tenant 
				$licensetype = Get-MsolAccountSku | Where-Object { $_.ConsumedUnits -ge 1 }
				
				# Loop through all licence types found in the tenant 
				foreach ($license in $licensetype)
				{
					# Build and write the Header for the CSV file 
					$headerstring = "DisplayName,UserPrincipalName,AccountSku"
					
					foreach ($row in $($license.ServiceStatus))
					{
						
						# Build header string 
						switch -wildcard ($($row.ServicePlan.servicename))
						{
							"EXC*" { $thisLicence = "Exchange Online" }
							"MCO*" { $thisLicence = "Lync Online" }
							"LYN*" { $thisLicence = "Lync Online" }
							"OFF*" { $thisLicence = "Office Profesional Plus" }
							"SHA*" { $thisLicence = "Sharepoint Online" }
							"*WAC*" { $thisLicence = "Office Web Apps" }
							"WAC*" { $thisLicence = "Office Web Apps" }
							default { $thisLicence = $row.ServicePlan.servicename }
						}
						
						$headerstring = ($headerstring + "," + $thisLicence)
					}
					
					Out-File -FilePath $LogFile -InputObject $headerstring -Encoding UTF8 -append
					
					# Gather users for this particular AccountSku 
					$users = Get-MsolUser -all | Where-Object { $_.isLicensed -eq "True" -and $_.licenses[0].accountskuid.tostring() -eq $license.accountskuid }
					
					# Loop through all users and write them to the CSV file 
					foreach ($user in $users)
					{
						
						#write-host ("Processing " + $user.displayname)
						
						$datastring = ($user.displayname + "," + $user.userprincipalname + "," + $Sku.Item($user.licenses[0].AccountSku.SkuPartNumber))
						
						foreach ($row in $($user.licenses[0].servicestatus))
						{
							
							# Build data string 
							$datastring = ($datastring + "," + $($row.provisioningstatus))
						}
						
						Out-File -FilePath $LogFile -InputObject $datastring -Encoding UTF8 -append
						
					}
				}
				$FormO365AdministrationCenter.Cursor = 'Default'
				
			}
			$TextboxResults.Text = ""
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getAllGroupsAndAllMembersToCSVToolStripMenuItem_Click = {
	Try
	{
		$savedialog = New-Object windows.forms.savefiledialog
		$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
		$savedialog.title = "Export to File"
		$savedialog.filter = ".csv|*.csv"
		$savedialog.ShowHelp = $True
		$result = $savedialog.ShowDialog(); $result
		if ($result -eq "OK")
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			#Constant Variables 
			$OutputFile = $savedialog.filename
			$TextboxResults.Text = "Getting all groups and members..."
			$arrDLMembers = @{ }
			
			#Prepare Output file with headers 
			Out-File -FilePath $OutputFile -InputObject "Distribution Group DisplayName,Distribution Group Email,Member DisplayName, Member Email, Member Type" -Encoding UTF8
			
			#Get all Distribution Groups from Office 365 
			$objDistributionGroups = Get-DistributionGroup -ResultSize Unlimited
			
			#Iterate through all groups, one at a time     
			Foreach ($objDistributionGroup in $objDistributionGroups)
			{
				
				#write-host "Processing $($objDistributionGroup.DisplayName)..."
				
				#Get members of this group 
				$objDGMembers = Get-DistributionGroupMember -Identity $($objDistributionGroup.PrimarySmtpAddress)
				
				#write-host "Found $($objDGMembers.Count) members..."
				
				#Iterate through each member 
				Foreach ($objMember in $objDGMembers)
				{
					Out-File -FilePath $OutputFile -InputObject "$($objDistributionGroup.DisplayName),$($objDistributionGroup.PrimarySMTPAddress),$($objMember.DisplayName),$($objMember.PrimarySMTPAddress),$($objMember.RecipientType)" -Encoding UTF8 -append
					#write-host "`t$($objDistributionGroup.DisplayName),$($objDistributionGroup.PrimarySMTPAddress),$($objMember.DisplayName),$($objMember.PrimarySMTPAddress),$($objMember.RecipientType)"
				}
			}
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		$TextboxResults.Text = ""
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getAllUsersLastLogonTimestampToCSVToolStripMenuItem_Click = {
	$savedialog = New-Object windows.forms.savefiledialog
	$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
	$savedialog.title = "Export to CSV"
	$savedialog.filter = ".csv|*.csv"
	$savedialog.ShowHelp = $True
	$result = $savedialog.ShowDialog(); $result
	if ($result -eq "OK")
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting all users last logon timestamp..."
		$textboxDetails.Text = "(Get-Mailbox) | ForEach-Object { Get-MailboxStatistics $_.Identity | Select-Object DisplayName, LastLogonTime } "
		(Get-Mailbox) | ForEach-Object { Get-MailboxStatistics $_.Identity | Select-Object DisplayName, LastLogonTime } | Export-CSV $savedialog.filename -Encoding utf8 -NoTypeInformation -Delimiter ","
		$TextboxResults.Text = ""
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	else
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getAllMailboxPermissionsToCSVToolStripMenuItem_Click = {
	Try
	{
		$savedialog = New-Object windows.forms.savefiledialog
		$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
		$savedialog.title = "Export to File"
		$savedialog.filter = ".csv|*.csv"
		$savedialog.ShowHelp = $True
		$result = $savedialog.ShowDialog(); $result
		if ($result -eq "OK")
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$OutputFile = $savedialog.filename
			$TextboxResults.Text = "Getting all mailbox permissions..."
			
			#$OutputFile = Read-Host "Enter the location and name for the CSV. EX: C:\Scripts\UserPerms.csv"
			$textboxDetails.Text = ""
			
			#Main
			Function Main
			{
				
				
				
				#Prepare Output file with headers
				Out-File -FilePath $OutputFile -InputObject "UserPrincipalName,ObjectWithAccess,ObjectType,AccessType,Inherited,AllowOrDeny" -Encoding UTF8
				
				
				$objUsers = get-mailbox -ResultSize Unlimited | Select-Object UserPrincipalName
				
				
				#Iterate through all users	
				Foreach ($objUser in $objUsers)
				{
					#Connect to the users mailbox
					$objUserMailbox = get-mailboxpermission -Identity $($objUser.UserPrincipalName) | Select-Object User, AccessRights, Deny, IsInherited
					
					#Prepare UserPrincipalName variable
					$strUserPrincipalName = $objUser.UserPrincipalName
					
					#Loop through each permission
					foreach ($objPermission in $objUserMailbox)
					{
						#Get the remaining permission details (We're only interested in real users, not built in system accounts/groups)
						if (($objPermission.user.tolower().contains("\domain admin")) -or ($objPermission.user.tolower().contains("\enterprise admin")) -or ($objPermission.user.tolower().contains("\organization management")) -or ($objPermission.user.tolower().contains("\administrator")) -or ($objPermission.user.tolower().contains("\exchange servers")) -or ($objPermission.user.tolower().contains("\public folder management")) -or ($objPermission.user.tolower().contains("nt authority")) -or ($objPermission.user.tolower().contains("\exchange trusted subsystem")) -or ($objPermission.user.tolower().contains("\discovery management")) -or ($objPermission.user.tolower().contains("s-1-5-21")))
						{ }
						Else
						{
							$objRecipient = (get-recipient $($objPermission.user) -EA SilentlyContinue)
							
							if ($objRecipient)
							{
								$strUserWithAccess = $($objRecipient.DisplayName) + " (" + $($objRecipient.PrimarySMTPAddress) + ")"
								$strObjectType = $objRecipient.RecipientType
							}
							else
							{
								$strUserWithAccess = $($objPermission.user)
								$strObjectType = "Other"
							}
							
							$strAccessType = $($objPermission.AccessRights) -replace ",", ";"
							
							if ($objPermission.Deny -eq $true)
							{
								$strAllowOrDeny = "Deny"
							}
							else
							{
								$strAllowOrDeny = "Allow"
							}
							
							$strInherited = $objPermission.IsInherited
							
							#Prepare the user details in CSV format for writing to file
							$strUserDetails = "$strUserPrincipalName,$strUserWithAccess,$strObjectType,$strAccessType,$strInherited,$strAllowOrDeny"
							
							$TextboxResults.Text = $strUserDetails
							
							#Append the data to file
							Out-File -FilePath $OutputFile -InputObject $strUserDetails -Encoding UTF8 -append
						}
					}
				}
				
				
			}
			
			# Start script
			. Main
			$TextboxResults.Text = ""
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getAllDIsabledUsersThatAreStillMembersOfDistroGroupsToolStripMenuItem_Click = {
	Try
	{
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
		$savedialog = New-Object windows.forms.savefiledialog
		$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
		$savedialog.title = "Export to File"
		$savedialog.filter = ".csv|*.csv"
		$savedialog.ShowHelp = $True
		$result = $savedialog.ShowDialog(); $result
		$TextboxResults.Text = "Getting all users that are disabled and still members of distro groups..."
			if ($result -eq "OK")
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				
				#Get All Groups 
				$Groups = Get-MsolGroup -All
				
				#Build Hash of all disabled users 
				$MSOLDisabledUsers = Get-MsolUser -All -EnabledFilter DisabledOnly | Select-Object ObjectId
				$AllDisabledUsers = @()
				$MSOLDisabledUsers | ForEach-Object { $AllDisabledUsers += $_.ObjectID.Guid }
				
				$DisabledUserMembers = @()
				
				foreach ($Group in $Groups)
				{
					#$TextboxResults.Text = "Processing $($Group.DisplayName)..."
					#Get All Members and Loop through them 
					$GroupMembers = Get-MsolGroupMember -All -GroupObjectID $Group.ObjectID
					foreach ($Member in $GroupMembers)
					{
						#Is this member in our disabled list? 
						if ($AllDisabledUsers -contains $Member.ObjectId)
						{
							#$TextboxResults.Text = "`tFound $($Member.DisplayName)"
							#Add them to the list 
							$DisabledUserMembers += (
								$Object = [pscustomobject][ordered] @{
									GroupName = $Group.DisplayName
									GroupEmail = $Group.EmailAddress
									UserName = $Member.DisplayName
									EmailAddress = $Member.EmailAddress
								}
							)
						}
					}
				}
				$DisabledUserMembers | Export-CSV -NoTypeInformation $savedialog.filename
				$TextboxResults.Text = ""
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
			{
				$savedialog = New-Object windows.forms.savefiledialog
				$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
				$savedialog.title = "Export to File"
				$savedialog.filter = ".csv|*.csv"
				$savedialog.ShowHelp = $True
				$result = $savedialog.ShowDialog(); $result
				$TextboxResults.Text = "Getting all users that are disabled and still members of distro groups..."
				if ($result -eq "OK")
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					
					#Get All Groups 
					$Groups = Get-MsolGroup -All
					
					#Build Hash of all disabled users 
					$MSOLDisabledUsers = Get-MsolUser -All -EnabledFilter DisabledOnly | Select-Object ObjectId
					$AllDisabledUsers = @()
					$MSOLDisabledUsers | ForEach-Object { $AllDisabledUsers += $_.ObjectID.Guid }
					
					$DisabledUserMembers = @()
					
					foreach ($Group in $Groups)
					{
						#$TextboxResults.Text = "Processing $($Group.DisplayName)..."
						#Get All Members and Loop through them 
						$GroupMembers = Get-MsolGroupMember -TenantId $PartnerComboBox.SelectedItem.TenantID -All -GroupObjectID $Group.ObjectID
						foreach ($Member in $GroupMembers)
						{
							#Is this member in our disabled list? 
							if ($AllDisabledUsers -contains $Member.ObjectId)
							{
								#$TextboxResults.Text = "`tFound $($Member.DisplayName)"
								#Add them to the list 
								$DisabledUserMembers += (
									$Object = [pscustomobject][ordered] @{
										GroupName = $Group.DisplayName
										GroupEmail = $Group.EmailAddress
										UserName = $Member.DisplayName
										EmailAddress = $Member.EmailAddress
									}
								)
							}
						}
					}
					$DisabledUserMembers | Export-CSV -NoTypeInformation $savedialog.filename
					$TextboxResults.Text = ""
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
			Else
			{
				$savedialog = New-Object windows.forms.savefiledialog
				$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
				$savedialog.title = "Export to File"
				$savedialog.filter = ".csv|*.csv"
				$savedialog.ShowHelp = $True
				$result = $savedialog.ShowDialog(); $result
				$TextboxResults.Text = "Getting all users that are disabled and still members of distro groups..."
				if ($result -eq "OK")
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					
					#Get All Groups 
					$Groups = Get-MsolGroup -All
					
					#Build Hash of all disabled users 
					$MSOLDisabledUsers = Get-MsolUser -All -EnabledFilter DisabledOnly | Select-Object ObjectId
					$AllDisabledUsers = @()
					$MSOLDisabledUsers | ForEach-Object { $AllDisabledUsers += $_.ObjectID.Guid }
					
					$DisabledUserMembers = @()
					
					foreach ($Group in $Groups)
					{
						#$TextboxResults.Text = "Processing $($Group.DisplayName)..."
						#Get All Members and Loop through them 
						$GroupMembers = Get-MsolGroupMember -All -GroupObjectID $Group.ObjectID
						foreach ($Member in $GroupMembers)
						{
							#Is this member in our disabled list? 
							if ($AllDisabledUsers -contains $Member.ObjectId)
							{
								#$TextboxResults.Text = "`tFound $($Member.DisplayName)"
								#Add them to the list 
								$DisabledUserMembers += (
									$Object = [pscustomobject][ordered] @{
										GroupName = $Group.DisplayName
										GroupEmail = $Group.EmailAddress
										UserName = $Member.DisplayName
										EmailAddress = $Member.EmailAddress
									}
								)
							}
						}
					}
					$DisabledUserMembers | Export-CSV -NoTypeInformation $savedialog.filename
					$TextboxResults.Text = ""
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
			
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
}

$UsersGetLicensesRecoReportToolStripMenuItem1_Click = {
	$textboxDetails.Text = ""
	$TextboxResults.Text = ""
	Try
	{
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$savedialog = New-Object windows.forms.savefiledialog
			$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
			$savedialog.title = "Export to File"
			$savedialog.filter = ".csv|*.csv"
			$savedialog.ShowHelp = $True
			$result = $savedialog.ShowDialog(); $result
			if ($result -eq "OK")
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				
				$LogFile = $savedialog.filename
				$TextboxResults.Text = "Getting License Report..."
				
				# Define Hashtables for lookup 
				$Sku = @{
					"DESKLESSPACK" = "Office 365 (Plan K1)"
					"DESKLESSWOFFPACK" = "Office 365 (Plan K2)"
					"LITEPACK" = "Office 365 (Plan P1)"
					"EXCHANGESTANDARD" = "Office 365 Exchange Online Only"
					"STANDARDPACK" = "Office 365 (Plan E1)"
					"STANDARDWOFFPACK" = "Office 365 (Plan E2)"
					"ENTERPRISEPACK" = "Office 365 (Plan E3)"
					"ENTERPRISEPACKLRG" = "Office 365 (Plan E3)"
					"ENTERPRISEWITHSCAL" = "Office 365 (Plan E4)"
					"STANDARDPACK_STUDENT" = "Office 365 (Plan A1) for Students"
					"STANDARDWOFFPACKPACK_STUDENT" = "Office 365 (Plan A2) for Students"
					"ENTERPRISEPACK_STUDENT" = "Office 365 (Plan A3) for Students"
					"ENTERPRISEWITHSCAL_STUDENT" = "Office 365 (Plan A4) for Students"
					"STANDARDPACK_FACULTY" = "Office 365 (Plan A1) for Faculty"
					"STANDARDWOFFPACKPACK_FACULTY" = "Office 365 (Plan A2) for Faculty"
					"ENTERPRISEPACK_FACULTY" = "Office 365 (Plan A3) for Faculty"
					"ENTERPRISEWITHSCAL_FACULTY" = "Office 365 (Plan A4) for Faculty"
					"ENTERPRISEPACK_B_PILOT" = "Office 365 (Enterprise Preview)"
					"STANDARD_B_PILOT" = "Office 365 (Small Business Preview)"
				}
				
				# Get a list of all licences that exist within the tenant 
				$licensetype = Get-MsolAccountSku | Where-Object { $_.ConsumedUnits -ge 1 }
				
				# Loop through all licence types found in the tenant 
				foreach ($license in $licensetype)
				{
					# Build and write the Header for the CSV file 
					$headerstring = "DisplayName,UserPrincipalName,AccountSku"
					
					foreach ($row in $($license.ServiceStatus))
					{
						
						# Build header string 
						switch -wildcard ($($row.ServicePlan.servicename))
						{
							"EXC*" { $thisLicence = "Exchange Online" }
							"MCO*" { $thisLicence = "Lync Online" }
							"LYN*" { $thisLicence = "Lync Online" }
							"OFF*" { $thisLicence = "Office Profesional Plus" }
							"SHA*" { $thisLicence = "Sharepoint Online" }
							"*WAC*" { $thisLicence = "Office Web Apps" }
							"WAC*" { $thisLicence = "Office Web Apps" }
							default { $thisLicence = $row.ServicePlan.servicename }
						}
						
						$headerstring = ($headerstring + "," + $thisLicence)
					}
					
					Out-File -FilePath $LogFile -InputObject $headerstring -Encoding UTF8 -append
					
					# Gather users for this particular AccountSku 
					$users = Get-MsolUser -all | Where-Object { $_.isLicensed -eq "True" -and $_.licenses[0].accountskuid.tostring() -eq $license.accountskuid }
					
					# Loop through all users and write them to the CSV file 
					foreach ($user in $users)
					{
						
						$datastring = ($user.displayname + "," + $user.userprincipalname + "," + $Sku.Item($user.licenses[0].AccountSku.SkuPartNumber))
						
						foreach ($row in $($user.licenses[0].servicestatus))
						{
							
							# Build data string 
							$datastring = ($datastring + "," + $($row.provisioningstatus))
						}
						
						Out-File -FilePath $LogFile -InputObject $datastring -Encoding UTF8 -append
						
					}
				}
				$TextboxResults.Text = ""
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$savedialog = New-Object windows.forms.savefiledialog
			$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
			$savedialog.title = "Export to File"
			$savedialog.filter = ".csv|*.csv"
			$savedialog.ShowHelp = $True
			$result = $savedialog.ShowDialog(); $result
			if ($result -eq "OK")
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				
				$LogFile = $savedialog.filename
				$TextboxResults.Text = "Getting License Report..."
				
				# Define Hashtables for lookup 
				$Sku = @{
					"DESKLESSPACK" = "Office 365 (Plan K1)"
					"DESKLESSWOFFPACK" = "Office 365 (Plan K2)"
					"LITEPACK" = "Office 365 (Plan P1)"
					"EXCHANGESTANDARD" = "Office 365 Exchange Online Only"
					"STANDARDPACK" = "Office 365 (Plan E1)"
					"STANDARDWOFFPACK" = "Office 365 (Plan E2)"
					"ENTERPRISEPACK" = "Office 365 (Plan E3)"
					"ENTERPRISEPACKLRG" = "Office 365 (Plan E3)"
					"ENTERPRISEWITHSCAL" = "Office 365 (Plan E4)"
					"STANDARDPACK_STUDENT" = "Office 365 (Plan A1) for Students"
					"STANDARDWOFFPACKPACK_STUDENT" = "Office 365 (Plan A2) for Students"
					"ENTERPRISEPACK_STUDENT" = "Office 365 (Plan A3) for Students"
					"ENTERPRISEWITHSCAL_STUDENT" = "Office 365 (Plan A4) for Students"
					"STANDARDPACK_FACULTY" = "Office 365 (Plan A1) for Faculty"
					"STANDARDWOFFPACKPACK_FACULTY" = "Office 365 (Plan A2) for Faculty"
					"ENTERPRISEPACK_FACULTY" = "Office 365 (Plan A3) for Faculty"
					"ENTERPRISEWITHSCAL_FACULTY" = "Office 365 (Plan A4) for Faculty"
					"ENTERPRISEPACK_B_PILOT" = "Office 365 (Enterprise Preview)"
					"STANDARD_B_PILOT" = "Office 365 (Small Business Preview)"
				}
				
				# Get a list of all licences that exist within the tenant 
				$licensetype = Get-MsolAccountSku -TenantId $PartnerComboBox.SelectedItem.TenantID | Where-Object { $_.ConsumedUnits -ge 1 }
				
				# Loop through all licence types found in the tenant 
				foreach ($license in $licensetype)
				{
					# Build and write the Header for the CSV file 
					$headerstring = "DisplayName,UserPrincipalName,AccountSku"
					
					foreach ($row in $($license.ServiceStatus))
					{
						
						# Build header string 
						switch -wildcard ($($row.ServicePlan.servicename))
						{
							"EXC*" { $thisLicence = "Exchange Online" }
							"MCO*" { $thisLicence = "Lync Online" }
							"LYN*" { $thisLicence = "Lync Online" }
							"OFF*" { $thisLicence = "Office Profesional Plus" }
							"SHA*" { $thisLicence = "Sharepoint Online" }
							"*WAC*" { $thisLicence = "Office Web Apps" }
							"WAC*" { $thisLicence = "Office Web Apps" }
							default { $thisLicence = $row.ServicePlan.servicename }
						}
						
						$headerstring = ($headerstring + "," + $thisLicence)
					}
					
					Out-File -FilePath $LogFile -InputObject $headerstring -Encoding UTF8 -append
					
					# Gather users for this particular AccountSku 
					$users = Get-MsolUser -all -TenantId $PartnerComboBox.SelectedItem.TenantID | Where-Object { $_.isLicensed -eq "True" -and $_.licenses[0].accountskuid.tostring() -eq $license.accountskuid }
					
					# Loop through all users and write them to the CSV file 
					foreach ($user in $users)
					{
						
						$datastring = ($user.displayname + "," + $user.userprincipalname + "," + $Sku.Item($user.licenses[0].AccountSku.SkuPartNumber))
						
						foreach ($row in $($user.licenses[0].servicestatus))
						{
							
							# Build data string 
							$datastring = ($datastring + "," + $($row.provisioningstatus))
						}
						
						Out-File -FilePath $LogFile -InputObject $datastring -Encoding UTF8 -append
						
					}
				}
				$TextboxResults.Text = ""
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Else
		{
			$savedialog = New-Object windows.forms.savefiledialog
			$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
			$savedialog.title = "Export to File"
			$savedialog.filter = ".csv|*.csv"
			$savedialog.ShowHelp = $True
			$result = $savedialog.ShowDialog(); $result
			if ($result -eq "OK")
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				
				$LogFile = $savedialog.filename
				$TextboxResults.Text = "Getting License Report..."
				
				# Define Hashtables for lookup 
				$Sku = @{
					"DESKLESSPACK" = "Office 365 (Plan K1)"
					"DESKLESSWOFFPACK" = "Office 365 (Plan K2)"
					"LITEPACK" = "Office 365 (Plan P1)"
					"EXCHANGESTANDARD" = "Office 365 Exchange Online Only"
					"STANDARDPACK" = "Office 365 (Plan E1)"
					"STANDARDWOFFPACK" = "Office 365 (Plan E2)"
					"ENTERPRISEPACK" = "Office 365 (Plan E3)"
					"ENTERPRISEPACKLRG" = "Office 365 (Plan E3)"
					"ENTERPRISEWITHSCAL" = "Office 365 (Plan E4)"
					"STANDARDPACK_STUDENT" = "Office 365 (Plan A1) for Students"
					"STANDARDWOFFPACKPACK_STUDENT" = "Office 365 (Plan A2) for Students"
					"ENTERPRISEPACK_STUDENT" = "Office 365 (Plan A3) for Students"
					"ENTERPRISEWITHSCAL_STUDENT" = "Office 365 (Plan A4) for Students"
					"STANDARDPACK_FACULTY" = "Office 365 (Plan A1) for Faculty"
					"STANDARDWOFFPACKPACK_FACULTY" = "Office 365 (Plan A2) for Faculty"
					"ENTERPRISEPACK_FACULTY" = "Office 365 (Plan A3) for Faculty"
					"ENTERPRISEWITHSCAL_FACULTY" = "Office 365 (Plan A4) for Faculty"
					"ENTERPRISEPACK_B_PILOT" = "Office 365 (Enterprise Preview)"
					"STANDARD_B_PILOT" = "Office 365 (Small Business Preview)"
				}
				
				# Get a list of all licences that exist within the tenant 
				$licensetype = Get-MsolAccountSku | Where-Object { $_.ConsumedUnits -ge 1 }
				
				# Loop through all licence types found in the tenant 
				foreach ($license in $licensetype)
				{
					# Build and write the Header for the CSV file 
					$headerstring = "DisplayName,UserPrincipalName,AccountSku"
					
					foreach ($row in $($license.ServiceStatus))
					{
						
						# Build header string 
						switch -wildcard ($($row.ServicePlan.servicename))
						{
							"EXC*" { $thisLicence = "Exchange Online" }
							"MCO*" { $thisLicence = "Lync Online" }
							"LYN*" { $thisLicence = "Lync Online" }
							"OFF*" { $thisLicence = "Office Profesional Plus" }
							"SHA*" { $thisLicence = "Sharepoint Online" }
							"*WAC*" { $thisLicence = "Office Web Apps" }
							"WAC*" { $thisLicence = "Office Web Apps" }
							default { $thisLicence = $row.ServicePlan.servicename }
						}
						
						$headerstring = ($headerstring + "," + $thisLicence)
					}
					
					Out-File -FilePath $LogFile -InputObject $headerstring -Encoding UTF8 -append
					
					# Gather users for this particular AccountSku 
					$users = Get-MsolUser -all | Where-Object { $_.isLicensed -eq "True" -and $_.licenses[0].accountskuid.tostring() -eq $license.accountskuid }
					
					# Loop through all users and write them to the CSV file 
					foreach ($user in $users)
					{
						
						$datastring = ($user.displayname + "," + $user.userprincipalname + "," + $Sku.Item($user.licenses[0].AccountSku.SkuPartNumber))
						
						foreach ($row in $($user.licenses[0].servicestatus))
						{
							
							# Build data string 
							$datastring = ($datastring + "," + $($row.provisioningstatus))
						}
						
						Out-File -FilePath $LogFile -InputObject $datastring -Encoding UTF8 -append
						
					}
				}
				$TextboxResults.Text = ""
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getAllGroupsAndAllMembersToolStripMenuItem_Click = {
	Try
	{
		$savedialog = New-Object windows.forms.savefiledialog
		$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
		$savedialog.title = "Export to File"
		$savedialog.filter = ".csv|*.csv"
		$savedialog.ShowHelp = $True
		$result = $savedialog.ShowDialog(); $result
		if ($result -eq "OK")
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			#Constant Variables 
			$OutputFile = $savedialog.filename
			$TextboxResults.Text = "Getting all groups and members..."
			$arrDLMembers = @{ }
			
			#Prepare Output file with headers 
			Out-File -FilePath $OutputFile -InputObject "Distribution Group DisplayName,Distribution Group Email,Member DisplayName, Member Email, Member Type" -Encoding UTF8
			
			#Get all Distribution Groups from Office 365 
			$objDistributionGroups = Get-DistributionGroup -ResultSize Unlimited
			
			#Iterate through all groups, one at a time     
			Foreach ($objDistributionGroup in $objDistributionGroups)
			{
				
				#write-host "Processing $($objDistributionGroup.DisplayName)..."
				
				#Get members of this group 
				$objDGMembers = Get-DistributionGroupMember -Identity $($objDistributionGroup.PrimarySmtpAddress)
				
				#write-host "Found $($objDGMembers.Count) members..."
				
				#Iterate through each member 
				Foreach ($objMember in $objDGMembers)
				{
					Out-File -FilePath $OutputFile -InputObject "$($objDistributionGroup.DisplayName),$($objDistributionGroup.PrimarySMTPAddress),$($objMember.DisplayName),$($objMember.PrimarySMTPAddress),$($objMember.RecipientType)" -Encoding UTF8 -append
					#write-host "`t$($objDistributionGroup.DisplayName),$($objDistributionGroup.PrimarySMTPAddress),$($objMember.DisplayName),$($objMember.PrimarySMTPAddress),$($objMember.RecipientType)"
				}
			}
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		$TextboxResults.Text = ""
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$exportAllEmailAddressesToCSVToolStripMenuItem_Click = {
	Try
	{
		$savedialog = New-Object windows.forms.savefiledialog
		$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
		$savedialog.title = "Export to File"
		$savedialog.filter = ".csv|*.csv"
		$savedialog.ShowHelp = $True
		$result = $savedialog.ShowDialog(); $result
		if ($result -eq "OK")
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$OutputFile = $savedialog.filename
			$textboxDetails.Text = "Get-Recipient -ResultSize Unlimited | Select-Object DisplayName, RecipientType, EmailAddresses"
			$TextboxResults.Text = "Exporting list of all email addresses..."
			Get-Recipient -ResultSize Unlimited | select-object DisplayName, RecipientType, EmailAddresses | Export-Csv $OutputFile -NoTypeInformation
			$TextboxResults.Text = ""
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

#Mail Malware Report

$getMailMalwareReportToolStripMenuItem1_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting mail malware report..."
		$textboxDetails.Text = "Get-MailDetailMalwareReport | Format-List"
		$TextboxResults.Text = Get-MailDetailMalwareReport | Format-List | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getMailMalwareReportFromSenderToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$MalwareSender = Read-Host "Enter the email of the sender"
			If (!$MalwareSender)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No e-mail was entered, please enter a valid e-mail of the sender", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Generating mail malware report sent from $MalwareSender..."
				$textboxDetails.Text = "Get-MailDetailMalwareReport -SenderAddress $MalwareSender | Format-List"
				$TextboxResults.Text = Get-MailDetailMalwareReport -SenderAddress $MalwareSender | Format-List | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get a Mail Malware report for a different Sender?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getMailMalwareReportBetweenDatesToolStripMenuItem_Click = {
	Do
	{
		#$MalwareReportStart = Read-Host "Enter the start date. EX: 06/13/2015"
		$StartDateText = "Select the beginning date for the mail malware report"
		$StartDateFormText = "Start Date"
		Show-SelectDatePicker_psf
		$startdate = $SelectDatePicker_monthcalendar1
		$MalwareReportStart = "$startdate".trimend('00:00:00')
		
		#$MalwareReportEnd = Read-Host "Enter the end date. EX: 06/15/2015 "
		$StartDateText = "Select the ending date for the mail malware report"
		$StartDateFormText = "End Date"
		Show-SelectDatePicker_psf
		$enddate = $SelectDatePicker_monthcalendar1
		$MalwareReportEnd = "$enddate".trimend('00:00:00')
		
		try
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Generating mail malware report between $MalwareReportStart and $MalwareReportEnd..."
			$textboxDetails.Text = "Get-MailDetailMalwareReport -StartDate $MalwareReportStart -EndDate $MalwareReportEnd | Format-List"
			$TextboxResults.Text = Get-MailDetailMalwareReport -StartDate $MalwareReportStart -EndDate $MalwareReportEnd | Format-List | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get another Mail Malware report for a different date?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getMailMalwareReportToARecipientToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$MalwareRecipient = Read-Host "Enter the email of the recipient"
			If (!$MalwareRecipient)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Recipient E-mail was entered, please enter a valid recipient e-mail", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Generating mail malware report sent to $MalwareRecipient..."
				$textboxDetails.Text = "Get-MailDetailMalwareReport -RecipientAddress $MalwareRecipient | Format-List"
				$TextboxResults.Text = Get-MailDetailMalwareReport -RecipientAddress $MalwareRecipient | Format-List | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get another Mail Malware report for a different Recipient?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getMailMalwareReporforInboundToolStripMenuItem_Click = {
	try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Generating mail malware inbound report..."
		$textboxDetails.Text = "Get-MailDetailMalwareReport -Direction Inbound | Format-List "
		$TextboxResults.Text = Get-MailDetailMalwareReport -Direction Inbound | Format-List | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getMailMalwareReportForOutboundToolStripMenuItem_Click = {
	try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Generating mail malware outbound report..."
		$textboxDetails.Text = "Get-MailDetailMalwareReport -Direction Outbound | Format-List"
		$TextboxResults.Text = Get-MailDetailMalwareReport -Direction Outbound | Format-List | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

	#Mail Traffic Report

$getRecentMailTrafficReportToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Generating recent mail traffic report..."
		$textboxDetails.Text = "Get-MailTrafficReport | Format-Table -AutoSize"
		$TextboxResults.Text = Get-MailTrafficReport | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getInboundMailTrafficReportToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Generating inbound traffic report..."
		$textboxDetails.Text = "Get-MailTrafficReport -Direction Inbound | Format-Table -AutoSize"
		$TextboxResults.Text = Get-MailTrafficReport -Direction Inbound | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getOutboundMailTrafficReportToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Generating outbound mail traffic report..."
		$textboxDetails.Text = "Get-MailTrafficReport -Direction Outbound | Format-Table -AutoSize"
		$TextboxResults.Text = Get-MailTrafficReport -Direction Outbound | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getMailTrafficReportBetweenDatesToolStripMenuItem_Click = {
	
	#$MailTrafficStart = Read-Host "Enter the start date. EX: 06/13/2015"
	$StartDateText = "Select the beginning date for the mail traffic report"
	$StartDateFormText = "Start Date"
	Show-SelectDatePicker_psf
	$startdate = $SelectDatePicker_monthcalendar1
	$MailTrafficStart = "$startdate".trimend('00:00:00')
	
	#$MailTrafficEnd = Read-Host "Enter the end date. EX: 06/15/2015 "
	$StartDateText = "Select the ending date for the mail traffic report"
	$StartDateFormText = "End Date"
	Show-SelectDatePicker_psf
	$enddate = $SelectDatePicker_monthcalendar1
	$MailTrafficEnd = "$enddate".trimend('00:00:00')
	
	
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Generating mail traffic report between $MailTrafficStart and $MailTrafficEnd..."
		$textboxDetails.Text = "Get-MailTrafficReport -StartDate $MailTrafficStart -EndDate $MailTrafficEnd | Format-Table -AutoSize"
		$TextboxResults.Text = Get-MailTrafficReport -StartDate $MailTrafficStart -EndDate $MailTrafficEnd | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

	#ActiveSyncDevices

$getAllUsersActiveSyncDevicesToolStripMenuItem_Click = {
	Try
	{
		$savedialog = New-Object windows.forms.savefiledialog
		$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
		$savedialog.title = "Export to CSV"
		$savedialog.filter = ".csv|*.csv"
		$savedialog.ShowHelp = $True
		$result = $savedialog.ShowDialog(); $result
		if ($result -eq "OK")
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all ActiveSync Devices for all users..."
			$textboxDetails.Text = "Get-Mailbox -ResultSize Unlimited | ForEach-Object { `$PrimarySmtpAddress = `$_.PrimarySmtpAddress; Get-MobileDeviceStatistics -Mailbox `$_.Identity | Select-Object @{ Name = 'PrimarySmtpAddress'; Expression = { `$PrimarySmtpAddress } }, DeviceType, DeviceOS, DeviceMobileOperator, LastSyncAttemptTime } | Export-CSV `$savedialog.filename -Encoding utf8 -NoTypeInformation -Delimiter ", ""
			$MailBox = Get-Mailbox -ResultSize Unlimited
			$MailBox | ForEach-Object { $PrimarySmtpAddress = $_.PrimarySmtpAddress; Get-MobileDeviceStatistics -Mailbox $_.Identity | Select-Object @{ Name = "PrimarySmtpAddress"; Expression = { $PrimarySmtpAddress } }, DeviceType, DeviceOS, DeviceMobileOperator, LastSyncAttemptTime } | Export-CSV $savedialog.filename -Encoding utf8 -NoTypeInformation -Delimiter ","
			$TextboxResults.Text = ""
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}



###SHARED MAILBOXES###

$createASharedMailboxToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$NewSharedMailbox = Read-Host "Enter the name of the new Shared Mailbox"
			If (!$NewSharedMailbox)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No name was entered, please enter a valid name for the new Shared Mailbox", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Creating new shared mailbox $NewSharedMailbox"
				$textboxDetails.Text = "New-Mailbox -Name $NewSharedMailbox –Shared"
				New-Mailbox -Name $NewSharedMailbox –Shared
				$TextboxResults.Text = Get-Mailbox -ResultSize unlimited -RecipientTypeDetails SharedMailbox | Format-Table -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to create another Shared Mailbox?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getAllSharedMailboxesToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting list of shared mailboxes..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited -RecipientTypeDetails SharedMailbox | Format-Table -AutoSize"
		$TextboxResults.Text = Get-Mailbox -ResultSize unlimited -RecipientTypeDetails SharedMailbox | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$convertRegularMailboxToSharedToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$ConvertMailboxtoShared = Read-Host "Enter the name of the account you want to convert"
			$SelectUsersFormText = "Select the User you want to convert to a Shared Mailbox"
			Show-SelectCachedDisplayNames_psf
			$ConvertMailboxtoShared = $SelectCachedDisplayNames_comboboxNames
			If (!$ConvertMailboxtoShared)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid User to convert to a Shared Mailbox", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Converting $ConvertMailboxtoShared to a shared mailbox..."
				$textboxDetails.Text = "Set-Mailbox $ConvertMailboxtoShared –Type shared"
				Set-Mailbox $ConvertMailboxtoShared –Type shared
				$TextboxResults.Text = Get-Mailbox -Identity $ConvertMailboxtoShared | Format-List UserPrincipalName, DisplayName, RecipientTypeDetails, PrimarySmtpAddress, EmailAddresses, IsDirSynced | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to convert another User to a Shared Mailbox?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$convertSharedMailboxToRegularToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$ConvertMailboxtoRegular = Read-Host "Enter the name of the account you want to convert"
			$SharedMailboxesText = "Select the Shared Mailbox you want convert to a Regular Mailbox"
			Show-SelectSharedMailbox_psf
			$ConvertMailboxtoRegular = $SelectSharedMailbox_comboboxSharedMailboxes
			If (!$ConvertMailboxtoRegular)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Shared Mailbox was selected, please select a valid Shared Mailbox", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Converting $ConvertMailboxtoRegular to a Regular Mailbox..."
				$textboxDetails.Text = "Set-Mailbox $ConvertMailboxtoRegular –Type Regular"
				Set-Mailbox $ConvertMailboxtoRegular –Type Regular
				$TextboxResults.Text = Get-Mailbox -Identity $ConvertMailboxtoRegular | Format-List UserPrincipalName, DisplayName, RecipientTypeDetails, PrimarySmtpAddress, EmailAddresses, IsDirSynced | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to convert another Shared Mailbox to a Regular Mailbox?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getDetailedInfoForASharedMailboxToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$SharedMailboxDetailedInfo = Read-Host "Enter the name of the shared mailbox"
			$SharedMailboxesText = "Select the Shared Mailbox you want to view detailed information for"
			Show-SelectSharedMailbox_psf
			$SharedMailboxDetailedInfo = $SelectSharedMailbox_comboboxSharedMailboxes
			If (!$SharedMailboxDetailedInfo)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Shared Mailbox was selected, please select a valid Shared Mailbox", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting shared mailbox information for $SharedMailboxDetailedInfo..."
				$textboxDetails.Text = "Get-Mailbox $SharedMailboxDetailedInfo | Format-List"
				$TextboxResults.Text = Get-Mailbox $SharedMailboxDetailedInfo | Format-List | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get information on another Shared Mailbox?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$removeASharedMailboxToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$SharedMailboxesText = "Please select the Shared Mailbox you want to delete "
			Show-SelectSharedMailbox_psf
			$DeleteSharedMailbox = $SelectSharedMailbox_comboboxSharedMailboxes
			If (!$DeleteSharedMailbox)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Shared Mailbox was selected, please select a valid Shared Mailbox to delete", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$textboxDetails.Text = "Remove-Mailbox -Identity $DeleteSharedMailbox"
				$TextboxResults.Text = "Deleting the $DeleteSharedMailbox mailbox"
				Remove-Mailbox -Identity $DeleteSharedMailbox
				$TextboxResults.Text = "Getting list of shared mailboxes..."
				$TextboxResults.Text = Get-Mailbox -ResultSize unlimited -RecipientTypeDetails SharedMailbox | Format-Table -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to remove another Shared Mailbox?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

#Permissions

$exportAllUsersMailboxPermissionsToCSVToolStripMenuItem_Click = {
	
	
	Try
	{
		$savedialog = New-Object windows.forms.savefiledialog
		$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
		$savedialog.title = "Export to File"
		$savedialog.filter = ".csv|*.csv"
		$savedialog.ShowHelp = $True
		$result = $savedialog.ShowDialog(); $result
		if ($result -eq "OK")
		{
			$OutputFile = $savedialog.filename
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			#$OutputFile = Read-Host "Enter the location and name for the CSV. EX: C:\Scripts\UserPerms.csv"
			$textboxDetails.Text = "https://gallery.technet.microsoft.com/scriptcenter/Export-mailbox-permissions-d12a1d28"
			
			#Main
			Function Main
			{
				
				
				
				#Prepare Output file with headers
				Out-File -FilePath $OutputFile -InputObject "UserPrincipalName,ObjectWithAccess,ObjectType,AccessType,Inherited,AllowOrDeny" -Encoding UTF8
				
				
				$objUsers = get-mailbox -ResultSize Unlimited | Select-Object UserPrincipalName
				
				
				#Iterate through all users	
				Foreach ($objUser in $objUsers)
				{
					#Connect to the users mailbox
					$objUserMailbox = get-mailboxpermission -Identity $($objUser.UserPrincipalName) | Select-Object User, AccessRights, Deny, IsInherited
					
					#Prepare UserPrincipalName variable
					$strUserPrincipalName = $objUser.UserPrincipalName
					
					#Loop through each permission
					foreach ($objPermission in $objUserMailbox)
					{
						#Get the remaining permission details (We're only interested in real users, not built in system accounts/groups)
						if (($objPermission.user.tolower().contains("\domain admin")) -or ($objPermission.user.tolower().contains("\enterprise admin")) -or ($objPermission.user.tolower().contains("\organization management")) -or ($objPermission.user.tolower().contains("\administrator")) -or ($objPermission.user.tolower().contains("\exchange servers")) -or ($objPermission.user.tolower().contains("\public folder management")) -or ($objPermission.user.tolower().contains("nt authority")) -or ($objPermission.user.tolower().contains("\exchange trusted subsystem")) -or ($objPermission.user.tolower().contains("\discovery management")) -or ($objPermission.user.tolower().contains("s-1-5-21")))
						{ }
						Else
						{
							$objRecipient = (get-recipient $($objPermission.user) -EA SilentlyContinue)
							
							if ($objRecipient)
							{
								$strUserWithAccess = $($objRecipient.DisplayName) + " (" + $($objRecipient.PrimarySMTPAddress) + ")"
								$strObjectType = $objRecipient.RecipientType
							}
							else
							{
								$strUserWithAccess = $($objPermission.user)
								$strObjectType = "Other"
							}
							
							$strAccessType = $($objPermission.AccessRights) -replace ",", ";"
							
							if ($objPermission.Deny -eq $true)
							{
								$strAllowOrDeny = "Deny"
							}
							else
							{
								$strAllowOrDeny = "Allow"
							}
							
							$strInherited = $objPermission.IsInherited
							
							#Prepare the user details in CSV format for writing to file
							$strUserDetails = "$strUserPrincipalName,$strUserWithAccess,$strObjectType,$strAccessType,$strInherited,$strAllowOrDeny"
							
							$TextboxResults.Text = $strUserDetails
							
							#Append the data to file
							Out-File -FilePath $OutputFile -InputObject $strUserDetails -Encoding UTF8 -append
						}
					}
				}
				
				
			}
			
			# Start script
			. Main
			$TextboxResults.Text = ""
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$addFullAccessPermissionsToASharedMailboxToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$SharedMailboxFullAccess = Read-Host "Enter the name of the shared mailbox"
			$SharedMailboxesText = "Select the Shared Mailbox you want to modify Full Access permissions for"
			Show-SelectSharedMailbox_psf
			$SharedMailboxFullAccess = $SelectSharedMailbox_comboboxSharedMailboxes
			If (!$SharedMailboxFullAccess)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Shared Mailbox was selected, please select a valid Shared mailbox", "Error")
			}
			Else
			{
				#$GrantFullAccesstoSharedMailbox = Read-Host "Enter the UPN of the user that will have full access"
				$SelectUsersFormText = "Select the user you want to have full access to $SharedMailboxFullAccess"
				Show-SelectCachedDisplayNames_psf
				$GrantFullAccesstoSharedMailbox = $SelectCachedDisplayNames_comboboxNames
				If (!$GrantFullAccesstoSharedMailbox)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid user", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Granting Full Access permissions to $GrantFullAccesstoSharedMailbox for the $SharedMailboxFullAccess shared mailbox..."
					$textboxDetails.Text = "Add-MailboxPermission $SharedMailboxFullAccess -User $GrantFullAccesstoSharedMailbox -AccessRights FullAccess -InheritanceType All | Format-List"
					$TextboxResults.Text = Add-MailboxPermission $SharedMailboxFullAccess -User $GrantFullAccesstoSharedMailbox -AccessRights FullAccess -InheritanceType All | Format-List | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to modify permissions on another Shared Mailbox?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getSharedMailboxPermissionsToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$SharedMailboxPermissionsList = Read-Host "Enter the name of the Shared Mailbox"
			$SharedMailboxesText = "Select the Shared Mailbox you want to view permissions for"
			Show-SelectSharedMailbox_psf
			$SharedMailboxPermissionsList = $SelectSharedMailbox_comboboxSharedMailboxes
			If (!$SharedMailboxPermissionsList)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Shared Mailbox was selected, please select a valid Shared Mailbox", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting Send As permissions for $SharedMailboxPermissionsList..."
				$textboxDetails.Text = "Get-RecipientPermission $SharedMailboxPermissionsList | Where-Object { (`$_.Trustee -notlike 'NT AUTHORITY\SELF') } | Sort-Object Trustee | Format-Table Trustee, AccessControlType, AccessRights -AutoSize"
				#$TextboxResults.Text = Get-RecipientPermission $SharedMailboxPermissionsList | Format-List | Out-String
				$TextboxResults.Text = Get-RecipientPermission $SharedMailboxPermissionsList | Where-Object { ($_.Trustee -notlike "NT AUTHORITY\SELF") } | Sort-Object Trustee | Format-Table Trustee, AccessControlType, AccessRights -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to view permissions for another Shared Mailbox?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getSharedMailboxFullAccessPermissionsToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$SharedMailboxFullAccessPermissionsList = Read-Host "Enter the name of the Shared Mailbox"
			$SharedMailboxesText = "Select the Shared Mailbox you want to view Full Access permissions for"
			Show-SelectSharedMailbox_psf
			$SharedMailboxFullAccessPermissionsList = $SelectSharedMailbox_comboboxSharedMailboxes
			If (!$SharedMailboxFullAccessPermissionsList)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Shared Mailbox was selected, please select a valid Shared Mailbox", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting Full Access permissions for $SharedMailboxFullAccessPermissionsList..."
				$textboxDetails.Text = "Get-MailboxPermission $SharedMailboxFullAccessPermissionsList | Where-Object { (`$_.User -notlike 'NT AUTHORITY\SELF'') } | Sort-Object Identity | Format-Table Identity, User, AccessRights -AutoSize"
				$TextboxResults.Text = Get-MailboxPermission $SharedMailboxFullAccessPermissionsList | Where-Object { ($_.User -notlike "NT AUTHORITY\SELF") } | Sort-Object Identity | Format-Table Identity, User, AccessRights -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to view permissions on another Shared Mailbox?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$addSendAsAccessToASharedMailboxToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$SharedMailboxSendAsAccess = Read-Host "Enter the name of the shared mailbox"
			$SharedMailboxesText = "Select the Shared Mailbox you want to modify Send As permissions for"
			Show-SelectSharedMailbox_psf
			$SharedMailboxSendAsAccess = $SelectSharedMailbox_comboboxSharedMailboxes
			If (!$SharedMailboxSendAsAccess)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Shared Mailbox was selected, please select a valid Shared Mailbox", "Error")
			}
			Else
			{
				#$SharedMailboxSendAsUser = Read-Host "Enter the UPN of the user"
				$SelectUsersFormText = "Select the user you want grant Send As permissions for $SharedMailboxSendAsAccess shared mailbox"
				Show-SelectCachedDisplayNames_psf
				$SharedMailboxSendAsUser = $SelectCachedDisplayNames_comboboxNames
				If (!$SharedMailboxSendAsUser)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid user", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Getting Send As permissions for $SharedMailboxSendAsAccess..."
					$textboxDetails.Text = "Add-RecipientPermission $SharedMailboxSendAsAccess -Trustee $SharedMailboxSendAsUser -AccessRights SendAs | Format-List"
					$TextboxResults.Text = Add-RecipientPermission $SharedMailboxSendAsAccess -Trustee $SharedMailboxSendAsUser -AccessRights SendAs | Format-List | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to modify permissions on another Shared Mailbox?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}



###CONTACTS###

$createANewMailContactToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$ContactFirstName = Read-Host "Enter the contacts first name"
			If (!$ContactFirstName)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No first name was entered, please enter a valid first name", "Error")
			}
			Else
			{
				$ContactsLastName = Read-Host "Enter the contacts last name"
				If (!$ContactsLastName)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No last name was entered, please enter a valid last name", "Error")
				}
				Else
				{
					$ContactName = $ContactFirstName + " " + $ContactsLastName
					$ContactExternalEmail = Read-Host "Enter external email for $ContactName"
					If (!$ContactExternalEmail)
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						[System.Windows.Forms.MessageBox]::Show("No external email was entered, please enter a valid external email", "Error")
					}
					Else
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Creating a new contact $ContactName"
						$textboxDetails.Text = "New-MailContact -Name $ContactName -FirstName $ContactFirstName -LastName $ContactsLastName -ExternalEmailAddress $ContactExternalEmail"
						New-MailContact -Name $ContactName -FirstName $ContactFirstName -LastName $ContactsLastName -ExternalEmailAddress $ContactExternalEmail
						$TextboxResults.Text = Get-MailContact -Identity $ContactName | Format-List DisplayName, EmailAddresses, PrimarySmtpAddress, ExternalEmailAddress, RecipientType | Out-String -Width 2147483647
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to create another Contact?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getAllContactsToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting all contacts..."
		$textboxDetails.Text = "Get-MailContact -ResultSize unlimited | Sort-Object DisplayName | Format-Table DisplayName, EmailAddresses -AutoSize"
		$TextboxResults.Text = Get-MailContact -ResultSize unlimited | Sort-Object DisplayName | Format-Table DisplayName, EmailAddresses -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getDetailedInfoForAContactToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$DetailedInfoForContact = Read-Host "Enter the contact name, displayname, alias or email address"
			$MailContactText = "Select the Contact to get detailed information for"
			Show-SelectMailContact_psf
			$DetailedInfoForContact = $SelectMailContact_comboboxSelectMailContacts
			If (!$DetailedInfoForContact)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Contact was selected, please select a Contact to view detailed information of", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting detailed info for $DetailedInfoForContact..."
				$textboxDetails.Text = "Get-MailContact -Identity $DetailedInfoForContact | Format-List"
				$TextboxResults.Text = Get-MailContact -Identity $DetailedInfoForContact | Format-List | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get information on another Contact?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$removeAContactToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$RemoveMailContact = Read-Host "Enter the contact name, displayname, alias or email address"
			$MailContactText = "Select the Contact you want to remove"
			Show-SelectMailContact_psf
			$RemoveMailContact = $SelectMailContact_comboboxSelectMailContacts
			If (!$RemoveMailContact)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Contact was selected, please select a valid Contact to remove", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Removing contact $RemoveMailContact..."
				$textboxDetails.Text = "Remove-MailContact -Identity $RemoveMailContact"
				Remove-MailContact -Identity $RemoveMailContact
				$TextboxResults.Text = "Getting list of all contacts..."
				$TextboxResults.Text = Get-MailContact -ResultSize unlimited | Sort-Object DisplayName | Format-Table DisplayName, EmailAddresses, PrimarySmtpAddress, ExternalEmailAddress, RecipientType -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to remove another Contact?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

#Global Address List

$hideContactFromGALToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$HideGALMailContact = Read-Host "Enter the contact name, displayname, alias or email address"
			$MailContactText = "Select the Contact you want to hide from the Global Address List"
			Show-SelectMailContact_psf
			$HideGALMailContact = $SelectMailContact_comboboxSelectMailContacts
			If (!$HideGALMailContact)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Contact was selected, please select a valid Contact to hide from the Global Address List", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Hiding $HideGALMailContact from the GAL..."
				$textboxDetails.Text = "Set-MailContact -Identity $HideGALMailContact -HiddenFromAddressListsEnabled `$True"
				Set-MailContact -Identity $HideGALMailContact -HiddenFromAddressListsEnabled $True
				$TextboxResults.Text = Get-MailContact -Identity $HideGALMailContact | Format-List DisplayName, HiddenFromAddressListsEnabled | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to hide another Contact from the Global Address List?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$unhideContactFromGALToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$unHideGALMailContact = Read-Host "Enter the contact name, displayname, alias or email address"
			$MailContactText = "Select the Contact you want to unhide from the Global Address List"
			Show-SelectMailContact_psf
			$unHideGALMailContact = $SelectMailContact_comboboxSelectMailContacts
			If (!$unHideGALMailContact)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Contact was selected, please select a valid Contact to unhide from the Global Address List", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "unhiding $unHideGALMailContact from the GAL..."
				$textboxDetails.Text = "Set-MailContact -Identity $unHideGALMailContact -HiddenFromAddressListsEnabled `$False"
				Set-MailContact -Identity $unHideGALMailContact -HiddenFromAddressListsEnabled $False
				$TextboxResults.Text = Get-MailContact -Identity $unHideGALMailContact | Format-List DisplayName, HiddenFromAddressListsEnabled | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to unhide another Contact from the Global Address List?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getGALStatusForAllUsersToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting GAL status for all users..."
		$textboxDetails.Text = "Get-MailContact -ResultSize unlimited | Sort-Object DisplayName | Format-Table DisplayName, HiddenFromAddressListsEnabled -AutoSize"
		$TextboxResults.Text = Get-MailContact -ResultSize unlimited | Sort-Object DisplayName | Format-Table DisplayName, HiddenFromAddressListsEnabled -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getContactsHiddenFromGALToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting all users that are hidden from the GAL..."
		$textboxDetails.Text = "Get-MailContact -ResultSize unlimited | Where-Object { `$_.HiddenFromAddressListsEnabled -like 'True' } | Sort-Object DisplayName | Format-Table DisplayName, HiddenFromAddressListsEnabled -AutoSize"
		$TextboxResults.Text = Get-MailContact -ResultSize unlimited | Where-Object { $_.HiddenFromAddressListsEnabled -like "True" } | Sort-Object DisplayName | Format-Table DisplayName, HiddenFromAddressListsEnabled -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getContactsNotHiddenFromGALToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting all users that not are hidden from the GAL"
		$textboxDetails.Text = "Get-MailContact -ResultSize unlimited | Where-Object { `$_.HiddenFromAddressListsEnabled -like 'False' } | Sort-Object DisplayName | Format-Table DisplayName, HiddenFromAddressListsEnabled -AutoSize"
		$TextboxResults.Text = Get-MailContact -ResultSize unlimited | Where-Object { $_.HiddenFromAddressListsEnabled -like "False" } | Sort-Object DisplayName | Format-Table DisplayName, HiddenFromAddressListsEnabled -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}


###SKYPE###

$getAllOnlineUserToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting all online users..."
		$textboxDetails.Text = "Get-CsOnlineUser -ResultSize 2147483647 | Sort-Object DisplayName | Format-Table DisplayName "
		$TextboxResults.Text = Get-CsOnlineUser -ResultSize 2147483647 | Sort-Object DisplayName | Format-Table DisplayName -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getAllClientPoliciesToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting all client policies..."
		$textboxDetails.Text = "Get-CsClientPolicy "
		$TextboxResults.Text = Get-CsClientPolicy | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getExternalAccessPoliciesToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting external access policies..."
		$textboxDetails.Text = "Get-CsExternalAccessPolicy"
		$TextboxResults.Text = Get-CsExternalAccessPolicy | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getVoicePoliciesToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting voice policies..."
		$textboxDetails.Text = "Get-CsVoicePolicy"
		$TextboxResults.Text = Get-CsVoicePolicy | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getBroadcastMeetingPoliciesToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting broadcast meeting policies..."
		$textboxDetails.Text = "Get-CsBroadcastMeetingPolicy"
		$TextboxResults.Text = Get-CsBroadcastMeetingPolicy | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getBroadcaseMeetingConfigurationToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting broadcast meeting configuration..."
		$textboxDetails.Text = "Get-CsBroadcastMeetingConfiguration"
		$TextboxResults.Text = Get-CsBroadcastMeetingConfiguration | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getPushNotificationConfigurationToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Push Notification configuration..."
		$textboxDetails.Text = "Get-CsPushNotificationConfiguration"
		$TextboxResults.Text = Get-CsPushNotificationConfiguration | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getHostedVoicemailPolicyToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Hosted Voicemail policy..."
		$textboxDetails.Text = "Get-CsHostedVoicemailPolicy"
		$TextboxResults.Text = Get-CsHostedVoicemailPolicy | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}



###COMPLIANCE CENTER###

$newHoldCompliancePolicyToolStripMenuItem1_Click = {
	Do
	{
		Try
		{
			$NewRetentionPolicy = Read-Host "Enter the name for the new Retention Policy"
			If (!$NewRetentionPolicy)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No name was entered, please enter a valid name for the new Retention Policy ", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$textboxResults.Text = "Creating the $NewRetentionPolicy Retention Policy..."
				$textboxDetails.Text = "New-RetentionCompliancePolicy -Name $NewRetentionPolicy"
				$textboxResults.Text = New-RetentionCompliancePolicy -Name $NewRetentionPolicy | Sort-Object Name | Format-Table -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to create another Retention Compliance Policy?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getHoldCompliancePoliciesToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$textboxResults.Text = "Getting all Retention Policies..."
		$textboxDetails.Text = "Get-RetentionCompliancePolicy | Format-Table -AutoSize | Out-String"
		$textboxResults.Text = Get-RetentionCompliancePolicy | Sort-Object Name | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$removeARetentionCompliancePolicyToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$RemoveRetentionPolicy = Read-Host "Enter the policy name you want to remove"
			$RetentionPoliciesText = "Select the Retention Policy you want to remove"
			Show-SelectRetentionPolicy_psf
			$RemoveRetentionPolicy = $SelectRetentionPolicy_comboboxRetentionPolicies
			If (!$RemoveRetentionPolicy)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No policy was selected, please select a valid policy to delete", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$textboxResults.Text = "Removing the $RemoveRetentionPolicy retention policy..."
				$textboxDetails.Text = "Remove-RetentionCompliancePolicy -Identity $RemoveRetentionPolicy"
				Remove-RetentionCompliancePolicy -Identity $RemoveRetentionPolicy
				$textboxResults.Text = "Getting all retention policies..."
				$textboxResults.Text = Get-RetentionCompliancePolicy | Sort-Object Name | Format-Table -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to remove another Retention Policy?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getAllManagementRolesToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$textboxResults.Text = "Getting all management roles..."
		$textboxDetails.Text = "Get-ManagementRole | Sort-Object Name | Format-Table Name, RoleType -AutoSize"
		$textboxResults.Text = Get-ManagementRole | Sort-Object Name | Format-Table Name, RoleType -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

	#Data Loss Prevention Policies

$getDataLossPreventionPoliciesToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$textboxResults.Text = "Getting Data Loss Prevention Policies..."
		$textboxDetails.Text = "Get-DlpCompliancePolicy"
		$textboxResults.Text = Get-DlpCompliancePolicy | Sort-Object Name | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$newDataLossPreventionPolicyToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$NewDLP = Read-Host "Enter the name of the new Data Loss Prevention Policy"
			If (!$NewDLP)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No name was entered, please enter a valid name for the new Data Loss Prevention Policy", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$textboxResults.Text = "Creating the new $NewDLP Data Loss Prevention policy..."
				$textboxDetails.Text = "New-DlpCompliancePolicy -Name $NewDLP"
				$textboxResults.Text = New-DlpCompliancePolicy -Name $NewDLP | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to create another Data Loss Prevention Policy?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$removeDataLossPreventionPolicyToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$SelectDLPText = "Select the Data Loss Prevention Policy you want to remove"
			Show-SelectDLP_psf
			$RemoveDLP = $SelectDLP_comboboxDLP
			If (!$RemoveDLP)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Data Loss Prevention Policy was selected, please enter a valid Data Loss Prevention Policy", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Removing $RemoveDLP Data Loss Prevention policy..."
				$textboxDetails.Text = "Remove-DlpCompliancePolicy -Identity $RemoveDLP"
				Remove-DlpCompliancePolicy -Identity $RemoveDLP
				$TextboxResults.Text = "Getting list of Data Loss Prevention policies..."
				$textboxResults.Text = Get-DlpCompliancePolicy | Sort-Object Name | Format-Table -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to remove another Data Loss Prevention Policy?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

#Data Loss Compliance Rule

$getDataLossComplianceRulesToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$textboxResults.Text = "Getting Data Loss Compliance rules..."
		$textboxDetails.Text = "Get-DlpComplianceRule"
		$textboxResults.Text = Get-DlpComplianceRule | Sort-Object Name | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$newDataLossComplianceRuleToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$NewDLC = Read-Host "Enter the name of the new Data Loss Compliance Rule"
			If (!$NewDLC)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No name was entered, please enter a valid name for the new Data Loss Compliance Rule", "Error")
			}
			Else
			{
				$SelectDLPText = "Select the Data Loss Prevention Policy that will contain the DLP rule"
				Show-SelectDLP_psf
				$DLPolicy = $SelectDLP_comboboxDLP
				If (!$DLPolicy)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Data Loss Prevention Policy was selected, please select a valid Data Loss Prevention Policy for the new DLP rule", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$textboxResults.Text = "Creating the new $NewDLC Data Loss Compliance rule..."
					$textboxDetails.Text = "New-DlpComplianceRule -Name $NewDLC -Policy $DLPolicy"
					$textboxResults.Text = New-DlpComplianceRule -Name $NewDLC -Policy $DLPolicy | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to create another Data Loss Compliance Rule?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
}

$removeDataLossComplianceRuleToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$SelectDLCText = "Select the Data Loss Compliance Rule you want to remove"
			Show-SelectDataComplianceRule_psf
			$RemoveDLC = $SelectDataComplianceRule_comboboxDLC
			If (!$RemoveDLC)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Data Loss Compliance Rule was selected, please enter a valid Data Loss Compliance Rule", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$textboxResults.Text = "Removing the $RemoveDLC Data Loss Compliance rule..."
				$textboxDetails.Text = "Remove-DlpComplianceRule -Identity $RemoveDLC"
				Remove-DlpComplianceRule -Identity $RemoveDLC
				$textboxResults.Text = "Getting Data Loss Compliance rules..."
				$textboxResults.Text = Get-DlpComplianceRule | Sort-Object Name | Format-Table -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to remove another Data Loss Compliance Rule?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}


###eDISCOVERY###

	#Case Hold Policies

$getCaseHoldPoliciesToolStripMenuItem_Click = {
	Try
	{
		$ComplianceCaseText = "Select the eDiscovery case that is associated with the case hold policy"
		Show-SelectComplianceCase_psf
		$CCase = $SelectComplianceCase_comboboxComplianceCases
		If (!$CCase)
		{
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("No eDiscovery Case was selected, please select a valid eDiscovery Case", "Error")
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$textboxResults.Text = "Getting Case Hold Policies..."
			$textboxDetails.Text = "Get-CaseHoldPolicy -Case $CCase"
			$textboxResults.Text = Get-CaseHoldPolicy -Case $CCase | Sort-Object Name | Format-Table -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$newComplianceCaseToolStripMenuItem_Click = {
	Try
	{
		$NewCC = Read-Host "Enter the name for the new Compliance Case"
		If (!$NewCC)
		{
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("No Name was entered, please enter a valid name for the new Compliance Case", "Error")
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$textboxResults.Text = "Creating the $NewCC Compliance Case..."
			$textboxDetails.Text = "New-ComplianceCase -Name $NewCC"
			$textboxResults.Text = New-ComplianceCase -Name $NewCC | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$newCaseHoldPolicyToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$NewCaseHoldPolicy = Read-Host "Enter the name of the new Case Hold Policy"
			If (!$NewCaseHoldPolicy)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Name was entered, please enter a valid Name for the new Case Hold Policy", "Error")
			}
			Else
			{
				$ComplianceCaseText = "Select the eDiscovery Case that you want to associate with the $NewCaseHoldPolicy case hold policy"
				Show-SelectComplianceCase_psf
				$CCase = $SelectComplianceCase_comboboxComplianceCases
				If (!$CCase)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No eDiscovery Case was selected, please select a valid eDiscovery Case", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$textboxResults.Text = "Creating the new $NewCaseHoldPolicy Case Hold Policy..."
					$textboxDetails.Text = "New-CaseHoldPolicy -Name $NewCaseHoldPolicy -Case $CCase"
					$textboxResults.Text = New-CaseHoldPolicy -Name $NewCaseHoldPolicy -Case $CCase | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to create another Case Hold Policy?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$removeComplianceCaseToolStripMenuItem_Click = {
	Try
	{
		$ComplianceCaseText = "Select the Compliance Case you want to remove"
		Show-SelectComplianceCase_psf
		$RemoveCCase = $SelectComplianceCase_comboboxComplianceCases
		If (!$RemoveCCase)
		{
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("No Compliance Case was selected, please select a valid Compliance Case you want to remove", "Error")
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$textboxResults.Text = "Removing the Compliance Case $RemoveCCase..."
			$textboxDetails.Text = "Remove-ComplianceCase -Identity $RemoveCCase"
			$textboxResults.Text = Remove-ComplianceCase -Identity $RemoveCCase | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getComplianceCasesToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$textboxResults.Text = "Getting Compliance Cases..."
		$textboxDetails.Text = "Get-ComplianceCase"
		$textboxResults.Text = Get-ComplianceCase | Sort-Object Name | Format-Table Name -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getDetailedComplianceCaseInformationToolStripMenuItem_Click = {
	Try
	{
		$ComplianceCaseText = "Select the Compliance Case you want to view detailed information for"
		Show-SelectComplianceCase_psf
		$DetailedCCase = $SelectComplianceCase_comboboxComplianceCases
		If (!$DetailedCCase)
		{
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("No Compliance Case was selected, please select a valid Compliance Case", "Error")
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$textboxResults.Text = "Getting detailed information for $DetailedCCase..."
			$textboxDetails.Text = "Get-ComplianceCase -Identity $DetailedCCase | Format-List"
			$textboxResults.Text = Get-ComplianceCase -Identity $DetailedCCase | Format-List | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

#Case Admin

$addAEDiscoveryCaseAdminToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
			{
				$TextboxResults.Text = "Connecting to Exchange Online to get list of Users..."
				$exchangeSession = New-PSSession -Name MainAccount -ConfigurationName Microsoft.Exchange -ConnectionUri https://outlook.office365.com/powershell-liveid/ -Credential $global:o365credentials -Authentication Basic -AllowRedirection
				Import-PSSession $exchangeSession -AllowClobber
				$checkboxExchangeOnline.Checked = $true
				
				$TextboxResults.Text = "Caching Users..."
				$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter")
				Get-MSOLUser -All | Select-Object -ExpandProperty DisplayName | Out-File "$O365AdminTempFolder\names.txt"
				
				$SelectUsersFormText = "Select the User you want to add as a eDiscovery Case Admin"
				Show-SelectCachedDisplayNames_psf
				$NewECaseAdmin = $SelectCachedDisplayNames_comboboxNames
				If (!$NewECaseAdmin)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid User", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$textboxResults.Text = "Adding $NewECaseAdmin as a eDiscovery case admin..."
					$textboxDetails.Text = "Add-eDiscoveryCaseAdmin -User $NewECaseAdmin"
					Add-eDiscoveryCaseAdmin -User $NewECaseAdmin
					$TextboxResults.Text = "Getting eDiscovery Case Admins..."
					$TextboxResults.Text = Get-eDiscoveryCaseAdmin | Sort-Object Name | Format-Table Name -AutoSize | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
			ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
			{
				$TextboxResults.Text = "Connecting to Exchange Online to get list of Users..."
				$exchangeSession = New-PSSession -Name MainAccount -ConfigurationName Microsoft.Exchange -ConnectionUri https://outlook.office365.com/powershell-liveid/ -Credential $global:o365credentials -Authentication Basic -AllowRedirection
				Import-PSSession $exchangeSession -AllowClobber
				$checkboxExchangeOnline.Checked = $true
				
				$TextboxResults.Text = "Caching Users..."
				$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter")
				Get-MSOLUser -All -TenantId $PartnerComboBox.SelectedItem.TenantID | Select-Object -ExpandProperty DisplayName | Out-File "$O365AdminTempFolder\names.txt"
				
				$SelectUsersFormText = "Select the User you want to add as a eDiscovery Case Admin"
				Show-SelectCachedDisplayNames_psf
				$NewECaseAdmin = $SelectCachedDisplayNames_comboboxNames
				If (!$NewECaseAdmin)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid User", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$textboxResults.Text = "Adding $NewECaseAdmin as a eDiscovery case admin..."
					$textboxDetails.Text = "Add-eDiscoveryCaseAdmin -User $NewECaseAdmin"
					Add-eDiscoveryCaseAdmin -User $NewECaseAdmin
					$TextboxResults.Text = "Getting eDiscovery Case Admins..."
					$TextboxResults.Text = Get-eDiscoveryCaseAdmin | Sort-Object Name | Format-Table Name -AutoSize | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
			Else
			{
				$TextboxResults.Text = "Connecting to Exchange Online to get list of Users..."
				$exchangeSession = New-PSSession -Name MainAccount -ConfigurationName Microsoft.Exchange -ConnectionUri https://outlook.office365.com/powershell-liveid/ -Credential $global:o365credentials -Authentication Basic -AllowRedirection
				Import-PSSession $exchangeSession -AllowClobber
				$checkboxExchangeOnline.Checked = $true
				
				$TextboxResults.Text = "Caching Users..."
				$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter")
				Get-MSOLUser -All | Select-Object -ExpandProperty DisplayName | Out-File "$O365AdminTempFolder\names.txt"
				
				$SelectUsersFormText = "Select the User you want to add as a eDiscovery Case Admin"
				Show-SelectCachedDisplayNames_psf
				$NewECaseAdmin = $SelectCachedDisplayNames_comboboxNames
				If (!$NewECaseAdmin)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid User", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$textboxResults.Text = "Adding $NewECaseAdmin as a eDiscovery case admin..."
					$textboxDetails.Text = "Add-eDiscoveryCaseAdmin -User $NewECaseAdmin"
					Add-eDiscoveryCaseAdmin -User $NewECaseAdmin
					$TextboxResults.Text = "Getting eDiscovery Case Admins..."
					$TextboxResults.Text = Get-eDiscoveryCaseAdmin | Sort-Object Name | Format-Table Name -AutoSize | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to add another eDiscovery Case Admin?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getEDiscoveryCaseAdminsToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting eDiscovery Case Admins..."
		$textboxDetails.Text = "Get-eDiscoveryCaseAdmin"
		$TextboxResults.Text = Get-eDiscoveryCaseAdmin | Sort-Object Name | Format-Table Name -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}


###SHAREPOINT###

$getAllSiteCollectionsToolStripMenuItem_Click = {
	try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting list of sharepoint sites..."
		$textboxDetails.Text = "Get-SPOsite | Format-Table -Autosize"
		$TextboxResults.Text = Get-SPOSite | Format-Table -AutoSize | Out-string -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getAllDeletedSiteCollectionsToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting all deleted SharePoint sites..."
		$textboxDetails.Text = "Get-SPODeletedSite | Format-Table -Autosize"
		$TextboxResults.Text = Get-SPODeletedSite | Format-Table -AutoSize | Out-string -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getAllUsersForASiteToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$SPOSiteText = "Select the SharePoint Site you want to get all Users from"
			Show-SelectSPOSites_psf
			$site = $SelectSPOSites_comboboxSelectSPOSites
			If (!$site)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No SharePoint Site was selected, please select a valid SharePoint Site", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$textboxDetails.Text = "Get-SPOUser -Site $site | Format-Table -AutoSize"
				$TextboxResults.Text = "Getting all users from site $site..."
				$TextboxResults.Text = Get-SPOUser -Site $site | Format-Table -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get all Users for another SharePoint Site?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$testSharePointSiteToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$SPOSiteText = "Select the SharePoint Site you want to test"
			Show-SelectSPOSites_psf
			$site = $SelectSPOSites_comboboxSelectSPOSites
			If (!$site)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No SharePoint Site was selected, please select a valid SharePoint Site to test", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$textboxDetails.Text = "Test-SPOSite -identity $site"
				$TextboxResults.Text = "Testing $site..."
				$TextboxResults.Text = Test-SPOSite -identity $site | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to test another SharePoint Site?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$repairSharePointSiteToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$SPOSiteText = "Select the SharePoint Site you want to repair"
			Show-SelectSPOSites_psf
			$site = $SelectSPOSites_comboboxSelectSPOSites
			If (!$site)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No SharePoint Site was selected, please select a valid SharePoint Site to reapir", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$textboxDetails.Text = "Repair-SPOSite -identity $site"
				$TextboxResults.Text = "Repairing $site..."
				$TextboxResults.Text = Repair-SPOSite -identity $site | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to repair another SharePoint Site?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$removeSharePointSiteToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$SPOSiteText = "Select the SharePoint Site you want to remove"
			Show-SelectSPOSites_psf
			$site = $SelectSPOSites_comboboxSelectSPOSites
			If (!$site)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No SharePoint Site was selected, please select a valid SharePoint Site to delete", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$textboxDetails.Text = "Remove-SPOSite -identity $site"
				$TextboxResults.Text = "Removing $site..."
				$TextboxResults.Text = Remove-SPOSite -identity $site | Out-String -Width 2147483647
				$TextboxResults.Text = "Getting all deleted SharePoint sites..."
				$TextboxResults.Text = Get-SPODeletedSite | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to remove another SharePoint Site?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getDeletedSharePointSitesToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$textboxDetails.Text = "Get-SPODeletedSite"
		$TextboxResults.Text = "Getting all deleted SharePoint sites..."
		$TextboxResults.Text = Get-SPODeletedSite | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$restoreDeletedSharePointSiteToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$DeletedSitesText = "Please select the SharePoint Site you want to restore"
			Show-SelectDeletedSPOSites_psf
			$RestoreSite = $SelectDeletedSPOSites_comboboxDeletedSites
			If (!$RestoreSite)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No SharePoint Site was selected, please select a valid SharePoint Site to recover", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$textboxDetails.Text = "Restore-SPODeletedSite -identity $RestoreSite"
				$TextboxResults.Text = "Restoring $RestoreSite..."
				$TextboxResults.Text = Restore-SPODeletedSite -identity $RestoreSite | Out-String -Width 2147483647
				$TextboxResults.Text = "Getting all SharePoint sites..."
				$TextboxResults.Text = Get-SPOSite | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to restore another SharePoint Site?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$newSharePointSiteToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$NewSPOSite = Read-Host "Please enter the full URL for the new SharePoint Site"
			If (!$NewSPOSite)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No URL was entered, please enter a valid SharePoint URL", "Error")
			}
			Else
			{
				$SelectUsersFormText = "Select the user you want to be the owner of the new site"
				Show-SelectUsersForm_psf
				$SPOSiteOwner = $SelectUsersForm_comboboxUsers
				If (!$SPOSiteOwner)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid user", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$textboxDetails.Text = "New-SPOSite -url $NewSPOSite -Owner $SPOSiteOwner"
					$TextboxResults.Text = "Creating a new SharePoint site $NewSPOSite..."
					$TextboxResults.Text = New-SPOSite -url $NewSPOSite -Owner $SPOSiteOwner -StorageQuota 1048576 | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to create another SharePoint Site?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
}



###FILE###

#About

$aboutToolStripMenuItem_Click = {
	$TextboxResults.Text = "                                
M365 Admin Center Tools 


Version: $Version
Version Release Date: $UpdateDate
Website: https://www.o365admin.center
FAQ: https://www.o365admin.center/FAQ"
	
}

#Pre-Reqs

$prerequisitesToolStripMenuItem_Click = {
	Try
	{
		Start-Process -FilePath https://o365admin.center/prerequisites/
	}
	Catch
	{
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

#Changelog

$changelogToolStripMenuItem_Click = {
	Try
	{
		Start-Process -FilePath http://o365admin.center/changelog/
	}
	Catch
	{
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

#Context Menu

$clearScreenToolStripMenuItem1_Click = {
	$TextboxResults.Text = ""
}

$selectAllToolStripMenuItem_Click = {
	$TextboxResults.SelectAll()
}

$copyToolStripMenuItem_Click = {
	[System.Windows.Forms.Clipboard]::SetText($TextboxResults.SelectedText.Trim())
}

$cutToolStripMenuItem_Click = {
	$TextboxResults.SelectedText = ""
}

$pasteToolStripMenuItem_Click = {
	$PastedItem = [System.Windows.Forms.Clipboard]::GetText()
	$insertText = $PastedItem;
	$selectionIndex = $TextboxResults.SelectionStart;
	$TextboxResults.Text = $TextboxResults.Text.Insert($selectionIndex, $insertText);
	$TextboxResults.SelectionStart = $selectionIndex + $insertText.Length;
	
}

$cutToolStripMenuItem1_Click = {
	$TextboxResults.SelectedText = ""	
}

$copyToolStripMenuItem1_Click = {
	[System.Windows.Forms.Clipboard]::SetText($TextboxResults.SelectedText.Trim())	
}

$pasteToolStripMenuItem1_Click = {
	$PastedItem = [System.Windows.Forms.Clipboard]::GetText()
	$insertText = $PastedItem;
	$selectionIndex = $TextboxResults.SelectionStart;
	$TextboxResults.Text = $TextboxResults.Text.Insert($selectionIndex, $insertText);
	$TextboxResults.SelectionStart = $selectionIndex + $insertText.Length;
}

$selectAllToolStripMenuItem1_Click = {
	$TextboxResults.SelectAll()	
}

$clearScreenToolStripMenuItem2_Click = {
	$TextboxResults.Text = ""
}

$printToolStripMenuItem1_Click = {
	$Printdialog = New-Object System.Windows.Forms.PrintDialog
	$Printdialog.ShowHelp = $False
	$Printdialog.AllowSelection = $true
	$Printdialog.AllowPrintToFile = $true
	$Printdialog.AllowSomePages = $false
	$Printdialog.ShowNetwork = $true
	$result = $Printdialog.ShowDialog(); $result
	If ($result -eq 'OK')
	{
		$TextboxResults.Text | Out-Printer $Printdialog.PrinterSettings.PrinterName
	}
}

$saveAsToolStripMenuItem_Click = {
	$savedialog = New-Object windows.forms.savefiledialog
	$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
	$savedialog.title = "Export to File"
	$savedialog.filter = ".doc|*.doc|.txt|*.txt|.xls|*.xls"
	$savedialog.ShowHelp = $True
	$result = $savedialog.ShowDialog(); $result
	if ($result -eq "OK")
	{
		$TextboxResults.Text | Out-File -Encoding Default $savedialog.filename
	}
	
}



###JUNK ITEMS###

$TextboxResults_TextChanged = {
	
}

$menustripExchange_ItemClicked = [System.Windows.Forms.ToolStripItemClickedEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.ToolStripItemClickedEventArgs]
}


$tabpageComplianceCenter_Click={
	#ignore
	
}

$checkboxSharepoint_CheckedChanged={
	#ignore
	
}

$checkboxExchangeOnline_CheckedChanged={
	#ignore
	
}

$checkboxComplianceCenter_CheckedChanged={
	#ignore
	
}

$checkboxSkypeForBusiness_CheckedChanged={
	#ignore
	
}

$organizationCustomizationToolStripMenuItem_Click={
	#ignore
	
}

$getMailMalwareReportToolStripMenuItem_Click={
	#ignore
	
}

$securityGroupsToolStripMenuItem_Click={
	#ignore
	
}

$aliasAddressesToolStripMenuItem_Click={
	#ignore
	
}

$checkForUpdatesToolStripMenuItem1_Click = {
	Try
	{
		#Get reg-key to see if update should prompt
		$UpdateCheck = Get-ItemProperty 'HKCU:\Software\O365 Admin Center' -Name UpdateCheck | Select-Object -ExpandProperty UpdateCheck
		
		If ($UpdateCheck -eq 0)
		{
			#Check to see if there is a new version available 
			$PublicVersion = Invoke-WebRequest -Uri https://www.o365admin.center/update.txt | Select-Object -ExpandProperty content
			#If local version is less than the public version then prompt for update
			If ($Version -lt $publicVersion)
			{
				Show-UpdateCheck_psf
			}
			#If Publicversion equals nothing then ignore, this is if the website is down or the user does not have internet
			elseif ($PublicVersion = $Null)
			{
			}
			Else
			{
				#Create the pop-up message
				Add-Type -AssemblyName System.Windows.Forms
				[System.Windows.Forms.MessageBox]::Show('You are up to date!', 'O365 Admin Center Updates', 'OK', 'Info')
			}
		}
		elseif ($UpdateCheck -eq 1)
		{
			$InformationText = "Updates are set to never be checked. Please enable updates"
			Show-Info_OK_psf
		}
		
	}
	Catch
	{
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$neverCheckForUpdatesToolStripMenuItem_Click = {
	Try
	{
		#Sets the update check key
		Get-Item 'HKCU:\Software\O365 Admin Center' -Force | New-ItemProperty -Name UpdateCheck -Value 1 -Force | Out-Null
		$InformationText = "Updates have been disabled"
		Show-Info_OK_psf
	}
	Catch
	{
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$enableUpdatesToolStripMenuItem_Click = {
	Try
	{
		#Sets the update check key
		Get-Item 'HKCU:\Software\O365 Admin Center' -Force | New-ItemProperty -Name UpdateCheck -Value 0 -Force | Out-Null
		
		$InformationText = "Updates have been enabled"
		Show-Info_OK_psf
	}
	Catch
	{
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getUsersWithInPlaceArchiveToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting all users with an archive..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize Unlimited -Filter { ArchiveStatus -NE 'None' -AND RecipientTypeDetails -eq 'UserMailbox' }"
		$TextboxResults.Text = Get-Mailbox -ResultSize Unlimited | Where-Object { $_.ArchiveStatus -NE 'None'} | Sort-Object Name | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
	
}

$getUsersWithoutInPlaceArchiveToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting all users without an archive..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize Unlimited -Filter { ArchiveStatus -EQ 'None' -AND RecipientTypeDetails -eq 'UserMailbox' }"
		$TextboxResults.Text = Get-Mailbox -ResultSize Unlimited | Where-Object { $_.ArchiveStatus -EQ 'None'} | Sort-Object Name | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
	
}

$enableInPlaceArchiveForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$SelectUsersFormText = "Select the User you want to enable In-Place Archive for"
			Show-SelectCachedDisplayNames_psf
			$EnableInPlaceArchiveUser = $SelectCachedDisplayNames_comboboxNames
			If (!$EnableInPlaceArchiveUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid User", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Enabling In-Place Archive for $EnableInPlaceArchiveUser..."
				$textboxDetails.Text = "Enable-Mailbox -Identity $EnableInPlaceArchiveUser -Archive"
				Enable-Mailbox -Identity $EnableInPlaceArchiveUser -Archive | Out-String -Width 2147483647
				$TextboxResults.Text = "Getting all users with an Archive enabled..."
				$TextboxResults.Text = Get-Mailbox -ResultSize Unlimited | Where-Object { $_.ArchiveStatus -NE 'None' } | Sort-Object Name | Format-Table -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to enable In-Place Archiving for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$submitAIssueToolStripMenuItem_Click = {
	Try
	{
		Start-Process -FilePath mailto:issues@o365admin.center
	}
	Catch
	{
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$submitAFeatureRequestToolStripMenuItem_Click = {
	Try
	{
		Start-Process -FilePath mailto:request@o365admin.center
	}
	Catch
	{
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$disableInPlaceArchiveForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$SelectUsersFormText = "Select the User you want to disable In-Place Archive for"
			Show-SelectCachedDisplayNames_psf
			#$DisableInPlaceArchiveUser = $SelectCachedUserPrincipalName_comboboxUPN
			$DisableInPlaceArchiveUser = $SelectCachedDisplayNames_comboboxNames
			If (!$DisableInPlaceArchiveUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Disabling In-Place Archive for $DisableInPlaceArchiveUser..."
				$textboxDetails.Text = "Disable-Mailbox -Identity $DisableInPlaceArchiveUser -Archive"
				Disable-Mailbox -Identity $DisableInPlaceArchiveUser -Archive | Out-String -Width 2147483647
				$TextboxResults.Text = "Getting all users without an Archive..."
				$TextboxResults.Text = Get-Mailbox -ResultSize Unlimited | Where-Object { $_.ArchiveStatus -EQ 'None' } | Sort-Object Name | Format-Table -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to disable In-Place Archiving for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getAllPublicFoldersToolStripMenuItem_Click = {
	$CachedPF = ("$TempDir" + "\O365AdminCenter" + "\pf.txt")
	$TempDir = $env:temp
	Try
	{
		If ((Test-Path $CachedPF) -eq $false)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Caching Public Folders..."
			#$parentpath = Get-PublicFolder -ResultSize Unlimited -Identity "\" -Recurse | Select-Object -ExpandProperty ParentPath
			#$names = Get-PublicFolder -ResultSize Unlimited -Identity "\" -Recurse | Select-Object -ExpandProperty Name
			#$firstName = @($parentpath)
			#$lastName = @($names)
			#0..($firstName.Count - 1) | ForEach-Object { $fullName += @("$($firstName[$_])\$($lastName[$_])") }
			#$fullname | Out-File $CachedPF 
			(Get-PublicFolder -ResultSize Unlimited -Identity "\" -Recurse).Identity | Out-File $CachedPF
			
			$TextboxResults.Text = "Getting all Public Folders..."
			$textboxDetails.Text = "Get-PublicFolder -Identity '\' -Recurse"
			$TextboxResults.Text = Get-PublicFolder -ResultSize Unlimited -Identity "\" -Recurse | Select-Object Name, ParentPath |  Sort-Object Name | Format-Table -AutoSize | Out-String -Width 2147483647
			#$parentpath = Get-PublicFolder -ResultSize Unlimited -Identity "\" -Recurse | Select-Object -ExpandProperty ParentPath
			#$names = Get-PublicFolder -ResultSize Unlimited -Identity "\" -Recurse | Select-Object -ExpandProperty Name
			#$firstName = @($parentpath)
			#$lastName = @($names)
			#0..($firstName.Count - 1) | ForEach-Object { $fullName += @("$($firstName[$_])\$($lastName[$_])") }
			#$TextboxResults.Text = $fullname | Out-String 
			
			$FormO365AdministrationCenter.Cursor = 'Default'
			
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all Public Folders..."
			$textboxDetails.Text = "Get-PublicFolder -Identity '\' -Recurse"
			$TextboxResults.Text = Get-PublicFolder -ResultSize Unlimited -Identity "\" -Recurse | Select-Object Name, ParentPath | Sort-Object Name | Format-Table -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$contextmenustrip1_Opening=[System.ComponentModel.CancelEventHandler]{
	
}

$statisticsToolStripMenuItem_Click = {
	Do
	{
		$TempDir = $env:temp
		$CachedPF = ("$TempDir" + "\O365AdminCenter" + "\pf.txt")
		Try
		{
			If ((Test-Path $CachedPF) -eq $false)
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Caching Public Folders..."
				#$parentpath = Get-PublicFolder -ResultSize Unlimited -Identity "\" -Recurse | Select-Object -ExpandProperty ParentPath
				#$names = Get-PublicFolder -ResultSize Unlimited -Identity "\" -Recurse | Select-Object -ExpandProperty Name
				#$firstName = @($parentpath)
				#$lastName = @($names)
				#0..($firstName.Count - 1) | ForEach-Object { $fullName += @("$($firstName[$_])\$($lastName[$_])") }
				#$fullname | Out-File $CachedPF
				(Get-PublicFolder -ResultSize Unlimited -Identity "\" -Recurse).Identity | Out-File $CachedPF
				
				$PFText = "Please select the Public Folder you want to view statistics for"
				Show-SelectCachedPublicFolders_psf
				$PFStats = $SelectCachedPublicFolders_comboboxPF
				If (!$PFStats)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Public Folder was selected, please select a valid Public Folder", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Getting Public Folder statistics for $PFStats.."
					$textboxDetails.Text = "Get-PublicFolderItemStatistics -Identity $PFStats"
					$TextboxResults.Text = Get-PublicFolderItemStatistics -Identity $PFStats | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
			Else
			{
				
				$PFText = "Please select the Public Folder you want to view statistics for"
				Show-SelectCachedPublicFolders_psf
				$PFStats = $SelectCachedPublicFolders_comboboxPF
				If (!$PFStats)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Public Folder was selected, please select a valid Public Folder", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Getting Public Folder statistics for $PFStats.."
					$textboxDetails.Text = "Get-PublicFolderItemStatistics -Identity $PFStats"
					$TextboxResults.Text = Get-PublicFolderItemStatistics -Identity $PFStats | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
			
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get information on another Public Folder?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getPublicFoldersThatAreMailEnabledToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Mail Enabled Public Folders..."
		$textboxDetails.Text = "Get-PublicFolder -ResultSize Unlimited -Identity '\' -Recurse | Where-Object { `$_.MailEnabled -eq `$True } "
		$TextboxResults.Text = Get-PublicFolder -ResultSize Unlimited -Identity "\" -Recurse | Where-Object { $_.MailEnabled -eq $True } | Select-Object Name, ParentPath, MailEnabled | Sort-Object Name | Format-Table -Autosize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getPublicFoldersThatAreNotMailEnabledToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Mail Enabled Public Folders..."
		$textboxDetails.Text = "Get-PublicFolder -ResultSize Unlimited -Identity '\' -Recurse | Where-Object { `$_.MailEnabled -eq `$False } "
		$TextboxResults.Text = Get-PublicFolder -ResultSize Unlimited -Identity "\" -Recurse | Where-Object { $_.MailEnabled -eq $False } | Select-Object Name, ParentPath, MailEnabled | Sort-Object Name | Format-Table -Autosize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$ascendingToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Public Folders Sizes..."
		$textboxDetails.Text = "Get-PublicFolder -ResultSize Unlimited -Identity '\' -Recurse | Select-Object Name, FolderSize | Sort-Object FolderSize"
		$TextboxResults.Text = Get-PublicFolder -ResultSize Unlimited -Identity "\" -Recurse | Select-Object Name, FolderSize | Sort-Object FolderSize | Format-Table -Autosize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$descendingToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Public Folders Sizes..."
		$textboxDetails.Text = "Get-PublicFolder -ResultSize Unlimited -Identity '\' -Recurse | Select-Object Name, FolderSize | Sort-Object FolderSize -Descending"
		$TextboxResults.Text = Get-PublicFolder -ResultSize Unlimited -Identity "\" -Recurse | Select-Object Name, FolderSize | Sort-Object FolderSize -Descending | Format-Table -Autosize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$alphabeticallyToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Public Folders Sizes..."
		$textboxDetails.Text = "Get-PublicFolder -ResultSize Unlimited -Identity '\' -Recurse | Select-Object Name, FolderSize | Sort-Object Name"
		$TextboxResults.Text = Get-PublicFolder -ResultSize Unlimited -Identity "\" -Recurse | Select-Object Name, FolderSize | Sort-Object Name | Format-Table -Autosize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getAllPublicFoldersWithSubfoldersToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Public Folders with Subfolders..."
		$textboxDetails.Text = "Get-PublicFolder -ResultSize Unlimited -Identity '\'' -Recurse | Where-Object { `$_.HasSubFolders -eq `$True }"
		$TextboxResults.Text = Get-PublicFolder -ResultSize Unlimited -Identity "\" -Recurse | Where-Object { $_.HasSubFolders -eq $True } | Select-Object Name, ParentPath, HasSubFolders | Sort-Object Name | Format-Table -Autosize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getAllPublicFoldersWithoutSubfoldersToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Public Folders with Subfolders..."
		$textboxDetails.Text = "Get-PublicFolder -ResultSize Unlimited -Identity '\'' -Recurse | Where-Object { `$_.HasSubFolders -eq `$False }"
		$TextboxResults.Text = Get-PublicFolder -ResultSize Unlimited -Identity "\" -Recurse | Where-Object { $_.HasSubFolders -eq $False } | Select-Object Name, ParentPath, HasSubFolders | Sort-Object Name | Format-Table -Autosize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getAllPublicFolderQuotaToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting All Public Folder Quotas..."
		$textboxDetails.Text = "Get-PublicFolder -ResultSize Unlimited -Identity '\' -Recurse | Select-Object Name, ProhibitPostQuota, IssueWarningQuota, MaxItemSize "
		$TextboxResults.Text = Get-PublicFolder -ResultSize Unlimited -Identity "\" -Recurse | Select-Object Name, ProhibitPostQuota, IssueWarningQuota, MaxItemSize | Sort-Object Name | Format-Table -Autosize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getIssueWarningQuotaToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting All Public Folder Quotas..."
		$textboxDetails.Text = "Get-PublicFolder -ResultSize Unlimited -Identity '\' -Recurse | Select-Object Name, IssueWarningQuota "
		$TextboxResults.Text = Get-PublicFolder -ResultSize Unlimited -Identity "\" -Recurse | Select-Object Name, IssueWarningQuota | Sort-Object Name | Format-Table -Autosize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getMaxItemSizeQuotaToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting All Public Folder Quotas..."
		$textboxDetails.Text = "Get-PublicFolder -ResultSize Unlimited -Identity '\' -Recurse | Select-Object Name, MaxItemSize "
		$TextboxResults.Text = Get-PublicFolder -ResultSize Unlimited -Identity "\" -Recurse | Select-Object Name, MaxItemSize | Sort-Object Name | Format-Table -Autosize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getProhibitPostQuotaToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting All Public Folder Quotas..."
		$textboxDetails.Text = "Get-PublicFolder -ResultSize Unlimited -Identity '\' -Recurse | Select-Object Name, ProhibitPostQuota"
		$TextboxResults.Text = Get-PublicFolder -ResultSize Unlimited -Identity "\" -Recurse | Select-Object Name, ProhibitPostQuota| Sort-Object Name | Format-Table -Autosize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getDetailedPublicFolderReportToCSVToolStripMenuItem_Click={
	Try
	{
		$savedialog = New-Object windows.forms.savefiledialog
		$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
		$savedialog.title = "Export to File"
		$savedialog.filter = ".csv|*.csv"
		$savedialog.ShowHelp = $True
		$result = $savedialog.ShowDialog(); $result
		if ($result -eq "OK")
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$OutputFile = $savedialog.filename
			$textboxDetails.Text = "Get-PublicFolder -ResultSize Unlimited -Identity '\' -Recurse"
			$TextboxResults.Text = "Getting Detailed Public Folder Report..."
			Get-PublicFolder -ResultSize Unlimited -Identity '\' -Recurse | Export-Csv $OutputFile -NoTypeInformation
			$TextboxResults.Text = ""
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$checkForUpdatesToolStripMenuItem_Click={
	#Leave blank this is the parent button
	
}

$getMailTrafficTopReportToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Mail Traffic Top Report..."
		$textboxDetails.Text = "Get-MailTrafficTopReport | Sort-Object 'Direction' | Format-Table -AutoSize"
		$TextboxResults.Text = Get-MailTrafficTopReport | Sort-Object "Direction" | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getStaleMailboxReportToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Stale Mailbox Report..."
		$textboxDetails.Text = "Get-StaleMailboxReport | Format-Table -AutoSize"
		$TextboxResults.Text = Get-StaleMailboxReport | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
	
}

$getStaleMailboxDetailReportToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Stale Mailbox Detail Report..."
		$textboxDetails.Text = "Get-StaleMailboxDetailReport | Format-Table -AutoSize"
		$TextboxResults.Text = Get-StaleMailboxDetailReport | Sort-Object UserName | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$exportMailDetailedSpamReportToCSVToolStripMenuItem_Click={
	Try
	{
		$savedialog = New-Object windows.forms.savefiledialog
		$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
		$savedialog.title = "Export to File"
		$savedialog.filter = ".csv|*.csv"
		$savedialog.ShowHelp = $True
		$result = $savedialog.ShowDialog(); $result
		if ($result -eq "OK")
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$OutputFile = $savedialog.filename
			$textboxDetails.Text = "Get-MailDetailSpamReport"
			$TextboxResults.Text = "Getting Detailed Mail Spam Report..."
			Get-MailDetailSpamReport | Export-Csv $OutputFile -NoTypeInformation
			$TextboxResults.Text = ""
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getDetailedMailboxUsageReportToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Detailed Mailbox Usage Report..."
		$textboxDetails.Text = "Get-MailboxUsageDetailReport | Select-Object Username, MailboxSize, CurrentMailboxSize, PercentUsed, MailboxPlan, IsInactive |  Sort-Object PercentUsed | Format-Table -AutoSize"
		$TextboxResults.Text = Get-MailboxUsageDetailReport | Select-Object Username, MailboxSize, CurrentMailboxSize, PercentUsed, MailboxPlan, IsInactive | Sort-Object PercentUsed | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$exportDetailedMailboxUsageReportToCSVToolStripMenuItem_Click={
	Try
	{
		$savedialog = New-Object windows.forms.savefiledialog
		$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
		$savedialog.title = "Export to File"
		$savedialog.filter = ".csv|*.csv"
		$savedialog.ShowHelp = $True
		$result = $savedialog.ShowDialog(); $result
		if ($result -eq "OK")
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$OutputFile = $savedialog.filename
			$TextboxResults.Text = "Getting Detailed Mailbox Usage Report..."
			$textboxDetails.Text = "Get-MailboxUsageDetailReport"
			Get-MailboxUsageDetailReport | Export-Csv $OutputFile -NoTypeInformation
			$TextboxResults.Text = ""
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getMailboxUsageReportToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Mailbox Usage Report..."
		$textboxDetails.Text = "Get-MailboxUsageReport | Format-Table -AutoSize"
		$TextboxResults.Text = Get-MailboxUsageReport | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getMailTrafficPolicyReportToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Mail Traffic Policy Report..."
		$textboxDetails.Text = "Get-MailTrafficPolicyReport | Format-Table -AutoSize"
		$TextboxResults.Text = Get-MailTrafficPolicyReport | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$testToolStripMenuItem1_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$textboxDetails.Text = ""
		$Datacenter = @{ }
		$Datacenter["CP"] = @("LAM", "Brazil")
		$Datacenter["GR"] = @("LAM", "Brazil")
		$Datacenter["HK"] = @("APC", "Hong Kong")
		$Datacenter["SI"] = @("APC", "Singapore")
		$Datacenter["SG"] = @("APC", "Singapore")
		$Datacenter["KA"] = @("JPN", "Japan")
		$Datacenter["OS"] = @("JPN", "Japan")
		$Datacenter["TY"] = @("JPN", "Japan")
		$Datacenter["AM"] = @("EUR", "Amsterdam, Netherlands")
		$Datacenter["DB"] = @("EUR", "Dublin, Ireland")
		$Datacenter["HE"] = @("EUR", "Finland")
		$Datacenter["VI"] = @("EUR", "Austria")
		$Datacenter["BL"] = @("NAM", "Virginia, USA")
		$Datacenter["SN"] = @("NAM", "San Antonio, Texas, USA")
		$Datacenter["BN"] = @("NAM", "Virginia, USA")
		$Datacenter["DM"] = @("NAM", "Des Moines, Iowa, USA")
		$Datacenter["BY"] = @("NAM", "San Francisco, California, USA")
		$Datacenter["CY"] = @("NAM", "Cheyenne, Wyoming, USA")
		$Datacenter["CO"] = @("NAM", "Quincy, Washington, USA")
		$Datacenter["MW"] = @("NAM", "Quincy, Washington, USA")
		$Datacenter["CH"] = @("NAM", "Chicago, Illinois, USA")
		$Datacenter["ME"] = @("APC", "Melbourne, Victoria, Australia")
		$Datacenter["SY"] = @("APC", "Sydney, New South Wales, Australia")
		$Datacenter["KL"] = @("APC", "Kuala Lumpur, Malaysia")
		$Datacenter["PS"] = @("APC", "Busan, South Korea")
		$Datacenter["YQ"] = @("CAN", "Quebec City, Canada")
		$Datacenter["YT"] = @("CAN", "Toronto, Canada")
		$Datacenter["MM"] = @("GBR", "Durham, England")
		$Datacenter["LO"] = @("GBR", "London, England")
		
		
		Write-Host
		$TextboxResults.Text = "Getting Mailbox Information..."
		
		$Mailboxes = Get-Mailbox -ResultSize Unlimited | Where-Object { $_.RecipientTypeDetails -ne "DiscoveryMailbox" }
		
		$ServerCount = ($Mailboxes | Group-Object { $_.ServerName }).count
		
		$DatabaseCount = ($Mailboxes | Group-Object { $_.Database }).count
		
		$Mailboxes = $Mailboxes | Group-Object { $_.ServerName.SubString(0, 2) } | Select-Object @{ Name = "Datacenter"; Expression = { $_.Name } }, Count
		
		$Locations = @()
		
		# Not pretty error handling but allows counts to add properly when a datacenter location could not be identified from the table
		$E = $ErrorActionPreference
		$ErrorActionPreference = "SilentlyContinue"
		
		ForEach ($Mailbox in $Mailboxes)
		{
			$Object = New-Object -TypeName PSObject
			$Object | Add-Member -Name 'Datacenter' -MemberType NoteProperty -Value $Mailbox.Datacenter
			$Object | Add-Member -Name 'Region' -MemberType NoteProperty -Value $Datacenter[$Mailbox.Datacenter][0]
			$Object | Add-Member -Name 'Location' -MemberType NoteProperty -Value $Datacenter[$Mailbox.Datacenter][1]
			$Object | Add-Member -Name 'Count' -MemberType NoteProperty -Value $Mailbox.Count
			$Locations += $Object
		}
		
		$ErrorActionPreference = $E
		
		$TotalMailboxes = ($Locations | Measure-Object Count -Sum).sum
		
		$LocationsConsolidated = $Locations | Group-Object Location | ForEach-Object {
			New-Object PSObject -Property @{
				Location = $_.Name
				Mailboxes = ("{0,9:N0}" -f ($_.Group | Measure-Object Count -Sum).Sum)
			}
		} | Sort-Object Count -Descending
		
		$textboxresults.text = $LocationsConsolidated | Select-Object Location, Mailboxes | Sort-Object Mailboxes | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getTotalMailboxCountToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Mailbox Count..."
		$textboxDetails.Text = "(Get-Mailbox -ResultSize Unlimited).Count"
		$TextboxResults.Text = (Get-Mailbox -ResultSize Unlimited).Count | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$viewAllUsersFocusedInboxStatusToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$mbxs = (Get-Mailbox).userprincipalname
		$TextboxResults.Text = "Getting Focused Inbox status for all users...(this may take some time)"
		$textboxDetails.Text = "`$mbxs = (Get-Mailbox).userprincipalname
foreach (`$mbx in `$mbxs) { Get-FocusedInbox -Identity `$mbx }"
		$results = foreach ($mbx in $mbxs) { Get-FocusedInbox -Identity $mbx }
		$TextboxResults.Text = $results | Sort-Object MailboxIdentity | Format-Table MailboxIdentity, FocusedInboxOn -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getTenantFocusedInboxStatusToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Focus Inbox status..."
		$textboxDetails.Text = "Get-OrganizationConfig | Format-Table FocusedInboxOn -AutoSize"
		$TextboxResults.Text = Get-OrganizationConfig | Format-Table FocusedInboxOn -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$enableFocusedInboxForCompanyToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Enabling Focus Inbox..."
		$textboxDetails.Text = "Set-OrganizationConfig -FocusedInboxOn `$True"
		Set-OrganizationConfig -FocusedInboxOn $True
		$TextboxResults.Text = "Getting Focus Inbox status..."
		$TextboxResults.Text = Get-OrganizationConfig | Format-Table FocusedInboxOn -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$disableFocusedInboxForCompanyToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Disabling Focus Inbox..."
		$textboxDetails.Text = "Set-OrganizationConfig -FocusedInboxOn `$False"
		Set-OrganizationConfig -FocusedInboxOn $False
		$TextboxResults.Text = "Getting Focus Inbox status..."
		$TextboxResults.Text = Get-OrganizationConfig | Format-Table FocusedInboxOn -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$disableFocusedInboxForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$SelectUsersFormText = "Select the User you want to disable Focused Inbox for"
			Show-SelectCachedUserPrincipalName_psf
			$FocusedInboxOff = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$FocusedInboxOff)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid User", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Disabling Focused Inbox for $FocusedInboxOff "
				$textboxDetails.Text = "Set-FocusedInbox -Identity $FocusedInboxOff -FocusedInboxOn `$False"
				$TextboxResults.Text = Set-FocusedInbox -Identity $FocusedInboxOff -FocusedInboxOn $False | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to disable Focused Inbox for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$enableFocusedInboxForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$SelectUsersFormText = "Select the User you want to enable Focused Inbox for"
			Show-SelectCachedUserPrincipalName_psf
			$FocusedInboxOff = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$FocusedInboxOff)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid User", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Enabling Focused Inbox for $FocusedInboxOff "
				$TextboxResults.Text = Set-FocusedInbox -Identity $FocusedInboxOff -FocusedInboxOn $True | Out-String -Width 2147483647
				$textboxDetails.Text = "Set-FocusedInbox -Identity $FocusedInboxOff -FocusedInboxOn `$True"
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to enable Focused Inbox for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$disableFocusedInboxForAllUsersToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Disabling Focused Inbox for all users..."
		$TextboxResults.Text = Get-Mailbox | Where-Object { $_.RecipientTypeDetails -ne "SharedMailbox" } | Set-FocusedInbox -FocusedInboxOn $False | Out-String -Width 2147483647
		$textboxDetails.Text = "Get-Mailbox | Where-Object { `$_.RecipientTypeDetails -ne 'SharedMailbox' } | Set-FocusedInbox -FocusedInboxOn `$False"
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
	
}

$enableFocusedInboxForAllUsersToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Disabling Focused Inbox for all users..."
		$TextboxResults.Text = Get-Mailbox | Where-Object { $_.RecipientTypeDetails -ne "SharedMailbox" } | Set-FocusedInbox -FocusedInboxOn $True | Out-String -Width 2147483647
		$textboxDetails.Text = "Get-Mailbox | Where-Object { `$_.RecipientTypeDetails -ne 'SharedMailbox' } | Set-FocusedInbox -FocusedInboxOn `$True"
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getAUsersFocusedInboxStatusToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$SelectUsersFormText = "Select the User you want get Focused Inbox status for"
			Show-SelectCachedUserPrincipalName_psf
			$FocusedInbox = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$FocusedInbox)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid User", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting Focused Inbox status for $FocusedInbox"
				$TextboxResults.Text = Get-FocusedInbox -Identity $FocusedInbox | Out-String -Width 2147483647
				$textboxDetails.Text = "Get-FocusedInbox -Identity $FocusedInbox"
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get another Users Focused Inbox status?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
}

$getUserCountToolStripMenuItem_Click={
	Try
	{
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting User Count..."
			$textboxDetails.Text = "(Get-MsolUser -All).count"
			$TextboxResults.Text = (Get-MsolUser -All).count | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting User Count..."
			$textboxDetails.Text = "(Get-MsolUser -All).count"
			$TextboxResults.Text = (Get-MsolUser -TenantId $PartnerComboBox.SelectedItem.TenantID -All).count | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting User Count..."
			$textboxDetails.Text = "(Get-MsolUser -All).count"
			$TextboxResults.Text = (Get-MsolUser -All).count | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getMailboxCountToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Mailbox Count..."
		$textboxDetails.Text = "(Get-Mailbox -resultsize unlimited).count"
		$TextboxResults.Text = (Get-Mailbox -resultsize unlimited).count | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getSharedMailboxCountToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Shared Mailbox Count..."
		$textboxDetails.Text = "(Get-Mailbox -RecipientTypeDetails SharedMailbox -ResultSize Unlimited).count"
		$TextboxResults.Text = (Get-Mailbox -RecipientTypeDetails SharedMailbox -ResultSize Unlimited).count | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getDistributionGroupCountToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Distribution Group Count..."
		$textboxDetails.Text = "(Get-DistributionGroup -ResultSize Unlimited).count"
		$TextboxResults.Text = (Get-DistributionGroup -ResultSize Unlimited).count | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getRegularSecurityGroupCountToolStripMenuItem_Click={
	Try
	{
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting Regular Security Group Count..."
			$textboxDetails.Text = "(Get-MsolGroup -All -GroupType Security).count"
			$TextboxResults.Text = (Get-MsolGroup -All -GroupType Security).count | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting Regular Security Group Count..."
			$textboxDetails.Text = "(Get-MsolGroup -All -GroupType Security).count"
			$TextboxResults.Text = (Get-MsolGroup -TenantId $PartnerComboBox.SelectedItem.TenantID -All -GroupType Security).count | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting Regular Security Group Count..."
			$textboxDetails.Text = "(Get-MsolGroup -All -GroupType Security).count"
			$TextboxResults.Text = (Get-MsolGroup -All -GroupType Security).count | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getMailEnabledSecurityGroupCountToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Mail Enabled Security Group Count..."
		$textboxDetails.Text = "(Get-DistributionGroup -ResultSize unlimited | Where-Object { `$_.GroupType -like 'Universal, SecurityEnabled'}).count"
		$TextboxResults.Text = (Get-DistributionGroup -ResultSize unlimited | Where-Object { $_.GroupType -like "Universal, SecurityEnabled" }).count | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getAllDynamicDistributionGroupsToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting All Dynamic Distribution Groups..."
		$textboxDetails.Text = "Get-DynamicDistributionGroup -ResultSize Unlimited | Format-Table -AutoSize"
		$TextboxResults.Text = Get-DynamicDistributionGroup -ResultSize Unlimited | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getDynamicDistributionGroupCountToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Dynamic Distribution Groups Count..."
		$textboxDetails.Text = "(Get-DynamicDistributionGroup -ResultSize Unlimited).count"
		$TextboxResults.Text = (Get-DynamicDistributionGroup -ResultSize Unlimited).Count | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$createADynamicDistributionGroupForAllUsersToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$NewDynDistro = Read-Host "Please enter a name for the new Dynamic Distribution Group"
			If (!$NewDynDistro)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No name was entered, please enter a valid name for the new Dynamic Distribution Group", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Creating a new Dynamic Distribution Group for all Users..."
				$textboxDetails.Text = "New-DynamicDistributionGroup -Name $NewDynDistro –RecipientFilter { (RecipientType -eq 'UserMailbox') }"
				$TextboxResults.Text = New-DynamicDistributionGroup -Name $NewDynDistro –RecipientFilter { (RecipientType -eq 'UserMailbox') } | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to create another Dynamic Distribution Group for all Users?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
}

$createADynamicDistributionGroupForAllManagersToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$NewDynDistro = Read-Host "Please enter a name for the new Dynamic Distribution Group"
			If (!$NewDynDistro)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No name was entered, please enter a valid name for the new Dynamic Distribution Group", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Creating a new Dynamic Distribution Group for all Managers..."
				$textboxDetails.Text = "New-DynamicDistributionGroup -Name $NewDynDistro –RecipientFilter {(RecipientType -eq 'UserMailbox') -and (Title -like 'Director*' -or Title -like 'Manager*' )}"
				$TextboxResults.Text = New-DynamicDistributionGroup -Name $NewDynDistro –RecipientFilter { (RecipientType -eq 'UserMailbox') -and (Title -like 'Director*' -or Title -like 'Manager*') } | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to create another Dynamic Distribution Group for all Managers?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getDetailedInfoForADynamicDistributionGroupToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$DistroGroupsText = "Select the Dynamic Distribution Group you want detailed information on"
			Show-SelectDynamicDistributionGroups_psf
			$DetailedDyn = $SelectDynamicDistributionGroups_comboboxSelectDistroGroups
			If (!$DetailedDyn)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Dynamic Distribution Group was selected, please select a valid Dynamic Distribution Group", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting detailed information on $DetailedDyn..."
				$textboxDetails.Text = "Get-DynamicDistributionGroup $DetailedDyn | Format-List "
				$TextboxResults.Text = Get-DynamicDistributionGroup $DetailedDyn | Format-List | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get information for another Dynamic Distribution Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$removeADynamicDistributionGroupToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$DistroGroupsText = "Select the Dynamic Distribution Group you want to delete"
			Show-SelectDynamicDistributionGroups_psf
			$DetailedDyn = $SelectDynamicDistributionGroups_comboboxSelectDistroGroups
			If (!$DetailedDyn)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Dynamic Distribution Group was selected, please select a valid Dynamic Distribution Group", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Removing $DetailedDyn..."
				$textboxDetails.Text = "Remove-DynamicDistributionGroup $DetailedDyn "
				$TextboxResults.Text = Remove-DynamicDistributionGroup $DetailedDyn | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to remove another Dynamic Distribution Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getAllOnlineUsersCountToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting all online users count..."
		$textboxDetails.Text = "(Get-CsOnlineUser -ResultSize 2147483647).count"
		$TextboxResults.Text = (Get-CsOnlineUser -ResultSize 2147483647).count
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$preferencesToolStripMenuItem_Click = {
}

$resetPersonalPreferencesToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		Remove-Item 'HKCU:\Software\O365 Admin Center' -Force
		$InformationText = "All Personal preferences have been reset"
		$FormO365AdministrationCenter.Cursor = 'Default'
		Show-Info_OK_psf
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$disableAllPrerequisitesChecksToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableAzurePrompt -Value 1 -Force | Out-Null
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableArchPrompt -Value 1 -Force | Out-Null
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableMSOnlinePrompt -Value 1 -Force | Out-Null
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableSharePointOnlinePrompt -Value 1 -Force | Out-Null
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableSkypeOnlineConnectorPrompt -Value 1 -Force | Out-Null
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name ExecutionPolicy -Value 1 -Force | Out-Null
		$InformationText = "All Prerequisite Checks have been Disabled"
		$FormO365AdministrationCenter.Cursor = 'Default'
		Show-Info_OK_psf
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$enableAllPrerequisiteChecksToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableAzurePrompt -Value 0 -Force | Out-Null
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableArchPrompt -Value 0 -Force | Out-Null
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableMSOnlinePrompt -Value 0 -Force | Out-Null
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableSharePointOnlinePrompt -Value 0 -Force | Out-Null
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableSkypeOnlineConnectorPrompt -Value 0 -Force | Out-Null
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name ExecutionPolicy -Value 0 -Force | Out-Null
		$InformationText = "All Prerequisite Checks have been Enabled"
		$FormO365AdministrationCenter.Cursor = 'Default'
		Show-Info_OK_psf
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$requestSupportToolStripMenuItem_Click={
	Try
	{
		Start-Process -FilePath mailto:support@o365admin.center
	}
	Catch
	{
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$skypeForBusinessPrerequisiteToolStripMenuItem_Click={
	
}

$disableSkypeForBusinessPrerequisiteCheckToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableSkypeOnlineConnectorPrompt -Value 1 -Force | Out-Null
		$InformationText = "Skype For Business prerequisite check has been disabled"
		$FormO365AdministrationCenter.Cursor = 'Default'
		Show-Info_OK_psf
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$enableSkypeForBusinessPrerequisiteCheckToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableSkypeOnlineConnectorPrompt -Value 0 -Force | Out-Null
		$InformationText = "Skype For Business prerequisite check has been enabled"
		$FormO365AdministrationCenter.Cursor = 'Default'
		Show-Info_OK_psf
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$disableExchangeOnlinePrerequisiteCheckToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableAzurePrompt -Value 1 -Force | Out-Null
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableMSOnlinePrompt -Value 1 -Force | Out-Null
		$InformationText = "Exchange Online prerequisite check has been disabled"
		$FormO365AdministrationCenter.Cursor = 'Default'
		Show-Info_OK_psf
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$enableExchangeOnlinePrerequisiteCheckToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableAzurePrompt -Value 0 -Force | Out-Null
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableMSOnlinePrompt -Value 0 -Force | Out-Null
		$InformationText = "Exchange Online prerequisite check has been enabled"
		$FormO365AdministrationCenter.Cursor = 'Default'
		Show-Info_OK_psf
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$disableSharePointPrerequisiteCheckToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableSharePointOnlinePrompt -Value 1 -Force | Out-Null
		$InformationText = "SharePoint prerequisite check has been Disabled"
		$FormO365AdministrationCenter.Cursor = 'Default'
		Show-Info_OK_psf
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$enableSharePointPrerequisiteCheckToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableSharePointOnlinePrompt -Value 0 -Force | Out-Null
		$InformationText = "SharePoint prerequisite check has been Enabled"
		$FormO365AdministrationCenter.Cursor = 'Default'
		Show-Info_OK_psf
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$disableArchitecturePrerequisiteToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableArchPrompt -Value 1 -Force | Out-Null
		$InformationText = "Architecture prerequisite check has been disabled"
		$FormO365AdministrationCenter.Cursor = 'Default'
		Show-Info_OK_psf
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$enableArchitecturePrerequisiteToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableArchPrompt -Value 0 -Force | Out-Null
		$InformationText = "Architecture prerequisite check has been enabled"
		Show-Info_OK_psf
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getAllTransportRulesToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting all Transport Rules..."
		$textboxDetails.Text = "Get-TransportRule"
		$TextboxResults.Text = Get-TransportRule | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getAllDisabledTransportRulesToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting all disabled Transport Rules..."
		$textboxDetails.Text = "Get-TransportRule | Where-Object {`$_.State -ne 'Enabled'}"
		$TextboxResults.Text = Get-TransportRule | Where-Object {$_.State -ne 'Enabled'} | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getAllEnabledTransportRulesToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting all enabled Transport Rules..."
		$textboxDetails.Text = "Get-TransportRule | Where-Object {`$_.State -eq 'Enabled'}"
		$TextboxResults.Text = Get-TransportRule | Where-Object { $_.State -eq 'Enabled' } | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getSpoofedMailReportToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Spoof Mail Report..."
		$textboxDetails.Text = "Get-SpoofMailReport"
		$TextboxResults.Text = Get-SpoofMailReport | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getTransportRulePredicateToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Transport Rule Predicate..."
		$textboxDetails.Text = "Get-TransportRulePredicate"
		$TextboxResults.Text = Get-TransportRulePredicate | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getDetailedInfoForATransportRuleToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$TransportRulesText = "Select the Transport Rule you want to view detailed information on"
			Show-SelectTransportRules_psf
			$DetailedTransportRule = $SelectTransportRules_comboboxTPs
			If (!$DetailedTransportRule)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Transport Rule was selected, please select a valid Transport Rule", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting Detailed information on the Transport Rule, '$DetailedTransportRule'..."
				$textboxDetails.Text = "Get-TransportRule -Identity $DetailedTransportRule | Format-List "
				$TextboxResults.Text = Get-TransportRule -Identity $DetailedTransportRule | Format-List | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get information on another Transport Rule?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getTransportRuleActionToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Transport Rule Action..."
		$textboxDetails.Text = "Get-TransportRuleAction"
		$TextboxResults.Text = Get-TransportRuleAction | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$enableATransportRuleToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$TransportRulesText = "Select the Transport Rule you want to enable"
			Show-SelectDisabledTransportRules_psf
			$TransportRule = $SelectDisabledTransportRules_comboboxTPs
			If (! $TransportRule)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Transport Rule was selected, please select a valid Transport Rule", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Enabling the Transport Rule, '$TransportRule''..."
				$textboxDetails.Text = "Enable-TransportRule -Identity $TransportRule"
				$TextboxResults.Text = Enable-TransportRule -Identity $TransportRule | Out-String -Width 2147483647
				$TextboxResults.Text = Get-TransportRule | Where-Object { $_.State -eq 'Enabled' } | Format-Table -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to menable another Transport Rule?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$disableATransportRuleToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$TransportRulesText = "Select the Transport Rule you want to disable"
			Show-SelectEnabledTransportRules_psf
			$TransportRule = $SelectEnabledTransportRules_comboboxTPs
			If (!$TransportRule)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Transport Rule was selected, please select a valid Transport Rule", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Disabling the Transport Rule, '$TransportRule''..."
				$textboxDetails.Text = "Disable-TransportRule -Identity $TransportRule"
				$TextboxResults.Text = Disable-TransportRule -Identity $TransportRule | Out-String -Width 2147483647
				$TextboxResults.Text = Get-TransportRule | Where-Object { $_.State -ne 'Enabled' } | Format-Table -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to disable another Transport Rule?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$removeATransportRuleToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$TransportRulesText = "Select the Transport Rule you want to remove"
			Show-SelectTransportRules_psf
			$DetailedTransportRule = $SelectTransportRules_comboboxTPs
			If (!$DetailedTransportRule)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Transport Rule was selected, please select a valid Transport Rule", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Removing the Transport Rule, '$DetailedTransportRule''..."
				$textboxDetails.Text = "Remove-TransportRule -Identity $DetailedTransportRule "
				$TextboxResults.Text = Remove-TransportRule -Identity $DetailedTransportRule | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to remove another Transport Rule?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$newTransportRuleForSenderDomainToBypassClutterToolStripMenuItem_Click = {
	Try
	{
		$NewTransportRule = Read-Host "Please enter a name for the Transport Rule"
		If (!$NewTransportRule)
		{
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("No name was entered, please select a valid name for the new Transport Rule", "Error")
		}
		Else
		{
			$SenderDomain = Read-Host "Please enter the sender domain that will bypass Clutter"
			If (!$SenderDomain)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Domain was entered, please enter a valid domain name what will bypass Clutter", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Creating a new Transport Rule where $SenderDomain can bypass Clutter..."
				$textboxDetails.Text = "New-TransportRule -Name '$NewTransportRule' -SenderDomainIs $SenderDomain -SetHeaderName 'X-MS-Exchange-Organization-BypassClutter' -SetHeaderValue 'true' "
				$TextboxResults.Text = New-TransportRule -Name $NewTransportRule -SenderDomainIs $SenderDomain -SetHeaderName "X-MS-Exchange-Organization-BypassClutter" -SetHeaderValue "true" | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
				
			}
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$blockEMailMessagesBetweenTwoDistributionGroupsToolStripMenuItem_Click = {
	Try
	{
		$TempDir = $env:temp
		$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter\distros.txt")
		If ((Test-Path $O365AdminTempFolder) -eq $false)
		{
			$Textboxresults.text = "Caching Distribution Groups…"
			(Get-DistributionGroup -ResultSize unlimited | Where-Object { $_.GroupType -notlike 'Universal, SecurityEnabled' }).DisplayName | Out-File "$O365AdminTempFolder"
			$Textboxresults.text = ""
			
			$NewTransportRule = Read-Host "Please enter a name for the Transport Rule"
			If (!$NewTransportRule)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No name was entered, please select a valid name for the new Transport Rule", "Error")
			}
			Else
			{
				$DistroGroupsText = "Select the first Distribution Group"
				Show-SelectCachedDistroGroups_psf
				$Distro1 = $SelectCachedDistroGroups_comboboxNames
				If (!$Distro1)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group", "Error")
				}
				Else
				{
					$DistroGroupsText = "Select the second Distribution Group. Memers of $Distro1 will not be able to send to this group and this group will not be able to send to $Distro1 "
					Show-SelectCachedDistroGroups_psf
					$Distro2 = $SelectCachedDistroGroups_comboboxNames
					If (!$Distro2)
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group", "Error")
					}
					Else
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Creating a new Transport Rule where members of $Distro1 and $Distro2 cannot e-mail each other..."
						$textboxDetails.Text = "New-TransportRule $NewTransportRule -BetweenMemberOf1 $Distro1 -BetweenMemberOf2 $Distro2  -RejectMessageEnhancedStatusCode '5.7.1' -RejectMessageReasonText 'Email messages sent between $Distro1 and $Distro2 are prohibited.'"
						$TextboxResults.Text = New-TransportRule $NewTransportRule -BetweenMemberOf1 $Distro1 -BetweenMemberOf2 $Distro2 -RejectMessageEnhancedStatusCode "5.7.1" -RejectMessageReasonText "Email messages sent between $Distro1 and $Distro2 are prohibited." | Out-String -Width 2147483647
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
				}
			}
		}
		Else
		{
			$NewTransportRule = Read-Host "Please enter a name for the Transport Rule"
			If (!$NewTransportRule)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No name was entered, please select a valid name for the new Transport Rule", "Error")
			}
			Else
			{
				$DistroGroupsText = "Select the first Distribution Group"
				Show-SelectCachedDistroGroups_psf
				$Distro1 = $SelectCachedDistroGroups_comboboxNames
				If (!$Distro1)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group", "Error")
				}
				Else
				{
					$DistroGroupsText = "Select the second Distribution Group. Memers of $Distro1 will not be able to send to this group and this group will not be able to send to $Distro1 "
					Show-SelectCachedDistroGroups_psf
					$Distro2 = $SelectCachedDistroGroups_comboboxNames
					If (!$Distro2)
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group", "Error")
					}
					Else
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Creating a new Transport Rule where members of $Distro1 and $Distro2 cannot e-mail each other..."
						$textboxDetails.Text = "New-TransportRule $NewTransportRule -BetweenMemberOf1 $Distro1 -BetweenMemberOf2 $Distro2  -RejectMessageEnhancedStatusCode '5.7.1' -RejectMessageReasonText 'Email messages sent between $Distro1 and $Distro2 are prohibited.'"
						$TextboxResults.Text = New-TransportRule $NewTransportRule -BetweenMemberOf1 $Distro1 -BetweenMemberOf2 $Distro2 -RejectMessageEnhancedStatusCode "5.7.1" -RejectMessageReasonText "Email messages sent between $Distro1 and $Distro2 are prohibited." | Out-String -Width 2147483647
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
				}
			}
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$specificSenderBypassClutterToolStripMenuItem_Click={
	Try
	{
		$NewTransportRule = Read-Host "Please enter a name for the Transport Rule"
		If (!$NewTransportRule)
		{
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("No name was entered, please select a valid name for the new Transport Rule", "Error")
		}
		Else
		{
			$SenderDomain = Read-Host "Please enter the sender's e-mail that will bypass Clutter"
			If (!$SenderDomain)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Domain was entered, please enter a valid domain name what will bypass Clutter", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Creating a new Transport Rule where $SenderDomain can bypass Clutter..."
				$textboxDetails.Text = "New-TransportRule -Name '$NewTransportRule' -From $SenderDomain -SetHeaderName 'X-MS-Exchange-Organization-BypassClutter' -SetHeaderValue 'true' "
				$TextboxResults.Text = New-TransportRule -Name $NewTransportRule -From $SenderDomain -SetHeaderName "X-MS-Exchange-Organization-BypassClutter" -SetHeaderValue "true" | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
				
			}
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$changeATransportRulePriorityToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$TransportRulesText = "Select the Transport Rule you want to modify priority for"
			Show-SelectTransportRules_psf
			$DetailedTransportRule = $SelectTransportRules_comboboxTPs
			If (!$DetailedTransportRule)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Transport Rule was selected, please select a valid Transport Rule", "Error")
			}
			Else
			{
				$NewPriority = Read-Host "Please enter a new priority number. Ex: 1"
				If (!$NewPriority)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No priority was set, please enter a valid priority number ", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Setting the priority level for $DetailedTransportRule to $NewPriority..."
					$textboxDetails.Text = "Set-TransportRule -Identity $DetailedTransportRule -Priority $NewPriority"
					$TextboxResults.Text = Set-TransportRule -Identity $DetailedTransportRule -Priority $NewPriority | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to modify another Transport Rules priority?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$blockPasswordProtectedAttachmentsToolStripMenuItem_Click={
	Try
	{
		$NewTransportRule = Read-Host "Please enter a name for the Transport Rule"
		If (!$NewTransportRule)
		{
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("No name was entered, please select a valid name for the new Transport Rule", "Error")
		}
		Else
		{
			
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Creating a new Transport Rule where password protected attachments are blocked..."
			$textboxDetails.Text = "New-TransportRule -Name '$NewTransportRule' -AttachmentIsPasswordProtected $True -Quarantine $True "
			$TextboxResults.Text = New-TransportRule -Name $NewTransportRule -AttachmentIsPasswordProtected $True -Quarantine $True | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
	
}

$quarantineMessagesWithExecutableAttachmentsToolStripMenuItem_Click= {
	$NewTransportRule = Read-Host "Please enter a name for the Transport Rule"
	If (!$NewTransportRule)
	{
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("No name was entered, please select a valid name for the new Transport Rule", "Error")
	}
	Else
	{
		
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Creating a new Transport Rule where messages with executable content is quarantined..."
		$textboxDetails.Text = "New-TransportRule -Name '$NewTransportRule' -AttachmentHasExecutableContent $True -Quarantine $True "
		$TextboxResults.Text = New-TransportRule -Name $NewTransportRule -AttachmentHasExecutableContent $True -Quarantine $True | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$addAPublicFolderPermissionToolStripMenuItem_Click = {
	Do
	{
		$TempDir = $env:temp
		$CachedPF = ("$TempDir" + "\O365AdminCenter" + "\pf.txt")
		Try
		{
			If ((Test-Path $CachedPF) -eq $false)
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Caching Public Folders..."
				(Get-PublicFolder -ResultSize Unlimited -Identity "\" -Recurse).Identity | Out-File $CachedPF
				
				$PFText = "Please select the Public Folder you want to modify permissions for"
				Show-SelectCachedPublicFolders_psf
				$PFStats = $SelectCachedPublicFolders_comboboxPF
				If (!$PFStats)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Public Folder was selected, please select a valid Public Folder", "Error")
				}
				Else
				{
					$SelectUsersFormText = "Select the user you want to add permission to $PFStats"
					#Call-SelectUsersForm_psf
					Show-SelectCachedDisplayNames_psf
					#$GlobalUPNooouser = $SelectUsersForm_comboboxUsers
					$GlobalUPNooouser = $SelectCachedDisplayNames_comboboxNames
					If (!$GlobalUPNooouser)
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid user", "Error")
					}
					Else
					{
						$PermissionsText = "Select the level of access you want $GlobalUPNooouser to have"
						Show-SelectPFPermissions_psf
						$Permissions = $SelectPFPermissions_comboboxTPs
						If (!$Permissions)
						{
							$TextboxResults.Text = ""
							$textboxDetails.Text = ""
							[System.Windows.Forms.MessageBox]::Show("No level of access was selected, please select a valid level of access", "Error")
						}
						Else
						{
							$FormO365AdministrationCenter.Cursor = 'WaitCursor'
							$TextboxResults.Text = "Modifying permissions for the public folder '$PFStats' for $GlobalUPNooouser with $Permissions access.."
							$textboxDetails.Text = "Add-PublicFolderClientPermission -identity $PFStats -user $GlobalUPNooouser -accessrights $Permissions"
							$TextboxResults.Text = Add-PublicFolderClientPermission -identity $PFStats -user $GlobalUPNooouser -accessrights $Permissions | Out-String -Width 2147483647
							$FormO365AdministrationCenter.Cursor = 'Default'
						}
					}
				}
			}
			Else
			{
				
				$PFText = "Please select the Public Folder you want to modify permissions for"
				Show-SelectCachedPublicFolders_psf
				$PFStats = $SelectCachedPublicFolders_comboboxPF
				If (!$PFStats)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Public Folder was selected, please select a valid Public Folder", "Error")
				}
				Else
				{
					$SelectUsersFormText = "Select the user you want to add permission to $PFStats"
					#Call-SelectUsersForm_psf
					Show-SelectCachedDisplayNames_psf
					#$GlobalUPNooouser = $SelectUsersForm_comboboxUsers
					$GlobalUPNooouser = $SelectCachedDisplayNames_comboboxNames
					If (!$GlobalUPNooouser)
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid user", "Error")
					}
					Else
					{
						$PermissionsText = "Select the level of access you want $GlobalUPNooouser to have"
						Show-SelectPFPermissions_psf
						$Permissions = $SelectPFPermissions_comboboxTPs
						If (!$Permissions)
						{
							$TextboxResults.Text = ""
							$textboxDetails.Text = ""
							[System.Windows.Forms.MessageBox]::Show("No level of access was selected, please select a valid level of access", "Error")
						}
						Else
						{
							$FormO365AdministrationCenter.Cursor = 'WaitCursor'
							$TextboxResults.Text = "Modifying permissions for the public folder '$PFStats' for $GlobalUPNooouser with $Permissions access.."
							$textboxDetails.Text = "Add-PublicFolderClientPermission -identity $PFStats -user $GlobalUPNooouser -accessrights $Permissions"
							$TextboxResults.Text = Add-PublicFolderClientPermission -identity $PFStats -user $GlobalUPNooouser -accessrights $Permissions | Out-String -Width 2147483647
							$FormO365AdministrationCenter.Cursor = 'Default'
						}
					}
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to modify permissions on another Public Folder?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getAPublicFolderPermissionToolStripMenuItem_Click = {
	Do
	{
		$TempDir = $env:temp
		$CachedPF = ("$TempDir" + "\O365AdminCenter" + "\pf.txt")
		Try
		{
			If ((Test-Path $CachedPF) -eq $false)
			{
				$TextboxResults.Text = "Caching Public Folders..."
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Caching Public Folders..."
				(Get-PublicFolder -ResultSize Unlimited -Identity "\" -Recurse).Identity | Out-File $CachedPF
				$TextboxResults.Text = ""
				$PFText = "Please select the Public Folder you want to view permissions for"
				Show-SelectCachedPublicFolders_psf
				$PFStats = $SelectCachedPublicFolders_comboboxPF
				If (!$PFStats)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Public Folder was selected, please select a valid Public Folder", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Getting Public Folder permissions for $PFStats.."
					$textboxDetails.Text = "Get-PublicFolderClientPermission -Identity $PFStats"
					$TextboxResults.Text = Get-PublicFolderClientPermission -Identity $PFStats | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
			Else
			{
				
				$PFText = "Please select the Public Folder you want to view permissions for"
				Show-SelectCachedPublicFolders_psf
				$PFStats = $SelectCachedPublicFolders_comboboxPF
				If (!$PFStats)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Public Folder was selected, please select a valid Public Folder", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Getting Public Folder permissions for $PFStats.."
					$textboxDetails.Text = "Get-PublicFolderClientPermission -Identity $PFStats"
					$TextboxResults.Text = Get-PublicFolderClientPermission -Identity $PFStats | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
			
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to modify permissions on another Public Folder?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$disableExecutionPolicyCheckToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name ExecutionPolicy -Value 1 -Force | Out-Null
		$InformationText = "Execution Policy check has been disabled"
		$FormO365AdministrationCenter.Cursor = 'Default'
		Show-Info_OK_psf
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$enableExecutionPolicyCheckToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name ExecutionPolicy -Value 0 -Force | Out-Null
		$InformationText = "Execution Policy check has been enabled"
		$FormO365AdministrationCenter.Cursor = 'Default'
		Show-Info_OK_psf
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$TextboxResults_TextChanged={
	
	
}

$deleteAllMailboxContentForAUserToolStripMenuItem_Click = {
	Do
	{
		$SelectUsersFormText = "Select the User you want to delete Mailbox Content for"
		Show-SelectCachedDisplayNames_psf
		$DeleteMailboxContent = $SelectCachedDisplayNames_comboboxNames
		If (!$DeleteMailboxContent)
		{
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
		}
		Else
		{
			Try
			{
				$OUTPUT = [System.Windows.Forms.MessageBox]::Show("Are you sure you want to delete all Mailbox Content for $DeleteMailboxContent?.", "Warning!", 4)
				If ($OUTPUT -eq "YES")
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Removing mailbox conetent for $DeleteMailboxContent..."
					$textboxDetails.Text = "Search-Mailbox -Identity $DeleteMailboxContent -DeleteContent"
					$TextboxResults.Text = Search-Mailbox -Identity $DeleteMailboxContent -DeleteContent | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
				Else
				{
					[System.Windows.Forms.MessageBox]::Show("Mailbox Content for $DeleteMailboxContent has not been deleted", "Info")
				}
			}
			Catch
			{
				$FormO365AdministrationCenter.Cursor = 'Default'
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("$_", "Error")
			}
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to delete all Mailbox Content for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getMailboxContentForAUserToolStripMenuItem_Click = {
	Do
	{
		$SelectUsersFormText = "Select the User you want to get all Mailbox Content for"
		Show-SelectCachedDisplayNames_psf
		$MailboxContent = $SelectCachedDisplayNames_comboboxNames
		If (!$MailboxContent)
		{
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
		}
		Else
		{
			Try
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting mailbox content for $MailboxContent..."
				$textboxDetails.Text = "Get-MailboxFolderStatistics $MailboxContent | Select-Object Identity, ItemsInFolder"
				$TextboxResults.Text = Get-MailboxFolderStatistics $MailboxContent | Select-Object Identity, ItemsInFolder | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			Catch
			{
				$FormO365AdministrationCenter.Cursor = 'Default'
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("$_", "Error")
			}
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get Mailbox Content for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$createAnAutoReplyForAMailboxToolStripMenuItem_Click = {
	Do
	{
		#$OOOautoreplyUser = Read-Host "What user is the Out Of Office auto reply for?"
		$SelectUsersFormText = "Select the user you want to create an Auto Reply for"
		#Call-SelectUsersForm_psf
		Show-SelectCachedDisplayNames_psf
		#$GlobalUPNooouser = $SelectUsersForm_comboboxUsers
		$GlobalUPNooouser = $SelectCachedDisplayNames_comboboxNames
		
		Try
		{
			If (!$GlobalUPNooouser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("Please select a user you want to create an Auto Reply for", "Error")
			}
			Else
			{
				$OOOInternal = Read-Host "What is the Internal Message"
				If (!$OOOInternal)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("Please enter an internal Auto Reply message", "Error")
				}
				Else
				{
					$OOOExternal = Read-Host "What is the External Message"
					If (!$OOOExternal)
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						[System.Windows.Forms.MessageBox]::Show("Please enter an Auto Reply message", "Error")
					}
					Else
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Creating an Auto Reply for $GlobalUPNooouser..."
						$textboxDetails.Text = "Set-MailboxAutoReplyConfiguration -Identity $GlobalUPNooouser -AutoReplyState Enabled -ExternalMessage $OOOExternal -InternalMessage $OOOInternal"
						Set-MailboxAutoReplyConfiguration -Identity $GlobalUPNooouser -AutoReplyState Enabled -ExternalMessage $OOOExternal -InternalMessage $OOOInternal
						$TextboxResults.Text = Get-MailboxAutoReplyConfiguration -Identity $GlobalUPNooouser | Format-List | Out-String -Width 2147483647
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
				}
				
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to create an Auto-Reply for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$disableAutoReplyForAMailboxToolStripMenuItem_Click = {
	Do
	{
		#$OOOautoreplyUser = Read-Host "What user is the Out Of Office auto reply for?"
		$SelectUsersFormText = "Select the user you want to disable an Auto Reply for"
		#Call-SelectUsersForm_psf
		Show-SelectCachedDisplayNames_psf
		#$GlobalUPNooouser = $SelectUsersForm_comboboxUsers
		$GlobalUPNooouser = $SelectCachedDisplayNames_comboboxNames
		
		Try
		{
			If (!$GlobalUPNooouser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No user selected, please select a user.", "Error")
				
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Disabling an Auto Reply for $GlobalUPNooouser..."
				$textboxDetails.Text = "Set-MailboxAutoReplyConfiguration -Identity $GlobalUPNooouser -AutoReplyState Disabled"
				Set-MailboxAutoReplyConfiguration -Identity $GlobalUPNooouser -AutoReplyState Disabled
				$TextboxResults.Text = Get-MailboxAutoReplyConfiguration -Identity $GlobalUPNooouser | Format-List | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to Disable Auto-Reply for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$enableMailboxAuditingOnAllMailboxesToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Enabling Auditing on all user mailboxes..."
		$textboxDetails.text = "Get-Mailbox -ResultSize Unlimited -Filter { RecipientTypeDetails -eq 'UserMailbox' } | Set-Mailbox -AuditEnabled `$true" | Out-String -Width 2147483647
		$TextboxResults.Text = Get-Mailbox -ResultSize Unlimited -Filter { RecipientTypeDetails -eq "UserMailbox" } | Set-Mailbox -AuditEnabled $true | Out-String -Width 2147483647
		$TextboxResults.Text = Get-Mailbox -ResultSize Unlimited -Filter { RecipientTypeDetails -eq 'UserMailbox' } | Format-List Name, Audit* | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$disableMailboxAuditingOnAllUsersToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Disabling Auditing on all user mailboxes..."
		$textboxDetails.text = "Get-Mailbox -ResultSize Unlimited -Filter { RecipientTypeDetails -eq 'UserMailbox' } | Set-Mailbox -AuditEnabled `$false" | Out-String -Width 2147483647
		$TextboxResults.Text = Get-Mailbox -ResultSize Unlimited -Filter { RecipientTypeDetails -eq "UserMailbox" } | Set-Mailbox -AuditEnabled $false | Out-String -Width 2147483647
		$TextboxResults.Text = Get-Mailbox -ResultSize Unlimited -Filter { RecipientTypeDetails -eq 'UserMailbox' } | Format-List Name, Audit* | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getMailboxAuditingForAllUsersToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Mailbox Auditing for all user mailboxes..."
		$textboxDetails.text = "Get-Mailbox -ResultSize Unlimited -Filter { RecipientTypeDetails -eq 'UserMailbox' } | Format-List Name, Audit*" | Out-String -Width 2147483647
		$TextboxResults.Text = Get-Mailbox -ResultSize Unlimited -Filter { RecipientTypeDetails -eq 'UserMailbox' } | Format-List Name, Audit* | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getMailboxAuditingForAUserToolStripMenuItem_Click = {
	Do
	{
		$SelectUsersFormText = "Select the User you want to get Mailbox Auditing information for"
		Show-SelectCachedDisplayNames_psf
		$GlobalUPNdetailedmailbox = $SelectCachedDisplayNames_comboboxNames
		Try
		{
			If (!$GlobalUPNdetailedmailbox)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User selected, please select a User.", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting Mailbox Auditing information for $GlobalUPNdetailedmailbox..."
				$textboxDetails.Text = "Get-Mailbox $GlobalUPNdetailedmailbox | Format-List Audit*"
				$TextboxResults.Text = Get-Mailbox $GlobalUPNdetailedmailbox | Format-List Audit* | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get the Mailbox Auditing status for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$enableMailboxAuditingForAUserToolStripMenuItem_Click = {
	Do
	{
		$SelectUsersFormText = "Select the User you want to enable Mailbox Auditing for"
		Show-SelectCachedDisplayNames_psf
		$GlobalUPNdetailedmailbox = $SelectCachedDisplayNames_comboboxNames
		Try
		{
			If (!$GlobalUPNdetailedmailbox)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User selected, please select a User.", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Enabling Mailbox Auditing information for $GlobalUPNdetailedmailbox..."
				$textboxDetails.Text = "Set-Mailbox -Identity $GlobalUPNdetailedmailbox -AuditEnabled `$true"
				$TextboxResults.Text = Set-Mailbox -Identity $GlobalUPNdetailedmailbox -AuditEnabled $true | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to enable Mailbox Auditing for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$disableMailboxAuditingForAUserToolStripMenuItem_Click = {
	Do
	{
		$SelectUsersFormText = "Select the User you want to disable Mailbox Auditing for"
		Show-SelectCachedDisplayNames_psf
		$GlobalUPNdetailedmailbox = $SelectCachedDisplayNames_comboboxNames
		Try
		{
			If (!$GlobalUPNdetailedmailbox)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User selected, please select a User.", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Disabling Mailbox Auditing information for $GlobalUPNdetailedmailbox..."
				$textboxDetails.Text = "Set-Mailbox -Identity $GlobalUPNdetailedmailbox -AuditEnabled `$false"
				$TextboxResults.Text = Set-Mailbox -Identity $GlobalUPNdetailedmailbox -AuditEnabled $false | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to disable Mailbox Auditing for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$removeCachedCredentialsToolStripMenuItem_Click={
	Try
	{
		$TempDir = $env:temp
		$O365AdminTempFolderCreds = ("$TempDir" + "\O365AdminCenter_Creds")
		$CachedMem = "$O365AdminTempFolderCreds\Creds.xml"
		Remove-Item $CachedMem -Force
		
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name CredMem -Value 0 -Force | Out-Null
		
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("Saved credentials have been removed", "Error")
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$disableCachedCredentialsToolStripMenuItem_Click = {
	Try
	{
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name CredMem -Value 2 -Force | Out-Null
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("Cached Credentials have been disabled", "Info")
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$enable2FAToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name TFA -Value 1 -Force | Out-Null
		$InformationText = "Second-Factor Authentication has been enabled"
		Show-Info_OK_psf
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$disable2FAToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name TFA -Value 0 -Force | Out-Null
		$InformationText = "Second-Factor Authentication has been Disabled"
		Show-Info_OK_psf
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$clear2FAModulePathToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		Get-Item 'HKCU:\Software\O365 Admin Center' | Remove-ItemProperty -Name TFAPath -Force | Out-Null
		$InformationText = "Second-Factor Module has been cleared"
		Show-Info_OK_psf
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$set2FAModulePathToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TFAModule = Read-Host "Please enter the full path to the 2FA Module"
		If (!$TFAModule)
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("No Path was entered!", "Error")
		}
		Else
		{
			$InformationText = "Second-Factor Module has been set to $TFAModule"
			Show-Info_OK_psf
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$download2FAModuleToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		Start-Process -FilePath https://technet.microsoft.com/en-us/library/mt775114
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$enableDirectReportsGroupAutoCreationToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Enabling Direct Reports Group Auto Creation..."
		$textboxDetails.Text = "Set-OrganizationConfig -DirectReportsGroupAutoCreationEnabled `$True"
		$TextboxResults = Set-OrganizationConfig -DirectReportsGroupAutoCreationEnabled $true | Out-String -Width 2147483647
		$TextboxResults.Text = "Success"
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$disableDirectReportsGroupAutoCreationToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Disabling Direct Reports Group Auto Creation..."
		$textboxDetails.Text = "Set-OrganizationConfig -DirectReportsGroupAutoCreationEnabled `$False"
		$TextboxResults.Text = Set-OrganizationConfig -DirectReportsGroupAutoCreationEnabled $false | Out-String -Width 2147483647
		$TextboxResults.Text = "Success"
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getDirectReportsGroupAutoCreationStatusToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Direct Reports Group Auto Creation Status..."
		$textboxDetails.Text = "Get-OrganizationConfig | Format-List *group*"
		$TextboxResults.Text = Get-OrganizationConfig | Format-List *group* | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getAllGroupsCreatedByDirectReportsGroupAutoCreationToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting All Groups Created by Direct Reports Group Auto Creation..."
		$textboxDetails.Text = "Get-UnifiedGroup -ResultSize Unlimited | Where-Object { $_.GroupPersonification -eq 'Groupsona:AutoDirectReports' }"
		$TextboxResults.Text = Get-UnifiedGroup -ResultSize Unlimited | Where-Object { $_.GroupPersonification -eq 'Groupsona:AutoDirectReports' } | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}

}

$exportFullSMTPLogToCSVToolStripMenuItem_Click={
	Try
	{
		$savedialog = New-Object windows.forms.savefiledialog
		$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
		$savedialog.title = "Export to File"
		$savedialog.filter = ".csv|*.csv"
		$savedialog.ShowHelp = $True
		$result = $savedialog.ShowDialog(); $result
		$OutputFile = $savedialog.filename
		if ($result -eq "OK")
		{
			$TextboxResults.Text = "Exporting Full SMTP Log to csv..."
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			#Collect all recipients from Office 365 
			$Recipients = Get-Recipient -ResultSize Unlimited | Select-Object PrimarySMTPAddress
			$MailTraffic = @{ }
			foreach ($Recipient in $Recipients)
			{
				$MailTraffic[$Recipient.PrimarySMTPAddress.ToLower()] = @{ }
			}
			$Recipients = $null
			
			#Collect Message Tracking Logs (These are broken into "pages" in Office 365 so we need to collect them all with a loop) 
			$Messages = $null
			$Page = 1
			do
			{
				
				Write-Host "Collecting Message Tracking - Page $Page..."
				$CurrMessages = Get-MessageTrace -StartDate (Get-Date).AddDays(-7) -EndDate (Get-Date) -PageSize 5000 -Page $Page | Select-Object Received, *Address, *IP, Subject, Status, Size
				
				if ($CurrMessages -ne $null)
				{
					$CurrMessages | Export-Csv $OutputFile -NoTypeInformation
				}
				$Page++
				$Messages += $CurrMessages
				
				
			}
			until ($CurrMessages -eq $null)
		}
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$downloadMSOnlineModuleFor2FAToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		Start-Process -FilePath http://connect.microsoft.com/site1164/Downloads/DownloadDetails.aspx?DownloadID=59185
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}

	
}

$getMigrationStatisticsToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Migration Statistics..."
		$textboxDetails.Text = "Get-MigrationStatistics"
		$TextboxResults.Text = Get-MigrationStatistics | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getMigrationUserStatisticsToolStripMenuItem_Click = {
	Do
	{
		$SelectUsersFormText = "Select the user you want to get Migration User Statistics for"
		Show-SelectCachedDisplayNames_psf
		$GlobalUPNdetailedmailbox = $SelectCachedDisplayNames_comboboxNames
		Try
		{
			If (!$GlobalUPNdetailedmailbox)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No user selected, please select a user.", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting Migration User Statistics for $GlobalUPNdetailedmailbox..."
				$textboxDetails.Text = "Get-MailboxUserStatistics -Identity $GlobalUPNdetailedmailbox"
				$TextboxResults.Text = Get-MailboxUserStatistics -Identity $GlobalUPNdetailedmailbox | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get Migration User Statistics for another user?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getMoveRequestForAUserToolStripMenuItem_Click = {
	Do
	{
		$SelectUsersFormText = "Select the user you want to get the Move Request status for"
		Show-SelectCachedDisplayNames_psf
		$GlobalUPNdetailedmailbox = $SelectCachedDisplayNames_comboboxNames
		Try
		{
			If (!$GlobalUPNdetailedmailbox)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No user selected, please select a user.", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting the Move Request status for $GlobalUPNdetailedmailbox..."
				$textboxDetails.Text = "Get-MoveRequest -Identity $GlobalUPNdetailedmailbox"
				$TextboxResults.Text = Get-MoveRequest -Identity $GlobalUPNdetailedmailbox | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get the Move Request status for another user?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getMigrationUserStatusToolStripMenuItem_Click = {
	Do
	{
		$SelectUsersFormText = "Select the user you want to get the Migration User status for"
		Show-SelectCachedDisplayNames_psf
		$GlobalUPNdetailedmailbox = $SelectCachedDisplayNames_comboboxNames
		Try
		{
			If (!$GlobalUPNdetailedmailbox)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No user selected, please select a user.", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting Migration User status for $GlobalUPNdetailedmailbox..."
				$textboxDetails.Text = "Get-MailboxUser -Identity $GlobalUPNdetailedmailbox"
				$TextboxResults.Text = Get-MailboxUser -Identity $GlobalUPNdetailedmailbox | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get the Migration Status for another user?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$resumeMoveRequestForAUserToolStripMenuItem_Click = {
	Do
	{
		$SelectUsersFormText = "Select the user you want to resume the Move Request for"
		Show-SelectCachedDisplayNames_psf
		$GlobalUPNdetailedmailbox = $SelectCachedDisplayNames_comboboxNames
		Try
		{
			If (!$GlobalUPNdetailedmailbox)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No user selected, please select a user.", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Resuming the Move Request for $GlobalUPNdetailedmailbox..."
				$textboxDetails.Text = "Resume-MoveRequest -Identity $GlobalUPNdetailedmailbox"
				$TextboxResults.Text = Resume-MoveRequest -Identity $GlobalUPNdetailedmailbox | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to resume the Move Request for another user?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$removeMoveRequestForAUserToolStripMenuItem_Click = {
	Do
	{
		$SelectUsersFormText = "Select the user you want to remove the Move Request for"
		Show-SelectCachedDisplayNames_psf
		$GlobalUPNdetailedmailbox = $SelectCachedDisplayNames_comboboxNames
		Try
		{
			If (!$GlobalUPNdetailedmailbox)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No user selected, please select a user.", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Removing the Move Request for $GlobalUPNdetailedmailbox..."
				$textboxDetails.Text = "Remove-MoveRequest -Identity $GlobalUPNdetailedmailbox"
				$TextboxResults.Text = Remove-MoveRequest -Identity $GlobalUPNdetailedmailbox | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to remove a Move Request for another user?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$suspendMoveRequestForAUserToolStripMenuItem_Click = {
	Do
	{
		$SelectUsersFormText = "Select the user you want to suspend the Move Request for"
		Show-SelectCachedDisplayNames_psf
		$GlobalUPNdetailedmailbox = $SelectCachedDisplayNames_comboboxNames
		Try
		{
			If (!$GlobalUPNdetailedmailbox)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No user selected, please select a user.", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Suspending the Move Request for $GlobalUPNdetailedmailbox..."
				$textboxDetails.Text = "Suspend-MoveRequest -Identity $GlobalUPNdetailedmailbox"
				$TextboxResults.Text = Suspend-MoveRequest -Identity $GlobalUPNdetailedmailbox | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to suspend the Move REquest for another user?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getMembersOfADynamicDistributionGroupToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$DistroGroupsText = "Select the Dynamic Distribution Group you want to view the members of"
			Show-SelectDynamicDistributionGroups_psf
			$DetailedDyn = $SelectDynamicDistributionGroups_comboboxSelectDistroGroups
			If (!$DetailedDyn)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Dynamic Distribution Group was selected, please select a valid Dynamic Distribution Group", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting membership for $DetailedDyn..."
				$DDG = Get-DynamicDistributionGroup $DetailedDyn
				$textboxDetails.Text = "Get-Recipient -RecipientPreviewFilter $DDG.RecipientFilter"
				$TextboxResults.Text = Get-Recipient -RecipientPreviewFilter $DDG.RecipientFilter | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get Members of another Dynamic Distribution Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getAllUsersImmutableIDToolStripMenuItem_Click={
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all users ImmutableID..."
			$textboxDetails.Text = "Get-MsolUser -All | Select-Object DisplayName, ImmutableID"
			$TextboxResults.text = Get-MsolUser -All | Select-Object DisplayName, ImmutableID | Sort-Object DisplayName | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all users ImmutableID..."
			$textboxDetails.Text = "Get-MsolUser -TenantId $TenantText -All | Select-Object DisplayName, ImmutableID | Sort-Object DisplayName"
			$TextboxResults.text = Get-MsolUser -TenantId $PartnerComboBox.SelectedItem.TenantID -All | Select-Object DisplayName, ImmutableID | Sort-Object DisplayName | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all users ImmutableID..."
			$textboxDetails.Text = "Get-MsolUser -All | Select-Object DisplayName, ImmutableID"
			$TextboxResults.text = Get-MsolUser -All | Select-Object DisplayName, ImmutableID | Sort-Object DisplayName | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getAUsersImmutableIDToolStripMenuItem_Click = {
	Do
	{
		$SelectUsersFormText = "Select the User you want to get the ImmutableID of"
		#Call-SelectUsersForm_psf
		Show-SelectCachedUserPrincipalName_psf
		#$GlobalUPN = $SelectUsersForm_comboboxUsers
		$GlobalUPN = $SelectCachedUserPrincipalName_comboboxUPN
		Try
		{
			If (!$GlobalUPN)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User selected, please select a User.", "Error")
			}
			ElseIf (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting ImmutableID for $GlobalUPN..."
				$textboxDetails.Text = "Get-MsolUser -UserPrincipalName $GlobalUPN | Select-Object DisplayName, ImmutableID"
				$TextboxResults.text = Get-MsolUser -UserPrincipalName $GlobalUPN | Select-Object DisplayName, ImmutableID | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
			{
				$TenantText = $PartnerComboBox.text
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting detailed ImmutableID for $GlobalUPN..."
				$textboxDetails.Text = "Get-MsolUser -UserPrincipalName $GlobalUPN -TenantId $TenantText | Select-Object DisplayName, ImmutableID"
				$TextboxResults.text = Get-MsolUser -UserPrincipalName $GlobalUPN -TenantId $PartnerComboBox.SelectedItem.TenantID | Select-Object DisplayName, ImmutableID | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting ImmutableID for $GlobalUPN..."
				$textboxDetails.Text = "Get-MsolUser -UserPrincipalName $GlobalUPN | Select-Object DisplayName, ImmutableID"
				$TextboxResults.text = Get-MsolUser -UserPrincipalName $GlobalUPN | Select-Object DisplayName, ImmutableID | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get the ImmutableID for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$setAUsersImmutableIDToolStripMenuItem_Click = {
	Do
	{
		$SelectUsersFormText = "Select the User you want to set the ImmutableID for"
		#Call-SelectUsersForm_psf
		Show-SelectCachedUserPrincipalName_psf
		#$GlobalUPN = $SelectUsersForm_comboboxUsers
		$GlobalUPN = $SelectCachedUserPrincipalName_comboboxUPN
		Try
		{
			If (!$GlobalUPN)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User selected, please select a User.", "Error")
			}
			Else
			{
				$ImmutableIDVar = Read-Host "Please enter the ImmutableID you want to set for $GlobalUPN..."
				If (!$ImmutableIDVar)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No ImmutableID value was entered for $GlobalUPN! Please enter a valid ImmutableID.", "Error")
				}
				Else
				{
					If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Setting the ImmutableID for $GlobalUPN..."
						$textboxDetails.Text = "Set-MsolUser -UserPrincipalName $GlobalUPN -ImmutableID $ImmutableIDVar"
						Set-MsolUser -UserPrincipalName $GlobalUPN -ImmutableID $ImmutableIDVar
						$TextboxResults.text = Get-MsolUser -UserPrincipalName $GlobalUPN | Select-Object DisplayName, ImmutableID | Out-String -Width 2147483647
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
					ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
					{
						$TenantText = $PartnerComboBox.text
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Setting the ImmutableID for $GlobalUPN..."
						$textboxDetails.Text = "Set-MsolUser -TenantId $TenantText  -UserPrincipalName $GlobalUPN -ImmutableID $ImmutableIDVar"
						Set-MsolUser TenantId $PartnerComboBox.SelectedItem.TenantID -UserPrincipalName $GlobalUPN -ImmutableID $ImmutableIDVar
						$TextboxResults.text = Get-MsolUser TenantId $PartnerComboBox.SelectedItem.TenantID -UserPrincipalName $GlobalUPN | Select-Object DisplayName, ImmutableID | Out-String -Width 2147483647
						$FormO365AdministrationCenter.Cursor = 'Default'
						
					}
					Else
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Setting the ImmutableID for $GlobalUPN..."
						$textboxDetails.Text = "Set-MsolUser -UserPrincipalName $GlobalUPN -ImmutableID $ImmutableIDVar"
						Set-MsolUser -UserPrincipalName $GlobalUPN -ImmutableID $ImmutableIDVar
						$TextboxResults.text = Get-MsolUser -UserPrincipalName $GlobalUPN | Select-Object DisplayName, ImmutableID | Out-String -Width 2147483647
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to set the ImmutableID for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getAllGroupsToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.text = "Getting all Groups..."
		$textboxDetails.Text = "Get-Groups | Format-Table"
		$TextboxResults.text = Get-Groups | Format-Table | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getAllRecipientsToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.text = "Getting all Recipients..."
		$textboxDetails.Text = "Get-Recipient -ResultSize unlimited"
		$TextboxResults.text = Get-Recipient -ResultSize unlimited | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getAllSiteTemplatesToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.text = "Getting all Site Templates..."
		$textboxDetails.Text = "Get-SPOWebTemplate"
		$TextboxResults.text = Get-SPOWebTemplate | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getSharePointOnlinePropertiesToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.text = "Getting all SharePoint Site Online Organization Properties..."
		$textboxDetails.Text = "Get-SPOTenant"
		$TextboxResults.text = Get-SPOTenant | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}



$getSharePointOnlineLogsToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.text = "Getting all SharePoint Organization logs..."
		$textboxDetails.Text = "Get-SPOTenantLogEntry"
		$TextboxResults.text = Get-SPOTenantLogEntry | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getAllActivityAlertsToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.text = "Getting all Activity Alerts..."
		$textboxDetails.Text = "Get-ActivityAlert"
		$TextboxResults.text = Get-ActivityAlert | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$newActivityAlertToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$ActivityReport = Read-Host "Enter a name for the new Activity Report"
			If (!$ActivityReport)
			{
				[System.Windows.Forms.MessageBox]::Show("No name was entered for the Activity Report, please enter a valid name", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.text = "Getting all Activity Alerts..."
				$textboxDetails.Text = "New-ActivityAlert -Identity $ActivityReport"
				$TextboxResults.text = New-ActivityAlert -Identity $ActivityReport | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to create another Activity Report?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$disableOutlookAnyWhereForAUserToolStripMenuItem_Click={
	Do
	{
		Try
		{
			#$ResetPasswordUser = Read-Host "Enter the UPN of the user you want to reset the password for"
			$SelectUsersFormText = "Select the User you want to disable Outlook AnyWhere for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPNrpp = $SelectUsersForm_comboboxUsers
			$GlobalUPNrpp = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$GlobalUPNrpp)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			
			Else
			{
				
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Disabling Outlook AnyWhere for $GlobalUPNrpp..."
				$textboxDetails.Text = "Set-CASMailbox $GlobalUPNrpp -MAPIEnabled `$False"
				Set-CASMailbox $GlobalUPNrpp -MAPIEnabled $False 
				$TextboxResults.Text = Get-CASMailbox $GlobalUPNrpp | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
				
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to disable Outlook AnyWhere for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
}

$enableOutlookAnyWhereForAUserToolStripMenuItem_Click={
	Do
	{
		Try
		{
			#$ResetPasswordUser = Read-Host "Enter the UPN of the user you want to reset the password for"
			$SelectUsersFormText = "Select the User you want to enable Outlook AnyWhere for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPNrpp = $SelectUsersForm_comboboxUsers
			$GlobalUPNrpp = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$GlobalUPNrpp)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			
			Else
			{
				
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Enabling Outlook AnyWhere for $GlobalUPNrpp..."
				$textboxDetails.Text = "Set-CASMailbox $GlobalUPNrpp -MAPIEnabled `$True"
				Set-CASMailbox $GlobalUPNrpp -MAPIEnabled $True
				$TextboxResults.Text = Get-CASMailbox $GlobalUPNrpp | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
				
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to enable Outlook AnyWhere for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
}



$disableOutlookAnyWhereForAllUsersToolStripMenuItem_Click={
	Try
	{
		
		
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Disabling Outlook AnyWhere for all users..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize Unlimited | Set-CASMailbox -MAPIEnabled `$False"
		Get-Mailbox -ResultSize Unlimited | Set-CASMailbox -MAPIEnabled $False
		$TextboxResults.Text = Get-Mailbox -ResultSize Unlimited | Get-CASMailbox | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
		
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	

}

$getClientAccessSettingsForAllUsersToolStripMenuItem_Click={
	Try
	{
		
		
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Client Access Settings for all users..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize Unlimited | Get-CASMailbox"
		$TextboxResults.Text = Get-Mailbox -ResultSize Unlimited | Get-CASMailbox | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
		
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getClientAccessSettingsForAUserToolStripMenuItem_Click={
	Do
	{
		Try
		{
			#$ResetPasswordUser = Read-Host "Enter the UPN of the user you want to reset the password for"
			$SelectUsersFormText = "Select the User you want to get Client Access Settings for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPNrpp = $SelectUsersForm_comboboxUsers
			$GlobalUPNrpp = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$GlobalUPNrpp)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			
			Else
			{
				
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting Client Access Settings for $GlobalUPNrpp..."
				$textboxDetails.Text = "Get-CASMailbox $GlobalUPNrpp"
				$TextboxResults.Text =  Get-CASMailbox $GlobalUPNrpp | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
				
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get Client Access Settings for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
	
}

$enableOutlookAnyWhereForAllUsersToolStripMenuItem_Click={
	Try
	{
		
		
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Enabling Outlook AnyWhere for all users..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize Unlimited | Set-CASMailbox -MAPIEnabled `$True"
		Get-Mailbox -ResultSize Unlimited | Set-CASMailbox -MAPIEnabled $True
		$TextboxResults.Text = Get-Mailbox -ResultSize Unlimited | Get-CASMailbox | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
		
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$disableAllClientAccessSettingsForAUserToolStripMenuItem_Click={
	Do
	{
		Try
		{
			#$ResetPasswordUser = Read-Host "Enter the UPN of the user you want to reset the password for"
			$SelectUsersFormText = "Select the User you want to disable all Client Access Settings for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPNrpp = $SelectUsersForm_comboboxUsers
			$GlobalUPNrpp = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$GlobalUPNrpp)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			
			Else
			{
				
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Disabling all Client Access Settings for $GlobalUPNrpp..."
				$textboxDetails.Text = "Set-CASMailbox $GlobalUPNrpp -ActiveSyncEnabled `$False -OWAEnabled `$False -PopEnabled `$False -ImapEnabled `$False -MapiEnabled `$False"
				Set-CASMailbox $GlobalUPNrpp -ActiveSyncEnabled $False -OWAEnabled $False -PopEnabled $False -ImapEnabled $False -MapiEnabled $False
				$TextboxResults.Text = Get-CASMailbox $GlobalUPNrpp | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
				
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to disable all Client Access Settings for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
	
}

$enableAllClientAccessSettingsForAUserToolStripMenuItem_Click={
	Do
	{
		Try
		{
			#$ResetPasswordUser = Read-Host "Enter the UPN of the user you want to reset the password for"
			$SelectUsersFormText = "Select the User you want to enable all Client Access Settings for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPNrpp = $SelectUsersForm_comboboxUsers
			$GlobalUPNrpp = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$GlobalUPNrpp)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			
			Else
			{
				
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Enabling all Client Access Settings for $GlobalUPNrpp..."
				$textboxDetails.Text = "Set-CASMailbox $GlobalUPNrpp -ActiveSyncEnabled `$True -OWAEnabled `$True -PopEnabled `$True -ImapEnabled `$True -MapiEnabled `$True"
				Set-CASMailbox $GlobalUPNrpp -ActiveSyncEnabled $True -OWAEnabled $True -PopEnabled $True -ImapEnabled $True -MapiEnabled $True
				$TextboxResults.Text = Get-CASMailbox $GlobalUPNrpp | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
				
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to disable all Client Access Settings for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
}

$getDetailedClientAccessInformationForAUserToolStripMenuItem_Click={
	Do
	{
		Try
		{
			#$ResetPasswordUser = Read-Host "Enter the UPN of the user you want to reset the password for"
			$SelectUsersFormText = "Select the User you want to get detailed Client Access Settings for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPNrpp = $SelectUsersForm_comboboxUsers
			$GlobalUPNrpp = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$GlobalUPNrpp)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			
			Else
			{
				
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting detailed Client Access Settings for $GlobalUPNrpp..."
				$textboxDetails.Text = "Get-CASMailbox $GlobalUPNrpp | Format-List "
				$TextboxResults.Text = Get-CASMailbox $GlobalUPNrpp | Format-List | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
				
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get detailed Client Access Settings for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
	
}

$disableAllClientAccessSettingsForAllUsersToolStripMenuItem_Click={
	Try
	{
		
		
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Disabling all Client Access Settings for all users..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize Unlimited | Set-CASMailbox  -ActiveSyncEnabled `$False -OWAEnabled `$False -PopEnabled `$False -ImapEnabled `$False -MapiEnabled `$False"
		Get-Mailbox -ResultSize Unlimited | Set-CASMailbox -ActiveSyncEnabled $False -OWAEnabled $False -PopEnabled $False -ImapEnabled $False -MapiEnabled $False
		$TextboxResults.Text = Get-Mailbox -ResultSize Unlimited | Get-CASMailbox | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
		
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$enableAllClientAccessSettingsForAllUsersToolStripMenuItem_Click={
	Try
	{
		
		
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Enabling all Client Access Settings for all users..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize Unlimited | Set-CASMailbox  -ActiveSyncEnabled `$True -OWAEnabled `$True -PopEnabled `$True -ImapEnabled `$True -MapiEnabled `$True"
		Get-Mailbox -ResultSize Unlimited | Set-CASMailbox -ActiveSyncEnabled $FTrue -OWAEnabled $True -PopEnabled $True -ImapEnabled $True -MapiEnabled $True
		$TextboxResults.Text = Get-Mailbox -ResultSize Unlimited | Get-CASMailbox | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
		
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getOutlookAnyWhereStatusForAUserToolStripMenuItem_Click={
	Do
	{
		Try
		{
			#$ResetPasswordUser = Read-Host "Enter the UPN of the user you want to reset the password for"
			$SelectUsersFormText = "Select the User you want to get the Outlook AnyWhere status for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPNrpp = $SelectUsersForm_comboboxUsers
			$GlobalUPNrpp = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$GlobalUPNrpp)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			
			Else
			{
				
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting the Outlook AnyWhere status for $GlobalUPNrpp..."
				$textboxDetails.Text = "Get-CASMailbox $GlobalUPNrpp | Select-Object Name, MAPIEnabled "
				$TextboxResults.Text = Get-CASMailbox $GlobalUPNrpp | Select-Object Name, MAPIEnabled | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
				
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get the Outlook AnyWhere status for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
}

$getActiveSyncStatusForAUserToolStripMenuItem_Click={
	Do
	{
		Try
		{
			#$ResetPasswordUser = Read-Host "Enter the UPN of the user you want to reset the password for"
			$SelectUsersFormText = "Select the User you want to get the ActiveSync status for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPNrpp = $SelectUsersForm_comboboxUsers
			$GlobalUPNrpp = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$GlobalUPNrpp)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			
			Else
			{
				
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting the ActiveSync status for $GlobalUPNrpp..."
				$textboxDetails.Text = "Get-CASMailbox $GlobalUPNrpp | Select-Object Name, ActiveSyncEnabled "
				$TextboxResults.Text = Get-CASMailbox $GlobalUPNrpp | Select-Object Name, MAPIEnabled | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
				
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get the ActiveSync status for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
	
}

$disableActiveSyncForAUserToolStripMenuItem1_Click={
	Do
	{
		Try
		{
			#$ResetPasswordUser = Read-Host "Enter the UPN of the user you want to reset the password for"
			$SelectUsersFormText = "Select the User you want to disable ActiveSync for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPNrpp = $SelectUsersForm_comboboxUsers
			$GlobalUPNrpp = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$GlobalUPNrpp)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			
			Else
			{
				
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Disabling ActiveSync for $GlobalUPNrpp..."
				$textboxDetails.Text = "Set-CASMailbox $GlobalUPNrpp -ActiveSyncEnabled `$False"
				Set-CASMailbox $GlobalUPNrpp -ActiveSyncEnabled $False
				$TextboxResults.Text = Get-CASMailbox $GlobalUPNrpp | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
				
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to disable ActiveSync for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
}

$enableActiveSyncForAUserToolStripMenuItem1_Click={
	Do
	{
		Try
		{
			#$ResetPasswordUser = Read-Host "Enter the UPN of the user you want to reset the password for"
			$SelectUsersFormText = "Select the User you want to enable ActiveSync for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPNrpp = $SelectUsersForm_comboboxUsers
			$GlobalUPNrpp = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$GlobalUPNrpp)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			
			Else
			{
				
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Enabling ActiveSync for $GlobalUPNrpp..."
				$textboxDetails.Text = "Set-CASMailbox $GlobalUPNrpp -ActiveSyncEnabled `$True"
				Set-CASMailbox $GlobalUPNrpp -ActiveSyncEnabled $True
				$TextboxResults.Text = Get-CASMailbox $GlobalUPNrpp | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
				
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to Enable ActiveSync for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
}

$disableActiveSyncForAllUsersToolStripMenuItem_Click={
	Try
	{
		
		
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Disabling ActiveSync for all users..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize Unlimited | Set-CASMailbox -ActiveSyncEnabled `$False"
		Get-Mailbox -ResultSize Unlimited | Set-CASMailbox -ActiveSyncEnabled $False
		$TextboxResults.Text = Get-Mailbox -ResultSize Unlimited | Get-CASMailbox | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
		
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$enableActiveSyncForAllUsersToolStripMenuItem_Click={
	Try
	{
		
		
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Enabling ActiveSync for all users..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize Unlimited | Set-CASMailbox -ActiveSyncEnabled `$True"
		Get-Mailbox -ResultSize Unlimited | Set-CASMailbox -ActiveSyncEnabled $True
		$TextboxResults.Text = Get-Mailbox -ResultSize Unlimited | Get-CASMailbox | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
		
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getIMAPStatusForAUserToolStripMenuItem_Click={
	Do
	{
		Try
		{
			#$ResetPasswordUser = Read-Host "Enter the UPN of the user you want to reset the password for"
			$SelectUsersFormText = "Select the User you want to get the IMAP status for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPNrpp = $SelectUsersForm_comboboxUsers
			$GlobalUPNrpp = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$GlobalUPNrpp)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			
			Else
			{
				
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting the IMAP status for $GlobalUPNrpp..."
				$textboxDetails.Text = "Get-CASMailbox $GlobalUPNrpp | Select-Object Name, ImapEnabled"
				$TextboxResults.Text = Get-CASMailbox $GlobalUPNrpp | Select-Object Name, ImapEnabled | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
				
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get the IMAP status for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
}

$disableIMAPForAUserToolStripMenuItem_Click={
	Do
	{
		Try
		{
			#$ResetPasswordUser = Read-Host "Enter the UPN of the user you want to reset the password for"
			$SelectUsersFormText = "Select the User you want to disable IMAP for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPNrpp = $SelectUsersForm_comboboxUsers
			$GlobalUPNrpp = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$GlobalUPNrpp)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			
			Else
			{
				
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Disabling IMAP for $GlobalUPNrpp..."
				$textboxDetails.Text = "Set-CASMailbox $GlobalUPNrpp -ImapEnabled `$False"
				Set-CASMailbox $GlobalUPNrpp -ImapEnabled $False
				$TextboxResults.Text = Get-CASMailbox $GlobalUPNrpp | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
				
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to disable IMAP for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
	
}

$enableIMAPForAUserToolStripMenuItem_Click={
	Do
	{
		Try
		{
			#$ResetPasswordUser = Read-Host "Enter the UPN of the user you want to reset the password for"
			$SelectUsersFormText = "Select the User you want to enable IMAP for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPNrpp = $SelectUsersForm_comboboxUsers
			$GlobalUPNrpp = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$GlobalUPNrpp)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			
			Else
			{
				
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Disabling IMAP for $GlobalUPNrpp..."
				$textboxDetails.Text = "Set-CASMailbox $GlobalUPNrpp -ImapEnabled `$True"
				Set-CASMailbox $GlobalUPNrpp -ImapEnabled $True
				$TextboxResults.Text = Get-CASMailbox $GlobalUPNrpp | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
				
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to enable IMAP for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
}

$disableIMAPForAllUsersToolStripMenuItem_Click={
	Try
	{
		
		
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Disabling IMAP for all users..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize Unlimited | Set-CASMailbox -ImapEnabled `$False"
		Get-Mailbox -ResultSize Unlimited | Set-CASMailbox -ImapEnabled $False
		$TextboxResults.Text = Get-Mailbox -ResultSize Unlimited | Get-CASMailbox | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
		
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$enableIMAPForAllUsersToolStripMenuItem_Click={
	Try
	{
		
		
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Enabling IMAP for all users..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize Unlimited | Set-CASMailbox -ImapEnabled `$True"
		Get-Mailbox -ResultSize Unlimited | Set-CASMailbox -ImapEnabled $True
		$TextboxResults.Text = Get-Mailbox -ResultSize Unlimited | Get-CASMailbox | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
		
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getOutlookWebAccessStatusForAUserToolStripMenuItem_Click={
	Do
	{
		Try
		{
			#$ResetPasswordUser = Read-Host "Enter the UPN of the user you want to reset the password for"
			$SelectUsersFormText = "Select the User you want to get the Outlook Web Access status for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPNrpp = $SelectUsersForm_comboboxUsers
			$GlobalUPNrpp = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$GlobalUPNrpp)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			
			Else
			{
				
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting the Outlook Web Access status for $GlobalUPNrpp..."
				$textboxDetails.Text = "Get-CASMailbox $GlobalUPNrpp | Select-Object Name, OWAEnabled "
				$TextboxResults.Text = Get-CASMailbox $GlobalUPNrpp | Select-Object Name, OWAEnabled | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
				
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get the Outlook Web Access status for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
}

$disableOutlookWebAccessForAUserToolStripMenuItem_Click={
	Do
	{
		Try
		{
			#$ResetPasswordUser = Read-Host "Enter the UPN of the user you want to reset the password for"
			$SelectUsersFormText = "Select the User you want to disable Outlook Web Access for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPNrpp = $SelectUsersForm_comboboxUsers
			$GlobalUPNrpp = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$GlobalUPNrpp)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			
			Else
			{
				
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Disabling Outlook Web Access for $GlobalUPNrpp..."
				$textboxDetails.Text = "Set-CASMailbox $GlobalUPNrpp -OWAEnabled `$False"
				Set-CASMailbox $GlobalUPNrpp -OWAEnabled $False
				$TextboxResults.Text = Get-CASMailbox $GlobalUPNrpp | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
				
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to disable Outlook Web Acccess for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
}

$enableOutlookWebAccessForAUserToolStripMenuItem_Click={
	Do
	{
		Try
		{
			#$ResetPasswordUser = Read-Host "Enter the UPN of the user you want to reset the password for"
			$SelectUsersFormText = "Select the User you want to enable Outlook Web Access for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPNrpp = $SelectUsersForm_comboboxUsers
			$GlobalUPNrpp = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$GlobalUPNrpp)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			
			Else
			{
				
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Enabling Outlook Web Access for $GlobalUPNrpp..."
				$textboxDetails.Text = "Set-CASMailbox $GlobalUPNrpp -OWAEnabled `$True"
				Set-CASMailbox $GlobalUPNrpp -OWAEnabled $True
				$TextboxResults.Text = Get-CASMailbox $GlobalUPNrpp | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
				
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to True Outlook Web Acccess for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
}

$disableOutlookWebAccessForAllUsersToolStripMenuItem_Click={
	Try
	{
		
		
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Disabling Outlook Web Access for all users..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize Unlimited | Set-CASMailbox -OWAEnabled `$False"
		Get-Mailbox -ResultSize Unlimited | Set-CASMailbox -OWAEnabled $False
		$TextboxResults.Text = Get-Mailbox -ResultSize Unlimited | Get-CASMailbox | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
		
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$enableOutlookWebAccessForAllUsersToolStripMenuItem_Click={
	Try
	{
		
		
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Enabling Outlook Web Access for all users..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize Unlimited | Set-CASMailbox -OWAEnabled `$True"
		Get-Mailbox -ResultSize Unlimited | Set-CASMailbox -OWAEnabled $True
		$TextboxResults.Text = Get-Mailbox -ResultSize Unlimited | Get-CASMailbox | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
		
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getPOPStatusForAUserToolStripMenuItem_Click={
	Do
	{
		Try
		{
			#$ResetPasswordUser = Read-Host "Enter the UPN of the user you want to reset the password for"
			$SelectUsersFormText = "Select the User you want to get the POP status for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPNrpp = $SelectUsersForm_comboboxUsers
			$GlobalUPNrpp = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$GlobalUPNrpp)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			
			Else
			{
				
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting the POP status for $GlobalUPNrpp..."
				$textboxDetails.Text = "Get-CASMailbox $GlobalUPNrpp | Select-Object Name, PopEnabled "
				$TextboxResults.Text = Get-CASMailbox $GlobalUPNrpp | Select-Object Name, PopEnabled | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
				
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get the POP status for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
	
}

$disablePOPForAUserToolStripMenuItem_Click={
	Do
	{
		Try
		{
			#$ResetPasswordUser = Read-Host "Enter the UPN of the user you want to reset the password for"
			$SelectUsersFormText = "Select the User you want to disable POP for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPNrpp = $SelectUsersForm_comboboxUsers
			$GlobalUPNrpp = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$GlobalUPNrpp)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			
			Else
			{
				
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Disabling POP for $GlobalUPNrpp..."
				$textboxDetails.Text = "Set-CASMailbox $GlobalUPNrpp -PopEnabled `$False"
				Set-CASMailbox $GlobalUPNrpp -PopEnabled $False
				$TextboxResults.Text = Get-CASMailbox $GlobalUPNrpp | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
				
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to disable POP for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
	
}

$enablePOPForAUserToolStripMenuItem_Click={
	Try
	{
		
		
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Enabling POP for all users..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize Unlimited | Set-CASMailbox -PopEnabled `$True"
		Get-Mailbox -ResultSize Unlimited | Set-CASMailbox -PopEnabled $True
		$TextboxResults.Text = Get-Mailbox -ResultSize Unlimited | Get-CASMailbox | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
		
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$disablePOPForAllUsersToolStripMenuItem_Click={
	Try
	{
		
		
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Disabling POP for all users..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize Unlimited | Set-CASMailbox -PopEnabled `$False"
		Get-Mailbox -ResultSize Unlimited | Set-CASMailbox -PopEnabled $False
		$TextboxResults.Text = Get-Mailbox -ResultSize Unlimited | Get-CASMailbox | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
		
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$clearAllUsersImmutableIDToolStripMenuItem_Click={
	Try
	{
		$OUTPUT = [System.Windows.Forms.MessageBox]::Show("Are you sure you want to clear all users ImmutableID?.", "Warning!", 4)
		If ($OUTPUT -eq "YES")
		{
			
			#What to do if connected to main o365 account
			If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Clearing all users ImmutableID..."
				$textboxDetails.Text = "Get-MSOLUser -All | Set-MSOLUser -ImmutableID '`$Null'"
				Get-MSOLUser -All | Set-MSOLUser -ImmutableID "$Null"
				$TextboxResults.Text = Get-MsolUser -All | Select-Object DisplayName, ImmutableID | Sort-Object DisplayName | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			#What to do if connected to partner account
			ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
			{
				$TenantText = $PartnerComboBox.text
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Clearing all users ImmutableID..."
				$textboxDetails.Text = "Get-MSOLUser -TenantId $TenantText -All | Set-MSOLUser -TenantId $TenantText -ImmutableID '`$Null'"
				Get-MSOLUser -TenantId $PartnerComboBox.SelectedItem.TenantID -All | Set-MSOLUser -TenantId $PartnerComboBox.SelectedItem.TenantID -ImmutableID "$Null"
				$TextboxResults.Text = Get-MsolUser -TenantId $PartnerComboBox.SelectedItem.TenantID -All | Select-Object DisplayName, ImmutableID | Sort-Object DisplayName | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Clearing all users ImmutableID..."
				$textboxDetails.Text = "Get-MSOLUser -All | Set-MSOLUser -ImmutableID '`$Null'"
				Get-MSOLUser -All | Set-MSOLUser -ImmutableID "$Null"
				$TextboxResults.Text = Get-MsolUser -All | Select-Object DisplayName, ImmutableID | Sort-Object DisplayName | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Else
		{
			[System.Windows.Forms.MessageBox]::Show("All users ImmutableID has not been changed", "Info")
		}
	}
	
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
	
}

$getAllUsersWith2FAEnabledToolStripMenuItem_Click = {
	Try
	{
		
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all users with 2FA enabled..."
			$textboxDetails.Text = "Get-MsolUser | Where-Object { `$_.StrongAuthenticationRequirements -like ' * ' } | Select-Object UserPrincipalName, StrongAuthenticationMethods, StrongAuthenticationRequirements "
			#Find all MFA enabled users
			$TextboxResults.Text = Get-MsolUser -All | Where-Object { $_.StrongAuthenticationRequirements -like "*" } | Select-Object UserPrincipalName, StrongAuthenticationMethods, StrongAuthenticationRequirements | Sort-Object UserPrincipalName | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all users with 2FA enabled..."
			$textboxDetails.Text = "Get-MsolUser | Where-Object { `$_.StrongAuthenticationRequirements -like ' * ' } | Select-Object UserPrincipalName, StrongAuthenticationMethods, StrongAuthenticationRequirements "
			#Find all MFA enabled users
			$TextboxResults.Text = Get-MsolUser -All -TenantId $PartnerComboBox.SelectedItem.TenantID | Where-Object { $_.StrongAuthenticationRequirements -like "*" } | Select-Object UserPrincipalName, StrongAuthenticationMethods, StrongAuthenticationRequirements | Sort-Object UserPrincipalName | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all users with 2FA enabled..."
			$textboxDetails.Text = "Get-MsolUser | Where-Object { `$_.StrongAuthenticationRequirements -like ' * ' } | Select-Object UserPrincipalName, StrongAuthenticationMethods, StrongAuthenticationRequirements "
			#Find all MFA enabled users
			$TextboxResults.Text = Get-MsolUser -All | Where-Object { $_.StrongAuthenticationRequirements -like "*" } | Select-Object UserPrincipalName, StrongAuthenticationMethods, StrongAuthenticationRequirements | Sort-Object UserPrincipalName | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		
		
		
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
	
}

$getAllUsersWith2FADisabledToolStripMenuItem_Click={
	Try
	{
		
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all users with 2FA disabled..."
			$textboxDetails.Text = "Get-MsolUser -All | Where-Object { `$_.StrongAuthenticationMethods -like ' * ' } | Select-Object UserPrincipalName, StrongAuthenticationMethods, StrongAuthenticationRequirements "
			#Find all MFA enabled users
			$TextboxResults.Text = Get-MsolUser -All | Where-Object { $_.StrongAuthenticationMethods -like "*" } | Select-Object UserPrincipalName, StrongAuthenticationMethods, StrongAuthenticationRequirements | Sort-Object UserPrincipalName | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all users with 2FA disabled..."
			$textboxDetails.Text = "Get-MsolUser -All | Where-Object { `$_.StrongAuthenticationMethods -like ' * ' } | Select-Object UserPrincipalName, StrongAuthenticationMethods, StrongAuthenticationRequirements "
			#Find all MFA enabled users
			$TextboxResults.Text = Get-MsolUser -All -TenantId $PartnerComboBox.SelectedItem.TenantID | Where-Object { $_.StrongAuthenticationMethods -like "*" } | Select-Object UserPrincipalName, StrongAuthenticationMethods, StrongAuthenticationRequirements | Sort-Object UserPrincipalName | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all users with 2FA disabled..."
			$textboxDetails.Text = "Get-MsolUser -All | Where-Object { `$_.StrongAuthenticationMethods -like ' * ' } | Select-Object UserPrincipalName, StrongAuthenticationMethods, StrongAuthenticationRequirements "
			#Find all MFA enabled users
			$TextboxResults.Text = Get-MsolUser -All | Where-Object { $_.StrongAuthenticationMethods -like "*" } | Select-Object UserPrincipalName, StrongAuthenticationMethods, StrongAuthenticationRequirements | Sort-Object UserPrincipalName | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		
		
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$enableCachedCredentialsToolStripMenuItem_Click={
	Try
	{
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name CredMem -Value 1 -Force | Out-Null
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("Cached Credentials have been enabled", "Info")
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getLastDirSyncTimeToolStripMenuItem_Click={
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting last DirSync time..."
			$textboxDetails.Text = "Get-MsolCompanyInformation | Format-List LastDirSyncTime"
			$TextboxResults.Text = Get-MsolCompanyInformation | Format-List LastDirSyncTime | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting last DirSync time..."
			$textboxDetails.Text = "Get-MsolCompanyInformation -TenantId $TenantText | Format-List LastDirSyncTime"
			$TextboxResults.Text = Get-MsolCompanyInformation -TenantId $PartnerComboBox.SelectedItem.TenantID | Format-List LastDirSyncTime | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting last DirSync time..."
			$textboxDetails.Text = "Get-MsolCompanyInformation | Format-List LastDirSyncTime"
			$TextboxResults.Text = Get-MsolCompanyInformation | Format-List LastDirSyncTime | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getDirSyncServiceAccountToolStripMenuItem_Click={
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting DirSync service account..."
			$textboxDetails.Text = "Get-MsolCompanyInformation | Format-List DirSyncServiceAccount"
			$TextboxResults.Text = Get-MsolCompanyInformation | Format-List DirSyncServiceAccount | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting DirSync service account..."
			$textboxDetails.Text = "Get-MsolCompanyInformation -TenantId $TenantText | Format-List DirSyncServiceAccount"
			$TextboxResults.Text = Get-MsolCompanyInformation -TenantId $PartnerComboBox.SelectedItem.TenantID | Format-List DirSyncServiceAccount | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting DirSync service account..."
			$textboxDetails.Text = "Get-MsolCompanyInformation | Format-List DirSyncServiceAccount"
			$TextboxResults.Text = Get-MsolCompanyInformation | Format-List DirSyncServiceAccount | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$enableDirSyncTenantWideToolStripMenuItem_Click={
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Enabling DirSync..."
			$textboxDetails.Text = "Set-MsolDirSyncEnabled -EnableDirSync `$True"
			$TextboxResults.Text = Set-MsolDirSyncEnabled -EnableDirSync $True | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Enabling DirSync..."
			$textboxDetails.Text = "Set-MsolDirSyncEnabled -TenantId $TenantText -EnableDirSync `$True"
			$TextboxResults.Text = Set-MsolDirSyncEnabled -TenantId $PartnerComboBox.SelectedItem.TenantID -EnableDirSync $True | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Disabling DirSync..."
			$textboxDetails.Text = "Set-MsolDirSyncEnabled -EnableDirSync `$True"
			$TextboxResults.Text = Set-MsolDirSyncEnabled -EnableDirSync $True | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$disableDirSyncTenantWideToolStripMenuItem_Click={
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Disabling DirSync..."
			$textboxDetails.Text = "Set-MsolDirSyncEnabled -EnableDirSync `$False"
			$TextboxResults.Text = Set-MsolDirSyncEnabled -EnableDirSync $False | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Disabling DirSync..."
			$textboxDetails.Text = "Set-MsolDirSyncEnabled -TenantId $TenantText -EnableDirSync `$False"
			$TextboxResults.Text = Set-MsolDirSyncEnabled -TenantId $PartnerComboBox.SelectedItem.TenantID -EnableDirSync $False  | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Disabling DirSync..."
			$textboxDetails.Text = "Set-MsolDirSyncEnabled -EnableDirSync `$False"
			$TextboxResults.Text = Set-MsolDirSyncEnabled -EnableDirSync $False | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getLastPasswordSyncTimeToolStripMenuItem1_Click={
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting last Password Sync time..."
			$textboxDetails.Text = "Get-MsolCompanyInformation | Format-List LastPasswordSyncTime "
			$TextboxResults.Text = Get-MsolCompanyInformation | Format-List LastPasswordSyncTime  | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting last Password time..."
			$textboxDetails.Text = "Get-MsolCompanyInformation -TenantId $TenantText | Format-List LastPasswordSyncTime"
			$TextboxResults.Text = Get-MsolCompanyInformation -TenantId $PartnerComboBox.SelectedItem.TenantID | Format-List LastPasswordSyncTime  | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting last Password time..."
			$textboxDetails.Text = "Get-MsolCompanyInformation | Format-List LastPasswordSyncTime "
			$TextboxResults.Text = Get-MsolCompanyInformation | Format-List LastPasswordSyncTime  | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
	
}

$getDirSyncStatusToolStripMenuItem_Click={
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting Password Sync Status..."
			$textboxDetails.Text = "Get-MsolCompanyInformation | Format-List PasswordSynchronizationEnabled "
			$TextboxResults.Text = Get-MsolCompanyInformation | Format-List PasswordSynchronizationEnabled | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting Password Sync Status..."
			$textboxDetails.Text = "Get-MsolCompanyInformation -TenantId $TenantText | Format-List PasswordSynchronizationEnabled"
			$TextboxResults.Text = Get-MsolCompanyInformation -TenantId $PartnerComboBox.SelectedItem.TenantID | Format-List PasswordSynchronizationEnabled | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting Password Sync Status..."
			$textboxDetails.Text = "Get-MsolCompanyInformation | Format-List PasswordSynchronizationEnabled "
			$TextboxResults.Text = Get-MsolCompanyInformation | Format-List PasswordSynchronizationEnabled| Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getPasswordSyncStatusToolStripMenuItem_Click={
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting DirSync Status..."
			$textboxDetails.Text = "Get-MsolCompanyInformation | Format-List DirectorySynchronizationEnabled"
			$TextboxResults.Text = Get-MsolCompanyInformation | Format-List DirectorySynchronizationEnabled | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting Password Sync Status..."
			$textboxDetails.Text = "Get-MsolCompanyInformation -TenantId $TenantText | Format-List DirectorySynchronizationEnabled"
			$TextboxResults.Text = Get-MsolCompanyInformation -TenantId $PartnerComboBox.SelectedItem.TenantID | Format-List DirectorySynchronizationEnabled | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting Password Sync Status..."
			$textboxDetails.Text = "Get-MsolCompanyInformation | Format-List DirectorySynchronizationEnabled"
			$TextboxResults.Text = Get-MsolCompanyInformation | Format-List DirectorySynchronizationEnabled | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getDirSyncErrorsToolStripMenuItem_Click={
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting DirSync Errors..."
			$textboxDetails.Text = "Get-MsolDirSyncProvisioningError"
			$TextboxResults.Text = Get-MsolDirSyncProvisioningError | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting DirSync Errors..."
			$textboxDetails.Text = "Get-MsolDirSyncProvisioningError -TenantId $TenantText"
			$TextboxResults.Text = Get-MsolDirSyncProvisioningError -TenantId $PartnerComboBox.SelectedItem.TenantID | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting DirSync Errors..."
			$textboxDetails.Text = "Get-MsolDirSyncProvisioningError"
			$TextboxResults.Text = Get-MsolDirSyncProvisioningError | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getPartnerInformationToolStripMenuItem_Click={
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting Partner Information..."
			$textboxDetails.Text = "Get-MsolPartnerInformation"
			$TextboxResults.Text = Get-MsolPartnerInformation | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting Partner Information..."
			$textboxDetails.Text = "Get-MsolPartnerInformation -TenantId $TenantText"
			$TextboxResults.Text = Get-MsolPartnerInformation -TenantId $PartnerComboBox.SelectedItem.TenantID | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting Partner Information..."
			$textboxDetails.Text = "Get-MsolPartnerInformation"
			$TextboxResults.Text = Get-MsolPartnerInformation | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}



$setNewCachedCredentialsToolStripMenuItem_Click = {
	Try
	{
		$global:o365credentials = (Get-Credential -Message "Please enter your Office 365 credentials")
		$TempDir = $env:temp
		$O365AdminTempFolderCreds = ("$TempDir" + "\O365AdminCenter_Creds")
		#Create temporary directory
		#[system.io.directory]::CreateDirectory("$O365AdminTempFolderCreds")
		$global:o365credentials | Export-Clixml -path $O365AdminTempFolderCreds\Creds.xml -Force
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name CredMem -Value 1 -Force | Out-Null
		[System.Windows.Forms.MessageBox]::Show("The new credentials have been saved!", "Info", "OK", "Info")
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getAllGlobalAdminsToolStripMenuItem_Click = {
	$Role = "Company Administrators"
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$O365ROLE = Get-MsolRole -RoleName "Company Administrator"
			$TextboxResults.Text = "Getting All $Role..."
			$textboxDetails.Text = "`$O365ROLE = Get-MsolRole -RoleName 'Company Administrator'
Get-MsolRoleMember -All -RoleObjectId `$O365ROLE.ObjectId"
			$TextboxResults.Text = Get-MsolRoleMember -All -RoleObjectId $O365ROLE.ObjectId | Out-String -Width 2147483647
			
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$O365ROLE = Get-MsolRole -TenantId $PartnerComboBox.SelectedItem.TenantID -RoleName "Company Administrator"
			$TextboxResults.Text = "Getting All $Role..."
			$textboxDetails.Text = "`$O365ROLE = Get-MsolRole -RoleName 'Company Administrator'
Get-MsolRoleMember -All -RoleObjectId `$O365ROLE.ObjectId"
			$TextboxResults.Text = Get-MsolRoleMember -TenantId $PartnerComboBox.SelectedItem.TenantID -All -RoleObjectId $O365ROLE.ObjectId | Out-String -Width 2147483647
			
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$O365ROLE = Get-MsolRole -RoleName "Company Administrator"
			$TextboxResults.Text = "Getting All $Role..."
			$textboxDetails.Text = "`$O365ROLE = Get-MsolRole -RoleName 'Company Administrator'
Get-MsolRoleMember -All -RoleObjectId `$O365ROLE.ObjectId"
			$TextboxResults.Text = Get-MsolRoleMember -All -RoleObjectId $O365ROLE.ObjectId | Out-String -Width 2147483647
			
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
	
}

$getAllComplianceAdministratorsToolStripMenuItem_Click={
	$Role = "Compliance Administrators"
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$O365ROLE = Get-MsolRole -RoleName "Compliance Administrator"
			$TextboxResults.Text = "Getting All $Role..."
			$textboxDetails.Text = "`$O365ROLE = Get-MsolRole -RoleName 'Compliance Administrator'
Get-MsolRoleMember -All -RoleObjectId `$O365ROLE.ObjectId"
			$TextboxResults.Text = Get-MsolRoleMember -All -RoleObjectId $O365ROLE.ObjectId | Out-String -Width 2147483647
			
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$O365ROLE = Get-MsolRole -TenantId $PartnerComboBox.SelectedItem.TenantID -RoleName "Compliance Administrator"
			$TextboxResults.Text = "Getting All $Role..."
			$textboxDetails.Text = "`$O365ROLE = Get-MsolRole -RoleName 'Compliance Administrator'
Get-MsolRoleMember -All -RoleObjectId `$O365ROLE.ObjectId"
			$TextboxResults.Text = Get-MsolRoleMember -TenantId $PartnerComboBox.SelectedItem.TenantID -All -RoleObjectId $O365ROLE.ObjectId | Out-String -Width 2147483647
			
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$O365ROLE = Get-MsolRole -RoleName "Compliance Administrator"
			$TextboxResults.Text = "Getting All $Role..."
			$textboxDetails.Text = "`$O365ROLE = Get-MsolRole -RoleName 'Compliance Administrator'
Get-MsolRoleMember -All -RoleObjectId `$O365ROLE.ObjectId"
			$TextboxResults.Text = Get-MsolRoleMember -All -RoleObjectId $O365ROLE.ObjectId | Out-String -Width 2147483647
			
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getAllExchangeServiceAdministratorsToolStripMenuItem_Click={
	$Role = "Exchange Service Administrators"
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$O365ROLE = Get-MsolRole -RoleName "Exchange Service Administrator"
			$TextboxResults.Text = "Getting All $Role..."
			$textboxDetails.Text = "`$O365ROLE = Get-MsolRole -RoleName 'Exchange Service Administrator'
Get-MsolRoleMember -All -RoleObjectId `$O365ROLE.ObjectId"
			$TextboxResults.Text = Get-MsolRoleMember -All -RoleObjectId $O365ROLE.ObjectId | Out-String -Width 2147483647
			
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$O365ROLE = Get-MsolRole -TenantId $PartnerComboBox.SelectedItem.TenantID -RoleName "Exchange Service Administrator"
			$TextboxResults.Text = "Getting All $Role..."
			$textboxDetails.Text = "`$O365ROLE = Get-MsolRole -RoleName 'Exchange Service Administrator'
Get-MsolRoleMember -All -RoleObjectId `$O365ROLE.ObjectId"
			$TextboxResults.Text = Get-MsolRoleMember -TenantId $PartnerComboBox.SelectedItem.TenantID -All -RoleObjectId $O365ROLE.ObjectId | Out-String -Width 2147483647
			
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$O365ROLE = Get-MsolRole -RoleName "Exchange Service Administrator"
			$TextboxResults.Text = "Getting All $Role..."
			$textboxDetails.Text = "`$O365ROLE = Get-MsolRole -RoleName 'Exchange Service Administrator'
Get-MsolRoleMember -All -RoleObjectId `$O365ROLE.ObjectId"
			$TextboxResults.Text = Get-MsolRoleMember -All -RoleObjectId $O365ROLE.ObjectId | Out-String -Width 2147483647
			
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getAllHelpdeskAdministratorsToolStripMenuItem_Click={
	$Role = "Helpdesk Administrators"
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$O365ROLE = Get-MsolRole -RoleName "Helpdesk Administrator"
			$TextboxResults.Text = "Getting All $Role..."
			$textboxDetails.Text = "`$O365ROLE = Get-MsolRole -RoleName 'Helpdesk Administrator'
Get-MsolRoleMember -All -RoleObjectId `$O365ROLE.ObjectId"
			$TextboxResults.Text = Get-MsolRoleMember -All -RoleObjectId $O365ROLE.ObjectId | Out-String -Width 2147483647
			
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$O365ROLE = Get-MsolRole -TenantId $PartnerComboBox.SelectedItem.TenantID -RoleName "Helpdesk Administrator"
			$TextboxResults.Text = "Getting All $Role..."
			$textboxDetails.Text = "`$O365ROLE = Get-MsolRole -RoleName 'Helpdesk Administrator'
Get-MsolRoleMember -All -RoleObjectId `$O365ROLE.ObjectId"
			$TextboxResults.Text = Get-MsolRoleMember -TenantId $PartnerComboBox.SelectedItem.TenantID -All -RoleObjectId $O365ROLE.ObjectId | Out-String -Width 2147483647
			
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$O365ROLE = Get-MsolRole -RoleName "Helpdesk Administrator"
			$TextboxResults.Text = "Getting All $Role..."
			$textboxDetails.Text = "`$O365ROLE = Get-MsolRole -RoleName 'Helpdesk Administrator'
Get-MsolRoleMember -All -RoleObjectId `$O365ROLE.ObjectId"
			$TextboxResults.Text = Get-MsolRoleMember -All -RoleObjectId $O365ROLE.ObjectId | Out-String -Width 2147483647
			
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getAllDeviceUsersToolStripMenuItem_Click={
	$Role = "Device Users"
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$O365ROLE = Get-MsolRole -RoleName "Device Users"
			$TextboxResults.Text = "Getting All $Role..."
			$textboxDetails.Text = "`$O365ROLE = Get-MsolRole -RoleName 'Device Users'
Get-MsolRoleMember -All -RoleObjectId `$O365ROLE.ObjectId"
			$TextboxResults.Text = Get-MsolRoleMember -All -RoleObjectId $O365ROLE.ObjectId | Out-String -Width 2147483647
			
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$O365ROLE = Get-MsolRole -TenantId $PartnerComboBox.SelectedItem.TenantID -RoleName "Device Users"
			$TextboxResults.Text = "Getting All $Role..."
			$textboxDetails.Text = "`$O365ROLE = Get-MsolRole -RoleName 'Device Users'
Get-MsolRoleMember -All -RoleObjectId `$O365ROLE.ObjectId"
			$TextboxResults.Text = Get-MsolRoleMember -TenantId $PartnerComboBox.SelectedItem.TenantID -All -RoleObjectId $O365ROLE.ObjectId | Out-String -Width 2147483647
			
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$O365ROLE = Get-MsolRole -RoleName "Device Users"
			$TextboxResults.Text = "Getting All $Role..."
			$textboxDetails.Text = "`$O365ROLE = Get-MsolRole -RoleName 'Device Users'
Get-MsolRoleMember -All -RoleObjectId `$O365ROLE.ObjectId"
			$TextboxResults.Text = Get-MsolRoleMember -All -RoleObjectId $O365ROLE.ObjectId | Out-String -Width 2147483647
			
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getAllSharePointServiceAdministratorsToolStripMenuItem_Click={
	$Role = "SharePoint Service Administrators"
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$O365ROLE = Get-MsolRole -RoleName "SharePoint Service Administrator"
			$TextboxResults.Text = "Getting All $Role..."
			$textboxDetails.Text = "`$O365ROLE = Get-MsolRole -RoleName 'SharePoint Service Administrator'
Get-MsolRoleMember -All -RoleObjectId `$O365ROLE.ObjectId"
			$TextboxResults.Text = Get-MsolRoleMember -All -RoleObjectId $O365ROLE.ObjectId | Out-String -Width 2147483647
			
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$O365ROLE = Get-MsolRole -TenantId $PartnerComboBox.SelectedItem.TenantID -RoleName "SharePoint Service Administrator"
			$TextboxResults.Text = "Getting All $Role..."
			$textboxDetails.Text = "`$O365ROLE = Get-MsolRole -RoleName 'SharePoint Service Administrator'
Get-MsolRoleMember -All -RoleObjectId `$O365ROLE.ObjectId"
			$TextboxResults.Text = Get-MsolRoleMember -TenantId $PartnerComboBox.SelectedItem.TenantID -All -RoleObjectId $O365ROLE.ObjectId | Out-String -Width 2147483647
			
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$O365ROLE = Get-MsolRole -RoleName "SharePoint Service Administrator"
			$TextboxResults.Text = "Getting All $Role..."
			$textboxDetails.Text = "`$O365ROLE = Get-MsolRole -RoleName 'SharePoint Service Administrator'
Get-MsolRoleMember -All -RoleObjectId `$O365ROLE.ObjectId"
			$TextboxResults.Text = Get-MsolRoleMember -All -RoleObjectId $O365ROLE.ObjectId | Out-String -Width 2147483647
			
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getAllUserAccountAdministratorsToolStripMenuItem_Click={
	$Role = "User Account Administrators"
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$O365ROLE = Get-MsolRole -RoleName "User Account Administrator"
			$TextboxResults.Text = "Getting All $Role..."
			$textboxDetails.Text = "`$O365ROLE = Get-MsolRole -RoleName 'User Account Administrator'
Get-MsolRoleMember -All -RoleObjectId `$O365ROLE.ObjectId"
			$TextboxResults.Text = Get-MsolRoleMember -All -RoleObjectId $O365ROLE.ObjectId | Out-String -Width 2147483647
			
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$O365ROLE = Get-MsolRole -TenantId $PartnerComboBox.SelectedItem.TenantID -RoleName "User Account Administrator"
			$TextboxResults.Text = "Getting All $Role..."
			$textboxDetails.Text = "`$O365ROLE = Get-MsolRole -RoleName 'User Account Administrator'
Get-MsolRoleMember -All -RoleObjectId `$O365ROLE.ObjectId"
			$TextboxResults.Text = Get-MsolRoleMember -TenantId $PartnerComboBox.SelectedItem.TenantID -All -RoleObjectId $O365ROLE.ObjectId | Out-String -Width 2147483647
			
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$O365ROLE = Get-MsolRole -RoleName "User Account Administrator"
			$TextboxResults.Text = "Getting All $Role..."
			$textboxDetails.Text = "`$O365ROLE = Get-MsolRole -RoleName 'User Account Administrator'
Get-MsolRoleMember -All -RoleObjectId `$O365ROLE.ObjectId"
			$TextboxResults.Text = Get-MsolRoleMember -All -RoleObjectId $O365ROLE.ObjectId | Out-String -Width 2147483647
			
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$disable2FAForAUserToolStripMenuItem_Click = {

	
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$SelectUsersFormText = "Select the User you want to disable Second-Factor Authentication for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPN = $SelectUsersForm_comboboxUsers
			$GlobalUPN = $SelectCachedUserPrincipalName_comboboxUPN
			
			$mfa = @()
			
			$TextboxResults.Text = "Disabling 2FA for $GlobalUPN..."
			$textboxDetails.Text = "`$mfa = @()
Set-MsolUser -UserPrincipalName $GlobalUPN -StrongAuthenticationRequirements `$mfa "
			$TextboxResults.Text = Set-MsolUser -UserPrincipalName $GlobalUPN -StrongAuthenticationRequirements $mfa | Out-String -Width 2147483647
			$TextboxResults.Text = Get-MsolUser -All | Select-Object DisplayName, StrongAuthenticationMethods, StrongAuthenticationRequirements | Sort-Object DisplayName | Format-Table -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$SelectUsersFormText = "Select the User you want to disable Second-Factor Authentication for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPN = $SelectUsersForm_comboboxUsers
			$GlobalUPN = $SelectCachedUserPrincipalName_comboboxUPN
			
			$mfa = @()
			
			$TextboxResults.Text = "Disabling 2FA for $GlobalUPN..."
			$textboxDetails.Text = "`$mfa = @()
Set-MsolUser -TenantId $TenantText -UserPrincipalName $GlobalUPN -StrongAuthenticationRequirements `$mfa "
			$TextboxResults.Text = Set-MsolUser -TenantId $PartnerComboBox.SelectedItem.TenantID -UserPrincipalName $GlobalUPN -StrongAuthenticationRequirements $mfa | Out-String -Width 2147483647
			$TextboxResults.Text = Get-MsolUser -All -TenantId $PartnerComboBox.SelectedItem.TenantID| Select-Object DisplayName, StrongAuthenticationMethods, StrongAuthenticationRequirements | Sort-Object DisplayName | Format-Table -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
			
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$SelectUsersFormText = "Select the User you want to disable Second-Factor Authentication for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPN = $SelectUsersForm_comboboxUsers
			$GlobalUPN = $SelectCachedUserPrincipalName_comboboxUPN
			
			$mfa = @()
			
			$TextboxResults.Text = "Disabling 2FA for $GlobalUPN..."
			$textboxDetails.Text = "`$mfa = @()
Set-MsolUser -UserPrincipalName $GlobalUPN -StrongAuthenticationRequirements `$mfa "
			$TextboxResults.Text = Set-MsolUser -UserPrincipalName $GlobalUPN -StrongAuthenticationRequirements $mfa | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getAllUsers2FAStatusToolStripMenuItem_Click={
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all users 2FA status..."
			$textboxDetails.Text = "Get-MsolUser -All | Select-Object DisplayName, StrongAuthenticationMethods, StrongAuthenticationRequirements | Sort-Object DisplayName | Format-Table -AutoSize"
			$TextboxResults.Text = Get-MsolUser -All | Select-Object DisplayName, StrongAuthenticationMethods, StrongAuthenticationRequirements | Sort-Object DisplayName | Format-Table -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all users 2FA status..."
			$textboxDetails.Text = "Get-MsolUser -All -TenantId $TenantText | Select-Object DisplayName, StrongAuthenticationMethods, StrongAuthenticationRequirements | Sort-Object DisplayName | Format-Table -AutoSize"
			$TextboxResults.Text = Get-MsolUser -All -TenantId $PartnerComboBox.SelectedItem.TenantID | Select-Object DisplayName, StrongAuthenticationMethods, StrongAuthenticationRequirements | Sort-Object DisplayName | Format-Table -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
			
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all users 2FA status..."
			$textboxDetails.Text = "Get-MsolUser -All | Select-Object DisplayName, StrongAuthenticationMethods, StrongAuthenticationRequirements | Sort-Object DisplayName | Format-Table -AutoSize"
			$TextboxResults.Text = Get-MsolUser -All | Select-Object DisplayName, StrongAuthenticationMethods, StrongAuthenticationRequirements | Sort-Object DisplayName | Format-Table -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$enable2FAForAUserToolStripMenuItem_Click={

	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			#Create the StrongAuthenticationRequirement object and insert required settings
			$auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement
			$auth.RelyingParty = "*"
			$auth.State = "Enabled"
			$auth.RememberDevicesNotIssuedBefore = (Get-Date)
			
			
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$SelectUsersFormText = "Select the User you want to enable Second-Factor Authentication for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPN = $SelectUsersForm_comboboxUsers
			$GlobalUPN = $SelectCachedUserPrincipalName_comboboxUPN
			
			$mfa = @()
			
			$TextboxResults.Text = "Enabling 2FA for $GlobalUPN..."
			$textboxDetails.Text = "Set-MsolUser -UserPrincipalName $GlobalUPN -StrongAuthenticationRequirements  $auth "
			$TextboxResults.Text = Set-MsolUser -UserPrincipalName $GlobalUPN -StrongAuthenticationRequirements $auth | Out-String -Width 2147483647
			$TextboxResults.Text = Get-MsolUser -All | Select-Object DisplayName, StrongAuthenticationMethods, StrongAuthenticationRequirements | Sort-Object DisplayName | Format-Table -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			#Create the StrongAuthenticationRequirement object and insert required settings
			$auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement
			$auth.RelyingParty = "*"
			$auth.State = "Enabled"
			$auth.RememberDevicesNotIssuedBefore = (Get-Date)
			
			
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$SelectUsersFormText = "Select the User you want to enable Second-Factor Authentication for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPN = $SelectUsersForm_comboboxUsers
			$GlobalUPN = $SelectCachedUserPrincipalName_comboboxUPN
			
			$mfa = @()
			
			$TextboxResults.Text = "Enabling 2FA for $GlobalUPN..."
			$textboxDetails.Text = "Set-MsolUser -TenantId $TenantText -UserPrincipalName $GlobalUPN -StrongAuthenticationRequirements $auth "
			$TextboxResults.Text = Set-MsolUser -TenantId $PartnerComboBox.SelectedItem.TenantID -UserPrincipalName $GlobalUPN -StrongAuthenticationRequirements $auth | Out-String -Width 2147483647
			$TextboxResults.Text = Get-MsolUser -All -TenantId $PartnerComboBox.SelectedItem.TenantID | Select-Object DisplayName, StrongAuthenticationMethods, StrongAuthenticationRequirements | Sort-Object DisplayName | Format-Table -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
			
		}
		Else
		{
			#Create the StrongAuthenticationRequirement object and insert required settings
			$auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement
			$auth.RelyingParty = "*"
			$auth.State = "Enabled"
			$auth.RememberDevicesNotIssuedBefore = (Get-Date)
			
			
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$SelectUsersFormText = "Select the User you want to enable Second-Factor Authentication for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPN = $SelectUsersForm_comboboxUsers
			$GlobalUPN = $SelectCachedUserPrincipalName_comboboxUPN
			
			$mfa = @()
			
			$TextboxResults.Text = "Enabling 2FA for $GlobalUPN..."
			$textboxDetails.Text = "Set-MsolUser -UserPrincipalName $GlobalUPN -StrongAuthenticationRequirements  $auth "
			$TextboxResults.Text = Set-MsolUser -UserPrincipalName $GlobalUPN -StrongAuthenticationRequirements $auth | Out-String -Width 2147483647
			$TextboxResults.Text = Get-MsolUser -All | Select-Object DisplayName, StrongAuthenticationMethods, StrongAuthenticationRequirements | Sort-Object DisplayName | Format-Table -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$placeAUserOnLitigationHoldToolStripMenuItem_Click={
	Do
	{
		#$HidefromGALUser = Read-Host "Enter the UPN of the user you want to hide from the GAL"
		$SelectUsersFormText = "Select the User you want to place on Litigation Hold"
		#Call-SelectUsersForm_psf
		Show-SelectCachedDisplayNames_psf
		#$GlobalUPNhideGAL = $SelectUsersForm_comboboxUsers
		$GlobalUPNhideGAL = $SelectCachedDisplayNames_comboboxNames
		Try
		{
			If (!$GlobalUPNhideGAL)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User selected, please select a user.", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Placing $GlobalUPNhideGAL on Litigation Hold..."
				$textboxDetails.Text = "set-Mailbox -Identity $GlobalUPNhideGAL -LitigationHoldEnabled `$True"
				set-Mailbox -Identity $GlobalUPNhideGAL -LitigationHoldEnabled $True
				$TextboxResults.Text = get-mailbox | where-object { $_.litigationholdenabled -eq $true } | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to place another user on Litigation Hold?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
}

$getAllUsersOnLitigationHoldToolStripMenuItem_Click={
	Try
	{
		
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting all Users on Litigation Hold..."
		$textboxDetails.Text = "get-mailbox | where-object { `$_.litigationholdenabled -eq `$true } | Sort-Object"
		$TextboxResults.Text = get-mailbox | where-object { $_.litigationholdenabled -eq $true } | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$placeAllUsersOnLitigationHoldToolStripMenuItem_Click = {
	Try
	{
		
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Placing all users on Litigation Hold..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize Unlimited -Filter { RecipientTypeDetails -eq 'UserMailbox' } | Set-Mailbox -LitigationHoldEnabled `$True"
		Get-Mailbox -ResultSize Unlimited -Filter { RecipientTypeDetails -eq "UserMailbox" } | Set-Mailbox -LitigationHoldEnabled $true
		$TextboxResults.Text = get-mailbox | where-object { $_.litigationholdenabled -eq $true } | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$takeAllUsersOffLitigationHoldToolStripMenuItem_Click={
	Try
	{
		
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Placing all users off Litigation Hold..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize Unlimited -Filter { RecipientTypeDetails -eq 'UserMailbox' } | Set-Mailbox -LitigationHoldEnabled `$False"
		Get-Mailbox -ResultSize Unlimited -Filter { RecipientTypeDetails -eq "UserMailbox" } | Set-Mailbox -LitigationHoldEnabled $False
		$TextboxResults.Text = get-mailbox | where-object { $_.litigationholdenabled -eq $False } | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getAllUsersOffLitigationHoldToolStripMenuItem_Click={
	Try
	{
		
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting all Users off Litigation Hold..."
		$textboxDetails.Text = "get-mailbox | where-object { `$_.litigationholdenabled -eq `$False } | Sort-Object"
		$TextboxResults.Text = get-mailbox | where-object { $_.litigationholdenabled -eq $False } | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$placeAUserOffLitigationHoldToolStripMenuItem_Click={
	Do
	{
		#$HidefromGALUser = Read-Host "Enter the UPN of the user you want to hide from the GAL"
		$SelectUsersFormText = "Select the User you want to place off Litigation Hold"
		#Call-SelectUsersForm_psf
		Show-SelectCachedDisplayNames_psf
		#$GlobalUPNhideGAL = $SelectUsersForm_comboboxUsers
		$GlobalUPNhideGAL = $SelectCachedDisplayNames_comboboxNames
		Try
		{
			If (!$GlobalUPNhideGAL)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User selected, please select a user.", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Placing $GlobalUPNhideGAL off Litigation Hold..."
				$textboxDetails.Text = "set-Mailbox -Identity $GlobalUPNhideGAL -LitigationHoldEnabled `$False"
				set-Mailbox -Identity $GlobalUPNhideGAL -LitigationHoldEnabled $False
				$TextboxResults.Text = get-mailbox | where-object { $_.litigationholdenabled -eq $False } | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to place another user off Litigation Hold?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies>
    <Assembly>mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
    <Assembly>System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
  </Assemblies>
</File>