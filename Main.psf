<File version="3.2">
  <FileID>e3161ce4-358c-452c-bb7b-0f880be08620</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAEaOSURBVHhe7d1Xkxxp2t53fhLqk/CEhzphhKSg
gqQoSmRQIb7a3Xf33dkds2MxmBl4bxpAN9qivUN77z3ae++rvfcWl547uwuDwTZ2XPfA5P8XcaGq
q7KysgzqubIqK+tfAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADhlf/q3//bfJt57EJZ4574llBBCCCHvYO4/DE+8
eu1m4v/0r/914vEY/3r/5t/8m5zi2jZ1jq+qfXRJbSOEEEIIeRdj43hPYF2hUfE6HuZf70FoeKJN
XNYypHJCCCGE/IIMq7J99Celom3YZeTE816NTWfTn3TeSbFlqWgfU3Nf4CcWgMk174JVhBBCCPn5
aRtVblWnssralFX++mS680sbB1RY1+uOt3rTZ1d0uMt2vUhWefvRtKWtKqzv9aa3y3nTuvNsmpzK
o8tkVxxNa+fZ9duyVHdO6Fn32I8XAPu8oHdqw11gXDUdY6rpmlCNHfcO3d/ueG3X5NF5bqZ2WO0d
d6d3u9PdoV22Nni5lxKcLnjcm4+bZ3XHD6ezBOdFCCGEvEup655QcUO/Moqb3WGfG9x7XpuC6i6l
FTbpqU3rBvcil5zKdiVkVSkpt9ZLYW23N62dn1Hc4k1fUNPlnZbvDlPy6txpjUrOq1VeVYeKbFp3
vd48n/WrvndKTT3jP60A9M9seQOwXaimtV85JdXuytpV2dKr/IomlTW6Ba92raXONYyKZtX1TKve
tYvcsno3+AfU2D+lkto21zwm1ODmUd8zpbqucVW2DnvzrO8JeKdXNfcqt7ROpU0DetY/ezytO69n
UhWNvW4Zjqaz1LnlIYQQQt722JhV4tbS893gXuVWditaR1xGVdjg1vRdMShrGVFl2+jR6S3DbqBu
UY5b669uH3fTTygxs0ylZTUqKK5STl6Z0osbvbV4Oz/XTZdR0uq9tV/lVp5TC+qVmJytp9mlSknP
U1xmhTetvYufV9Wp0sZBNybPqrl34qcVgOGFXTcgT6t5aFbFVc9U3RVQRX2rypr6VFLTpJziSjfY
N6qsod0Vgmeq75tVXXu/MvPLVd7cr/KGVmUVVrjzGpVbUuNSK9uwsKyhQ/mlrqG40tA4MKPC8gbV
ucs2D0wqt6hSeZWNyi+rU4G7zqd5pe4y7couqlJB5TMV1XaqaXDO3ZBpQggh5K1N8+CsN7AX1PSo
1o2flW7gjk8vVm6hG+fcmJaQVuhWfIdU4wb7qrYx7+38vKou1XVOqqZrShl5VcrPL9Ht+9EqKSnX
06JGt3I8451vpcI+ErDL2bvtRa5QRMdnanx0RIkp2cqubPfeXbfY9VvJaB1ZUNvAT9kGwBWAsaV9
tQzNqW10UdVNnSpxA3dJTYuqWvtVVFXvBmg3UFc0uAUYcgXBDeKu7ZTVNCjHDfY5JZUqrGpSfnmt
csoaVOwuV1zT6gb7OuWV1qiwps3No0kNbuCvqG9WybNe1bX16mlOkfIrbfpWr2TklTeqsKJOGQWu
SLh5Vbr21O6Wx5aLEEIIeVvT5gbc6vYxFdX1uYF7WlVu4I50g3RuXrHyC0oVFffUKwD2Lrd9ZGCf
+RfU9qi+e8obG+MzyvQkLtUN6FmKiEn2Pt+v753xzi9009m7BXVugG8cmHNloFUPw2IVEftUjx7H
eR8DNA3O61nfjHf9thwd4yvqGJr+aRsBTq4+9wbb9rEldYwtqLa113tLo7lvXLWdY2odmlFtx4ia
et3f7rDDTdfUF3BXsqyWgSnVdw6704fVZE3Irek3D0x75ze6eH/3T3lfT+gYmVN1c69b0Ck19oy5
GzTmnd8yOONtsNDYO+nN61nvhFqH573r8ZaLEEIIeUvT6cZC2w6u2A3ALW4wbuqfdWPnpIrq3Uq0
i62922mNbpBucCUgp6LTDey9bvw7Pq1nSqWNQypzJaGiZcSdNuvGQRs7Z1Xkpsut7NIzN01wHvZx
Qp290+BWlJ/1uvG2342jQ/Pe9VtR6JlaV5cbb4+H+dd7EBqROL0hdU24xjDmMr6qrskNdU6seema
XPf2EeAdHv9t09lxaxnB04Lnd06sHufo8sHjXiOx+QRs3u604GXcad78J4Lz33DHbfrVo+U5KXa9
dv7PyIvpT5ofIYQQ8gtj40vb6JKKGwbdgD/gpaRhSKXPhr2UPBt6cXphbb9q3Zp9Zeu4CuusIAx4
l3t52uL6o/nY+ZVt425Qn1JBbd/RtC7eNO4ywUNv3nVH82kfXVbf9KZ6Rud/YgHYlHoDa5qYX1dg
YV2Tb3ECCxuadMs5PLWokamln5zhwKIm5tY0s7Kt6eWt3zZLW94yn3R7CCGEvOPxxs4NTS1tKrC4
8Q8ztbjpTXc07Y9N//20drngad8fvpwNN9ZsamxuXX0zW+odW/xpHwHYOwB9rgBsbm5qd2tTO8fZ
dnn+/Ln0/ED7e7suOy9OD07zcuz0g4MDSYfe37s7OzrY39Pe7vaL81+d/sV1OHs72y+mscO93Z0f
nGbZdX83NzWqs6Nd3V0d6u3tUU93p3fY6w7ttL4Xx79PV2eHGp81aGJ8TIHJCU0FJn+Qmelpzc1O
a3oq8HfnBRM8zw6nXznvdZmcGNfC3Kx3P7x8OwghhJDTzN72ppZWN9Q7/QsKwPrGprZcCbAiYNne
3tJAV5uaWjs0PT3jMqfd/UMdHuy9mOblbG9vKzA6oPqGJm3s7Lsysa6JsXGtrG/p+eHB319ma8sN
ihvqbm9UXX29Fta23Lz3tbO75+rAcy26gXN51QrC4YvLrK+vq7W11SsMZsv9vX/4XDubG9qz7mGn
ra25046Ov6yjo0NdXV3accVkd3f3B1lenNfM7KzWN7e0t7en/f19F1dejo/vujKysbHhlm33+PDo
9D3Li2l+OE+L3Sejo6PeNHa5H9x+Qggh5JRiK5kLK6dRALbc2v7GnG59+bWySmvV1ViruIgUjYwH
1Dcwoq2t7Veu3A3y2lXSvRt6HJ+nlZUFpUWFKTWtWLlJsUrJqtTB4f4PL+MKwJ4bJGty43Xhm+t6
1tys/tFpLc6MqaO7T5U5WcrLr9LQ8JA23PXZslkBaGtrO36nQSpNTVRT94iKUpPU3DGikaER5SWn
qOFZjzo7u7S2ufdi2vb2dg0ODnrHX7W+PKu29k5tueJia+sbG+va3N6VayTacLfNTI6OadOVBys1
mzt73n2w4wZ4KwV2e07oHJ7JyUmvDFAACCGEnFVOuQDM6uonXyq3rFwJIY8Uce+xPv7d7/XFjXCt
bdtb2lsvXbkNkruKu3VNT/NqVJiVqptXb+jOjRB998FHikwscud/vyYfzM7uoZanhvT42h1FhEXq
SUyoQm6HKio6XKF3QnT/xk09ik7QmhuY7cYF3wGwNW6TH/NItx9G6c7Vq7p27lt98OGnio6M0b3L
d3TbXb/ttyDICsDAwMDxX6843NFQf78mp6Y1OTGq/r4BjY6NqrujXS0dvTp4/lwj/T0aHhn1PmLo
6uhQZ0+vBvoHNTw44ApHs5Y3do5n9j37eIMCQAgh5KxzigXArXGvTCsvrdCtfa8pOzZOmSmZenT7
tmIzi90a8K5bA375yrd0eLirvCeRik3JVlHOU925c0+x0cnKiEtQRn659tza9MsfMVi23cA+PzGo
p7GJehIRpYzsXGUkJSomNlm5GdnKS03X3Yfhml9zhWT7hwXABteG4iJNLmxquKVe8WERehT1RKWF
RXp4+bquXrmtlu6RF9sY2DsHr3sHQId7Wl5a1sT4qOYXFzTsysDM3LymAhMaC8x6kyzOz3uHq0vz
Gh8bU2B6RosLS1pbWdLg0Kh2TvrcwQkEAhQAQgghZ5rTKwDH2Tpey7fDbTfob2+ta3Z2zp328tp/
MFvaWF/1thewt9AXl5a0vb3jbUuwvLKsjb+b/vvs7u1pdXlJq+tb2t3e0MLisvf5+srSopZX11+8
22AFoKWlxRvUDw8PvcPn7vDweJBfX1uVHWssLlTnwLR3mk1nbBsAexdgcXFRS27ZXs3czJS6u3vd
7ZtSV2e3Wwa3PG655+bmvPOXl5dfHK64ZT063R1fWdH8/Jyb/u/nu7CwoJGREbYBIIQQcqY50wIQ
jG3Y9vI0Lyd4/suH3nGXk6YPxpvu5emPr8NOswLx8nQNDQ3e2rwN6D9IZ6e3kV+nO+x0h3b85fPr
6urc4D6rmZkZ7/DVzMxMu8x6A/us5YRpfm6mp6e9gmAbHgZvAyGEEHLaOfUC8LbFCoC9C/C6tfgX
OV5bD8amX1tb8wbi3zq2zCfdFkIIIeS08t4XAEvwXYJfkpPmRwghhLzr8UUBIIQQQsgPQwEghBBC
fBgKACGEEOLDnGoBsI3mVldX37rY1+le/oYB+W3y8hONEELI25VTKQD2Ym8DrW05b1vcv02xUhL8
Xj75bWP3P0WAEELezpxaAbDvrtvh28h2rmMlwA7fRKwY2ff7bX8CdvykaX5NbJ4277Oa/89NcHls
B0gUAEIIeTtzqgXAZhj0/HBXVRWlGgosHp9ysuXZGc3PrXh74/sx+5vLKikp1ezq7vEpxw52NDP9
+uuxAckGo7X1DW3vbHnvCqy72OGGuw07uzva3Fh35697Hxesra17t2XN+/jA9ibopneXtcOVldXv
d1zk7rx1N/2Grelub7lpj9512NzcePHRg80j+C6ELYed7i2Hm97maddtyxKcT/Cdi5eX42heR8th
y3g07dEvDdpy2/nBwdeub9Vdbmdn25uPLZcderfZHXq3a23VHXe3xx3asuzu7XrnH13n0XR23ds7
R3tlDN5X3nK5eIcvLc/fL/eat5dDCgAhhLy9ObMC0FRZosKqZk1NTyntSYxqmtqVlxyv+w8eqqSi
VoVpyUrLLVJOUrLSk0vUWF2ihJQM1ZcW6/6jGPX09aqgsERNNYV68DhOewcHqszNVm1rt2Yn+/Ug
5IGqKiv1+FG4EqNDdeVqmBqr8hUdn6L8jGz1jH9fCGzgXXPLOjXcqTvXbqu6tccbRJcWFzQ62K38
pzkanJzV0sKspmZmtbI4r4HBYa25gXxidFgzc24wW1rQ7PyidrbWVV2UrZv3QtTUNaT56YCmZqfU
UFamhoZOTU9NaWh41NuN8aytBbvCYAN08B0IW46FyUFFPI5UZVW1ivLLNOOmmXPzmV9c0qy7v2bn
548+tnDLMThky7GpydFRb626v6tfU1OTCrjrLMvOUkv3qHsMNjTvLmOxAX11YVpxEZEqLK1QfXWj
9xsES8srrmjNaXhoSIur6+62zmtheU3z470KC32s8Zl5jY9PeLsynpya05xbxvtXriolp1wrrgzY
7x7Mzc5qeGBAg/0j3g8gBdz9Yr9rMOful7njvSIGJie16K5r0d1WCgAhhLy9ObMCUJmXpZr2IQ21
1enhzVsKD43Qgys3dOO763p4457uXruj0McRin4crcfXHynk3m397nd/0t3bUUpPSNedC1eUV1Kp
J7e+1heXQr0fBspNSVHveEANubH64MMvlPQkXslPUhR69YYyMvN178IXuvEgTOF3IjS/+f0P7VgB
2NjeVf+zIn3yl2/dQF2lGzduKzE+Qckpibr6+ee6eCNM+Tlp+uzzc4p69FhffXlRScnpirh3U+Fh
0br85Ye69jhNK9PDbsBMcgP9sEJuXNH1i1d0KyRUj+8+UHhIpO5eua5vvruptKQ4/eGf/kkNPWPa
dWvRwQJg99n8+IAeh4arKDdTn/35r3oUnepux0N9/c0VhT+MVHzMY/31o08UExGly+7+SkpKU0TI
HUVFxyspIlo33XXeuHNXH/3+L8qr6tLuztYPCsDa/JSiQ0NVVFygc3/5RMkZWYqNj9XDe3d09Ts3
qKc+1Xd/+5PC0so01l6hLz+9oNysVN0Leazw+/eV8LRSsyOt+vSfP9L5c9+5+7ZYJRmZevggQk9d
uYp25efS+W/0OCZZD66e07fX7utJ5BPlF7qyFhLuCs2GlnkHgBBC3uqcWQHY315VYX6+xqfn1FhZ
rp7hCU25tdjRwRGN9rbr4ZXbqmnr1rxbc7TTWp7Vq6qmQWOjU25teFYzE+NqamrSQH+vWtv7vXlu
LAaUV1CiwFRArc1tbm1z2ps2MDyszu4uDfb1usMBBVxJ2Hvph/asAKxvbWu4rUoXzl9XRXmBrroy
EhsdrcTEZGWn56g0K0vXrl7VB3/92A10cSrLL1bk3Ye6feWCrly6oUtfn1Na0TNtLM3oiVtjjoiJ
UWpCgnIy8pWfmqJHd13xuPfIFZ1EleYX6dG1azr39WUNTy24+2j9+3cA3Nr0+uqSkqNDdPHiZRUV
lCs7Nlbnv/1GH3/4uZIS3fzSYnX15kPFhz3QuS+vKDkpxc37tsLDYxQT8sgtc7ZKcnJ15/JtVTX2
eL96GCwAq95b+e6+T4/R1WuXdeGLr5VXVqJrVy7rcViEzv3tvJKTk9zpX6igzt3/433KzShSQWai
brnbG3Y/TE3tY1oc63Cl51vdvX5dV65c0s1boUqIS1CYm0eYK3B5ucXKc/P57suvlOgKQlpclNIy
s/Xg7n31Bxa9H2qiABBCyNubMysAP+bg4PjIb8AKgH12v7qyqJ6OdvUMDHm/PDg/N63+/n7Nzh1t
uBaYGPPevp+fX/B+2W9lPuDWtr9SUkGdW6Od08jYpPfRwcLMhFraOrRin3W7Qddiv3g4Z5mzgXhB
y0uLGh4c0tzisvcZ+osCsL6u5YU57weIpu163WmWsZEhjY1Pusu6wXNlSROT46opzFdJeZO293Y0
0t+nwMy8Fufdddh1LixqempC44Ep77P3hYXjdwDcddnt7Hbzn3DlyM7ra61V4tNcdTQ/U3Z2mda2
tzU9MaqxiWmtri67yy65+U6rr3/IG7QX3TKvudN7Ojs0Nbug0ZF+DY2Oa3xs1PuIZH521t1mu8/s
I4uARkbGNDY2pqmpKXd81NsG4eg+X+Hrl4QQ8hbk1cHf8sYKwG/JBkZvAHaD0tEAuXL8VbVl7/N5
O24D1rI7Pfh38DQrDrax3PLyijtug+WC98NBNh87Pzjtklvj9RL828Xmtbh4VC5scHyxlb6LXX7Z
TW9FxLLiprX7cMkVBxtYV1fd9a26+3jdlQx3nXa+TR+c96L97LFbpmV33M63bxlYvPm7v+2dgBW3
nMHpbeNAm7/3s8tumWzbBPuJYisS3nV698XR/XI0j++X0e4Du+12eW8ZjucbXAY7/ei8o2ns8nZb
XxQSd92EEELeXF4d/C2+KAC2FhrcQv1N5U1fPyGEEH8muCL46jsBvigAAAD4lY3R9s4sBQAAAB+x
sdlXBeDwYP8n7VwIP+75c+5JAHhXvbEC8HxzQfn5pd7xmalxZSWn6FlTtybGp7090I329ykjPkmd
gwHtub+39w60uzSpsuomjff3qrdvwtu4zPZI199Wq/T0Qq0sLWl5zS3Eawy31+vxk3jNLK9pfGxc
eweHmpue0uT0tLZ3dzU9PqallQXVFZVpYHBSiwtz3n4CVuamNTGz4BZ6T4HpWXe7NrSytqXn+xtK
evhA8enFmgwENLuwoo66GjU3D7rbvKHRwX5NTMxpc2NVG5vb3k52tnZP/prDzvKkQm/eUUx6rrcD
HduQrr4oT8/aBrUwP+d9fXFpYlANDT1u6n23/BM6eH7obXXvbRC4uCIdbCstPFTR8VkaGpvSprv/
F911bu9sa2dvX7anv7X1LS3NTCkwO6+SzEw9a+51j9G6AuPj2t4/1PzUhKYWlo8W6kTP3RNmSV31
5bp7+45K6xo1NRrwnkSbO7tamJvR6rqb38SkNnZ2tGN7DdzZ8jYK3NpY10Rgyi3Lnjtt73h+PzTS
Vq3Ep1Vanx3Qk4RM7zHY3t3XwvSkphdXtb2+4h5ju++3NTo6oUNXQryvFbrn2FTALfvsnDcf+1xr
xz037FsIo72tysos1UvfAP2Bzrp6N92kmirr3WO44B6jPa2vHj1v7f61jRY3tl7ZyyQAvOPsNe6N
FIDB5jJ99tU5lVWUKTU1WSFXbygpIUOPbt9XTGK0oh490jcffq2o2ERFRMZodm1H3TWZ+urCZeVm
5SnBnf/xxx8pNiZWdy5c0P27UcpMSVZZY9/xNbziYF3Jsane0cGmct2/80CpSSm68sUXOnfuop5E
xbnrvqfoqCeKDglTanyOosPu6rsLNxV5/77uPYpRQmy8SitrdPvLP+tmRIb2d1Z09ePPdT80UlGP
Q/UkLlmxYVGKCU3wdmSUm1ugvKRUnf/bXxQanaSY8CeaWFj3luFVs4MtKixsVFtdoRITE/TVF5/p
m799o/yiGl396iOllXRpabRdxSVtGumu052bIcrOylFSSoZK87OVmlun5wcbuvnpV7p1+65u3gxX
amyY/vrXj/XkSbQSkxN0/pO/6PaDMD2+eVchD0P17ReXlJLsLhvjljc0TClJyXpw/YZu3X+i5e2T
h8v+hlz98x//rMiwJxoamNDT6DuKjUxVTEScSstK3fWkq7aiRGEhoe5xi9aT+HhFP7qhT7/8WglR
Me56HysyKtrbJ8BJBmvz9fnfLikzLUq3r4Xrcch1Xbl6T2F37ujB4yTlZibosy8uqyA3Ww/vPFRC
ZLg++fgTJcXH6Wt3eOHiHVcm4/SROx7vnhvXLt3UrQvf6fbd+NcWgML4RPX0jSjHLV94RIJqaiv0
yb/8SeHhkUp4kupuX7S6x+aPpwaA98ObKQDP91WSn6aUtFQ3YMQpK6dQZUUFepqaraLUFEW7AbCm
vFoJMSkqzU7VpVthdiH34p+stKdpiolNUE5Soh6GRquytEIt9U0qyi9QaUGOMorqj67j7+yrpjBH
KVmFaqwu12M3EGa5IpGd9FTZKVlKCgvXpa+vKPVptvLTMpQem+IG0eu6fPGmysqeqaW2zg02sSor
r1TEresqquvU4c6ykiKStbS6rNyESD1JfKqCzBylxT1ViisuebmFKkrP0L2bt1Xb0KzkJ1Hqes1A
sjE7pHtXbigjO18F+Zn67MvvlByfrpysTJ13ZSC9uE3bC8MKuRel2poyPbr3SLX1jUpOSFKVG3Dj
kvO1f7Ct5MhktxY7q7rSWlW6+zgyPk+VealKyy1W7IN7yi0sdQN0nZqqqtzglqTspznu9mbqyePH
SkvNUH1NoyrySjS7un+8ZD/U11Coew9jVOFKx11XJEpKy1SeX6qM9KfKyMxQZkaOm0eFHt0PVaUr
BDHxCa6gZCksKlEVReXqeVarb92g/NIOGX9goqdNKW65svLc45D8VJevXta1K3dVW9emptIS3b1r
peyW0pOTXEk6ryg3SIc9jlFDTbWeuvsrKylTT2NjFOYKSWVppZpqmpQbl6D0rCK95s0X9bfWKMTN
N6+kRkW5WcrMeur+fqTy0nK1tfWr8GmiqtuHj6cGgPfDmykAbjB/+fXfdoiz4a7Q3rI29rau2dvb
cWvEZWroGHR/ff95897e0dvH66ur2tk9Gqi2tzfcda1qb/9163nmUDMzc96cVpePfmjo8OBAh4eH
WpkeU21Vsxsk3KnPD73PtzfX7Ydv9rzjh4fe1N538Pd2d7y30l+2u7Wh9a0d7/iBTfv8QLY/AWO7
/F1fP/qBIJvL6yzOz2rTG6UOtLa26RZj39139uM860fzdJe2nQPZW+ir7rYeHh5oY3PL2+Pf1itv
qR8t73PvPgnen/u721p187XT7aS9vW3v8mZ1eVneTXe33e6Po0ucbM3dB7vuPpidnT06wV3Gvtdv
l9laX/M+TrH71xwth7Ti/raPXMa6m1XxrNM77STP3XW/4Oa74ea7u7fvPQY2px13P29u7Wqit1E3
7oRqzd1f9jzY3TvwLnvgrsOsudu9u+9Osxvqsukud7woJ1qYm9W+O98ec2O3Y2vb3aduGbz7/x9c
FgDeRW+oAAAAgDeJAgAAgA9RAAAA8CEKAAAAPkQBAADAhygAAAD4EAUAAAAfogAAAOBDFAAAAHyI
AgAAgA/9JgXADgEAwNvDxuYzLQC2j/iNjY0fzJwQQgghbzb2s+lnVgC2t7e931JvbGzU+vo6IYQQ
Qt6i2Er6mRSAnZ0dTUxMKCMj4/gNBwAA8Lawd+jPrABMTk4qJyfn+KoAAMDbwH76nQIAAIDPUAAA
APAhCgAAAD5EAQAAwIcoAAAA+BAFAAAAH6IAAADgQxQAAAB8iAIAAIAPUQAAAPAhCgAAAD5EAQAA
wIcoAAAA+BAFAAAAH6IAAADgQxQAAAB8iAIAAIAPUQAAAPAhCgAAAD5EAQAAwIcoAAAA+BAFAAAA
H6IAAADgQxQAAAB8iAIAAIAPUQAAAPAhCgAAAD5EAQAAwIcoAAAA+BAFAAAAH6IAAADgQxQAAAB8
iAIAAIAPUQAAAPAhCgAAAD5EAQAAwIcoAAAA+BAFAAAAH6IAAADgQxQAAAB8iAIAAIAPUQAAAPAh
CgAAAD5EAQAAwIcoAAAA+BAFAAAAH6IAAADgQxQAAAB8iAIAAIAPUQAAAPAhCgAAAD5EAQAAwIco
AAAA+BAFAAAAH6IAAADgQxQAAAB8iAIAAIAPUQAAAPAhCgAAAD5EAQAAwIcoAAAA+BAFAAAAH6IA
AADgQxQAAAB8iAIAAIAPUQAAAPAhCgAAAD5EAQAAwIcoAAAA+BAFAAAAH6IAAADgQxQAAAB8iAIA
AIAPUQAAAPAhCgAAAD5EAQAAwIcoAAAA+BAFAAAAH6IAAADgQxQAAAB8iAIAAIAPUQAAAPAhCgAA
AD5EAQAAwIcoAAAA+BAFAAAAH6IAAADgQxQAAAB8iAIAAIAPUQAAAPAhCgAAAD5EAQAAwIcoAAAA
+BAFAAAAH6IAAADgQxQAAAB8iAIAAIAPUQAAAPAhCgAAAD5EAQAAwIcoAAAA+BAFAAAAH6IAAADg
QxQAAAB8iAIAAIAPUQAAAPAhCgAAAD5EAQAAwIcoAAAA+BAFAAAAH6IAAADgQxQAAAB8iAIAAIAP
UQAAAPAhCgAAAD5EAQAAwIcoAAAA+BAFAAAAH6IAAADgQxQAAAB8iAIAAIAPUQAAAPAhCgAAAD5E
AQAAwIcoAAAA+BAFAAAAH6IAAADgQxQAAAB8iAIAAIAPUQAAAPAhCgAAAD5EAQAAwIcoAAAA+BAF
AAAAH6IAAADgQxQAAAB8iAIAAIAPUQAAAPAhCgAAAD5EAQAAwIcoAAAA+BAFAAAAH6IAAADgQxQA
AAB8iAIAAIAPUQAAAPAhCgAAAD5EAQAAwIcoAAAA+BAFAAAAH6IAAADgQxQAAAB8iAIAAIAPUQAA
APAhCgAAAD5EAQAAwIcoAAAA+BAFAAAAH6IAAADgQxQAAAB8iAIAAIAPUQAAAPAhCgAAAD5EAQAA
wIcoAAAA+BAFAAAAH6IAAADgQxQAAAB8iAIAAIAPUQAAAPAhCgAAAD5EAQAAwIcoAAAA+BAFAAAA
H6IAAADgQxQAAAB8iAIAAIAPUQAAAPAhCgAAAD5EAQAAwIcoAAAA+BAFAAAAH6IAAADgQxQAAAB8
iAIAAIAPUQAAAPAhCgAAAD5EAQAAwIcoAAAA+NCZF4CJiQk9ffr0+OoAAMDb4EwLwPb2tubm5tTR
0eEdtyshhBBCyJuPDf424NvxUy8AwRnv7+//YOaEEEIIefN5dfC3nFoB+LsZ7+xo1+Wk805aEEII
IYT8djmTArC1va2lhRmNjAd0cPhch4cHOnz+XM8PD7W3u6v1tXXv9IP9fT13p+/t7bnzD19bJggh
hBByujn1ArC1taOdtXndvXRJpQ09Gu1rVUNTm1rratTQ1qGB3nbVVreqs7NFHT19euZO7+ntU5Ob
Zn17hxLwhsK7MoQQ4q+cSgGwwWN9fV3z8/NaXFx0f2+qtjhbaanJ+vJP/6Rvr97Uw2v39eDBPV28
fElhN0N0NyRS5UVZ+q//539VYmq67t2P0MLmjpaXFr15kN8uCwsL3uFJTxBCCCHvZ06tAKyurmpp
ackd39bO9oYq8p8qMT1d2SkpKiqtVvOzTrXVVyiroFTNVdXKzsxSSWmp4mKS1N3TpbgniZpdtQVi
TfRNxEpAcEtRQggh739OtQAsLy97x23G624w2ds/0MH+nvf33t6udvf2vc/99yzu7+3tHe3t7ngD
z+7eHoP/G4y9A0ABIIQQ/+TMCgB5t0IBIIQQf4UCQLxQAAghxF+hABAvFABCCPFXKADECwWA/Np4
rwXk1HPSfU3IaYQCQLz8WAHgcT392H36Pt2vz/e2tL/rskNOK3L36ftWAt635/3bkl9yn55ZAbC9
+x0cHHi/D2CHu7u7f3fl5O3JPyoA9gNP/f396uzsVHd3Nzml2I9n2f+bd/3F0Pb7YQP/X7MC+s+R
I/ovcWPkNBIzqv+WNKHV9U3tuPv4pPv+XUvwh+Pa2tpO/D9Bflna29s1Ojr6s8fZMykA9iDbwthC
2aBhh1NTU8cvdFs6OJT0I7v+tcFoZ9dKxL6b34+/QG647Hszlnej7O/ged6+CXa2fzA9+WH+UQGw
x62rq0vDw8Pe40p+fezns60A2P4X7P/LSff7uxIrALtubfXfRYwor3FIzb0jaugmvybPetxh17D+
50eDmlzc0O72yff9uxb76fhAIOCNC+Pj4yf+3yA/L2NjY94KmuWNFwB7MVtbW1NcXJyePXum5uZm
VVVVKS0tzfv+/+7Oppqri5SWXaSNvefegL3vBvkXXDE4ODwayGfHh9Xa1KH55XXvb3snwTu0dxcO
n2t/f082h8ODPe3turXUtlolpmZobm3Hm85+A9nsuetcXVn3pnVX4P276wrByyXB7/mxAtDT06OR
kRHvyUZ+fawAWKmy+/19KAA7rqT/51hX+vtHNBsYU2CC/JpMTdrhqP5j9PB7VwBsZdDWWu3/wEn/
N8jPixWpgYEBDQ4Ovh0FwF7UiouLvYE2qKCgQG7MVn9TpeKTMjQemNZgV4tS3YDd092jrJQUZWSm
q6iiVu3P6pWZU6iC9FTFhKdqZLBPOXnZamtpU8KTOHUMjKqpuljPWjtUmpWh8qY+LU726Ul0vIZG
JzQx1KvUpDTV1dUpNS1TGYlRunL9sVobar35lhUUa3hk+rW/VujHvOkCMOoyNT2j6amA+/uo1f5Y
JiYmNeGe/GMuk5OvvpiMa3pmRlMBN42bzl50LH8/nf0HmtCMm9bmNTU9rcDkpPf35ISb9yvTnlbe
xwLwf7gCYGv/NoCddJvPJG4NaGIyoNnZ2aPnwknTuOfCzMys91wIrjH9nIy7x+q3HqzGx+1wVP+B
AnAmsefBZGDq6Hnzax5f77Vn8uTzfqO8MwXA1r07qwsVn1ao7d0dJTx8pMfhkbpy/rxCrt/Rg7sh
iggN04Vz1/Xgfoju3Lip+xdvKyY0Qn/4/T/p3JeX9Oj2Q929eFUPIhLV11Gn//t/+496nFmu2eFO
RUQna3N7RxmhN/T//v4D3bx2Uw9vP9KVL8575eDLP/5Bn128rEtf3XD/qbbcf6p3+7PX08ybLgA2
8NdXl6mspkFzC0uam53WtPvPubAwr2k3KC+45bNpZufmNTM9pbn5eY2PDGt42F1+dFiDA0Nu+jkt
zM95/yECk+OqKClUfWu3xkcHvY+h2tpa1Ns3pBk33Yyb59z8gpvnlIb6e1RRVuHK45haG+vV3tGp
mqpKdfUNuheGsykBFIDTiZW7vq52FRUVqn/Eity0V+Ls+WHPHSsFtjxlxQWqb+nU4tKS9/yx55Hd
97Nu+tnj3zCx06ddUZh15c9Om5+bdc+9GQXGR9XXN+A9r05ahrMIBeBsM+EG7e62JuXnFahvaETD
Q8PuOTHnfTxhpWBqalrz7rXEDu21x55X9noxN+tWKqZmvOeGrbDMTk96rz1WEk+6nt8ib10BsOPx
8fHq7e31PpdobW11a/qp2t8/0PbGknLT4pSSU6r2xjolxKepqbFVPR1d6u3s0WBPu+6c+1b3Hyeq
rbVNtWXVKi8s0BM3v4ryWvefvVcdTc3Kz3qqmoYm5aSnqrKpS3vb66oqfKqYpEx1tDW7NX93fnWD
+rv61FhRqcLSYpUW5Ckrr1ANNS1a2979h9sg+C1vsgAE3H+y1toy3bn7QNWNTcpLS1RaTpFKczIU
Ehatyooyhdy5p3L3eGcmRiu7qEIlRZn6/IN/UVhCoZpLUvXJp5fdoF2iiKhEjc/MqzInXSGuTIaH
h+qLv36gP/5/v9NHH36qvLwK5edmKq+wWPFRj1Va36GpkW5dPPeNK5BP9M13F5WZlqAP//qJmntG
3Vrj2fzHpgCcTuYX55UZ/Uj/8oe/Kiw6Sc3utaGhqkqpcU/0IDxWo1OzqsrL0L1HkWpsbVZyTJQK
yqvd8yhO9x88VE5BsTK84w9UUFaj/Iwk9xpRrPTYSEUlZamjo1HffPKx4lJL3YAwc+IynEUoAGeb
+cUZPblzU9fsh+rcY5+Xka+0tAw9a25SSnKKysuKFO1WGutqa/Tw7n3llZQrJTpcT9Ly9KymWBEx
Saqvr9K9q+f14V/Oa2hq7h+8A3W2easKgB23FzR7cautrVVDQ4Nqamo0NDR09EK3ta3nz59rf29X
+wcH7vih99n+3v6e9vZsW4B9tdc3anFtV88PD3Tg4n2W7y5z6I7btwvscnba7u6eN6+jt/K33GnP
vd8esKJh09o3ELxvI7hp7TrsMnaabXPA4P/DvMkCYM27wA26cenFGutr0tXzX+nK1Rs6/8UFXb9y
U5/++W+69t1V3bp4Uf/P//VfdP3OXd26E6Iw9x84Nr1CXXUFunbplh6H3Nbnn32jquYePXUDf3Zp
g/JSIvT5J1/r4c37Cr37UGE3bujc+avKSI3Xf/hf/r1Si+q1MBdwA0OEvj53Xh9/9qUik5IU/eCW
EjNKNDd3Ni/6FIDTycLSgtJCb+t3v/9IYQ9DFHLzjm58c15ffX5B3527qPL6TqU/CVdhbYdaKnL1
zedf6Mqlq/rqLx/pL7//s85/dl5ffvCh/vKHD3Th6xv69JMP9N//2+907eJ13bp+Sxe+vaQvPvxE
UQkFWliYPXEZziIUgLPN/EJAUW6lIjszT7e//UK3Lt/Tteu3de/uLbfiEKWEyAf65pvLOvfpOV39
9ooufv65LrnDu7fu6sPf/5M++PRr3bp6TVHhj3X5m1sacysdR4/Zb5+3rgDYjG3AtcHZBl07tIH4
1Ss/KRtunjbA/5Qt/8np5U0WgPGJSY0N9SoiNESZBWVu7SxGsckZqnRranXV1cpwx+uqa1VZXKyE
2DhV1j3T05Qk19STlVNYpvGhHqWkpqgw56kePIrWwPiUhrtbdf/2dSVk5KrBXbbCNfiqsgpVlpYr
Iy1FT7OyFRcVo5buYQ10NSksNEyVldWu9Ucqr7DQnRel+uZuBQJn8/keBeB0MjUdUH1FhWoqa1WU
n6PwsPt69DhGZaXVqiotU0t7v4a6m3X/3n2VVNYo/vEjpWcXqiy/QPlZeW7NL1t57rAgJ1/5mdne
2qCt+VVW1KrWPR/ysp7q+rUbqqht07S7rpOW4SxCATjbzMxOq/hpoi5dvqGq2gZVF5coOTFJhe41
JskdFhfm6tGjCJW4143aqhoVZmSovLzGPSeqlOVeP9IyC1VVkquEhGQlu9eh3uEJ3gF4uQCQdytv
sgDYC519huZ99hYIuP+cR5/DTk1PKeBeLGZmZ7xD+2zXpglupOdt5GcbDR5vxGefyc3NzWrczdM2
DLPvG9tn/faCY/MKHnqXnXLzctNO2AutXd7Nd9r7bHjO2y7ANhoLTE78oo3GfkooAKcTe3yOnhtT
3rYis7Nz3nPAHks7zTbk9J4L9ryxz3ePnxPTM9MvnkPB2N/2nLHL23PF5munzy/M/+INCH9pKABn
G3ssp+yx9T7n//75Y/G2I3GvD0fPo6PXj6PXmuDrkTvdve7Y65FNa88be8056Xp+i1AAyK/Omy0A
/sv7WgBa+0Y0PelunxvAyC/PpCtRE+N8DZD8eCgA5FfnxwqA/Ye11mxPNvLrY18dsp2hvC87ArIC
8L9Gjqi6Y0iDw6PqHSS/Jn1Ddjiif/d46L0rAPZOjL2e2P+Bk/5vkJ8XK1JWACwUAPKL8o8KgA1Q
9g6AfZXO1lrJ6cR2h7qysvJeFICD3S39j5RJ/e9uwPpPT0b0n2LIr4rdh5HD+vcxY1pZs4J18n3/
rsUKgH2M19LS4pWAk/5fkJ8f+6ad7an1rdoI0Db887baty3vXY4GmC3vSfB3RcH9/XPLw/b2jssP
L2Pz+LnzIf+4AARje3gkp5cfu7/ftdi7ALbf+hVyatmx17MT7ut3Pevr6yf+nyC/LHZ/nnQ//1hO
vQDY2oylqKhIubm5KiwsVFZWlvdVQGsntrZgG1AsLq9609nlbSC3eXh/Hx9uBw/di4qdZvvy985z
5cEWfHdvX4tzM5p389nbdUXguFSsr7nlWFn1SobNw34HwObz6g0nP8xPKQB2/5LTzUn387sa+79t
LyjkdHPSff2u56T/C+TX5aT7+cdiz69TLwBLS0t6+vTpiyuxzzkzMjK8PQIOtVTp+rX76hufcYXA
DeZu+vX1FTWVF6ugsF77hwdaWV7y9ui3srSgxdV17W5taHZ23ns3Yc1dz+7+oaaGOvTw4X1FxCQo
MLusFXd6YLhbaXEZGp+a9+axvL6hPVccVt08rAy8fMPJD/NTCgAhhJD3J2dWAGzNP8jW/PPz873j
XVW5unolXB0tNQoLi1Nz0zMlp6arKCNZf/vTJ8oqqFJ8+G3duBOq0Js3df9xrHKzsxRyJ0TxEdH6
6M8fqmlkWjXZKWofW9F4e6VuX7upS99eVUxUrKIeRCojMUXXL15WZFyqIm5e0WcXQ7S8seO9nXbS
nUAoAIQQ4recSQGwwSQvL88b8I19/p+Tk+Md760r1CU3IFeV5ejCxbvusETRcWmqKspXbka+kkMj
dO6rL3X+/AVlZhYrPzlZoa4EhN67r8tffafPvvhG7cPTGm5/psiYGKWkJCs+KkGFWQWKvvNQEQ8i
FHLtnrKzi5WXEK+vPvqbboYnaWWTAvCPQgEghBB/5UwKgM3Y9v1vJcC2BcjMzPTeAbAisL6yqNbm
JnX3D2ludl7Lq8vq72rX0OiklpeWtTg/p8GBPo1PBtygtKTVlVV1PSvVn//4V7X2j2tkoFeBuSXZ
boB7O1vU7y63sbamBfuhhplZlznNusPFhUUtufnNT0+qs7tP65tb3rK+egeQo1AACCHEXzn1AmDH
LTZzG1Ts4wBL8LQtVxAOvd8C2PO2AbDCYLv+3dvb9Y7bxnwv/20fH0yNDaq7b0jb7jTvNwB2jkrG
/sGh95sCNk/bSHDHTbvj5ukdur+PLr+nQze/4A0mJ4cCQAgh/sqZFACbcbAIBPPqFf+c2Bb/hwf7
J55HTicUAEII8VfOrACQdysUAEII8VcoAMQLBYAQQvwVCgDxclIBsG0rbN8LO+7w5dNPSnDjT9vT
4/fHf0p+7vSEEEJOI2dWAGxPfMFdAXuDyPEe/MjbmVcLgD2OS/OzGhwa1MzCivcVTvsWh9nb3dXz
5/b3nvf388MD90Q62uhya3NDKyurrjzsuGmee5c5dOfbBpvPnx9qd2/Xi23oaQ4P9txltnRweKgD
N7+Nl5aJEELI2eVMCoANBPaTj319fd4vFNnh/Py8d54NDObgYN/7FsBPfdvZdunr7Tnw+O+jwebv
pyO/LK8WgJ2dXc2NderrT75SbUunqquq1dfTrazMHI0GAmqoqfR+9a2ssFA1teW6fv6KRpd3tT0/
ooiIWC2550Z9TbV6ertV39is7rZnqq5v0eT4pCbGJjTQ1aWigiJVlRfo1pV7amnvUnf/6E96t4EQ
Qsivz6kXABuY7YcJ4uLiVFlZ6f0GQHFxsdLT0721vvWlOZWVlqm1vVvzi+u2DujW/p57a5GHbg3R
vubn1im9NUJjXwM0O+vLGp+c8Y7bZWytkcHi9GIFwA7tcbSytri4rIO9ZWXGPVVOSpT+6Xd/Uuj9
h7r23XVFhcfqs08+0Gd/+1b3rt/RnatX9c25W1reOVBdYZI++OhDRUVHKDYhTelxUXqaXaCE0LsK
efRYIXfDlZ6Qqgt/+1q3r97RjW/cPO7FKD0pXnEZpd47RbbraFseQgghvy72ev66j+fPpADYldoO
gF5WUFDghnWpo6ZAN0KiVVucq0vf3FL/xIw6mqvV0NKhptp6bydBxcXlam9uVG5usQJTARVmZ6mt
o9tN16pyN9+q+ipdO/etGvqmvB8CevVGkZ8fe8zscbTH0B5Le8dlZ2tZdeW17rGoU2JShhobmtTV
2qmijAzdCwlRUmKmOt2ae0t1tdJS0jU5M6+G2lLVN9SrqCRfmZm5qigrUm5BqUpzUpWYXqim+grd
uHVX6Wl56mrr1LPSUuXk5qusuFAZ+ZXa2efrnoQQclqxXwsMvr6/et6ZFADb8c/LBcDW6q0A7O25
F/e1JeWkPdHlC5d15/IthT+I1tVvv9C//PljhT+K0dUvPtMHn32tm5du6mHIA105/60iHkYoLOSm
7l68qZvX7ur+rdv6/OML6hpd8H7s59UbRX5+/r4A2JNl6/ttONzjajtYss/v7eMb25GT/eSzvUOz
5wZt2x7APkKwx9geb+88tzZvO2KynTLtHs/HprPDg8PgZY92+mQ/B22nb27yTQRCCDmtWAF4eWd8
L+dMCsDKyooSExM1Ojqq8fFx9fb2ersGtoFhfmJIsbFPlJaere6OHtUXF+nx4zAlpz5VS0uvmqpK
lJyRqQeXLurOw1i1NjYoNjxalVW1bi0yX80tnep41qS0pBS19o39YLsA8stzcgE4eVpCCCHvRn7T
AmDHrQQ0NzervLxcVVVVKisrU3d3t/f5rp1vG5jZ5/22BmjbBXhrlO7Q1gT33Rrh84Mt1ZVWaGZp
yzYx99YMvbXM42m8NUh3Gfv98VdvEPlloQAQQsj7l9+8ANiMbW3fvgZmMfZ1sJ+6xb/FBnx+w/+3
CwWAEPJbxF5bbCWRnG5e95r9RgoAebdCASCE/Baxb4nZlulzc3PeIfn1sfvyda/bFADyo/lHBcCO
2zs43kcxhBDySuzj3J/yDq99DGz7iGlqavI+Fu7q6iK/MnY/trS0ePvcscfh1fucAkB+NK8rAMHH
tq2tTe3t7ero6CCEkBexwWdwcNAb3F99XXk1wQLQ09OjQCCgiYkJ8iszOTmpoaEh7zGgAJBflNcV
APsPa0+w1tZW74lkb98RQkgwNrg0NDT8rAJga602eI2NjZFfGfumna39v1UFwDYCDH4fPHgYfIvI
pjlpYU7K66d9/TxsmU46nbw+P1YA7MkFAK+yDb1tBcE2RHv1deXV/NYFwL6KHpia1vzcnCbcQGmD
pZ1uh+PjwcPvT7PDiYlJzcxMa8xddnpmRpMTL03jzrPXyumpgPf3y5fz5hU8dLHLTrjrCE53VrHr
eqsKgD0RKioqvJ3/2G6Ac3Nz1djY6D34toCrK8vusvZ1wO+3XLRDLy+O2+G2W/gVd4e7hT/eyvHl
aWx/A9sv7QfApt90JWPV3eDg9LaDmReXO05wevJ9fqwA2BMMAGzAt8+ebYXOBnJ7nbCPCN/GAjDl
Bv+m6hKFhEWoe2BU425Qn5qe0ujIsMbd65oN0COjY5qennavcwHvsK+zRYV5JZqYmlR5foG6+kaO
LucG9L72Bt29fVv5FY3ehndTgYBGRtz57rZY2Zhyl7fiMD4+pJK8AvUMjp55CXirCoA9CezQdvxj
g4pdsX3WY78FYN8IHO1q0sPwWJUWFbtS0OcW+KgUbG/vaN0t6PaObVSy60470PrCmO5fvq7K1j7t
bG14pWHXlQbbI11HdbGuXLis8vouHeq5d9rO9pZmJsc0PBrwbtiGKwT2C3O234HtzXWt2VtWa6vu
kL3NvRoKAICfygbvpKQk77N8e4f3bXwHYHx8QhNDXQq990htAyOqLnyqyxevKykxUec//VyPImN0
/8olXbwVqvTESH3y2Xmlp6Xq1pXz+sP/+FijMxP68g9/VGRcmu5cuqCkrHLNz43oxjeX9PTpU/3t
o48UER6pzz/+TMkZebp//YIePIrU9W+/1Y1bN/X7//57lTX1aTpw1rfzLSsAdmWFhYXHTxV5W4na
uwGHB4ca62tVfGKyijPTdPHbK0rNyFFTS4uSYyMUcvO+cvJyFXLxO92PL3AFYFRf//ULVdY1KDkq
UknpqYq8H6am/ik1Fqbpy0++U2xsohpqm9VQ4lreo0fKyy9WXkqabl+9picpWUoMe6CL1+7qsbt8
Xl6OHoaFa2Zpgx8SeiV8BADg5wj+PLh9vPu2FoDJ0T6F3r2n3PIqJUY80ndu8L7kEhP+xI0zF3Tn
brgSoqL12Z//rHMXbrhpb+tJbLzuXr2r8fk5xT18oMduzLj4xRcKCUvW8tqc4sMiFe/m9cc/faTH
D0IVHRajO25l9I//8s/659//VdGR8Yq6d1/nv7qs+vYBTU0efURwVnnrCoANJjbgvywvL897wqwv
zysx5oG+/uIz/fmDz9TU2qQbt28pPSlBN767ptjIB/rwjx8oKqtMy9ODCn8Qp+H+Dj28GaKEhEjd
uvpIC9vSs7xkVwDOKTriscJC7unGlXt6HB6um7fv6p57INPScpQRE61P/uWvuhUapcjQED2OidX1
a9fUOjStA9v//Ct3hp/zjwqA/Uft7Oz0jhNCiMVW7OzQNgR89uyZd/zV15VXY9P8lh8BTAam1NPR
qIysfPX0dKogr1CdPb3q7uxSR2uLOjq63PFudbS1qLKyTr097SotLVdNTZX6h8fV1lzvxqgWleTn
q7XbDeaBcXW2tWtwoE8V5RVqbetQd1e32u1H7IqKVFff6P3d4+Zf5+bR2tmryTMvOm9ZAbDPhuzt
IftBoFL7tbecHGVnZ3tNcXkuoOraek1Oz2k2ENCzqkIl5+SpraZMd29HanF9S+ODPWrvHdLG+qqm
p2a9jwR6WhvV1Teq+ZlZrW9ta2F6XFWVNVpcWVNXe6Na2nvU29Wlnv4hBVzzm3XTzc3OaXJsSK3t
ners6FBf/4BaWtrcDV53N/zv7ww/53UFwB5PO8224bCv+1jTJ4SQYOy1wT4KOGnweTW/dQGwz+Ot
BMzNzmhiclKzc7MKuEN7V9M+mg4Ejo+7ZZp109h2ADMzM962ALZBn51un/PPzM25y9nn/FYqjr6+
ODvr5uWOH83LXd5NMz095f1tmZ62+bnLvLpMp5y3biNAi22gZw90MLYQdoVb2zuy3/vfcwtqv/k/
NTaswKwbdJbmtby6qX37PYCDQx0e7Hsb8AV/7Ofg8PnR5/nucnadtq2Asbfy7bzDwwNvfjaN/fKc
PdEstkvh58+PvpFg70DYcbvRL98J5PUFwGLHg22fEEJejg06P2Xwt9j0wQJgg6QNXuTXxcqIDf5v
TQGwGduhrT0Gc9KVW2ywtg37rBjYtwI23DxPmo6cbf5RASCEkNOIFQBba7Z3DoaHh18MXOSXx3YC
ZN/K6OuzjerfkgJA3q1QAAghZx1bGbTByH4i3t62JqcTuz/tnRUrWK/e5xQA8qOhABBCfovYa4ut
qb788QH55Qnej1auTrq/KQDkR0MBIISQ9y8UAPKjoQAQQsj7l9+sAHi75j3e4I+8W3m5ANgThseR
EELe/QR/sMmOn2kBmJ+f90qADSLk3Yo9dvY42vGFhQUeR0IIeQ9ir+fBFbwzKQDBmQXfBbBD8u7E
HjNb67fH0HbidNI0hBBC3r3Y63vwl3hfzakWAGsY5N0NjyMhhLx/Cb62v5pTLQDfZ0v7tle+g33Z
nvzsawregmwfLYx9vhw8zfbUt7+/q53dPR0cHrjT3EJ55+9687DzbJ77BwfHOwza9uZplw1+BcKm
/+Hx78/35ufmdejtAfD1dwQhhBDip5z6OwD2s747WyvKiIlUbFKupqZnNTs7p81tewtiy9vT3/rG
upaXV7zL9LU26El8qhrr61Vd1aTNvT03zw3NTY+rPDdPNXXt2t/bUU1RtmJSsrS0surmOeOua0PT
U1OamZ/3fkbY9sFsx1dXljW/sOjmsa6xsXFtumKxOD2swuwiTS+teSXAlpMQQgjxS4Lj9Ms5tQJg
nzEcbXSwqu21gK5//KkuXLmrsEcPFR4aoSdxcYoMC1d0YpqiHl7T5+e+UVRouBLiUpSQkq7C9CR9
8qdPlPI0Wze//UxXbz9Q6JUbio4t1PzMqOITsr19/5dlxOv+w0glx8boq48+0oXLt5QYHe0d/+bb
myorLdS5r84pJiJG57/8TsmpmUqKeqCvPv1WZe2D7o442hPVqxtKEEIIIe9bbLyzbbxOKgGnUgBs
xraxgW1tuL7u/l6dUtj1EA2MjinzSagehicq6Umkrly6pAcRUUqKDtMdN4hnJKZrYHhST8Ju6dbN
EFUVVyrbFYXvvv5W6Vn5insQqpS0cm2sLSguMlIl1Q3KSYrV/ZDHSniSoCePohQbFq2oR5GKffxE
8Y+iFRoSor98+LHu3o5SZXGFEh89VujDe7ruykh5+4D3EcGrG0kQQggh72OsAJzptwCCBcC2NrQB
dnNjXasra942AAvTExoZn3anrXkFYWFxSZvrqxodGdOym2Zxdlo9fQPuuLu8aytra+uamw5oIjDj
2suSW3g3z50dN92km27YzXdBQ0Oj2tjc0OLCopbc/F5kaVnzbn6jo+Pe8ZXlFe87kOOjQxoZm9Cc
fTTglpUQQgjxQ36z/QDY2w1HV7LlBu2j/RLbxnz207/21rttpGe/+Gcb8tnPy1pZsG0G7Gd67Wd9
j/62jfj2vA35bOD3CsXxfOyngm16u6xdj7fR3w9yvPGg/WywO/5ifm76Pe+yJ38OQgghhLyPYVfA
hBBCiA9DASCEEEJ8GAoAIYQQ4sNQAAghhJD3NDbu2lfxbYO/l2OnUQAIIYSQ9zS2sbsN+DYG24Bv
38izBIsABYAQQgh5DxMsADYOT01NUQAIIYQQPyT4dfnR0VFVV1ert7fXeyeAAkAIIYS8x7ECYJ/3
j42NaX5+3ju08Ti4XQAFgBBCCHkP8/JHAJbgdgC8A0AIIYS8x3l5I8Dg5/8UAEIIIeQ9DwWAEEII
8WEoAIQQQogPQwEghBBCfJhgAQgO/DYeUwAIIYSQ9zzBArCwsPBiwLfxmAJACCGEvMexAmBjb39/
v9rb29XV1eW9A8B+AAghhJD3OFYAbLBfXFxUW1ubpqen2RMgIYQQ8r7n5Y0A7TA4HlMACCGEkPc4
Nu4Gf/o3OOhbgqdRAAghhBCfhQJACCGE+DC/WQGwDRCCWx0SQggh5M3Gvg1gY/OZFQCbUXALREII
IYS8HbF9A9gK+pkWAItdASGEEELerrw88AdzqgWAEEIIIe9GKACEEEKID0MBIIQQQnwYCgAhhBDi
w/yqAmAz2HEzsJkQQggh5N3J7vamFld/QQHodQVgbnlDi649WIMghBBCyLsTG7+nFtbV91MLwMOw
iMT5Xal/xl3ALkQIIYSQdzI2+A8t7GkgsPrjBeDazTs5M2u7XlsghBBCyLudgcCKekdmfrwAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAHi9f/Wv/n83hIXAbScR7gAAAABJRU5ErkJggg==</Preview>
  <Form>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
fXtOdI7L+thZ8ce6NigRoq3jQRFkma7LGVIo8NQAW3mTPcGHwZYcMDQ11DWdajW2E3dHS4X6wFoR
QlWNnTHc7WV8twQsXqUtnFJKB3laX+T1WbwuWOCszkpeHjuTnS2N8+3DkD+Wq1F9UbRBuTPtzvZj
4yDIQgk3VH9siwy9r0y3Umk7FaON7Y4Iv6oezMDoAUuHpX5D3AISf2y5m+OiVO1b+aDc8Axt45nm
UjVwy5+pWlHluiqlLeZ51ZzgKlua9hyleqhPq1v/2KwfVN4ZeyD2ToqtWYs8GjN/ih2LWp8SVWIo
9II+teAIcUfLUVkXVsqk3yec+RRvGw5HddY7QtJ3hDjt1SZq1W+VigXHBpycHI/2KlvApsNSudrx
uPZQ2pkNX1m4Zb6py4c6x06stj9prK3amNiTVIHodilOX69kbtwyPu0Nr4+m1Z+zPyaEewvjI4VS
uV5xc4v/bUxuffoccOIWc+cm4VC6pWIa4bpx3OQmVte/ewpQg1Nz0Adhr2uXRow+Cg1Xh9K/NcB/
a4D/1gD/rQH+WwP8twb4bw3w3xrgvzXAf2uA/9YA/60B/lsD/LcG+G8N8N8a4L81wH9rgP/WAP+t
Af5bA/y3BvhvDfCr1pkeWARM5bLSh4f9/741i3/XS/27Xurf9VL/rpf6d73Uv+ul/l0v9e96qX/X
Sz1wvdRzqPP/UTbu/33skqlUMuiPbzD4Cyn0v2um/l0z9e+aqX/XTP27ZurfNVP/rpn6d83Ul14z
9UTO+ehlU6lkndc3ziec3bjx4TMPBJyQevxUQCqxunUWpXT/SZtkBP74SZtSGuG69sjQX1fQNfs/
Czox2Mn1U0Hn8mtJNAdlsb4XhzVsnqeFbn81LouqOsYkwwcUxZ8xgoQx7dogCNyS1N3PZhVFqcvy
ZqVgVg+zpu2AMymnzsmO4PToXb/OanqNxacmhkUhZbsbiXbxhuZMydcXkE1UO0/t8oNIWJbmm8W8
4HaadG8qRPv9crlacY16vS6JojoflETW2kZUZzXCg6WzqDcP4XBPFircFOdl49B5fRnuLUJpAFbc
bRPqkWJBXcqOBIK2WJEmAa2Ses3eygB/ijgrrh7Af5Bo8CdaGgEyscZp3Dw6C3zp79xqvONxty1V
vVYQ7ncTbLsmJ2wjz7aXmx0oSIl9UzvwLl5o5ssFFy9VlfG4o1QPg3As7z2N0ox5KSLEYmVS2sy3
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</Form>
  <Code><![CDATA[#region Control Helper Functions
function Load-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.

	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.

	.PARAMETER  ComboBox
		The ComboBox control you want to add items to.

	.PARAMETER  Items
		The object or objects you wish to load into the ComboBox's Items collection.

	.PARAMETER  DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER  Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Load-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Load-ComboBox $combobox1 "Red" -Append
		Load-ComboBox $combobox1 "White" -Append
		Load-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Load-ComboBox $combobox1 (Get-Process) "ProcessName"
#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		[System.Windows.Forms.ComboBox]$ComboBox,
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
}
#endregion

###GLOBAL Static VARIABLES###

#Version information
$Version = "4.1.3.0"
$UpdateDate = "11/09/2021"

$TempDir = $env:temp
$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter")


###FORM ITEMS###

	#Form

$FormO365AdministrationCenter_Load = {
	$FormO365AdministrationCenter.Cursor = 'Default'
	
	$TenantConnectButton.Enabled = $False
	$PartnerComboBox.Enabled = $False
	
	$ArchPreReqPrompt = (Get-ItemProperty 'HKCU:\Software\O365 Admin Center' -Name DisableArchPrompt).DisableArchPrompt
	#Arch Type
	$Archtype = ((Get-WmiObject Win32_OperatingSystem).OSArchitecture)
	
	
	If (($Archtype -eq '32-bit') -and ($ArchPreReqPrompt -ne 1))
	{
		Show-PreReq_ArchType_psf
		$FormO365AdministrationCenter.close()
	}
	Else
	{
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableArchPrompt -Value 1 -Force | Out-Null
	}
	
	#Sets the text for the button
	$ButtonConnectTo365.Text = "Connect to Office 365"
	
	#Sets the text for the button
	$ButtonDisconnect.Text = "Disconnect"
	
	#Sets the text for the form
	$FormO365AdministrationCenter.Text = "O365 Admin Center"
	
	#Allows copy/paste in the texbpx
	$TextboxResults.ShortcutsEnabled = $True
	
	#Sets the dialog result
	$ButtonRunCustomCommand.DialogResult = 'None'
	
	#Sets the default button
	$FormO365AdministrationCenter.acceptbutton = $ButtonRunCustomCommand
	
	#Disabled disconnect from partner button
	$ButtonDisconnect.Enabled = $False
	
	#Alphabitcally sorts combobox
	$PartnerComboBox.Sorted = $True
	
	#Disables word wrap on the text box
	$TextboxResults.WordWrap = $False
	
	#Disables the disconnect button
	$ButtonDisconnect.Enabled = $False
	
	#$ButtonConnectTo365.Enabled = $false 
	
	#Place objects on the bottom
	$ButtonConnectTo365.Anchor = 'Bottom'
	$Partner_Groupbox.Anchor = 'Bottom'
	$ButtonDisconnect.Anchor = 'Bottom'
	$ButtonRunCustomCommand.Anchor = 'Bottom'
	$groupboxO365Services.Anchor = 'Bottom'
	$TabPageMaster.Anchor = 'Bottom, Top, Left, Right'
	
	#$menustripCompliance.Size = "991, 24"
	
	#Make form sizable
	$FormO365AdministrationCenter.FormBorderStyle = 'Sizable'
	
	#Hide the progrss bar
	$progressbar1.Visible = $false
	
	
}

$PartnerComboBox_SelectedIndexChanged = {
	$checkboxComplianceCenter.Checked = $false
	$checkboxExchangeOnline.Checked = $true
	$checkboxSharepoint.Checked = $false
	$checkboxSkypeForBusiness.Checked = $false
	
	
}

$saveToFileToolStripMenuItem_Click = {
	$savedialog = New-Object windows.forms.savefiledialog
	$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
	$savedialog.title = "Export to File"
	$savedialog.filter = ".doc|*.doc|.txt|*.txt|.xls|*.xls"
	$savedialog.ShowHelp = $True
	$result = $savedialog.ShowDialog(); $result
	if ($result -eq "OK")
	{
		$TextboxResults.Text | out-file -Encoding Default $savedialog.filename
		
	}
	
}

$printToolStripMenuItem_Click = {
	$Printdialog = New-Object System.Windows.Forms.PrintDialog
	$Printdialog.ShowHelp = $False
	$Printdialog.AllowSelection = $true
	$Printdialog.AllowPrintToFile = $true
	$Printdialog.AllowSomePages = $false
	$Printdialog.ShowNetwork = $true
	$result = $Printdialog.ShowDialog(); $result
	If ($result -eq 'OK')
	{
		$TextboxResults.Text | Out-Printer $Printdialog.PrinterSettings.PrinterName
	}
	
}

$disconnectToolStripMenuItem_Click = {
	$FormO365AdministrationCenter.Cursor = 'WaitCursor'
	$TextboxResults.Text = ""
	$textboxDetails.Text = ""
	
	#Disconnects O365 Session
	Get-PSSession | Remove-PSSession
	
	#Enables the connect to partner Button
	#$PartnerConnectButton.Enabled = $True
	#Disabled the disconnect from partner button
	#$ButtonDisconnect.Enabled = $False
	#Sets custom button text
	$TenantConnectButton.Text = "Connect to Partner"
	#Sets the form name
	$FormO365AdministrationCenter.Text = "O365 Admin Center"
	#Enables the partner combobox
	$PartnerComboBox.Enabled = $True
	#Enables the connect to o365 button
	$ButtonConnectTo365.Enabled = $True
	#Clears the combobox
	#$PartnerComboBox.Items.clear()
		<# Creates a pop up box telling the user they are disconnected from the o365 session. This is commented out as it will show True every time as the command will never error out even if there 
		is no session to disconnect from #>
	#[void][System.Windows.Forms.MessageBox]::Show("You are disconnected from O365", "Message")
	
	$checkboxComplianceCenter.Checked = $false
	$checkboxExchangeOnline.Checked = $false
	$checkboxSharepoint.Checked = $false
	$checkboxSkypeForBusiness.Checked = $false
	$checkboxComplianceCenter.Enabled = $true
	$checkboxExchangeOnline.Enabled = $true
	$checkboxSharepoint.Enabled = $true
	$checkboxSkypeForBusiness.Enabled = $true
	$TenantConnectButton.Enabled = $True
	$FormO365AdministrationCenter.Cursor = 'Default'
	
}

$exitToolStripMenuItem_Click = {
	#Remove session
	Get-PSSession | Remove-PSSession
	
	#Deletes the old cached files
	$CachedFiles = ("$TempDir" + "\O365AdminCenter")
	Remove-Item $CachedFiles\* -recurse
	
	$FormO365AdministrationCenter.Close()
}

	#Buttons

$ButtonDisconnect_Click = {
	$TenantStatus = Get-ItemProperty 'HKCU:\Software\O365 Admin Center' -Name TenantStatus | Select-Object -ExpandProperty TenantStatus
	If ($Tenantstatus -eq 1)
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		#Clear textboxes 
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		
		#Show progress bar
		$progressbar1.Visible = $true
		
		#Disconnects O365 Session
		$progressbar1.Value = 90
		Get-PSSession | Remove-PSSession
		$progressbar1.Value = 95
		
		#Sets custom button text
		$TenantConnectButton.Text = "Connect to Partner"
		$TenantConnectButton.Enabled = $True
		
		#Sets the form name
		$FormO365AdministrationCenter.Text = "O365 Admin Center"
		
		$PartnerComboBox.Enabled = $true
		
		#Enable the connect to tenant button
		#$TenantConnectButton.Enabled = $true
		
		$checkboxExchangeOnline.Checked = $true
		$checkboxComplianceCenter.Enabled = $false
		$checkboxExchangeOnline.Enabled = $false
		$checkboxSharepoint.Enabled = $false
		$checkboxSkypeForBusiness.Enabled = $false
		$progressbar1.Value = 100
		#Hide the progress bar
		$progressbar1.Visible = $false
		
		Get-Item 'HKCU:\Software\O365 Admin Center' -Force | New-ItemProperty -Name TenantStatus -Value 0 -Force | Out-Null
		
		$ButtonDisconnect.Text = "Disconnect"
		
		$CachedPF = ("$TempDir" + "\O365AdminCenter" + "\pf.txt")
		If ((Test-Path $CachedPF) -eq $true)
		{
			Remove-Item $CachedPF -Force -Confirm:$false
		}
		Get-MSOLUser -All | Select-Object -ExpandProperty UserPrincipalName | Out-File "$O365AdminTempFolder\upn.txt"
		Get-MSOLUser -All | Select-Object -ExpandProperty DisplayName | Out-File "$O365AdminTempFolder\names.txt"
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Else
	{
		#Clears the combobox
		#$PartnerComboBox.Text = ""
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		#Clear textboxes 
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		
		#Show progress bar
		$progressbar1.Visible = $true
		
		#Disconnects O365 Session
		$progressbar1.Value = 90
		Get-PSSession | Remove-PSSession
		$progressbar1.Value = 95
		
		#Sets custom button text
		$TenantConnectButton.Text = "Connect to Partner"
		$TenantConnectButton.Enabled = $False
		$PartnerComboBox.Enabled = $False
		
		#Sets the form name
		$FormO365AdministrationCenter.Text = "O365 Admin Center"
		
		#Enables the partner combobox
		$PartnerComboBox.Enabled = $True
		$PartnerComboBox.Text = ""
		
		#Enable the connect to tenant button
		#$TenantConnectButton.Enabled = $true
		
		#Enables the connect to o365 button
		$ButtonConnectTo365.Enabled = $True
		$ButtonConnectTo365.Text = "Connect to O365"
		
		$ButtonDisconnect.Enabled = $False
		
		
		#Disables tenant combobox
		$PartnerComboBox.Enabled = $False
		
		$checkboxComplianceCenter.Checked = $false
		$checkboxExchangeOnline.Checked = $false
		$checkboxSharepoint.Checked = $false
		$checkboxSkypeForBusiness.Checked = $false
		$checkboxComplianceCenter.Enabled = $true
		$checkboxExchangeOnline.Enabled = $true
		$checkboxSharepoint.Enabled = $true
		$checkboxSkypeForBusiness.Enabled = $true
		#$TenantConnectButton.Enabled = $True
		$progressbar1.Value = 100
		
		#Hide the progress bar
		$progressbar1.Visible = $false
		
		Get-Item 'HKCU:\Software\O365 Admin Center' -Force | New-ItemProperty -Name TenantStatus -Value 0 -Force | Out-Null
		
		$ButtonDisconnect.Text = "Disconnect"
		
		$CachedPF = ("$TempDir" + "\O365AdminCenter" + "\pf.txt")
		If ((Test-Path $CachedPF) -eq $true)
		{
			Remove-Item $CachedPF -Force -Confirm:$false
		}
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
}

$ButtonConnectTo365_Click = {
	$AzurePreReqPrompt = (Get-ItemProperty 'HKCU:\Software\O365 Admin Center' -Name DisableAzurePrompt).DisableAzurePrompt
	$MSOnlinePreReqPrompt = (Get-ItemProperty 'HKCU:\Software\O365 Admin Center' -Name DisableMSOnlinePrompt).DisableMSOnlinePrompt
	$SkypeOnlineConnectorPreReqPrompt = (Get-ItemProperty 'HKCU:\Software\O365 Admin Center' -Name DisableSkypeOnlineConnectorPrompt).DisableSkypeOnlineConnectorPrompt
	$SharePointPreReqPrompt = (Get-ItemProperty 'HKCU:\Software\O365 Admin Center' -Name DisableSharePointOnlinePrompt).DisableSharePointOnlinePrompt
	$ExecutionPolicy = Get-ExecutionPolicy
	$ExecutionPolicyPreReq = (Get-ItemProperty 'HKCU:\Software\O365 Admin Center' -Name ExecutionPolicy).ExecutionPolicy
	$SignOnAss = Get-ItemProperty HKLM:\SOFTWARE\Classes\Installer\Products\0B39BA8DFBF60A4479F10C66B9A56EDD -Name ProductName | Select-Object -ExpandProperty ProductName
	$2FA = (Get-ItemProperty 'HKCU:\Software\O365 Admin Center' -Name TFA).TFA
	$2FAPath = (Get-ItemProperty 'HKCU:\Software\O365 Admin Center' -Name TFAPath).TFAPath
	$TFAMSONLINE = (Get-ItemProperty 'HKCU:\Software\O365 Admin Center' -Name DisableMSOnlineTFA).DisableMSOnlineTFA
	try
	{
		If ($checkboxComplianceCenter.Checked -eq $False -and $checkboxExchangeOnline.Checked -eq $False -and $checkboxSharepoint.Checked -eq $False -and $checkboxSkypeForBusiness.Checked -eq $False)
		{
			[System.Windows.Forms.MessageBox]::Show("Please select a service to connect to", "Error")
		}
		ElseIf ($2FA -eq 1)
		{
			If ((((Get-Module -ListAvailable -Name MSOnline).Version.Build) -ge 166 ) -or ($TFAMSONLINE -eq 1) )
			{
				$Path = (Get-ChildItem -Recurse -Force "$env:LOCALAPPDATA\Apps\2.0" -ErrorAction SilentlyContinue | Where-Object { ($_.PSIsContainer -eq $false) -and ($_.Name -contains "Microsoft.Online.CSE.PSModule.Client.cdf-ms") }).Fullname
				$CleanPath = ($Path.TrimEnd("\Microsoft.Online.CSE.PSModule.Client.cdf-ms")) + "\"
				If ($2FAPath -notcontains "Apps")
				{
					
					#Show progress bar
					$progressbar1.Visible = $true
					
					#Disable the connect to o365 button
					$ButtonConnectTo365.Enabled = $False
					
					#Enable the disconnect button
					$ButtonDisconnect.Enabled = $True
					
					#Disable the checkboxes
					$checkboxExchangeOnline.Enabled = $False
					$checkboxSkypeForBusiness.Checked = $false
					$checkboxSkypeForBusiness.Enabled = $False
					$checkboxSharepoint.Checked = $False
					$checkboxSharepoint.Enabled = $False
					$checkboxComplianceCenter.Checked = $False
					$checkboxComplianceCenter.Enabled = $False
					
					$progressbar1.Value = 10
					$TextboxResults.Text = "Saving Module Path..."
					Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name 2FAPath -Value $CleanPath -Force | Out-Null
					$TextboxResults.Text = "Changing folder to 2FA Module..."
					Set-Location $CleanPath
					$progressbar1.Value = 20
					$TextboxResults.Text = "Importing 2FA Module..."
					Import-Module .\CreateExoPSSession.ps1
					$progressbar1.Value = 30
					$TextboxResults.Text = "Connecting to Office 365..."
					Connect-EXOPSSession
					$progressbar1.Value = 40
					Connect-MsolService
					#Change button text
					$ButtonConnectTo365.Text = "Connected to O365"
					$progressbar1.Value = 42
					#The first checked check box for services will load the appropriate tab as default. 
					
					$TabPageMaster.SelectedTab = $tabpageExchangeOnline
					
					$progressbar1.Value = 50
					#Set Tenant Status to 0 as we have not connected to any tenants yet
					Get-Item 'HKCU:\Software\O365 Admin Center' -Force | New-ItemProperty -Name TenantStatus -Value 0 -Force | Out-Null
					$progressbar1.Value = 60
					
					$partnerTIDs = Get-MsolPartnerContract -All | Select-Object TenantID
					$progressbar1.Value = 70
					
					#If tenant domains are available then load combobox with all tenants
					<#
					If ($partnerTIDs -ne $Null)
					{
						#Enables the Tenant button
						$TenantConnectButton.Enabled = $True
						$PartnerComboBox.Enabled = $True
						
						$domains = @()
						foreach ($TID in $partnerTIDs)
						{
							$domainName = Get-MsolDomain -TenantId $TID.TenantId | Where-Object { $_.IsDefault -eq 'True' }
							#$domainName = Get-MsolDomain -TenantId $TID.TenantId | Where-Object { $_.Name -notlike '*.onmicrosoft*' -and $_.Name -notlike '*.microsoftonline*' -and $_.Status -eq "Verified" }
							#$domainName = Get-MsolDomain -TenantId $TID.TenantId
							$domain = New-Object -TypeName PSObject
							$domain | Add-Member -Name 'Name' -MemberType NoteProperty -Value ($domainName.Name | Select-Object -First 1) #Deals with Tenants with multiple domain names asociated
							#$domain | Add-Member -Name 'Name' -MemberType NoteProperty -Value $domainName.Name
							$domain | Add-Member -Name TenantID -MemberType NoteProperty -Value $TID.TenantId
							$domains += $domain
						}
						$progressbar1.Value = 60
						#Loads Combobox with Tenants
						Load-ComboBox $PartnerComboBox $domains -DisplayMember Name
						
						#Enable the connect to tenant button
						$TenantConnectButton.Enabled = $true
					}
					
					#If no tenant domains are available then do the following
					Else
					{
						#Clear the combobox of items
						$PartnerComboBox.Text = ""
						
						#Disable combobox
						$PartnerComboBox.Enabled = $False
						
						#Disable the connect to tenant button
						$TenantConnectButton.Enabled = $false
					}
					#>
					#Clear the combobox of items
					$PartnerComboBox.Text = ""
					
					#Disable combobox
					$PartnerComboBox.Enabled = $False
					
					#Disable the connect to tenant button
					$TenantConnectButton.Enabled = $false
					
					$progressbar1.Value = 80
					
					
					
					$TextboxResults.Text = "Caching Users..."
					$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter")
					$UserListcombo = Get-MSOLUser -All | Select-Object -ExpandProperty UserPrincipalName | Out-File "$O365AdminTempFolder\upn.txt"
					Get-MSOLUser -All | Select-Object -ExpandProperty DisplayName | Out-File "$O365AdminTempFolder\names.txt"
					$progressbar1.Value = 100
					$progressbar1.Enabled = $false
					
					$TextboxResults.Text = ""
				}
				Else
				{
					
					#Show progress bar
					$progressbar1.Visible = $true
					
					#Disable the connect to o365 button
					$ButtonConnectTo365.Enabled = $False
					
					#Enable the disconnect button
					$ButtonDisconnect.Enabled = $True
					
					#Disable the checkboxes
					#Disable the checkboxes
					$checkboxExchangeOnline.Enabled = $False
					$checkboxSkypeForBusiness.Checked = $false
					$checkboxSkypeForBusiness.Enabled = $False
					$checkboxSharepoint.Checked = $False
					$checkboxSharepoint.Enabled = $False
					$checkboxComplianceCenter.Checked = $False
					$checkboxComplianceCenter.Enabled = $False
					$progressbar1.Value = 10
					
					$TextboxResults.Text = "Changing folder to 2FA Module..."
					Set-Location $CleanPath
					$progressbar1.Value = 20
					$TextboxResults.Text = "Importing 2FA Module..."
					Import-Module .\CreateExoPSSession.ps1
					$progressbar1.Value = 30
					$TextboxResults.Text = "Connecting to Office 365"
					Connect-EXOPSSession
					$progressbar1.Value = 40
					Connect-MsolService
					#Change button text
					$ButtonConnectTo365.Text = "Connected to O365"
					$progressbar1.Value = 42
					#The first checked check box for services will load the appropriate tab as default. 
					
					$TabPageMaster.SelectedTab = $tabpageExchangeOnline
					
					$progressbar1.Value = 50
					#Set Tenant Status to 0 as we have not connected to any tenants yet
					Get-Item 'HKCU:\Software\O365 Admin Center' -Force | New-ItemProperty -Name TenantStatus -Value 0 -Force | Out-Null
					$progressbar1.Value = 60
					
					$partnerTIDs = Get-MsolPartnerContract -All | Select-Object TenantID
					$progressbar1.Value = 70
					
					<#
					#If tenant domains are available then load combobox with all tenants
					If ($partnerTIDs -ne $Null)
					{
						#Enables the Tenant button
						$TenantConnectButton.Enabled = $True
						$PartnerComboBox.Enabled = $True
						
						$domains = @()
						foreach ($TID in $partnerTIDs)
						{
							$domainName = Get-MsolDomain -TenantId $TID.TenantId | Where-Object { $_.IsDefault -eq 'True' }
							#$domainName = Get-MsolDomain -TenantId $TID.TenantId | Where-Object { $_.Name -notlike '*.onmicrosoft*' -and $_.Name -notlike '*.microsoftonline*' -and $_.Status -eq "Verified" }
							#$domainName = Get-MsolDomain -TenantId $TID.TenantId
							$domain = New-Object -TypeName PSObject
							$domain | Add-Member -Name 'Name' -MemberType NoteProperty -Value ($domainName.Name | Select-Object -First 1) #Deals with Tenants with multiple domain names asociated
							#$domain | Add-Member -Name 'Name' -MemberType NoteProperty -Value $domainName.Name
							$domain | Add-Member -Name TenantID -MemberType NoteProperty -Value $TID.TenantId
							$domains += $domain
						}
						$progressbar1.Value = 60
						#Loads Combobox with Tenants
						Load-ComboBox $PartnerComboBox $domains -DisplayMember Name
						
						#Enable the connect to tenant button
						$TenantConnectButton.Enabled = $true
					}
					
					#If no tenant domains are available then do the following
					Else
					{
						#Clear the combobox of items
						$PartnerComboBox.Text = ""
						
						#Disable combobox
						$PartnerComboBox.Enabled = $False
						
						#Disable the connect to tenant button
						$TenantConnectButton.Enabled = $false
					}
					#>
					
					#Clear the combobox of items
					$PartnerComboBox.Text = ""
					
					#Disable combobox
					$PartnerComboBox.Enabled = $False
					
					#Disable the connect to tenant button
					$TenantConnectButton.Enabled = $false
					
					$progressbar1.Value = 80
					
					
					
					$TextboxResults.Text = "Caching Users..."
					$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter")
					$UserListcombo = Get-MSOLUser -All | Select-Object -ExpandProperty UserPrincipalName | Out-File "$O365AdminTempFolder\upn.txt"
					Get-MSOLUser -All | Select-Object -ExpandProperty DisplayName | Out-File "$O365AdminTempFolder\names.txt"
					$progressbar1.Value = 100
					$progressbar1.Enabled = $false
					
					$TextboxResults.Text = ""
				}
			}
			Else
			{
			Show-PreReqTFA_MSONLINE_psf
			}
		}
		Else
		{
			If (($ExecutionPolicy -eq "RemoteSigned") -or ($ExecutionPolicy -eq "Unrestricted") -or ($ExecutionPolicyPreReq -eq 1))
			{
				$CredMem = (Get-ItemProperty 'HKCU:\Software\O365 Admin Center' -Name CredMem).CredMem
				If (!$CredMem)
				{
					$global:o365credentials = (Get-Credential -Message "Please enter your Office 365 credentials")
					Show-CachedCreds_psf
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Connecting to Office 365..."
					
					If (($SignOnAss -ne $Null) -or ($MSOnlinePreReqPrompt -eq 1))
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableMSOnlinePrompt -Value 1 -Force | Out-Null
						
						#$TextboxResults.Text = "Checking for the Azure module..."
						If ((Get-Module -ListAvailable -Name MSOnline) -or ($AzurePreReqPrompt -eq 1))
						{
							$FormO365AdministrationCenter.Cursor = 'WaitCursor'
							Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableAzurePrompt -Value 1 -Force | Out-Null
							
							#Show progress bar
							$progressbar1.Visible = $true
							
							#$TextboxResults.Text = "Connecting to O365..."
							$Ranges = 1 .. 50
							foreach ($range in $ranges)
							{
								$progressbar1.Value = $Range
							}
							
							Connect-MsolService -Credential $global:o365credentials
							$progressbar1.Value = 50
							
							
							#Disable the connect to o365 button
							$ButtonConnectTo365.Enabled = $False
							
							#Enable the disconnect button
							$ButtonDisconnect.Enabled = $True
							
							#Disable the checkboxes
							$checkboxExchangeOnline.Enabled = $false
							$checkboxSkypeForBusiness.Enabled = $false
							$checkboxSharepoint.Enabled = $false
							$checkboxComplianceCenter.Enabled = $False
							$progressbar1.Value = 51
							#Change button text
							$ButtonConnectTo365.Text = "Connected to O365"
							$progressbar1.Value = 52
							#The first checked check box for services will load the appropriate tab as default. 
							If ($checkboxComplianceCenter.checked)
							{
								$TabPageMaster.SelectedTab = $tabpageComplianceCenter
							}
							elseif ($checkboxExchangeOnline.Checked)
							{
								$TabPageMaster.SelectedTab = $tabpageExchangeOnline
							}
							elseif ($checkboxSharepoint.checked)
							{
								$TabPageMaster.SelectedTab = $tabpageSharePoint
							}
							elseif ($checkboxSkypeForBusiness.checked)
							{
								$TabPageMaster.SelectedTab = $tabpageSkypeForBusiness
							}
							$progressbar1.Value = 53
							#Set Tenant Status to 0 as we have not connected to any tenants yet
							Get-Item 'HKCU:\Software\O365 Admin Center' -Force | New-ItemProperty -Name TenantStatus -Value 0 -Force | Out-Null
							$progressbar1.Value = 54
							
							$partnerTIDs = Get-MsolPartnerContract -All | Select-Object TenantID
							$progressbar1.Value = 55
							
							#If tenant domains are available then load combobox with all tenants
							If ($partnerTIDs -ne $Null)
							{
								#Enables the Tenant button
								$TenantConnectButton.Enabled = $True
								$PartnerComboBox.Enabled = $True
								
								$domains = @()
								foreach ($TID in $partnerTIDs)
								{
									$domainName = Get-MsolDomain -TenantId $TID.TenantId | Where-Object { $_.IsDefault -eq 'True' }
									#$domainName = Get-MsolDomain -TenantId $TID.TenantId | Where-Object { $_.Name -notlike '*.onmicrosoft*' -and $_.Name -notlike '*.microsoftonline*' -and $_.Status -eq "Verified" }
									#$domainName = Get-MsolDomain -TenantId $TID.TenantId
									$domain = New-Object -TypeName PSObject
									$domain | Add-Member -Name 'Name' -MemberType NoteProperty -Value ($domainName.Name | Select-Object -First 1) #Deals with Tenants with multiple domain names asociated
									#$domain | Add-Member -Name 'Name' -MemberType NoteProperty -Value $domainName.Name
									$domain | Add-Member -Name TenantID -MemberType NoteProperty -Value $TID.TenantId
									$domains += $domain
								}
								$progressbar1.Value = 60
								#Loads Combobox with Tenants
								Load-ComboBox $PartnerComboBox $domains -DisplayMember Name
								
								#Enable the connect to tenant button
								$TenantConnectButton.Enabled = $true
							}
							
							#If no tenant domains are available then do the following
							Else
							{
								#Clear the combobox of items
								$PartnerComboBox.Text = ""
								
								#Disable combobox
								$PartnerComboBox.Enabled = $False
								
								#Disable the connect to tenant button
								$TenantConnectButton.Enabled = $false
							}
							
							$progressbar1.Value = 65
							
							#If compliance center checkbox is checked
							If ($checkboxComplianceCenter.Checked)
							{
								$TextboxResults.Text = "Connecting to Compliance Center..."
								$ccSession = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri https://ps.compliance.protection.outlook.com/powershell-liveid/ -Credential $global:o365credentials -Authentication Basic -AllowRedirection
								Import-PSSession $ccSession
								$TextboxResults.Text = ""
							}
							
							$progressbar1.Value = 70
							
							#If exchange online checkbox is checked
							If ($checkboxExchangeOnline.Checked)
							{
								
								$TextboxResults.Text = "Connecting to Exchange Online..."
								$exchangeSession = New-PSSession -Name MainAccount -ConfigurationName Microsoft.Exchange -ConnectionUri https://outlook.office365.com/powershell-liveid/ -Credential $global:o365credentials -Authentication Basic -AllowRedirection
								Import-PSSession $exchangeSession -AllowClobber
								
								
								$TextboxResults.Text = "Caching Users..."
								$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter")
								$UserListcombo = Get-MSOLUser -All | Select-Object -ExpandProperty UserPrincipalName | Out-File "$O365AdminTempFolder\upn.txt"
								Get-MSOLUser -All | Select-Object -ExpandProperty DisplayName | Out-File "$O365AdminTempFolder\names.txt"
								
								
								$TextboxResults.Text = ""
							}
							
							$progressbar1.Value = 80
							
							If ($checkboxSharepoint.Checked -and $checkboxExchangeOnline.Checked)
							{
								$TextboxResults.Text = "Checking for the SharePoint Online module..."
								if ((Get-Module -ListAvailable -Name Microsoft.Online.SharePoint.PowerShell) -or ($SharePointPreReqPrompt -eq 1))
								{
									Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableSharePointOnlinePrompt -Value 1 -Force | Out-Null
									
									$TextboxResults.Text = "Connecting to SharePoint Online..."
									#Grabs the Sharepoint URL attribtue with Absoluteuri header
									$SPOheaders = Get-OrganizationConfig | Select-Object -ExpandProperty SharepointUrl
									#Clears the header so we have a clean variable
									$SPOSite = $SPOheaders | Select-Object -ExpandProperty AbsoluteUri
									#Splits the URl into two parts so we can inject -admin
									$firsthalf = $SPOSite -split ('.sharepoint.com') | Select-Object -First 1
									$secondhalf = $SPOSite -split '(.sharepoint.com/)' | Select-Object -Last 2
									#Wrap it all up into a single URL with the -admin
									$SPOadminSite = "$Firsthalf" + "-admin" + "$secondhalf"
									$TextboxResults.Text = "Connecting to Sharepoint Online..."
									Import-Module Microsoft.Online.SharePoint.PowerShell -DisableNameChecking
									Connect-SPOService -Url $SPOadminSite -credential $global:o365credentials
									$TextboxResults.Text = ""
								}
								Else
								{
									$TextboxResults.Text = ""
									$textboxDetails.Text = ""
									$PartnerComboBox.Enabled = $True
									$ButtonConnectTo365.Enabled = $True
									$ButtonDisconnect.Enabled = $False
									#$TenantConnectButton.Enabled = $True
									$checkboxComplianceCenter.Enabled = $true
									$checkboxExchangeOnline.Enabled = $true
									$checkboxSharepoint.Enabled = $true
									$checkboxComplianceCenter.Checked = $False
									$checkboxSharepoint.Checked = $False
									$checkboxSkypeForBusiness.Checked = $False
									$checkboxExchangeOnline.Checked = $False
									$checkboxSkypeForBusiness.Enabled = $True
									$FormO365AdministrationCenter.Cursor = 'Default'
									$ButtonConnectTo365.Text = "Connect to O365"
									Show-PreRep_SharePoint_psf
								}
							}
							
							#If sharepoint checkbox is checked
							If ($checkboxSharepoint.Checked)
							{
								$TextboxResults.Text = "Checking for the SharePoint Online module..."
								if ((Get-Module -ListAvailable -Name Microsoft.Online.SharePoint.PowerShell) -or ($SharePointPreReqPrompt -eq 1))
								{
									#$Sharepointdomain = Read-Host "Enter the domain name. EX: contoso, yahoo"
									#Connect to Exchange online so we can grab the Sharepoint URL attribute 
									$TextboxResults.Text = "Connecting to SharePoint Online..."
									$exchangeSession = New-PSSession -Name MainAccount -ConfigurationName Microsoft.Exchange -ConnectionUri https://outlook.office365.com/powershell-liveid/ -Credential $global:o365credentials -Authentication Basic -AllowRedirection
									Import-PSSession $exchangeSession -AllowClobber
									$progressbar1.Value = 83
									#Grabs the Sharepoint URL attribtue with Absoluteuri header
									$SPOheaders = Get-OrganizationConfig | Select-Object -ExpandProperty SharepointUrl
									#Clears the header so we have a clean variable
									$SPOSite = $SPOheaders | Select-Object -ExpandProperty AbsoluteUri
									#Splits the URl into two parts so we can inject -admin
									$firsthalf = $SPOSite -split ('.sharepoint.com') | Select-Object -First 1
									$secondhalf = $SPOSite -split '(.sharepoint.com/)' | Select-Object -Last 2
									#Wrap it all up into a single URL with the -admin
									$SPOadminSite = "$Firsthalf" + "-admin" + "$secondhalf"
									$TextboxResults.Text = "Connecting to Sharepoint Online..."
									Import-Module Microsoft.Online.SharePoint.PowerShell -DisableNameChecking
									Connect-SPOService -Url $SPOadminSite -credential $global:o365credentials
									$TextboxResults.Text = ""
								}
								Else
								{
									$TextboxResults.Text = ""
									$textboxDetails.Text = ""
									$PartnerComboBox.Enabled = $True
									$ButtonConnectTo365.Enabled = $True
									$ButtonDisconnect.Enabled = $False
									#$TenantConnectButton.Enabled = $True
									$checkboxComplianceCenter.Enabled = $true
									$checkboxExchangeOnline.Enabled = $true
									$checkboxSharepoint.Enabled = $true
									$checkboxComplianceCenter.Checked = $False
									$checkboxSharepoint.Checked = $False
									$checkboxSkypeForBusiness.Checked = $False
									$checkboxExchangeOnline.Checked = $False
									$checkboxSkypeForBusiness.Enabled = $True
									$FormO365AdministrationCenter.Cursor = 'Default'
									$ButtonConnectTo365.Text = "Connect to O365"
									Show-PreRep_SharePoint_psf
								}
							}
							
							$progressbar1.Value = 90
							
							#If skype for business checkbox is checked
							If ($checkboxSkypeForBusiness.Checked)
							{
								$TextboxResults.Text = "Checking for the SkypeOnlineConnector module..."
								if ((Get-Module -ListAvailable -Name SkypeOnlineConnector) -or ($SkypeOnlineConnectorPreReqPrompt -eq 1))
								{
									$TextboxResults.Text = "Connecting to Skype for Business.."
									Import-Module SkypeOnlineConnector
									#Skype for business session
									$sfboSession = New-CsOnlineSession -Credential $global:o365credentials
									#Import Skype For Business Session
									Import-PSSession $sfboSession
									$TextboxResults.Text = ""
								}
								Else
								{
									$TextboxResults.Text = ""
									$textboxDetails.Text = ""
									$PartnerComboBox.Enabled = $True
									$ButtonConnectTo365.Enabled = $True
									$ButtonDisconnect.Enabled = $False
									#$TenantConnectButton.Enabled = $True
									$checkboxComplianceCenter.Enabled = $true
									$checkboxExchangeOnline.Enabled = $true
									$checkboxSharepoint.Enabled = $true
									$checkboxComplianceCenter.Checked = $False
									$checkboxSharepoint.Checked = $False
									$checkboxSkypeForBusiness.Checked = $False
									$checkboxExchangeOnline.Checked = $False
									$checkboxSkypeForBusiness.Enabled = $True
									$FormO365AdministrationCenter.Cursor = 'Default'
									$ButtonConnectTo365.Text = "Connect to O365"
									Show-PreReq_SkypeForBusiness_psf
								}
								
								
							}
							
							$progressbar1.Value = 100
							$FormO365AdministrationCenter.Cursor = 'Default'
						}
						Else
						{
							$TextboxResults.Text = ""
							$textboxDetails.Text = ""
							$PartnerComboBox.Enabled = $True
							$ButtonConnectTo365.Enabled = $True
							$ButtonDisconnect.Enabled = $False
							#$TenantConnectButton.Enabled = $True
							$checkboxComplianceCenter.Enabled = $true
							$checkboxExchangeOnline.Enabled = $true
							$checkboxSharepoint.Enabled = $true
							$checkboxComplianceCenter.Checked = $False
							$checkboxSharepoint.Checked = $False
							$checkboxSkypeForBusiness.Checked = $False
							$checkboxExchangeOnline.Checked = $False
							$checkboxSkypeForBusiness.Enabled = $True
							$FormO365AdministrationCenter.Cursor = 'Default'
							$ButtonConnectTo365.Text = "Connect to O365"
							Show-PreReq_Azure_psf
						}
					}
					Else
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						$PartnerComboBox.Enabled = $True
						$ButtonConnectTo365.Enabled = $True
						$ButtonDisconnect.Enabled = $False
						#$TenantConnectButton.Enabled = $True
						$checkboxComplianceCenter.Enabled = $true
						$checkboxExchangeOnline.Enabled = $true
						$checkboxSharepoint.Enabled = $true
						$checkboxComplianceCenter.Checked = $False
						$checkboxSharepoint.Checked = $False
						$checkboxSkypeForBusiness.Checked = $False
						$checkboxExchangeOnline.Checked = $False
						$checkboxSkypeForBusiness.Enabled = $True
						$FormO365AdministrationCenter.Cursor = 'Default'
						$ButtonConnectTo365.Text = "Connect to O365"
						
						Show-PreReq_MSOnline_psf
					}
					
				}
				ElseIf ($CredMem -eq 1)
				{
					$TempDir = $env:temp
					$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter_Creds")
					$CachedCredXML = "$O365AdminTempFolder\Creds.xml"
					$global:o365credentials = Import-Clixml -Path $CachedCredXML
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Connecting to Office 365..."
					
					If (($SignOnAss -ne $Null) -or ($MSOnlinePreReqPrompt -eq 1))
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableMSOnlinePrompt -Value 1 -Force | Out-Null
						
						#$TextboxResults.Text = "Checking for the Azure module..."
						If ((Get-Module -ListAvailable -Name MSOnline) -or ($AzurePreReqPrompt -eq 1))
						{
							$FormO365AdministrationCenter.Cursor = 'WaitCursor'
							Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableAzurePrompt -Value 1 -Force | Out-Null
							
							#Show progress bar
							$progressbar1.Visible = $true
							
							#$TextboxResults.Text = "Connecting to O365..."
							$Ranges = 1 .. 50
							foreach ($range in $ranges)
							{
								$progressbar1.Value = $Range
							}
							
							Connect-MsolService -Credential $global:o365credentials
							$progressbar1.Value = 50
							
							#Disable the connect to o365 button
							$ButtonConnectTo365.Enabled = $False
							
							#Enable the disconnect button
							$ButtonDisconnect.Enabled = $True
							
							#Disable the checkboxes
							$checkboxExchangeOnline.Enabled = $false
							$checkboxSkypeForBusiness.Enabled = $false
							$checkboxSharepoint.Enabled = $false
							$checkboxComplianceCenter.Enabled = $False
							$progressbar1.Value = 51
							#Change button text
							$ButtonConnectTo365.Text = "Connected to O365"
							$progressbar1.Value = 52
							#The first checked check box for services will load the appropriate tab as default. 
							If ($checkboxComplianceCenter.checked)
							{
								$TabPageMaster.SelectedTab = $tabpageComplianceCenter
							}
							elseif ($checkboxExchangeOnline.Checked)
							{
								$TabPageMaster.SelectedTab = $tabpageExchangeOnline
							}
							elseif ($checkboxSharepoint.checked)
							{
								$TabPageMaster.SelectedTab = $tabpageSharePoint
							}
							elseif ($checkboxSkypeForBusiness.checked)
							{
								$TabPageMaster.SelectedTab = $tabpageSkypeForBusiness
							}
							$progressbar1.Value = 53
							#Set Tenant Status to 0 as we have not connected to any tenants yet
							Get-Item 'HKCU:\Software\O365 Admin Center' -Force | New-ItemProperty -Name TenantStatus -Value 0 -Force | Out-Null
							$progressbar1.Value = 54
							
							$partnerTIDs = Get-MsolPartnerContract -All | Select-Object TenantID
							$progressbar1.Value = 55
							
							#If tenant domains are available then load combobox with all tenants
							If ($partnerTIDs -ne $Null)
							{
								#Enables the Tenant button
								$TenantConnectButton.Enabled = $True
								$PartnerComboBox.Enabled = $True
								
								$domains = @()
								foreach ($TID in $partnerTIDs)
								{
									$domainName = Get-MsolDomain -TenantId $TID.TenantId | Where-Object { $_.IsDefault -eq 'True' }
									#$domainName = Get-MsolDomain -TenantId $TID.TenantId | Where-Object { $_.Name -notlike '*.onmicrosoft*' -and $_.Name -notlike '*.microsoftonline*' -and $_.Status -eq "Verified" }
									#$domainName = Get-MsolDomain -TenantId $TID.TenantId
									$domain = New-Object -TypeName PSObject
									$domain | Add-Member -Name 'Name' -MemberType NoteProperty -Value ($domainName.Name | Select-Object -First 1) #Deals with Tenants with multiple domain names asociated
									#$domain | Add-Member -Name 'Name' -MemberType NoteProperty -Value $domainName.Name
									$domain | Add-Member -Name TenantID -MemberType NoteProperty -Value $TID.TenantId
									$domains += $domain
								}
								$progressbar1.Value = 60
								#Loads Combobox with Tenants
								Load-ComboBox $PartnerComboBox $domains -DisplayMember Name
								
								#Enable the connect to tenant button
								$TenantConnectButton.Enabled = $true
							}
							
							#If no tenant domains are available then do the following
							Else
							{
								#Clear the combobox of items
								$PartnerComboBox.Text = ""
								
								#Disable combobox
								$PartnerComboBox.Enabled = $False
								
								#Disable the connect to tenant button
								$TenantConnectButton.Enabled = $false
							}
							
							$progressbar1.Value = 65
							
							#If compliance center checkbox is checked
							If ($checkboxComplianceCenter.Checked)
							{
								$TextboxResults.Text = "Connecting to Compliance Center..."
								$ccSession = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri https://ps.compliance.protection.outlook.com/powershell-liveid/ -Credential $global:o365credentials -Authentication Basic -AllowRedirection
								Import-PSSession $ccSession
								$TextboxResults.Text = ""
							}
							
							$progressbar1.Value = 70
							
							#If exchange online checkbox is checked
							If ($checkboxExchangeOnline.Checked)
							{
								
								$TextboxResults.Text = "Connecting to Exchange Online..."
								$exchangeSession = New-PSSession -Name MainAccount -ConfigurationName Microsoft.Exchange -ConnectionUri https://outlook.office365.com/powershell-liveid/ -Credential $global:o365credentials -Authentication Basic -AllowRedirection
								Import-PSSession $exchangeSession -AllowClobber
								
								
								$TextboxResults.Text = "Caching Users..."
								$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter")
								$UserListcombo = Get-MSOLUser -All | Select-Object -ExpandProperty UserPrincipalName | Out-File "$O365AdminTempFolder\upn.txt"
								Get-MSOLUser -All | Select-Object -ExpandProperty DisplayName | Out-File "$O365AdminTempFolder\names.txt"
								
								
								$TextboxResults.Text = ""
							}
							
							$progressbar1.Value = 80
							
							If ($checkboxSharepoint.Checked -and $checkboxExchangeOnline.Checked)
							{
								$TextboxResults.Text = "Checking for the SharePoint Online module..."
								if ((Get-Module -ListAvailable -Name Microsoft.Online.SharePoint.PowerShell) -or ($SharePointPreReqPrompt -eq 1))
								{
									Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableSharePointOnlinePrompt -Value 1 -Force | Out-Null
									
									$TextboxResults.Text = "Connecting to SharePoint Online..."
									#Grabs the Sharepoint URL attribtue with Absoluteuri header
									$SPOheaders = Get-OrganizationConfig | Select-Object -ExpandProperty SharepointUrl
									#Clears the header so we have a clean variable
									$SPOSite = $SPOheaders | Select-Object -ExpandProperty AbsoluteUri
									#Splits the URl into two parts so we can inject -admin
									$firsthalf = $SPOSite -split ('.sharepoint.com') | Select-Object -First 1
									$secondhalf = $SPOSite -split '(.sharepoint.com/)' | Select-Object -Last 2
									#Wrap it all up into a single URL with the -admin
									$SPOadminSite = "$Firsthalf" + "-admin" + "$secondhalf"
									$TextboxResults.Text = "Connecting to Sharepoint Online..."
									Import-Module Microsoft.Online.SharePoint.PowerShell -DisableNameChecking
									Connect-SPOService -Url $SPOadminSite -credential $global:o365credentials
									$TextboxResults.Text = ""
								}
								Else
								{
									$TextboxResults.Text = ""
									$textboxDetails.Text = ""
									$PartnerComboBox.Enabled = $True
									$ButtonConnectTo365.Enabled = $True
									$ButtonDisconnect.Enabled = $False
									#$TenantConnectButton.Enabled = $True
									$checkboxComplianceCenter.Enabled = $true
									$checkboxExchangeOnline.Enabled = $true
									$checkboxSharepoint.Enabled = $true
									$checkboxComplianceCenter.Checked = $False
									$checkboxSharepoint.Checked = $False
									$checkboxSkypeForBusiness.Checked = $False
									$checkboxExchangeOnline.Checked = $False
									$checkboxSkypeForBusiness.Enabled = $True
									$FormO365AdministrationCenter.Cursor = 'Default'
									$ButtonConnectTo365.Text = "Connect to O365"
									Show-PreRep_SharePoint_psf
								}
							}
							
							#If sharepoint checkbox is checked
							If ($checkboxSharepoint.Checked)
							{
								$TextboxResults.Text = "Checking for the SharePoint Online module..."
								if ((Get-Module -ListAvailable -Name Microsoft.Online.SharePoint.PowerShell) -or ($SharePointPreReqPrompt -eq 1))
								{
									#$Sharepointdomain = Read-Host "Enter the domain name. EX: contoso, yahoo"
									#Connect to Exchange online so we can grab the Sharepoint URL attribute 
									$TextboxResults.Text = "Connecting to SharePoint Online..."
									$exchangeSession = New-PSSession -Name MainAccount -ConfigurationName Microsoft.Exchange -ConnectionUri https://outlook.office365.com/powershell-liveid/ -Credential $global:o365credentials -Authentication Basic -AllowRedirection
									Import-PSSession $exchangeSession -AllowClobber
									$progressbar1.Value = 83
									#Grabs the Sharepoint URL attribtue with Absoluteuri header
									$SPOheaders = Get-OrganizationConfig | Select-Object -ExpandProperty SharepointUrl
									#Clears the header so we have a clean variable
									$SPOSite = $SPOheaders | Select-Object -ExpandProperty AbsoluteUri
									#Splits the URl into two parts so we can inject -admin
									$firsthalf = $SPOSite -split ('.sharepoint.com') | Select-Object -First 1
									$secondhalf = $SPOSite -split '(.sharepoint.com/)' | Select-Object -Last 2
									#Wrap it all up into a single URL with the -admin
									$SPOadminSite = "$Firsthalf" + "-admin" + "$secondhalf"
									$TextboxResults.Text = "Connecting to Sharepoint Online..."
									Import-Module Microsoft.Online.SharePoint.PowerShell -DisableNameChecking
									Connect-SPOService -Url $SPOadminSite -credential $global:o365credentials
									$TextboxResults.Text = ""
								}
								Else
								{
									$TextboxResults.Text = ""
									$textboxDetails.Text = ""
									$PartnerComboBox.Enabled = $True
									$ButtonConnectTo365.Enabled = $True
									$ButtonDisconnect.Enabled = $False
									#$TenantConnectButton.Enabled = $True
									$checkboxComplianceCenter.Enabled = $true
									$checkboxExchangeOnline.Enabled = $true
									$checkboxSharepoint.Enabled = $true
									$checkboxComplianceCenter.Checked = $False
									$checkboxSharepoint.Checked = $False
									$checkboxSkypeForBusiness.Checked = $False
									$checkboxExchangeOnline.Checked = $False
									$checkboxSkypeForBusiness.Enabled = $True
									$FormO365AdministrationCenter.Cursor = 'Default'
									$ButtonConnectTo365.Text = "Connect to O365"
									Show-PreRep_SharePoint_psf
								}
							}
							
							$progressbar1.Value = 90
							
							#If skype for business checkbox is checked
							If ($checkboxSkypeForBusiness.Checked)
							{
								$TextboxResults.Text = "Checking for the SkypeOnlineConnector module..."
								if ((Get-Module -ListAvailable -Name SkypeOnlineConnector) -or ($SkypeOnlineConnectorPreReqPrompt -eq 1))
								{
									$TextboxResults.Text = "Connecting to Skype for Business.."
									Import-Module SkypeOnlineConnector
									#Skype for business session
									$sfboSession = New-CsOnlineSession -Credential $global:o365credentials
									#Import Skype For Business Session
									Import-PSSession $sfboSession
									$TextboxResults.Text = ""
								}
								Else
								{
									$TextboxResults.Text = ""
									$textboxDetails.Text = ""
									$PartnerComboBox.Enabled = $True
									$ButtonConnectTo365.Enabled = $True
									$ButtonDisconnect.Enabled = $False
									#$TenantConnectButton.Enabled = $True
									$checkboxComplianceCenter.Enabled = $true
									$checkboxExchangeOnline.Enabled = $true
									$checkboxSharepoint.Enabled = $true
									$checkboxComplianceCenter.Checked = $False
									$checkboxSharepoint.Checked = $False
									$checkboxSkypeForBusiness.Checked = $False
									$checkboxExchangeOnline.Checked = $False
									$checkboxSkypeForBusiness.Enabled = $True
									$FormO365AdministrationCenter.Cursor = 'Default'
									$ButtonConnectTo365.Text = "Connect to O365"
									Show-PreReq_SkypeForBusiness_psf
								}
								
								
							}
							
							$progressbar1.Value = 100
							$FormO365AdministrationCenter.Cursor = 'Default'
						}
						Else
						{
							$TextboxResults.Text = ""
							$textboxDetails.Text = ""
							$PartnerComboBox.Enabled = $True
							$ButtonConnectTo365.Enabled = $True
							$ButtonDisconnect.Enabled = $False
							#$TenantConnectButton.Enabled = $True
							$checkboxComplianceCenter.Enabled = $true
							$checkboxExchangeOnline.Enabled = $true
							$checkboxSharepoint.Enabled = $true
							$checkboxComplianceCenter.Checked = $False
							$checkboxSharepoint.Checked = $False
							$checkboxSkypeForBusiness.Checked = $False
							$checkboxExchangeOnline.Checked = $False
							$checkboxSkypeForBusiness.Enabled = $True
							$FormO365AdministrationCenter.Cursor = 'Default'
							$ButtonConnectTo365.Text = "Connect to O365"
							Show-PreReq_Azure_psf
						}
					}
					Else
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						$PartnerComboBox.Enabled = $True
						$ButtonConnectTo365.Enabled = $True
						$ButtonDisconnect.Enabled = $False
						#$TenantConnectButton.Enabled = $True
						$checkboxComplianceCenter.Enabled = $true
						$checkboxExchangeOnline.Enabled = $true
						$checkboxSharepoint.Enabled = $true
						$checkboxComplianceCenter.Checked = $False
						$checkboxSharepoint.Checked = $False
						$checkboxSkypeForBusiness.Checked = $False
						$checkboxExchangeOnline.Checked = $False
						$checkboxSkypeForBusiness.Enabled = $True
						$FormO365AdministrationCenter.Cursor = 'Default'
						$ButtonConnectTo365.Text = "Connect to O365"
						
						Show-PreReq_MSOnline_psf
					}
				}
				Elseif ($CredMem -eq 2)
				{
					$global:o365credentials = (Get-Credential -Message "Please enter your Office 365 credentials")
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Connecting to Office 365..."
					
					If (($SignOnAss -ne $Null) -or ($MSOnlinePreReqPrompt -eq 1))
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableMSOnlinePrompt -Value 1 -Force | Out-Null
						
						#$TextboxResults.Text = "Checking for the Azure module..."
						If ((Get-Module -ListAvailable -Name MSOnline) -or ($AzurePreReqPrompt -eq 1))
						{
							$FormO365AdministrationCenter.Cursor = 'WaitCursor'
							Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableAzurePrompt -Value 1 -Force | Out-Null
							
							#Show progress bar
							$progressbar1.Visible = $true
							
							#$TextboxResults.Text = "Connecting to O365..."
							$Ranges = 1 .. 50
							foreach ($range in $ranges)
							{
								$progressbar1.Value = $Range
							}
							
							Connect-MsolService -Credential $global:o365credentials
							$progressbar1.Value = 50
							
							#Disable the connect to o365 button
							$ButtonConnectTo365.Enabled = $False
							
							#Enable the disconnect button
							$ButtonDisconnect.Enabled = $True
							
							#Disable the checkboxes
							$checkboxExchangeOnline.Enabled = $false
							$checkboxSkypeForBusiness.Enabled = $false
							$checkboxSharepoint.Enabled = $false
							$checkboxComplianceCenter.Enabled = $False
							$progressbar1.Value = 51
							#Change button text
							$ButtonConnectTo365.Text = "Connected to O365"
							$progressbar1.Value = 52
							#The first checked check box for services will load the appropriate tab as default. 
							If ($checkboxComplianceCenter.checked)
							{
								$TabPageMaster.SelectedTab = $tabpageComplianceCenter
							}
							elseif ($checkboxExchangeOnline.Checked)
							{
								$TabPageMaster.SelectedTab = $tabpageExchangeOnline
							}
							elseif ($checkboxSharepoint.checked)
							{
								$TabPageMaster.SelectedTab = $tabpageSharePoint
							}
							elseif ($checkboxSkypeForBusiness.checked)
							{
								$TabPageMaster.SelectedTab = $tabpageSkypeForBusiness
							}
							$progressbar1.Value = 53
							#Set Tenant Status to 0 as we have not connected to any tenants yet
							Get-Item 'HKCU:\Software\O365 Admin Center' -Force | New-ItemProperty -Name TenantStatus -Value 0 -Force | Out-Null
							$progressbar1.Value = 54
							
							$partnerTIDs = Get-MsolPartnerContract -All | Select-Object TenantID
							$progressbar1.Value = 55
							
							#If tenant domains are available then load combobox with all tenants
							If ($partnerTIDs -ne $Null)
							{
								#Enables the Tenant button
								$TenantConnectButton.Enabled = $True
								$PartnerComboBox.Enabled = $True
								
								$domains = @()
								foreach ($TID in $partnerTIDs)
								{
									$domainName = Get-MsolDomain -TenantId $TID.TenantId | Where-Object { $_.IsDefault -eq 'True' }
									#$domainName = Get-MsolDomain -TenantId $TID.TenantId | Where-Object { $_.Name -notlike '*.onmicrosoft*' -and $_.Name -notlike '*.microsoftonline*' -and $_.Status -eq "Verified" }
									#$domainName = Get-MsolDomain -TenantId $TID.TenantId
									$domain = New-Object -TypeName PSObject
									$domain | Add-Member -Name 'Name' -MemberType NoteProperty -Value ($domainName.Name | Select-Object -First 1) #Deals with Tenants with multiple domain names asociated
									#$domain | Add-Member -Name 'Name' -MemberType NoteProperty -Value $domainName.Name
									$domain | Add-Member -Name TenantID -MemberType NoteProperty -Value $TID.TenantId
									$domains += $domain
								}
								$progressbar1.Value = 60
								#Loads Combobox with Tenants
								Load-ComboBox $PartnerComboBox $domains -DisplayMember Name
								
								#Enable the connect to tenant button
								$TenantConnectButton.Enabled = $true
							}
							
							#If no tenant domains are available then do the following
							Else
							{
								#Clear the combobox of items
								$PartnerComboBox.Text = ""
								
								#Disable combobox
								$PartnerComboBox.Enabled = $False
								
								#Disable the connect to tenant button
								$TenantConnectButton.Enabled = $false
							}
							
							$progressbar1.Value = 65
							
							#If compliance center checkbox is checked
							If ($checkboxComplianceCenter.Checked)
							{
								$TextboxResults.Text = "Connecting to Compliance Center..."
								$ccSession = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri https://ps.compliance.protection.outlook.com/powershell-liveid/ -Credential $global:o365credentials -Authentication Basic -AllowRedirection
								Import-PSSession $ccSession
								$TextboxResults.Text = ""
							}
							
							$progressbar1.Value = 70
							
							#If exchange online checkbox is checked
							If ($checkboxExchangeOnline.Checked)
							{
								
								$TextboxResults.Text = "Connecting to Exchange Online..."
								$exchangeSession = New-PSSession -Name MainAccount -ConfigurationName Microsoft.Exchange -ConnectionUri https://outlook.office365.com/powershell-liveid/ -Credential $global:o365credentials -Authentication Basic -AllowRedirection
								Import-PSSession $exchangeSession -AllowClobber
								
								
								$TextboxResults.Text = "Caching Users..."
								$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter")
								$UserListcombo = Get-MSOLUser -All | Select-Object -ExpandProperty UserPrincipalName | Out-File "$O365AdminTempFolder\upn.txt"
								Get-MSOLUser -All | Select-Object -ExpandProperty DisplayName | Out-File "$O365AdminTempFolder\names.txt"
								
								
								$TextboxResults.Text = ""
							}
							
							$progressbar1.Value = 80
							
							If ($checkboxSharepoint.Checked -and $checkboxExchangeOnline.Checked)
							{
								$TextboxResults.Text = "Checking for the SharePoint Online module..."
								if ((Get-Module -ListAvailable -Name Microsoft.Online.SharePoint.PowerShell) -or ($SharePointPreReqPrompt -eq 1))
								{
									Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableSharePointOnlinePrompt -Value 1 -Force | Out-Null
									
									$TextboxResults.Text = "Connecting to SharePoint Online..."
									#Grabs the Sharepoint URL attribtue with Absoluteuri header
									$SPOheaders = Get-OrganizationConfig | Select-Object -ExpandProperty SharepointUrl
									#Clears the header so we have a clean variable
									$SPOSite = $SPOheaders | Select-Object -ExpandProperty AbsoluteUri
									#Splits the URl into two parts so we can inject -admin
									$firsthalf = $SPOSite -split ('.sharepoint.com') | Select-Object -First 1
									$secondhalf = $SPOSite -split '(.sharepoint.com/)' | Select-Object -Last 2
									#Wrap it all up into a single URL with the -admin
									$SPOadminSite = "$Firsthalf" + "-admin" + "$secondhalf"
									$TextboxResults.Text = "Connecting to Sharepoint Online..."
									Import-Module Microsoft.Online.SharePoint.PowerShell -DisableNameChecking
									Connect-SPOService -Url $SPOadminSite -credential $global:o365credentials
									$TextboxResults.Text = ""
								}
								Else
								{
									$TextboxResults.Text = ""
									$textboxDetails.Text = ""
									$PartnerComboBox.Enabled = $True
									$ButtonConnectTo365.Enabled = $True
									$ButtonDisconnect.Enabled = $False
									#$TenantConnectButton.Enabled = $True
									$checkboxComplianceCenter.Enabled = $true
									$checkboxExchangeOnline.Enabled = $true
									$checkboxSharepoint.Enabled = $true
									$checkboxComplianceCenter.Checked = $False
									$checkboxSharepoint.Checked = $False
									$checkboxSkypeForBusiness.Checked = $False
									$checkboxExchangeOnline.Checked = $False
									$checkboxSkypeForBusiness.Enabled = $True
									$FormO365AdministrationCenter.Cursor = 'Default'
									$ButtonConnectTo365.Text = "Connect to O365"
									Show-PreRep_SharePoint_psf
								}
							}
							
							#If sharepoint checkbox is checked
							If ($checkboxSharepoint.Checked)
							{
								$TextboxResults.Text = "Checking for the SharePoint Online module..."
								if ((Get-Module -ListAvailable -Name Microsoft.Online.SharePoint.PowerShell) -or ($SharePointPreReqPrompt -eq 1))
								{
									#$Sharepointdomain = Read-Host "Enter the domain name. EX: contoso, yahoo"
									#Connect to Exchange online so we can grab the Sharepoint URL attribute 
									$TextboxResults.Text = "Connecting to SharePoint Online..."
									$exchangeSession = New-PSSession -Name MainAccount -ConfigurationName Microsoft.Exchange -ConnectionUri https://outlook.office365.com/powershell-liveid/ -Credential $global:o365credentials -Authentication Basic -AllowRedirection
									Import-PSSession $exchangeSession -AllowClobber
									$progressbar1.Value = 83
									#Grabs the Sharepoint URL attribtue with Absoluteuri header
									$SPOheaders = Get-OrganizationConfig | Select-Object -ExpandProperty SharepointUrl
									#Clears the header so we have a clean variable
									$SPOSite = $SPOheaders | Select-Object -ExpandProperty AbsoluteUri
									#Splits the URl into two parts so we can inject -admin
									$firsthalf = $SPOSite -split ('.sharepoint.com') | Select-Object -First 1
									$secondhalf = $SPOSite -split '(.sharepoint.com/)' | Select-Object -Last 2
									#Wrap it all up into a single URL with the -admin
									$SPOadminSite = "$Firsthalf" + "-admin" + "$secondhalf"
									$TextboxResults.Text = "Connecting to Sharepoint Online..."
									Import-Module Microsoft.Online.SharePoint.PowerShell -DisableNameChecking
									Connect-SPOService -Url $SPOadminSite -credential $global:o365credentials
									$TextboxResults.Text = ""
								}
								Else
								{
									$TextboxResults.Text = ""
									$textboxDetails.Text = ""
									$PartnerComboBox.Enabled = $True
									$ButtonConnectTo365.Enabled = $True
									$ButtonDisconnect.Enabled = $False
									#$TenantConnectButton.Enabled = $True
									$checkboxComplianceCenter.Enabled = $true
									$checkboxExchangeOnline.Enabled = $true
									$checkboxSharepoint.Enabled = $true
									$checkboxComplianceCenter.Checked = $False
									$checkboxSharepoint.Checked = $False
									$checkboxSkypeForBusiness.Checked = $False
									$checkboxExchangeOnline.Checked = $False
									$checkboxSkypeForBusiness.Enabled = $True
									$FormO365AdministrationCenter.Cursor = 'Default'
									$ButtonConnectTo365.Text = "Connect to O365"
									Show-PreRep_SharePoint_psf
								}
							}
							
							$progressbar1.Value = 90
							
							#If skype for business checkbox is checked
							If ($checkboxSkypeForBusiness.Checked)
							{
								$TextboxResults.Text = "Checking for the SkypeOnlineConnector module..."
								if ((Get-Module -ListAvailable -Name SkypeOnlineConnector) -or ($SkypeOnlineConnectorPreReqPrompt -eq 1))
								{
									$TextboxResults.Text = "Connecting to Skype for Business.."
									Import-Module SkypeOnlineConnector
									#Skype for business session
									$sfboSession = New-CsOnlineSession -Credential $global:o365credentials
									#Import Skype For Business Session
									Import-PSSession $sfboSession
									$TextboxResults.Text = ""
								}
								Else
								{
									$TextboxResults.Text = ""
									$textboxDetails.Text = ""
									$PartnerComboBox.Enabled = $True
									$ButtonConnectTo365.Enabled = $True
									$ButtonDisconnect.Enabled = $False
									#$TenantConnectButton.Enabled = $True
									$checkboxComplianceCenter.Enabled = $true
									$checkboxExchangeOnline.Enabled = $true
									$checkboxSharepoint.Enabled = $true
									$checkboxComplianceCenter.Checked = $False
									$checkboxSharepoint.Checked = $False
									$checkboxSkypeForBusiness.Checked = $False
									$checkboxExchangeOnline.Checked = $False
									$checkboxSkypeForBusiness.Enabled = $True
									$FormO365AdministrationCenter.Cursor = 'Default'
									$ButtonConnectTo365.Text = "Connect to O365"
									Show-PreReq_SkypeForBusiness_psf
								}
								
								
							}
							
							$progressbar1.Value = 100
							$FormO365AdministrationCenter.Cursor = 'Default'
						}
						Else
						{
							$TextboxResults.Text = ""
							$textboxDetails.Text = ""
							$PartnerComboBox.Enabled = $True
							$ButtonConnectTo365.Enabled = $True
							$ButtonDisconnect.Enabled = $False
							#$TenantConnectButton.Enabled = $True
							$checkboxComplianceCenter.Enabled = $true
							$checkboxExchangeOnline.Enabled = $true
							$checkboxSharepoint.Enabled = $true
							$checkboxComplianceCenter.Checked = $False
							$checkboxSharepoint.Checked = $False
							$checkboxSkypeForBusiness.Checked = $False
							$checkboxExchangeOnline.Checked = $False
							$checkboxSkypeForBusiness.Enabled = $True
							$FormO365AdministrationCenter.Cursor = 'Default'
							$ButtonConnectTo365.Text = "Connect to O365"
							Show-PreReq_Azure_psf
						}
					}
					Else
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						$PartnerComboBox.Enabled = $True
						$ButtonConnectTo365.Enabled = $True
						$ButtonDisconnect.Enabled = $False
						#$TenantConnectButton.Enabled = $True
						$checkboxComplianceCenter.Enabled = $true
						$checkboxExchangeOnline.Enabled = $true
						$checkboxSharepoint.Enabled = $true
						$checkboxComplianceCenter.Checked = $False
						$checkboxSharepoint.Checked = $False
						$checkboxSkypeForBusiness.Checked = $False
						$checkboxExchangeOnline.Checked = $False
						$checkboxSkypeForBusiness.Enabled = $True
						$FormO365AdministrationCenter.Cursor = 'Default'
						$ButtonConnectTo365.Text = "Connect to O365"
						
						Show-PreReq_MSOnline_psf
					}
				}
				Else
				{
					$global:o365credentials = (Get-Credential -Message "Please enter your Office 365 credentials")
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Connecting to Office 365..."
					
					If (($SignOnAss -ne $Null) -or ($MSOnlinePreReqPrompt -eq 1))
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableMSOnlinePrompt -Value 1 -Force | Out-Null
						
						#$TextboxResults.Text = "Checking for the Azure module..."
						If ((Get-Module -ListAvailable -Name MSOnline) -or ($AzurePreReqPrompt -eq 1))
						{
							$FormO365AdministrationCenter.Cursor = 'WaitCursor'
							Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableAzurePrompt -Value 1 -Force | Out-Null
							
							#Show progress bar
							$progressbar1.Visible = $true
							
							#$TextboxResults.Text = "Connecting to O365..."
							$Ranges = 1 .. 50
							foreach ($range in $ranges)
							{
								$progressbar1.Value = $Range
							}
							
							Connect-MsolService -Credential $global:o365credentials
							$progressbar1.Value = 50
							
							#Disable the connect to o365 button
							$ButtonConnectTo365.Enabled = $False
							
							#Enable the disconnect button
							$ButtonDisconnect.Enabled = $True
							
							#Disable the checkboxes
							$checkboxExchangeOnline.Enabled = $false
							$checkboxSkypeForBusiness.Enabled = $false
							$checkboxSharepoint.Enabled = $false
							$checkboxComplianceCenter.Enabled = $False
							$progressbar1.Value = 51
							#Change button text
							$ButtonConnectTo365.Text = "Connected to O365"
							$progressbar1.Value = 52
							#The first checked check box for services will load the appropriate tab as default. 
							If ($checkboxComplianceCenter.checked)
							{
								$TabPageMaster.SelectedTab = $tabpageComplianceCenter
							}
							elseif ($checkboxExchangeOnline.Checked)
							{
								$TabPageMaster.SelectedTab = $tabpageExchangeOnline
							}
							elseif ($checkboxSharepoint.checked)
							{
								$TabPageMaster.SelectedTab = $tabpageSharePoint
							}
							elseif ($checkboxSkypeForBusiness.checked)
							{
								$TabPageMaster.SelectedTab = $tabpageSkypeForBusiness
							}
							$progressbar1.Value = 53
							#Set Tenant Status to 0 as we have not connected to any tenants yet
							Get-Item 'HKCU:\Software\O365 Admin Center' -Force | New-ItemProperty -Name TenantStatus -Value 0 -Force | Out-Null
							$progressbar1.Value = 54
							
							$partnerTIDs = Get-MsolPartnerContract -All | Select-Object TenantID
							$progressbar1.Value = 55
							
							#If tenant domains are available then load combobox with all tenants
							If ($partnerTIDs -ne $Null)
							{
								#Enables the Tenant button
								$TenantConnectButton.Enabled = $True
								$PartnerComboBox.Enabled = $True
								
								$domains = @()
								foreach ($TID in $partnerTIDs)
								{
									$domainName = Get-MsolDomain -TenantId $TID.TenantId | Where-Object { $_.IsDefault -eq 'True' }
									#$domainName = Get-MsolDomain -TenantId $TID.TenantId | Where-Object { $_.Name -notlike '*.onmicrosoft*' -and $_.Name -notlike '*.microsoftonline*' -and $_.Status -eq "Verified" }
									#$domainName = Get-MsolDomain -TenantId $TID.TenantId
									$domain = New-Object -TypeName PSObject
									$domain | Add-Member -Name 'Name' -MemberType NoteProperty -Value ($domainName.Name | Select-Object -First 1) #Deals with Tenants with multiple domain names asociated
									#$domain | Add-Member -Name 'Name' -MemberType NoteProperty -Value $domainName.Name
									$domain | Add-Member -Name TenantID -MemberType NoteProperty -Value $TID.TenantId
									$domains += $domain
								}
								$progressbar1.Value = 60
								#Loads Combobox with Tenants
								Load-ComboBox $PartnerComboBox $domains -DisplayMember Name
								
								#Enable the connect to tenant button
								$TenantConnectButton.Enabled = $true
							}
							
							#If no tenant domains are available then do the following
							Else
							{
								#Clear the combobox of items
								$PartnerComboBox.Text = ""
								
								#Disable combobox
								$PartnerComboBox.Enabled = $False
								
								#Disable the connect to tenant button
								$TenantConnectButton.Enabled = $false
							}
							
							$progressbar1.Value = 65
							
							#If compliance center checkbox is checked
							If ($checkboxComplianceCenter.Checked)
							{
								$TextboxResults.Text = "Connecting to Compliance Center..."
								$ccSession = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri https://ps.compliance.protection.outlook.com/powershell-liveid/ -Credential $global:o365credentials -Authentication Basic -AllowRedirection
								Import-PSSession $ccSession
								$TextboxResults.Text = ""
							}
							
							$progressbar1.Value = 70
							
							#If exchange online checkbox is checked
							If ($checkboxExchangeOnline.Checked)
							{
								
								$TextboxResults.Text = "Connecting to Exchange Online..."
								$exchangeSession = New-PSSession -Name MainAccount -ConfigurationName Microsoft.Exchange -ConnectionUri https://outlook.office365.com/powershell-liveid/ -Credential $global:o365credentials -Authentication Basic -AllowRedirection
								Import-PSSession $exchangeSession -AllowClobber
								
								
								$TextboxResults.Text = "Caching Users..."
								$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter")
								$UserListcombo = Get-MSOLUser -All | Select-Object -ExpandProperty UserPrincipalName | Out-File "$O365AdminTempFolder\upn.txt"
								Get-MSOLUser -All | Select-Object -ExpandProperty DisplayName | Out-File "$O365AdminTempFolder\names.txt"
								
								
								$TextboxResults.Text = ""
							}
							
							$progressbar1.Value = 80
							
							If ($checkboxSharepoint.Checked -and $checkboxExchangeOnline.Checked)
							{
								$TextboxResults.Text = "Checking for the SharePoint Online module..."
								if ((Get-Module -ListAvailable -Name Microsoft.Online.SharePoint.PowerShell) -or ($SharePointPreReqPrompt -eq 1))
								{
									Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableSharePointOnlinePrompt -Value 1 -Force | Out-Null
									
									$TextboxResults.Text = "Connecting to SharePoint Online..."
									#Grabs the Sharepoint URL attribtue with Absoluteuri header
									$SPOheaders = Get-OrganizationConfig | Select-Object -ExpandProperty SharepointUrl
									#Clears the header so we have a clean variable
									$SPOSite = $SPOheaders | Select-Object -ExpandProperty AbsoluteUri
									#Splits the URl into two parts so we can inject -admin
									$firsthalf = $SPOSite -split ('.sharepoint.com') | Select-Object -First 1
									$secondhalf = $SPOSite -split '(.sharepoint.com/)' | Select-Object -Last 2
									#Wrap it all up into a single URL with the -admin
									$SPOadminSite = "$Firsthalf" + "-admin" + "$secondhalf"
									$TextboxResults.Text = "Connecting to Sharepoint Online..."
									Import-Module Microsoft.Online.SharePoint.PowerShell -DisableNameChecking
									Connect-SPOService -Url $SPOadminSite -credential $global:o365credentials
									$TextboxResults.Text = ""
								}
								Else
								{
									$TextboxResults.Text = ""
									$textboxDetails.Text = ""
									$PartnerComboBox.Enabled = $True
									$ButtonConnectTo365.Enabled = $True
									$ButtonDisconnect.Enabled = $False
									#$TenantConnectButton.Enabled = $True
									$checkboxComplianceCenter.Enabled = $true
									$checkboxExchangeOnline.Enabled = $true
									$checkboxSharepoint.Enabled = $true
									$checkboxComplianceCenter.Checked = $False
									$checkboxSharepoint.Checked = $False
									$checkboxSkypeForBusiness.Checked = $False
									$checkboxExchangeOnline.Checked = $False
									$checkboxSkypeForBusiness.Enabled = $True
									$FormO365AdministrationCenter.Cursor = 'Default'
									$ButtonConnectTo365.Text = "Connect to O365"
									Show-PreRep_SharePoint_psf
								}
							}
							
							#If sharepoint checkbox is checked
							If ($checkboxSharepoint.Checked)
							{
								$TextboxResults.Text = "Checking for the SharePoint Online module..."
								if ((Get-Module -ListAvailable -Name Microsoft.Online.SharePoint.PowerShell) -or ($SharePointPreReqPrompt -eq 1))
								{
									#$Sharepointdomain = Read-Host "Enter the domain name. EX: contoso, yahoo"
									#Connect to Exchange online so we can grab the Sharepoint URL attribute 
									$TextboxResults.Text = "Connecting to SharePoint Online..."
									$exchangeSession = New-PSSession -Name MainAccount -ConfigurationName Microsoft.Exchange -ConnectionUri https://outlook.office365.com/powershell-liveid/ -Credential $global:o365credentials -Authentication Basic -AllowRedirection
									Import-PSSession $exchangeSession -AllowClobber
									$progressbar1.Value = 83
									#Grabs the Sharepoint URL attribtue with Absoluteuri header
									$SPOheaders = Get-OrganizationConfig | Select-Object -ExpandProperty SharepointUrl
									#Clears the header so we have a clean variable
									$SPOSite = $SPOheaders | Select-Object -ExpandProperty AbsoluteUri
									#Splits the URl into two parts so we can inject -admin
									$firsthalf = $SPOSite -split ('.sharepoint.com') | Select-Object -First 1
									$secondhalf = $SPOSite -split '(.sharepoint.com/)' | Select-Object -Last 2
									#Wrap it all up into a single URL with the -admin
									$SPOadminSite = "$Firsthalf" + "-admin" + "$secondhalf"
									$TextboxResults.Text = "Connecting to Sharepoint Online..."
									Import-Module Microsoft.Online.SharePoint.PowerShell -DisableNameChecking
									Connect-SPOService -Url $SPOadminSite -credential $global:o365credentials
									$TextboxResults.Text = ""
								}
								Else
								{
									$TextboxResults.Text = ""
									$textboxDetails.Text = ""
									$PartnerComboBox.Enabled = $True
									$ButtonConnectTo365.Enabled = $True
									$ButtonDisconnect.Enabled = $False
									#$TenantConnectButton.Enabled = $True
									$checkboxComplianceCenter.Enabled = $true
									$checkboxExchangeOnline.Enabled = $true
									$checkboxSharepoint.Enabled = $true
									$checkboxComplianceCenter.Checked = $False
									$checkboxSharepoint.Checked = $False
									$checkboxSkypeForBusiness.Checked = $False
									$checkboxExchangeOnline.Checked = $False
									$checkboxSkypeForBusiness.Enabled = $True
									$FormO365AdministrationCenter.Cursor = 'Default'
									$ButtonConnectTo365.Text = "Connect to O365"
									Show-PreRep_SharePoint_psf
								}
							}
							
							$progressbar1.Value = 90
							
							#If skype for business checkbox is checked
							If ($checkboxSkypeForBusiness.Checked)
							{
								$TextboxResults.Text = "Checking for the SkypeOnlineConnector module..."
								if ((Get-Module -ListAvailable -Name SkypeOnlineConnector) -or ($SkypeOnlineConnectorPreReqPrompt -eq 1))
								{
									$TextboxResults.Text = "Connecting to Skype for Business.."
									Import-Module SkypeOnlineConnector
									#Skype for business session
									$sfboSession = New-CsOnlineSession -Credential $global:o365credentials
									#Import Skype For Business Session
									Import-PSSession $sfboSession
									$TextboxResults.Text = ""
								}
								Else
								{
									$TextboxResults.Text = ""
									$textboxDetails.Text = ""
									$PartnerComboBox.Enabled = $True
									$ButtonConnectTo365.Enabled = $True
									$ButtonDisconnect.Enabled = $False
									#$TenantConnectButton.Enabled = $True
									$checkboxComplianceCenter.Enabled = $true
									$checkboxExchangeOnline.Enabled = $true
									$checkboxSharepoint.Enabled = $true
									$checkboxComplianceCenter.Checked = $False
									$checkboxSharepoint.Checked = $False
									$checkboxSkypeForBusiness.Checked = $False
									$checkboxExchangeOnline.Checked = $False
									$checkboxSkypeForBusiness.Enabled = $True
									$FormO365AdministrationCenter.Cursor = 'Default'
									$ButtonConnectTo365.Text = "Connect to O365"
									Show-PreReq_SkypeForBusiness_psf
								}
								
								
							}
							
							$progressbar1.Value = 100
							$FormO365AdministrationCenter.Cursor = 'Default'
						}
						Else
						{
							$TextboxResults.Text = ""
							$textboxDetails.Text = ""
							$PartnerComboBox.Enabled = $True
							$ButtonConnectTo365.Enabled = $True
							$ButtonDisconnect.Enabled = $False
							#$TenantConnectButton.Enabled = $True
							$checkboxComplianceCenter.Enabled = $true
							$checkboxExchangeOnline.Enabled = $true
							$checkboxSharepoint.Enabled = $true
							$checkboxComplianceCenter.Checked = $False
							$checkboxSharepoint.Checked = $False
							$checkboxSkypeForBusiness.Checked = $False
							$checkboxExchangeOnline.Checked = $False
							$checkboxSkypeForBusiness.Enabled = $True
							$FormO365AdministrationCenter.Cursor = 'Default'
							$ButtonConnectTo365.Text = "Connect to O365"
							Show-PreReq_Azure_psf
						}
					}
					Else
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						$PartnerComboBox.Enabled = $True
						$ButtonConnectTo365.Enabled = $True
						$ButtonDisconnect.Enabled = $False
						#$TenantConnectButton.Enabled = $True
						$checkboxComplianceCenter.Enabled = $true
						$checkboxExchangeOnline.Enabled = $true
						$checkboxSharepoint.Enabled = $true
						$checkboxComplianceCenter.Checked = $False
						$checkboxSharepoint.Checked = $False
						$checkboxSkypeForBusiness.Checked = $False
						$checkboxExchangeOnline.Checked = $False
						$checkboxSkypeForBusiness.Enabled = $True
						$FormO365AdministrationCenter.Cursor = 'Default'
						$ButtonConnectTo365.Text = "Connect to O365"
						
						Show-PreReq_MSOnline_psf
					}
				}
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'Default'
				Show-SelecPreReqExecutionPolicy_psf
			}
		}
	}
	Catch
	{
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		$PartnerComboBox.Enabled = $True
		$ButtonConnectTo365.Enabled = $True
		$ButtonDisconnect.Enabled = $False
		#$TenantConnectButton.Enabled = $True
		$checkboxComplianceCenter.Enabled = $true
		$checkboxExchangeOnline.Enabled = $true
		$checkboxSharepoint.Enabled = $true
		$checkboxComplianceCenter.Checked = $False
		$checkboxSharepoint.Checked = $False
		$checkboxSkypeForBusiness.Checked = $False
		$checkboxExchangeOnline.Checked = $False
		$checkboxSkypeForBusiness.Enabled = $True
		$FormO365AdministrationCenter.Cursor = 'Default'
		$ButtonConnectTo365.Text = "Connect to O365"
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	#Hide the progress bar
	$progressbar1.Visible = $false
	
}

$TenantConnectButton_Click = {
	try
	{
		
		#Show the proress bar
		$progressbar1.Visible = $true
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$URI = "https://outlook.office365.com/powershell-liveid?DelegatedOrg=" + $PartnerComboBox.SelectedItem.Name
		
		#Remove all sessions
		Get-PSSession | Remove-PSSession
		$progressbar1.Value = 65
		
		#CONNECT TO EXCHANGE ONLINE
		$TextboxResults.Text = "Connecting to partner account..."
		$progressbar1.Value = 70
		$PartnerSession = New-PSSession -Name PartnerAccount -ConfigurationName Microsoft.Exchange -ConnectionUri $URI -Credential $global:o365credentials -Authentication Basic -AllowRedirection
		$progressbar1.Value = 75
		Import-PSSession $PartnerSession -AllowClobber
		$progressbar1.Value = 80
		
		Connect-MsolService -Credential $global:o365credentials
		
		$TextboxResults.Text = "Caching User Principal Names..."
		$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter")
		$UserListcombo = Get-MSOLUser -TenantId $PartnerComboBox.SelectedItem.TenantID -All | Select-Object -ExpandProperty UserPrincipalName | Out-File "$O365AdminTempFolder\upn.txt"
		Get-MSOLUser -TenantId $PartnerComboBox.SelectedItem.TenantID -All | Select-Object -ExpandProperty DisplayName | Out-File "$O365AdminTempFolder\names.txt"
		
		$progressbar1.Value = 90
		
		#Disable the connect to tenant button
		$TenantConnectButton.Enabled = $false
		
		#Sets custom form text
		$FormO365AdministrationCenter.Text = "-Connected to " + $PartnerComboBox.SelectedItem.Name + "-"
		
		#Clear textboxes
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		
		#Disable the partner combobox
		$PartnerComboBox.Enabled = $false
		
		#Enable the disconnect button
		$ButtonDisconnect.Enabled = $True
		
		#Sets custom button text
		$TenantConnectButton.Text = "Connected to Partner"
		$progressbar1.Value = 100
		
		If ($checkboxComplianceCenter.checked)
		{
			$TabPageMaster.SelectedTab = $tabpageComplianceCenter
		}
		elseif ($checkboxExchangeOnline.Checked)
		{
			$TabPageMaster.SelectedTab = $tabpageExchangeOnline
		}
		elseif ($checkboxSharepoint.checked)
		{
			$TabPageMaster.SelectedTab = $tabpageSharePoint
		}
		elseif ($checkboxSkypeForBusiness.checked)
		{
			$TabPageMaster.SelectedTab = $tabpageSkypeForBusiness
		}
		
		Get-Item 'HKCU:\Software\O365 Admin Center' -Force | New-ItemProperty -Name TenantStatus -Value 1 -Force | Out-Null
		
		#Disable the checkboxes
		$checkboxExchangeOnline.Enabled = $false
		$checkboxSkypeForBusiness.Enabled = $false
		$checkboxSharepoint.Enabled = $false
		$checkboxComplianceCenter.Enabled = $False
		
		$ButtonConnectTo365.Enabled = $false
		
		$ButtonDisconnect.Text = "Disconnect from Tenant"
		
		#Deletes the old pf  files
		$TempDir = $env:temp
		$CachedFiles = ("$TempDir" + "\O365AdminCenter\pf.txt")
		Remove-Item $CachedFiles
		$FormO365AdministrationCenter.Cursor = 'Default'
		
	}
	catch
	{
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	#Hide the progress bar
	$progressbar1.Visible = $false
}

$ButtonExportToFile_Click = {
<#	$SavedFile = Read-Host "Enter the Path for file (Eg. C:\DG.csv, C:\Users.txt, C:\output\info.doc)"
	try
	{
		$TextboxResults.Text | out-file $SavedFile
		[System.Windows.Forms.MessageBox]::Show("Saved $SavedFile", "Info")
	}
	Catch
	{
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}

	$savedialog = New-Object windows.forms.savefiledialog
	$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
	$savedialog.title = "Export to File"
	$savedialog.filter = ".doc|*.doc|.csv|*.csv|.txt|*.txt"
	$savedialog.ShowHelp = $True
	$result = $savedialog.ShowDialog(); $result
	if ($result -eq "OK")
	{
		$TextboxResults.Text | Out-File -Encoding Default $savedialog.filename 
	}
	else
	{
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("Could not save the file", "Error")
	}
	#>
}

$ButtonRunCustomCommand_Click = {
	$userinput = $TextboxResults.text
	try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		#Takes the user input to a variable and passes it to the shell
		$TextboxResults.text = Invoke-Expression $userinput | Out-String
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		$FormO365AdministrationCenter.Cursor = 'Default'
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}



###USERS###

	#User General Items

$createOutOfOfficeAutoReplyForAUserToolStripMenuItem_Click = {
	Do
	{
		#$OOOautoreplyUser = Read-Host "What user is the Out Of Office auto reply for?"
		$SelectUsersFormText = "Select the User you want to create an Out of Office Reply for"
		#Call-SelectUsersForm_psf
		Show-SelectCachedDisplayNames_psf
		#$GlobalUPNooouser = $SelectUsersForm_comboboxUsers
		$GlobalUPNooouser = $SelectCachedDisplayNames_comboboxNames
		
		Try
		{
			If (!$GlobalUPNooouser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("Please select a user you want to create an Out of Office Reply for", "Error")
			}
			Else
			{
				$OOOInternal = Read-Host "What is the Internal Message"
				If (!$OOOInternal)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("Please enter an Internal out of office message", "Error")
				}
				Else
				{
					$OOOExternal = Read-Host "What is the External Message"
					If (!$OOOExternal)
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						[System.Windows.Forms.MessageBox]::Show("Please enter an External Out of Office Reply", "Error")
					}
					Else
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Creating an Out of Office reply for $GlobalUPNooouser..."
						$textboxDetails.Text = "Set-MailboxAutoReplyConfiguration -Identity $GlobalUPNooouser -AutoReplyState Enabled -ExternalMessage $OOOExternal -InternalMessage $OOOInternal"
						Set-MailboxAutoReplyConfiguration -Identity $GlobalUPNooouser -AutoReplyState Enabled -ExternalMessage $OOOExternal -InternalMessage $OOOInternal
						$TextboxResults.Text = Get-MailboxAutoReplyConfiguration -Identity $GlobalUPNooouser | Format-List | Out-String -Width 2147483647
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
				}
				
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to create an Out of Office Message for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$disableOutOfOfficeReplyForAUserToolStripMenuItem_Click = {
	Do
	{
		#$OOOautoreplyUser = Read-Host "What user is the Out Of Office auto reply for?"
		$SelectUsersFormText = "Select the user you want to disable an Out of Office reply for"
		#Call-SelectUsersForm_psf
		Show-SelectCachedDisplayNames_psf
		#$GlobalUPNooouser = $SelectUsersForm_comboboxUsers
		$GlobalUPNooouser = $SelectCachedDisplayNames_comboboxNames
		
		Try
		{
			If (!$GlobalUPNooouser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User selected, please select a User.", "Error")
				
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Disabling an Out of Office reply for $GlobalUPNooouser..."
				$textboxDetails.Text = "Set-MailboxAutoReplyConfiguration -Identity $GlobalUPNooouser -AutoReplyState Disabled"
				Set-MailboxAutoReplyConfiguration -Identity $GlobalUPNooouser -AutoReplyState Disabled
				$TextboxResults.Text = Get-MailboxAutoReplyConfiguration -Identity $GlobalUPNooouser | Format-List | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to disable an Out of Office reply for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getListOfUsersToolStripMenuItem_Click = {
	Try
	{
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting list of users..."
			$textboxDetails.Text = "Get-MSOLUser -All | Sort-Object DisplayName |  Format-Table DisplayName, UserPrincipalName -AutoSize"
			$TextboxResults.text = Get-MSOLUser -All | Sort-Object DisplayName | Format-Table DisplayName, UserPrincipalName -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting list of users..."
			$textboxDetails.Text = "Get-MSOLUser -TenantId $TenantText -All | Sort-Object DisplayName |  Format-Table DisplayName, UserPrincipalName -AutoSize "
			$TextboxResults.text = Get-MSOLUser -TenantId $PartnerComboBox.SelectedItem.TenantID -All | Sort-Object DisplayName | Format-Table DisplayName, UserPrincipalName -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting list of users..."
			$textboxDetails.Text = "Get-MSOLUser -All | Sort-Object DisplayName |  Format-Table DisplayName, UserPrincipalName -AutoSize"
			$TextboxResults.text = Get-MSOLUser -All | Sort-Object DisplayName | Format-Table DisplayName, UserPrincipalName -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getDetailedInfoForAUserToolStripMenuItem_Click = {
	Do
	{
		$SelectUsersFormText = "Select the User you want to view detailed information for"
		#Call-SelectUsersForm_psf
		Show-SelectCachedUserPrincipalName_psf
		#$GlobalUPN = $SelectUsersForm_comboboxUsers
		$GlobalUPN = $SelectCachedUserPrincipalName_comboboxUPN
		Try
		{
			If (!$GlobalUPN)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User selected, please select a User.", "Error")
			}
			ElseIf (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting detailed info for $GlobalUPN..."
				$textboxDetails.Text = "Get-MsolUser -UserPrincipalName $GlobalUPN | Format-List"
				$TextboxResults.text = Get-MsolUser -UserPrincipalName $GlobalUPN | Format-List | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
			{
				$TenantText = $PartnerComboBox.text
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting detailed info for $GlobalUPN..."
				$textboxDetails.Text = "Get-MsolUser -UserPrincipalName $GlobalUPN -TenantId $TenantText | Format-List"
				$TextboxResults.text = Get-MsolUser -UserPrincipalName $GlobalUPN -TenantId $PartnerComboBox.SelectedItem.TenantID | Format-List | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting detailed info for $GlobalUPN..."
				$textboxDetails.Text = "Get-MsolUser -UserPrincipalName $GlobalUPN | Format-List"
				$TextboxResults.text = Get-MsolUser -UserPrincipalName $GlobalUPN | Format-List | Out-String -Width 2147483647
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get detailed information for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$changeUsersLoginNameToolStripMenuItem_Click = {
	Do
	{
		$SelectUsersFormText = "Select the User you want to change the User Principal Name for"
		#Call-SelectUsersForm_psf
		Show-SelectCachedUserPrincipalName_psf
		#$GlobalUPN = $SelectUsersForm_comboboxUsers
		$GlobalUPN = $SelectCachedUserPrincipalName_comboboxUPN
		$NewUserUPN = Read-Host "What would you like the new username to be?"
		Try
		{
			If ((!$GlobalUPN) -or (!$NewUserUPN))
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("One of the values appears to be empty. Please select a user that you want to change the UPN for and enter a valid new UPN.", "Error")
			}
			ElseIf (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Changing $GlobalUPN UPN to $NewUserUPN..."
				$textboxDetails.Text = "Set-MsolUserPrincipalname -UserPrincipalName $GlobalUPN -NewUserPrincipalName $NewUserUPN"
				Set-MsolUserPrincipalname -UserPrincipalName $GlobalUPN -NewUserPrincipalName $NewUserUPN
				$TextboxResults.text = Get-MSOLUser -UserPrincipalName $NewUserUPN | Format-List UserPrincipalName | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TenantText = $PartnerComboBox.text
				$TextboxResults.Text = "Changing $GlobalUPN UPN to $NewUserUPN..."
				$textboxDetails.Text = "Set-MsolUserPrincipalname -UserPrincipalName $GlobalUPN -TenantId $TenantText -NewUserPrincipalName $NewUserUPN"
				Set-MsolUserPrincipalname -UserPrincipalName $GlobalUPN -TenantId $PartnerComboBox.SelectedItem.TenantID -NewUserPrincipalName $NewUserUPN
				$TextboxResults.text = Get-MSOLUser -UserPrincipalName $NewUserUPN -TenantId $PartnerComboBox.SelectedItem.TenantID | Format-List UserPrincipalName | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Changing $GlobalUPN UPN to $NewUserUPN..."
				$textboxDetails.Text = "Set-MsolUserPrincipalname -UserPrincipalName $GlobalUPN -NewUserPrincipalName $NewUserUPN"
				Set-MsolUserPrincipalname -UserPrincipalName $GlobalUPN -NewUserPrincipalName $NewUserUPN
				$TextboxResults.text = Get-MSOLUser -UserPrincipalName $NewUserUPN | Format-List UserPrincipalName | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
			
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to change the UPN for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$deleteAUserToolStripMenuItem_Click = {
	Do
	{
		#$DeleteUser = Read-Host "Enter the UPN of the user you want to delete"
		$SelectUsersFormText = "Select the User you want to delete"
		#Call-SelectUsersForm_psf
		Show-SelectCachedUserPrincipalName_psf
		#$GlobalUPNdelete = $SelectUsersForm_comboboxUsers
		$GlobalUPNdelete = $SelectCachedUserPrincipalName_comboboxUPN
		Try
		{
			If (!$GlobalUPNdelete)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User selected, please select a User.", "Error")
			}
			Else
			{
				$OUTPUT = [System.Windows.Forms.MessageBox]::Show("Are you sure you want to delete $GlobalUPNdelete ?", "Warning!", 4)
				If ($OUTPUT -eq "YES")
				{
					#What to do if connected to main o365 account
					If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Deleting $GlobalUPNdelete..."
						$textboxDetails.Text = "Remove-MsolUser –UserPrincipalName $GlobalUPNdelete"
						$TextboxResults.text = Remove-MsolUser –UserPrincipalName $GlobalUPNdelete | Format-List UserPrincipalName | Out-String -Width 2147483647
						$TempDir = $env:temp
						$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter")
						$FullFile = "$O365AdminTempFolder\upn.txt"
						Remove-Item $FullFile -Force
						#$TextboxResults.Text = "re-caching Users..."
						$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter")
						$UserListcombo = Get-MSOLUser -All | Select-Object -ExpandProperty UserPrincipalName | Out-File "$O365AdminTempFolder\upn.txt"
						Get-MSOLUser -All | Select-Object -ExpandProperty DisplayName | Out-File "$O365AdminTempFolder\names.txt"
						$FormO365AdministrationCenter.Cursor = 'Default'
						$TextboxResults.Text = "$GlobalUPNdelete was deleted"
					}
					#What to do if connected to partner account
					ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
					{
						$TenantText = $PartnerComboBox.text
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Deleting $GlobalUPNdelete..."
						$textboxDetails.Text = "Remove-MsolUser –UserPrincipalName $GlobalUPNdelete -TenantId $TenantText"
						$TextboxResults.text = Remove-MsolUser –UserPrincipalName $GlobalUPNdelete -TenantId $PartnerComboBox.SelectedItem.TenantID | Format-List UserPrincipalName | Out-String -Width 2147483647
						$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter")
						$FullFile = "$O365AdminTempFolder\upn.txt"
						Remove-Item $FullFile -Force
						#$TextboxResults.Text = "re-caching Users..."
						$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter")
						$UserListcombo = Get-MSOLUser -TenantId $PartnerComboBox.SelectedItem.TenantID -All | Select-Object -ExpandProperty UserPrincipalName | Out-File "$O365AdminTempFolder\upn.txt"
						Get-MSOLUser -TenantId $PartnerComboBox.SelectedItem.TenantID -All | Select-Object -ExpandProperty DisplayName | Out-File "$O365AdminTempFolder\names.txt"
						$FormO365AdministrationCenter.Cursor = 'Default'
						$TextboxResults.Text = "$GlobalUPNdelete was deleted"
					}
					Else
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Deleting $GlobalUPNdelete..."
						$textboxDetails.Text = "Remove-MsolUser –UserPrincipalName $GlobalUPNdelete"
						$TextboxResults.text = Remove-MsolUser –UserPrincipalName $GlobalUPNdelete | Format-List UserPrincipalName | Out-String -Width 2147483647
						$TempDir = $env:temp
						$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter")
						$FullFile = "$O365AdminTempFolder\upn.txt"
						Remove-Item $FullFile -Force
						#$TextboxResults.Text = "re-caching Users..."
						$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter")
						$UserListcombo = Get-MSOLUser -All | Select-Object -ExpandProperty UserPrincipalName | Out-File "$O365AdminTempFolder\upn.txt"
						Get-MSOLUser -All | Select-Object -ExpandProperty DisplayName | Out-File "$O365AdminTempFolder\names.txt"
						$FormO365AdministrationCenter.Cursor = 'Default'
						$TextboxResults.Text = "$GlobalUPNdelete was deleted"
					}
				}
				Else
				{
					[System.Windows.Forms.MessageBox]::Show("$GlobalUPNdelete was not deleted", "Info")
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to delete another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$createANewUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$Firstname = Read-Host "Enter the First Name for the new User"
			If (!$Firstname)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No first name was entered for the new User. Please enter a valid first name", "Error")
				
			}
			Else
			{
				$LastName = Read-Host "Enter the Last Name for the new User"
				If (!$LastName)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No last name was entered for the new User. Please enter a valid last name", "Error")
				}
				Else
				{
					$DisplayName = Read-Host "Enter the Display Name for the new User"
					If (!$DisplayName)
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						[System.Windows.Forms.MessageBox]::Show("No Display Name was entered for the new User. Please enter a valid Display Name", "Error")
					}
					Else
					{
						$NewUser = Read-Host "Enter the UPN for the new user"
						If (!$NewUser)
						{
							$TextboxResults.Text = ""
							$textboxDetails.Text = ""
							[System.Windows.Forms.MessageBox]::Show("No UPN was entered for the new User. Please enter a valid UPN", "Error")
						}
						Else
						{
							#What to do if connected to main o365 account
							If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
							{
								$FormO365AdministrationCenter.Cursor = 'WaitCursor'
								$TextboxResults.Text = "Creating user $NewUser..."
								$textboxDetails.Text = "New-MsolUser -UserPrincipalName $NewUser -FirstName $Firstname -LastName $LastName -DisplayName $DisplayName"
								$TextboxResults.text = New-MsolUser -UserPrincipalName $NewUser -FirstName $Firstname -LastName $LastName -DisplayName $DisplayName | Format-List | Out-String -Width 2147483647
								$TempDir = $env:temp
								$upns = ("$TempDir" + "\O365AdminCenter\upn.txt")
								$names = ("$TempDir" + "\O365AdminCenter\names.txt")
								Remove-Item $upns -Force
								Remove-Item $names -Force
								#$TextboxResults.Text = "re-caching Users..."
								$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter")
								$UserListcombo = Get-MSOLUser -All | Select-Object -ExpandProperty UserPrincipalName | Out-File "$O365AdminTempFolder\upn.txt"
								Get-MSOLUser -All | Select-Object -ExpandProperty DisplayName | Out-File "$O365AdminTempFolder\names.txt"
								$FormO365AdministrationCenter.Cursor = 'Default'
							}
							#What to do if connected to partner account
							ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
							{
								$TenantText = $PartnerComboBox.text
								$FormO365AdministrationCenter.Cursor = 'WaitCursor'
								$TextboxResults.Text = "Creating user $NewUser..."
								$textboxDetails.Text = "New-MsolUser -TenantId $TenantText -UserPrincipalName $NewUser -FirstName $Firstname -LastName $LastName -DisplayName $DisplayName"
								$TextboxResults.text = New-MsolUser -TenantId $PartnerComboBox.SelectedItem.TenantID -UserPrincipalName $NewUser -FirstName $Firstname -LastName $LastName -DisplayName $DisplayName | Format-List | Out-String -Width 2147483647
								$TempDir = $env:temp
								$upns = ("$TempDir" + "\O365AdminCenter\upn.txt")
								$names = ("$TempDir" + "\O365AdminCenter\names.txt")
								Remove-Item $upns -Force
								Remove-Item $names -Force
								#$TextboxResults.Text = "re-caching User Principal Names..."
								$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter")
								$UserListcombo = Get-MSOLUser -TenantId $PartnerComboBox.SelectedItem.TenantID -All | Select-Object -ExpandProperty UserPrincipalName | Out-File "$O365AdminTempFolder\upn.txt"
								Get-MSOLUser -TenantId $PartnerComboBox.SelectedItem.TenantID -All | Select-Object -ExpandProperty DisplayName | Out-File "$O365AdminTempFolder\names.txt"
								$FormO365AdministrationCenter.Cursor = 'Default'
							}
							Else
							{
								$FormO365AdministrationCenter.Cursor = 'WaitCursor'
								$TextboxResults.Text = "Creating user $NewUser..."
								$textboxDetails.Text = "New-MsolUser -UserPrincipalName $NewUser -FirstName $Firstname -LastName $LastName -DisplayName $DisplayName"
								$TextboxResults.text = New-MsolUser -UserPrincipalName $NewUser -FirstName $Firstname -LastName $LastName -DisplayName $DisplayName | Format-List | Out-String -Width 2147483647
								$TempDir = $env:temp
								$upns = ("$TempDir" + "\O365AdminCenter\upn.txt")
								$names = ("$TempDir" + "\O365AdminCenter\names.txt")
								Remove-Item $upns -Force
								Remove-Item $names -Force
								#$TextboxResults.Text = "re-caching Users..."
								$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter")
								$UserListcombo = Get-MSOLUser -All | Select-Object -ExpandProperty UserPrincipalName | Out-File "$O365AdminTempFolder\upn.txt"
								Get-MSOLUser -All | Select-Object -ExpandProperty DisplayName | Out-File "$O365AdminTempFolder\names.txt"
								$FormO365AdministrationCenter.Cursor = 'Default'
							}
						}
					}
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to create another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$disableUserAccountToolStripMenuItem_Click = {
	Do
	{
		#$BlockUser = Read-Host "Enter the UPN of the user you want to disable"
		$SelectUsersFormText = "Select the User you want to disable"
		#Call-SelectUsersForm_psf
		Show-SelectCachedUserPrincipalName_psf
		#$GlobalUPNdisable = $SelectUsersForm_comboboxUsers
		$GlobalUPNdisable = $SelectCachedUserPrincipalName_comboboxUPN
		#What to do if connected to main o365 account
		Try
		{
			If (!$GlobalUPNdisable)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User selected, please select a User.", "Error")
			}
			Else
			{
				If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Disabling $GlobalUPNdisable..."
					$textboxDetails.Text = "Set-MsolUser -UserPrincipalName $GlobalUPNdisable -blockcredential `$True"
					Set-MsolUser -UserPrincipalName $GlobalUPNdisable -blockcredential $True
					$TextboxResults.text = Get-MsolUser -UserPrincipalName $GlobalUPNdisable | Format-List DisplayName, BlockCredential | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
				#What to do if connected to partner account
				ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
				{
					$TenantText = $PartnerComboBox.text
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Disabling $GlobalUPNdisable..."
					$textboxDetails.Text = "Set-MsolUser -UserPrincipalName $GlobalUPNdisable -blockcredential `$True -TenantId $TenantText"
					Set-MsolUser -UserPrincipalName $GlobalUPNdisable -blockcredential $True -TenantId $PartnerComboBox.SelectedItem.TenantID
					$TextboxResults.text = Get-MsolUser -UserPrincipalName $GlobalUPNdisable -TenantId $PartnerComboBox.SelectedItem.TenantID | Format-List DisplayName, BlockCredential | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Disabling $GlobalUPNdisable..."
					$textboxDetails.Text = "Set-MsolUser -UserPrincipalName $GlobalUPNdisable -blockcredential `$True"
					Set-MsolUser -UserPrincipalName $GlobalUPNdisable -blockcredential $True
					$TextboxResults.text = Get-MsolUser -UserPrincipalName $GlobalUPNdisable | Format-List DisplayName, BlockCredential | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to disable another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$enableAccountToolStripMenuItem_Click = {
	Do
	{
		#$EnableUser = Read-Host "Enter the UPN of the user you want to enable"
		$SelectUsersFormText = "Select the User you want to enable"
		#Call-SelectUsersForm_psf
		Show-SelectCachedUserPrincipalName_psf
		#$GlobalUPNenable = $SelectUsersForm_comboboxUsers
		$GlobalUPNenable = $SelectCachedUserPrincipalName_comboboxUPN
		Try
		{
			If (!$GlobalUPNenable)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User selected, please select a User.", "Error")
			}
			Else
			{
				#What to do if connected to main o365 account
				If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Enabling $GlobalUPNenable..."
					$textboxDetails.Text = "Set-MsolUser -UserPrincipalName $GlobalUPNenable -blockcredential `$False"
					Set-MsolUser -UserPrincipalName $GlobalUPNenable -blockcredential $False
					$TextboxResults.text = Get-MsolUser -UserPrincipalName $GlobalUPNenable | Format-List DisplayName, BlockCredential | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
				#What to do if connected to partner account
				ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
				{
					$TenantText = $PartnerComboBox.text
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Enabling $GlobalUPNenable..."
					$textboxDetails.Text = "Set-MsolUser -UserPrincipalName $GlobalUPNenable -blockcredential `$False -TenantId $TenantText"
					Set-MsolUser -UserPrincipalName $GlobalUPNenable -blockcredential $False -TenantId $PartnerComboBox.SelectedItem.TenantID
					$TextboxResults.text = Get-MsolUser -UserPrincipalName $GlobalUPNenable -TenantId $PartnerComboBox.SelectedItem.TenantID | Format-List DisplayName, BlockCredential | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Enabling $GlobalUPNenable..."
					$textboxDetails.Text = "Set-MsolUser -UserPrincipalName $GlobalUPNenable -blockcredential `$False"
					Set-MsolUser -UserPrincipalName $GlobalUPNenable -blockcredential $False
					$TextboxResults.text = Get-MsolUser -UserPrincipalName $GlobalUPNenable | Format-List DisplayName, BlockCredential | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to enable another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getDetailedMailboxInfoToolStripMenuItem_Click = {
	Do
	{
		#$GetDetailedMailboxInfoUser = Read-Host "Enter the UPN of the user you want to view detailed info for"
		$SelectUsersFormText = "Select the User you want to get detailed Mailbox information for"
		#Call-SelectUsersForm_psf
		Show-SelectCachedDisplayNames_psf
		#$GlobalUPNdetailedmailbox = $SelectUsersForm_comboboxUsers
		$GlobalUPNdetailedmailbox = $SelectCachedDisplayNames_comboboxNames
		Try
		{
			If (!$GlobalUPNdetailedmailbox)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User selected, please select a User.", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting detailed Mailbox info for $GlobalUPNdetailedmailbox..."
				$textboxDetails.Text = "Get-mailbox -identity $GlobalUPNdetailedmailbox | Format-List"
				$TextboxResults.Text = Get-mailbox -identity $GlobalUPNdetailedmailbox | Format-List | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get detailed Mailbox information for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$searchForAnEmailAddressToolStripMenuItem_Click = {
	Do
	{
		$SpecificEmail = Read-Host "Enter the E-mail Address you're looking for. Accepts wildcards (d*@bwya77.com, d*@*.com)"
		Try
		{
			If (!$SpecificEmail)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No E-mail was entered, please enter a valid E-mail Address.", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Finding an E-mail Address like $SpecificEmail..."
				$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited -Identity * | Where-Object { `$_.EmailAddresses -like 'smtp:$SpecificEmail'' } | Sort-Object Identity | Format-List Identity, EmailAddresses, PrimarySmtpAddress, RecipientType"
				$TextboxResults.Text = Get-Mailbox -ResultSize unlimited -Identity * | Where-Object { $_.EmailAddresses -like "smtp:$SpecificEmail" } | Sort-Object Identity | Format-List Identity, EmailAddresses, PrimarySmtpAddress, RecipientType | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to search for another E-mail Address?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

#Last Logon

$getAllUsersLastLogonToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting all users last logon timestamp..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | ForEach-Object { Get-MailboxStatistics `$_.Identity | Select-Object DisplayName, LastLogonTime } | Format-Table -AutoSize "
		$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | ForEach-Object { Get-MailboxStatistics $_.Identity | Select-Object DisplayName, LastLogonTime } | Sort-Object DisplayName | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getAUsersLastLogonToolStripMenuItem_Click = {
	Do
	{
		$SelectUsersFormText = "Select the User you want to get get last logon timestamp for"
		#Call-SelectUsersForm_psf
		Show-SelectCachedDisplayNames_psf
		#$LastLogonUser = $SelectUsersForm_comboboxUsers
		$LastLogonUser = $SelectCachedDisplayNames_comboboxNames
		Try
		{
			If (!$LastLogonUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User selected, please select a User.", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting last logon timestamp for $LastLogonUser..."
				$textboxDetails.Text = "Get-MailboxStatistics -identity $LastLogonUser | Select-Object DisplayName, LastLogonTime | Format-Table -AutoSize "
				$TextboxResults.Text = Get-MailboxStatistics -identity $LastLogonUser | Select-Object DisplayName, LastLogonTime | Format-Table -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get the Last Logon for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

#GAL

$hideAUserFromTheGALToolStripMenuItem_Click = {
	Do
	{
		#$HidefromGALUser = Read-Host "Enter the UPN of the user you want to hide from the GAL"
		$SelectUsersFormText = "Select the User you want to hide from the Global Address List"
		#Call-SelectUsersForm_psf
		Show-SelectCachedDisplayNames_psf
		#$GlobalUPNhideGAL = $SelectUsersForm_comboboxUsers
		$GlobalUPNhideGAL = $SelectCachedDisplayNames_comboboxNames
		Try
		{
			If (!$GlobalUPNhideGAL)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User selected, please select a user.", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Hiding $GlobalUPNhideGAL from the GAL..."
				$textboxDetails.Text = "set-Mailbox -Identity $GlobalUPNhideGAL -HiddenFromAddressListsEnabled `$True"
				set-Mailbox -Identity $GlobalUPNhideGAL -HiddenFromAddressListsEnabled $True
				$TextboxResults.Text = Get-Mailbox -Identity $GlobalUPNhideGAL | Format-List DisplayName, HiddenFromAddressListsEnabled | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to hide another User from the Global Address List?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getUsersThatAreHiddenFromTheGALToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting all mailboxes hidden from the GAL..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Where-Object { `$_.HiddenFromAddressListsEnabled -eq `$True } | Format-Table -AutoSize"
		$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Where-Object { $_.HiddenFromAddressListsEnabled -eq $True } | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getUsersThatAreNotHiddenFromTheGALToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting all mailboxes not hidden from the GAL..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Where-Object { `$_.HiddenFromAddressListsEnabled -eq `$False } | Format-Table -AutoSize"
		$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Where-Object { $_.HiddenFromAddressListsEnabled -eq $False } | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$unhideAUserFromTheGALToolStripMenuItem_Click = {
	Do
	{
		#$unHidefromGALUser = Read-Host "Enter the UPN of the user you want to unhide from the GAL"
		$SelectUsersFormText = "Select the User you want to unhide from the Global Address List"
		Show-SelectCachedDisplayNames_psf
		#Call-SelectUsersForm_psf
		#$GlobalUPNunhideGAL = $SelectUsersForm_comboboxUsers
		$GlobalUPNunhideGAL = $SelectCachedDisplayNames_comboboxNames
		Try
		{
			If (!$GlobalUPNunhideGAL)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User selected, please select a User.", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Unhiding $GlobalUPNunhideGAL from the Global Address List..."
				$textboxDetails.Text = "Set-Mailbox -Identity $GlobalUPNunhideGAL -HiddenFromAddressListsEnabled `$False"
				set-Mailbox -Identity $GlobalUPNunhideGAL -HiddenFromAddressListsEnabled $False
				$TextboxResults.Text = Get-Mailbox -Identity $GlobalUPNunhideGAL | Format-List DisplayName, HiddenFromAddressListsEnabled | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to unhide another User from the Global Address List?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

#Quota

$getUserQuotaToolStripMenuItem_Click = {
	Do
	{
		#$QuotaUser = Read-Host "Enter the Email of the user you want to view Quota information for"
		$SelectUsersFormText = "Select the User you want to view Quota information for"
		Show-SelectCachedDisplayNames_psf
		#Call-SelectUsersForm_psf
		#$GlobalUPNviewQuota = $SelectUsersForm_comboboxUsers
		$GlobalUPNviewQuota = $SelectCachedDisplayNames_comboboxNames
		try
		{
			If (!$GlobalUPNviewQuota)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User selected, please select a User.", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting user Quota for $GlobalUPNviewQuota..."
				$textboxDetails.Text = "Get-Mailbox -identity $GlobalUPNviewQuota | Format-List DisplayName, UserPrincipalName, *Quota"
				$TextboxResults.text = Get-Mailbox -identity $GlobalUPNviewQuota | Format-List DisplayName, UserPrincipalName, *Quota | Format-List | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to view Quota information for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getAllUsersQuotaToolStripMenuItem_Click = {
	try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting quota for all users..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Format-List DisplayName, UserPrincipalName, *Quota -AutoSize"
		$TextboxResults.text = Get-Mailbox -ResultSize unlimited | Sort-Object DisplayName | Format-Table DisplayName, UserPrincipalName, *Quota -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$setUserMailboxQuotaToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$MailboxSetQuota = Read-Host "Enter the UPN of the user you want to edit quota for"
			$SelectUsersFormText = "Select the User you want to edit the Quota for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedDisplayNames_psf
			#$GlobalUPNeditQuota = $SelectUsersForm_comboboxUsers
			$GlobalUPNeditQuota = $SelectCachedDisplayNames_comboboxNames
			If (!$GlobalUPNeditQuota)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User selected, please select a User.", "Error")
			}
			Else
			{
				$ProhibitSendReceiveQuota = Read-Host "Enter the ProhibitSendReceiveQuota value (EX: '50GB') Max:50GB"
				If (!$ProhibitSendReceiveQuota)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Prohibit Send and Receive Quota value was entered. Please enter a valid number.", "Error")
				}
				Else
				{
					$ProhibitSendQuota = Read-Host "Enter the ProhibitSendQuota value (EX: '48GB') Max:50GB"
					If (!$ProhibitSendQuota)
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						[System.Windows.Forms.MessageBox]::Show("No Prohibit Send Quota value was entered. Please enter a valid number.", "Error")
					}
					Else
					{
						$IssueWarningQuota = Read-Host "Enter theIssueWarningQuota value (EX: '45GB') Max:50GB"
						If (!$IssueWarningQuota)
						{
							$TextboxResults.Text = ""
							$textboxDetails.Text = ""
							[System.Windows.Forms.MessageBox]::Show("No Issue Warning Quota value was entered. Please enter a valid number.", "Error")
						}
						Else
						{
							$FormO365AdministrationCenter.Cursor = 'WaitCursor'
							$TextboxResults.Text = "Setting quota for $GlobalUPNeditQuota... "
							$textboxDetails.Text = "Set-Mailbox -identity $GlobalUPNeditQuota -ProhibitSendReceiveQuota $ProhibitSendReceiveQuota -ProhibitSendQuota $ProhibitSendQuota -IssueWarningQuota $IssueWarningQuota"
							Set-Mailbox -identity $GlobalUPNeditQuota -ProhibitSendReceiveQuota $ProhibitSendReceiveQuota -ProhibitSendQuota $ProhibitSendQuota -IssueWarningQuota $IssueWarningQuota
							$TextboxResults.text = Get-Mailbox $GlobalUPNeditQuota | Format-List DisplayName, UserPrincipalName, *Quota | Out-String -Width 2147483647
							$FormO365AdministrationCenter.Cursor = 'Default'
						}
					}
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to modify the Quota for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$setMailboxQuotaForAllToolStripMenuItem_Click = {
	Try
	{
		$ProhibitSendReceiveQuota2 = Read-Host "Enter (GB) the ProhibitSendReceiveQuota value (EX: '50GB') Max:50GB"
		If (!$ProhibitSendReceiveQuota2)
		{
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("No Prohibit Send and Receive Quota value was entered. Please enter a valid number.", "Error")
		}
		Else
		{
			$ProhibitSendQuota2 = Read-Host "Enter (GB) the ProhibitSendQuota value (EX: '48GB') Max:50GB"
			If (!$ProhibitSendQuota2)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Prohibit Send Quota value was entered. Please enter a valid number.", "Error")
			}
			Else
			{
				$IssueWarningQuota2 = Read-Host "Enter (GB) theIssueWarningQuota value (EX: '45GB') Max:50GB"
				If (!$IssueWarningQuota2)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Issue Warning Quota value was entered. Please enter a valid number.", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Setting quota for all... "
					$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Set-Mailbox -ProhibitSendReceiveQuota $ProhibitSendReceiveQuota2 -ProhibitSendQuota $ProhibitSendQuota2 -IssueWarningQuota $IssueWarningQuota2"
					Get-Mailbox -ResultSize unlimited | Set-Mailbox -ProhibitSendReceiveQuota $ProhibitSendReceiveQuota2 -ProhibitSendQuota $ProhibitSendQuota2 -IssueWarningQuota $IssueWarningQuota2
					$TextboxResults.text = Get-Mailbox -ResultSize unlimited | Format-List DisplayName, UserPrincipalName, *Quota | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

#Licenses

$getLicensedUsersToolStripMenuItem_Click = {
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all users with a license..."
			$textboxDetails.Text = "Get-MsolUser -All | Where-Object { `$_.isLicensed -eq `$TRUE } | Sort-Object DisplayName | Format-Table DisplayName, Licenses -AutoSize"
			$TextboxResults.text = Get-MsolUser -All | Where-Object { $_.isLicensed -eq $True } | Sort-Object DisplayName | Format-Table DisplayName, Licenses -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TenantText = $PartnerComboBox.text
			$TextboxResults.Text = "Getting all users with a license..."
			$textboxDetails.Text = "Get-MsolUser -All -TenantID $TenantText | Where-Object { `$_.isLicensed -eq `$TRUE } | Sort-Object DisplayName | Format-Table DisplayName, Licenses -AutoSize"
			$TextboxResults.text = Get-MsolUser -All -TenantId $PartnerComboBox.SelectedItem.TenantID | Where-Object { $_.isLicensed -eq $True } | Sort-Object DisplayName | Format-Table DisplayName, Licenses -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all users with a license..."
			$textboxDetails.Text = "Get-MsolUser -All | Where-Object { `$_.isLicensed -eq `$TRUE } | Sort-Object DisplayName | Format-Table DisplayName, Licenses -AutoSize"
			$TextboxResults.text = Get-MsolUser -All | Where-Object { $_.isLicensed -eq $True } | Sort-Object DisplayName | Format-Table DisplayName, Licenses -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$displayAllUsersWithoutALicenseToolStripMenuItem_Click = {
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all users without a license..."
			$textboxDetails.Text = "Get-MsolUser -All | Where-Object { `$_.isLicensed -like `$False } | Sort-Object UserPrincipalName | Format-Table UserPrincipalName -AutoSize"
			$TextboxResults.text = Get-MsolUser -All | Where-Object { $_.isLicensed -like "False" } | Sort-Object UserPrincipalName | Format-Table UserPrincipalName -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all users without a license..."
			$textboxDetails.Text = "Get-MsolUser -TenantId $TenantText -All | Where-Object { `$_.isLicensed -like `$False } | Sort-Object UserPrincipalName | Format-Table UserPrincipalName -AutoSize"
			$TextboxResults.text = Get-MsolUser -TenantId $PartnerComboBox.SelectedItem.TenantID -All | Where-Object { $_.isLicensed -like $False } | Sort-Object UserPrincipalName | Format-Table UserPrincipalName -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all users without a license..."
			$textboxDetails.Text = "Get-MsolUser -All | Where-Object { `$_.isLicensed -like `$False } | Sort-Object UserPrincipalName | Format-Table UserPrincipalName -AutoSize"
			$TextboxResults.text = Get-MsolUser -All | Where-Object { $_.isLicensed -like "False" } | Sort-Object UserPrincipalName | Format-Table UserPrincipalName -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$removeAllUnlicensedUsersToolStripMenuItem_Click = {
	Try
	{
		$OUTPUT = [System.Windows.Forms.MessageBox]::Show("Are you sure you want to remove all unlicensed users?", "Warning!", 4)
		If ($OUTPUT -eq "YES")
		{
			#What to do if connected to main o365 account
			If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Removing all users without a license..."
				$textboxDetails.Text = "Get-MsolUser -All | Where-Object { `$_.isLicensed -ne `$True } | Remove-MsolUser -Force"
				Get-MsolUser -All | Where-Object { $_.isLicensed -ne $True } | Remove-MsolUser -Force
				$TextboxResults.text = Get-MsolUser -All | Where-Object { $_.isLicensed -like $True } | Format-List UserPrincipalName | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			#What to do if connected to partner account
			ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
			{
				$TenantText = $PartnerComboBox.text
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Removing all users without a license..."
				$textboxDetails.Text = "Get-MsolUser -TenantId $TenantText -All | Where-Object { `$_.isLicensed -ne `$True } | Remove-MsolUser -Force"
				Get-MsolUser -all -TenantId $PartnerComboBox.SelectedItem.TenantID -All | Where-Object { $_.isLicensed -ne $True } | Remove-MsolUser -Force -TenantId $PartnerComboBox.SelectedItem.TenantID
				$TextboxResults.text = Get-MsolUser -TenantId $PartnerComboBox.SelectedItem.TenantID -All | Where-Object { $_.isLicensed -like $True } | Format-List UserPrincipalName | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Removing all users without a license..."
				$textboxDetails.Text = "Get-MsolUser -All | Where-Object { `$_.isLicensed -ne `$True } | Remove-MsolUser -Force"
				Get-MsolUser -All | Where-Object { $_.isLicensed -ne $True } | Remove-MsolUser -Force
				$TextboxResults.text = Get-MsolUser -All | Where-Object { $_.isLicensed -like $True } | Format-List UserPrincipalName | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Else
		{
			[System.Windows.Forms.MessageBox]::Show("No users were removed", "Info")
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$displayAllLicenseInfoToolStripMenuItem_Click = {
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all license information..."
			$textboxDetails.Text = "Get-MsolAccountSku | Format-Table"
			$TextboxResults.text = Get-MsolAccountSku | Select-Object -Property AccountSkuId, ActiveUnits, WarningUnits, ConsumedUnits, @{
				Name = 'Unused'
				Expression = {
					$_.ActiveUnits - $_.ConsumedUnits
				}
			} | Sort-Object Unused | Format-Table AccountSkuId, ActiveUnits, WarningUnits, ConsumedUnits, Unused -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all license information..."
			$textboxDetails.Text = "Get-MsolAccountSku -TenantId $TenantText | Format-Table"
			$TextboxResults.text = Get-MsolAccountSku -TenantId $PartnerComboBox.SelectedItem.TenantID | Select-Object -Property AccountSkuId, ActiveUnits, WarningUnits, ConsumedUnits, @{
				Name = 'Unused'
				Expression = {
					$_.ActiveUnits - $_.ConsumedUnits
				}
			} | Sort-Object Unused | Format-Table AccountSkuId, ActiveUnits, WarningUnits, ConsumedUnits, Unused -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all license information..."
			$textboxDetails.Text = "Get-MsolAccountSku | Format-Table"
			$TextboxResults.text = Get-MsolAccountSku | Select-Object -Property AccountSkuId, ActiveUnits, WarningUnits, ConsumedUnits, @{
				Name = 'Unused'
				Expression = {
					$_.ActiveUnits - $_.ConsumedUnits
				}
			} | Sort-Object Unused | Format-Table AccountSkuId, ActiveUnits, WarningUnits, ConsumedUnits, Unused -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$addALicenseToAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#What to do if connected to main o365 account
			If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
			{
				#$LicenseUserAdd = Read-Host "Enter the User Principal Name of the User you want to license"
				$SelectUsersFormText = "Select the User you want to add a license to"
				Show-SelectUnlicensedUsers_psf
				$LicenseUserAdd = $SelectUnlicensedUsers_comboboxSelectUnlicensedUsers
				If (!$LicenseUserAdd)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No User selected, please select a User.", "Error")
				}
				Else
				{
					#$LicenseUserAddLocation = Read-Host "Enter the 2 digit location code for the user. Example: US"
					$locationCodeText = "Select the 2 digit location code"
					Show-SelectLocationCode_psf
					$LicenseUserAddLocation = $SelectLocationCode_comboboxSelectLocationCode_SelectedItem
					If (!$LicenseUserAddLocation)
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						[System.Windows.Forms.MessageBox]::Show("No location was selected. Please enter a valid location code.", "Error")
					}
					Else
					{
						#$TextboxResults.text = Get-MsolAccountSku | Format-Table | Out-String
						#$LicenseType = Read-Host "Enter the AccountSku of the License you want to assign to this user"
						$LicensesText = "Select a license for $LicenseUserAdd"
						Show-SelectLicenses_psf
						$LicenseType = $SelectLicenses_comboboxSelectAvailableLicenses
						If (!$LicenseType)
						{
							$TextboxResults.Text = ""
							$textboxDetails.Text = ""
							[System.Windows.Forms.MessageBox]::Show("No license was selected. Please select a valid license", "Error")
						}
						Else
						{
							$FormO365AdministrationCenter.Cursor = 'WaitCursor'
							$TextboxResults.Text = "Adding $LicenseType license to $LicenseUserAdd..."
							
							$textboxDetails.Text = "Set-MsolUser -UserPrincipalName $LicenseUserAdd –UsageLocation $LicenseUserAddLocation
Set-MsolUserLicense -UserPrincipalName $LicenseUserAdd -AddLicenses $LicenseType"
							Set-MsolUser -UserPrincipalName $LicenseUserAdd –UsageLocation $LicenseUserAddLocation
							Set-MsolUserLicense -UserPrincipalName $LicenseUserAdd -AddLicenses $LicenseType
							$TextboxResults.Text = Get-MsolUser -UserPrincipalName $LicenseUserAdd | Format-List DisplayName, Licenses | Out-String -Width 2147483647
							$FormO365AdministrationCenter.Cursor = 'Default'
						}
					}
				}
			}
			#What to do if connected to partner account
			ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
			{
				$TenantText = $PartnerComboBox.text
				
				#$LicenseUserAdd = Read-Host "Enter the User Principal Name of the User you want to license"
				$SelectUsersFormText = "Select the user you want to add a license to"
				Show-SelectUnlicensedUsers_psf
				$LicenseUserAdd = $SelectUnlicensedUsers_comboboxSelectUnlicensedUsers
				If (!$LicenseUserAdd)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No User selected, please select a User.", "Error")
				}
				Else
				{
					#$LicenseUserAddLocation = Read-Host "Enter the 2 digit location code for the user. Example: US"
					$locationCodeText = "Select the 2 digit location code"
					Show-SelectLocationCode_psf
					$LicenseUserAddLocation = $SelectLocationCode_comboboxSelectLocationCode_SelectedItem
					If (!$LicenseUserAddLocation)
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						[System.Windows.Forms.MessageBox]::Show("No location was selected. Please enter a valid location code.", "Error")
					}
					Else
					{
						#$TextboxResults.text = Get-MsolAccountSku -TenantId $PartnerComboBox.SelectedItem.TenantID | Format-Table | Out-String
						#$LicenseType = Read-Host "Enter the AccountSku of the License you want to assign to this user"
						$LicensesText = "Select a license for $LicenseUserAdd"
						Show-SelectLicenses_psf
						$LicenseType = $SelectLicenses_comboboxSelectAvailableLicenses
						If (!$LicenseType)
						{
							$TextboxResults.Text = ""
							$textboxDetails.Text = ""
							[System.Windows.Forms.MessageBox]::Show("No license was selected. Please select a valid license", "Error")
						}
						Else
						{
							$FormO365AdministrationCenter.Cursor = 'WaitCursor'
							$TextboxResults.Text = "Adding $LicenseType license to $LicenseUserAdd..."
							$textboxDetails.Text = "Set-MsolUser -TenantId $TenantText -UserPrincipalName $LicenseUserAdd –UsageLocation $LicenseUserAddLocation
Set-MsolUserLicense -TenantId $PartnerComboBox.SelectedItem.TenantID -UserPrincipalName $LicenseUserAdd -AddLicenses $LicenseType"
							Set-MsolUser -TenantId $PartnerComboBox.SelectedItem.TenantID -UserPrincipalName $LicenseUserAdd –UsageLocation $LicenseUserAddLocation
							Set-MsolUserLicense -TenantId $PartnerComboBox.SelectedItem.TenantID -UserPrincipalName $LicenseUserAdd -AddLicenses $LicenseType
							$TextboxResults.Text = Get-MsolUser -TenantId $PartnerComboBox.SelectedItem.TenantID -UserPrincipalName $LicenseUserAdd | Format-List DisplayName, Licenses | Out-String -Width 2147483647
							$FormO365AdministrationCenter.Cursor = 'Default'
						}
					}
				}
			}
			Else
			{
				#$LicenseUserAdd = Read-Host "Enter the User Principal Name of the User you want to license"
				$SelectUsersFormText = "Select the user you want to add a license to"
				Show-SelectUnlicensedUsers_psf
				$LicenseUserAdd = $SelectUnlicensedUsers_comboboxSelectUnlicensedUsers
				If (!$LicenseUserAdd)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No User selected, please select a User.", "Error")
				}
				Else
				{
					#$LicenseUserAddLocation = Read-Host "Enter the 2 digit location code for the user. Example: US"
					$locationCodeText = "Select the 2 digit location code"
					Show-SelectLocationCode_psf
					$LicenseUserAddLocation = $SelectLocationCode_comboboxSelectLocationCode_SelectedItem
					If (!$LicenseUserAddLocation)
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						[System.Windows.Forms.MessageBox]::Show("No location was selected. Please enter a valid location code.", "Error")
					}
					Else
					{
						#$TextboxResults.text = Get-MsolAccountSku | Format-Table | Out-String
						#$LicenseType = Read-Host "Enter the AccountSku of the License you want to assign to this user"
						$LicensesText = "Select a license for $LicenseUserAdd"
						Show-SelectLicenses_psf
						$LicenseType = $SelectLicenses_comboboxSelectAvailableLicenses
						If (!$LicenseType)
						{
							$TextboxResults.Text = ""
							$textboxDetails.Text = ""
							[System.Windows.Forms.MessageBox]::Show("No license was selected. Please select a valid license", "Error")
						}
						Else
						{
							$FormO365AdministrationCenter.Cursor = 'WaitCursor'
							$TextboxResults.Text = "Adding $LicenseType license to $LicenseUserAdd..."
							
							$textboxDetails.Text = "Set-MsolUser -UserPrincipalName $LicenseUserAdd –UsageLocation $LicenseUserAddLocation
Set-MsolUserLicense -UserPrincipalName $LicenseUserAdd -AddLicenses $LicenseType"
							Set-MsolUser -UserPrincipalName $LicenseUserAdd –UsageLocation $LicenseUserAddLocation
							Set-MsolUserLicense -UserPrincipalName $LicenseUserAdd -AddLicenses $LicenseType
							$TextboxResults.Text = Get-MsolUser -UserPrincipalName $LicenseUserAdd | Format-List DisplayName, Licenses | Out-String -Width 2147483647
							$FormO365AdministrationCenter.Cursor = 'Default'
						}
					}
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to add a License to another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$removeLicenseFromAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#What to do if connected to main o365 account
			If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
			{
				#$RemoveLicenseFromUser = Read-Host "Enter the User Principal Name of the user you want to remove a license from"
				$SelectUsersFormText = "Select the User you want to remove a License from"
				#Call-SelectUsersForm_psf
				Show-SelectCachedUserPrincipalName_psf
				#$RemoveLicenseFromUser = $SelectUsersForm_comboboxUsers
				$RemoveLicenseFromUser = $SelectCachedUserPrincipalName_comboboxUPN
				If (!$RemoveLicenseFromUser)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid User", "Error")
				}
				Else
				{
					#$TextboxResults.Text = Get-MsolUser -UserPrincipalName $RemoveLicenseFromUser | Format-List DisplayName, Licenses | Out-String
					#$RemoveLicenseType = Read-Host "Enter the AccountSku of the license you want to remove"
					$UserLicenseText = "Select a license to remove from $RemoveLicenseFromUser"
					Show-SelectUserLicenses_psf
					$RemoveLicenseType = $SelectUserLicenses_comboboxSelectCurrentLicense
					If (!$RemoveLicenseType)
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						[System.Windows.Forms.MessageBox]::Show("No License was selected. Please select a valid License", "Error")
					}
					Else
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Removing the $RemoveLicenseType license from $RemoveLicenseFromUser..."
						
						$textboxDetails.Text = "Set-MsolUserLicense -UserPrincipalName $RemoveLicenseFromUser -RemoveLicenses $RemoveLicenseType"
						Set-MsolUserLicense -UserPrincipalName $RemoveLicenseFromUser -RemoveLicenses $RemoveLicenseType
						$TextboxResults.Text = Get-MsolUser -UserPrincipalName $RemoveLicenseFromUser | Format-List DisplayName, Licenses | Out-String -Width 2147483647
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
				}
			}
			#What to do if connected to partner account
			ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
			{
				$TenantText = $PartnerComboBox.text
				
				#$RemoveLicenseFromUser = Read-Host "Enter the User Principal Name of the user you want to remove a license from"
				$SelectUsersFormText = "Select the User you want to remove a License from"
				#Call-SelectUsersForm_psf
				Show-SelectCachedUserPrincipalName_psf
				#$RemoveLicenseFromUser = $SelectUsersForm_comboboxUsers
				$RemoveLicenseFromUser = $SelectCachedUserPrincipalName_comboboxUPN
				#$TextboxResults.Text = Get-MsolUser -TenantId $PartnerComboBox.SelectedItem.TenantID -UserPrincipalName $RemoveLicenseFromUser | Format-List DisplayName, Licenses | Out-String
				If (!$RemoveLicenseFromUser)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
				}
				Else
				{
					#$RemoveLicenseType = Read-Host "Enter the AccountSku of the license you want to remove"
					$UserLicenseText = "Select a license to remove from $RemoveLicenseFromUser"
					Show-SelectUserLicenses_psf
					$RemoveLicenseType = $SelectUserLicenses_comboboxSelectCurrentLicense
					If (!$RemoveLicenseType)
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						[System.Windows.Forms.MessageBox]::Show("No License was selected. Please select a valid License", "Error")
					}
					Else
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Removing the $RemoveLicenseType license from $RemoveLicenseFromUser..."
						
						$textboxDetails.Text = "Set-MsolUserLicense -TenantId $TenantText -UserPrincipalName $RemoveLicenseFromUser -RemoveLicenses $RemoveLicenseType"
						Set-MsolUserLicense -TenantId $PartnerComboBox.SelectedItem.TenantID -UserPrincipalName $RemoveLicenseFromUser -RemoveLicenses $RemoveLicenseType
						$TextboxResults.Text = Get-MsolUser -TenantId $PartnerComboBox.SelectedItem.TenantID -UserPrincipalName $RemoveLicenseFromUser | Format-List DisplayName, Licenses | Out-String -Width 2147483647
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
				}
			}
			Else
			{
				#$RemoveLicenseFromUser = Read-Host "Enter the User Principal Name of the user you want to remove a license from"
				$SelectUsersFormText = "Select the User you want to remove a License from"
				#Call-SelectUsersForm_psf
				Show-SelectCachedUserPrincipalName_psf
				#$RemoveLicenseFromUser = $SelectUsersForm_comboboxUsers
				$RemoveLicenseFromUser = $SelectCachedUserPrincipalName_comboboxUPN
				If (!$RemoveLicenseFromUser)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid User", "Error")
				}
				Else
				{
					#$TextboxResults.Text = Get-MsolUser -UserPrincipalName $RemoveLicenseFromUser | Format-List DisplayName, Licenses | Out-String
					#$RemoveLicenseType = Read-Host "Enter the AccountSku of the license you want to remove"
					$UserLicenseText = "Select a license to remove from $RemoveLicenseFromUser"
					Show-SelectUserLicenses_psf
					$RemoveLicenseType = $SelectUserLicenses_comboboxSelectCurrentLicense
					If (!$RemoveLicenseType)
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						[System.Windows.Forms.MessageBox]::Show("No License was selected. Please select a valid License", "Error")
					}
					Else
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Removing the $RemoveLicenseType license from $RemoveLicenseFromUser..."
						
						$textboxDetails.Text = "Set-MsolUserLicense -UserPrincipalName $RemoveLicenseFromUser -RemoveLicenses $RemoveLicenseType"
						Set-MsolUserLicense -UserPrincipalName $RemoveLicenseFromUser -RemoveLicenses $RemoveLicenseType
						$TextboxResults.Text = Get-MsolUser -UserPrincipalName $RemoveLicenseFromUser | Format-List DisplayName, Licenses | Out-String -Width 2147483647
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to remove a License for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getAUsersLicenseToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$licensedUsersText = "Select the User you want to view Licenses for"
			#Show-SelectLicensedUsers_psf
			Show-SelectCachedUserPrincipalName_psf
			#$UserLicInfo = $SelectLicensedUsers_comboboxSelectlicensedUsers
			$UserLicInfo = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$UserLicInfo)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			Else
			{
				#What to do if connected to main o365 account
				If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$textboxDetails.Text = "Get-MsolUser -UserPrincipalName $UserLicInfo | Select-Object Licenses"
					$TextboxResults.Text = Get-MsolUser -UserPrincipalName $UserLicInfo | Select-Object Licenses | Format-Table -AutoSize | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
					
				}
				#What to do if connected to partner account
				ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
				{
					$TenantText = $PartnerComboBox.text
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$textboxDetails.Text = "Get-MsolUser -UserPrincipalName $UserLicInfo -TenantId $TenantText | Select-Object Licenses"
					$TextboxResults.Text = Get-MsolUser -UserPrincipalName $UserLicInfo -TenantId $PartnerComboBox.SelectedItem.TenantID | Select-Object Licenses | Format-Table -AutoSize | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$textboxDetails.Text = "Get-MsolUser -UserPrincipalName $UserLicInfo | Select-Object Licenses"
					$TextboxResults.Text = Get-MsolUser -UserPrincipalName $UserLicInfo | Select-Object Licenses | Format-Table -AutoSize | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
					
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to view Licenses for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

#Calendar Items

$AddCalendarPermissionsForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$Calendaruser = Read-Host "Enter the UPN of the user whose Calendar you want to give access to"
			$SelectUsersFormText = "Select the user you want to modify calendar permissions for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedDisplayNames_psf
			#$Calendaruserchangepermission = $SelectUsersForm_comboboxUsers
			$Calendaruserchangepermission = $SelectCachedDisplayNames_comboboxNames
			If (!$Calendaruserchangepermission)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a user", "Error")
			}
			Else
			{
				#$Calendaruser2 = Read-Host "Enter the UPN of the user who you want to give access to"
				$SelectUsersFormText = "Select the user you want to give permission to $Calendaruserchangepermission calendar"
				#Call-SelectUsersForm_psf
				Show-SelectCachedDisplayNames_psf
				#$Calendarusergrantpermission = $SelectUsersForm_comboboxUsers
				$Calendarusergrantpermission = $SelectCachedDisplayNames_comboboxNames
				If (!$Calendarusergrantpermission)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a user", "Error")
				}
				Else
				{
					$LabelPermissionsText = "Select the level of access you want $Calendarusergrantpermission to have on $Calendaruserchangepermission  calendar"
					Show-AccessPermissions_psf
					$level = $AccessPermissions_comboboxPermissions_SelectedItem
					If (!$level)
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						[System.Windows.Forms.MessageBox]::Show("No level of access was selected, please select a valid level of access", "Error")
					}
					Else
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Adding $Calendarusergrantpermission to $Calendaruserchangepermission calender with $level permissions..."
						$textboxDetails.Text = "Add-MailboxFolderPermission -Identity ${Calendaruserchangepermission}:\calendar -user $Calendarusergrantpermission -AccessRights $level"
						Remove-MailboxFolderPermission -identity ${Calendaruserchangepermission}:\calendar -user $Calendarusergrantpermission -Confirm:$False
						Add-MailboxFolderPermission -Identity ${Calendaruserchangepermission}:\calendar -user $Calendarusergrantpermission -AccessRights $level
						$TextboxResults.Text = Get-MailboxFolderPermission -Identity ${Calendaruserchangepermission}:\calendar | Sort-Object User, AccessRights | Format-Table User, AccessRights, Identity, FolderName, IsValid -AutoSize | Out-String -Width 2147483647
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to modify Calendar Permissions for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$GetUsersCalendarPermissionsToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$CalUserPermissions = Read-Host "What user would you like calendar permissions for?"
			$SelectUsersFormText = "Select the user you want to view calendar permissions for"
			Show-SelectCachedDisplayNames_psf
			$CalUserPermissions = $SelectCachedDisplayNames_comboboxNames
			If (!$CalUserPermissions)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a user", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting $CalUserPermissions calendar permissions..."
				$textboxDetails.Text = "Get-MailboxFolderPermission -Identity ${CalUserPermissions}:\calendar | Sort-Object User, AccessRights | Format-Table User, AccessRights, Identity, FolderName, IsValid -AutoSize"
				$TextboxResults.Text = Get-MailboxFolderPermission -Identity ${CalUserPermissions}:\calendar | Sort-Object User, AccessRights | Format-Table User, AccessRights, Identity, FolderName, IsValid -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to view Calendar Permissions for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$AddASingleUserPermissionsOnAllCalendarsToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$MasterUser = Read-Host "Enter the UPN of the user you want permission on all users calendars"
			$SelectUsersFormText = "Select the user you want permission on all users calendars"
			#Call-SelectUsersForm_psf
			Show-SelectCachedDisplayNames_psf
			#$MasterUser = $SelectUsersForm_comboboxUsers
			$MasterUser = $SelectCachedDisplayNames_comboboxNames
			If (!$MasterUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a user", "Error")
			}
			Else
			{
				$LabelPermissionsText = "Select the level of access you want $MasterUser to have on all calendars"
				Show-AccessPermissions_psf
				$level2 = $AccessPermissions_comboboxPermissions_SelectedItem
				If (!$level2)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No level of access was selected, please select a valid level of access", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Adding $MasterUser to everyones calendars with $level2 permissions..."
					$textboxDetails.Text = "(Get-Mailbox) | Foreach-Object { Set-MailboxFolderPermission `$_':\Calendar' -User $MasterUser -AccessRights $level2 }"
					(Get-Mailbox) | Foreach-Object { Set-MailboxFolderPermission $_":\Calendar" -User $MasterUser -AccessRights $level2 }
					
						#(Get-Mailbox) | Foreach-Object Set-MailboxFolderPermission "$($_):\Calendar" -user $MasterUser -AccessRights $level2
					
					$TextboxResults.Text = "Successfully added $MasterUser to everyones calendars with $level2 permissions"
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to add another User on everyones calendar?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$removeAUserFromAllCalendarsToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$RemoveUserFromAll = Read-Host "Enter the UPN of the user you want to remove from all calendars"
			$SelectUsersFormText = "Select the user you want to remove from all calendars"
			#Call-SelectUsersForm_psf
			Show-SelectCachedDisplayNames_psf
			#$RemoveUserFromAll = $SelectUsersForm_comboboxUsers
			$RemoveUserFromAll = $SelectCachedDisplayNames_comboboxNames
			If (!$RemoveUserFromAll)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a user", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Removing $RemoveUserFromAll from all users calendar..."
				$textboxDetails.Text = "`$users = Get-Mailbox -ResultSize unlimited | Select-Object -ExpandProperty Alias
Foreach (`$user in `$users) { Remove-MailboxFolderPermission `${user}:\Calendar -user $RemoveUserFromAll -Confirm:`$false}﻿"
				$users = Get-Mailbox -ResultSize unlimited | Select-Object -ExpandProperty Alias
				Foreach ($user in $users)
				{
					Remove-MailboxFolderPermission "$($user):\Calendar" -user $RemoveUserFromAll -Confirm:$false
				}
				$TextboxResults.Text = "Successfully removed $RemoveUserFromAll from all users calendar..."
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		#Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to remove another User from everyones Calendar?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$removeAUserFromSomeonesCalendarToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$Calendaruserremove = Read-Host "Enter the UPN of the user whose calendar you want to remove access to"
			$SelectUsersFormText = "Select the user you want to modify calendar permissions for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedDisplayNames_psf
			#$GlobalCalUser = $SelectUsersForm_comboboxUsers
			$GlobalCalUser = $SelectCachedDisplayNames_comboboxNames
			If (!$GlobalCalUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a user", "Error")
			}
			Else
			{
				#$Calendaruser2remove = Read-Host "Enter the UPN of the user who you want to remove access"
				$CalendarPermissionsText = "Select the user you want to remove from $GlobalCalUser calendar"
				Show-SelectUserCalendarPermissions_psf
				$Calendaruser2remove = $SelectUserCalendarPermissions_comboboxSelectCalendarPermissions
				If (!$Calendaruser2remove)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a user", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Removing $Calendaruser2remove from $GlobalCalUser calendar..."
					$textboxDetails.Text = "Remove-MailboxFolderPermission -Identity ${GlobalCalUser}:\calendar -user $Calendaruser2remove"
					Remove-MailboxFolderPermission -Identity ${GlobalCalUser}:\calendar -user $Calendaruser2remove
					$TextboxResults.Text = Get-MailboxFolderPermission -Identity ${GlobalCalUser}:\calendar | Sort-Object User, AccessRights | Format-Table User, AccessRights, Identity, FolderName, IsValid -AutoSize | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to remove another User from someones Calendar?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

#Calendar Repair

$disableCalendarRepairForAllUsersToolStripMenuItem_Click = {
	$OUTPUT = [System.Windows.Forms.MessageBox]::Show("Are you sure you want to disable Calendar Repair for all users?", "Warning!", 4)
	If ($OUTPUT -eq "YES")
	{
		Try
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Disabling Calendar Repair for all mailboxes..."
			$TextboxDetails.Text = "Get-mailbox -ResultSize unlimited | Set-Mailbox -CalendarRepairDisabled `$true"
			Get-mailbox -ResultSize unlimited | Set-Mailbox -CalendarRepairDisabled $true
			$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Select-Object DisplayName, CalendarRepairDisabled | Sort-Object DisplayName | Format-Table -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$TextboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
	}
	Else
	{
		[System.Windows.Forms.MessageBox]::Show("Calendar Repair has not been modified", "Info")
	}
	
	
}

$enableCalendarRepairForAllUsersToolStripMenuItem_Click = {
	$OUTPUT = [System.Windows.Forms.MessageBox]::Show("Are you sure you want to enable Calendar Repair for all users?", "Warning!", 4)
	If ($OUTPUT -eq "YES")
	{
		Try
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Enabling Calendar Repair for all mailboxes..."
			$TextboxDetails.Text = "Get-mailbox -ResultSize unlimited | Set-Mailbox -CalendarRepairDisabled `$false"
			Get-mailbox -ResultSize unlimited | Set-Mailbox -CalendarRepairDisabled $false
			$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Select-Object DisplayName, CalendarRepairDisabled | Sort-Object DisplayName | Format-Table -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$TextboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
	}
	Else
	{
		[System.Windows.Forms.MessageBox]::Show("Calendar Repair has not been modified", "Info")
	}
	
}

$disableCalendarRepairForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$SelectUsersFormText = "Select the user you want disable Calendar Repair for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedDisplayNames_psf
			#$DisableCalRepairUser = $SelectUsersForm_comboboxUsers
			$DisableCalRepairUser = $SelectCachedDisplayNames_comboboxNames
			If (!$DisableCalRepairUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Disabling Calendar Repair for $DisableCalRepairUser..."
				$TextboxDetails.Text = "Set-Mailbox -identity $DisableCalRepairUser -CalendarRepairDisabled `$true"
				Set-Mailbox -identity $DisableCalRepairUser -CalendarRepairDisabled $true
				$TextboxResults.Text = Get-Mailbox -identity $DisableCalRepairUser | Select-Object DisplayName, CalendarRepairDisabled | Format-Table -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$TextboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to disable Calendar Repair for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$enableCalendarRepairForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$SelectUsersFormText = "Select the user you want disable Calendar Repair for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedDisplayNames_psf
			#$EnableCalRepairUser = $SelectUsersForm_comboboxUsers
			$EnableCalRepairUser = $SelectCachedDisplayNames_comboboxNames
			If (!$EnableCalRepairUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a user", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Disabling Calendar Repair for $EnableCalRepairUser..."
				$TextboxDetails.Text = "Set-Mailbox -identity $EnableCalRepairUser -CalendarRepairDisabled `$false"
				Set-Mailbox -identity $EnableCalRepairUser -CalendarRepairDisabled $false
				$TextboxResults.Text = Get-Mailbox -identity $EnableCalRepairUser | Select-Object DisplayName, CalendarRepairDisabled | Format-Table -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$TextboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to enable Calendar Repair for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getAllUsersWithCalendarRepairEnabledToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting all users that have Calendar Repair enabled..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Where-Object { `$_.CalendarRepairDisabled -eq `$false | Select-Object DisplayName, CalendarRepairDisabled | Sort-Object DisplayName | Format-Table -AutoSize"
		$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Where-Object { $_.CalendarRepairDisabled -eq $false } | Select-Object DisplayName, CalendarRepairDisabled | Sort-Object DisplayName | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$TextboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getAllUsersWithCalendarRepairDisabledToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting all users that have Calendar Repair enabled..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Where-Object { `$_.CalendarRepairDisabled -eq `$true | Select-Object DisplayName, CalendarRepairDisabled | Sort-Object DisplayName | Format-Table -AutoSize"
		$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Where-Object { $_.CalendarRepairDisabled -eq $true } | Select-Object DisplayName, CalendarRepairDisabled | Sort-Object DisplayName | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$TextboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getCalendarRepairInfoForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$SelectUsersFormText = "Select the User you want get Calendar Repair info for"
			Show-SelectCachedDisplayNames_psf
			#$CalRepairUserinfo = $SelectUsersForm_comboboxUsers
			$CalRepairUserinfo = $SelectCachedDisplayNames_comboboxNames
			If (!$CalRepairUserinfo)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting Calendar Repair info for $CalRepairUserinfo..."
				$TextboxDetails.Text = "Get-Mailbox -identity $CalRepairUserinfo | Select-Object DisplayName, CalendarRepairDisabled"
				$TextboxResults.Text = Get-Mailbox -identity $CalRepairUserinfo | Select-Object DisplayName, CalendarRepairDisabled | Format-Table -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$TextboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get Calendar Repair status for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

#Clutter

$disableClutterForAllToolStripMenuItem_Click = {
	$TenantStatus = Get-ItemProperty 'HKCU:\Software\O365 Admin Center' -Name TenantStatus | Select-Object -ExpandProperty TenantStatus
	If ($TenantStatus -eq 0)
	{
		try
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Disabling Clutter for all users..."
			$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Set-Clutter -Enable `$false"
			$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Get-Clutter | Sort-Object MailboxIdentity | Format-Table IsEnabled, MailboxIdentity -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
	}
	elseif ($TenantStatus -eq 1)
	{
		[System.Windows.Forms.MessageBox]::Show("Microsoft currently does not support configuring Clutter when connected to a tenant", "Info")
	}
}

$enableClutterForAllToolStripMenuItem_Click = {
	$TenantStatus = Get-ItemProperty 'HKCU:\Software\O365 Admin Center' -Name TenantStatus | Select-Object -ExpandProperty TenantStatus
	If ($TenantStatus -eq 0)
	{
		try
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Enabling Clutter for all users..."
			$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Set-Clutter -Enable `$True | Format-List MailboxIdentity, IsEnabled -AutoSize"
			$TextboxResults.text = Get-Mailbox -ResultSize unlimited | Set-Clutter -Enable $True | Format-Table MailboxIdentity, IsEnabled -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
	}
	elseif ($TenantStatus -eq 1)
	{
		[System.Windows.Forms.MessageBox]::Show("Microsoft currently does not support configuring Clutter when connected to a tenant", "Info")
	}
}

$enableClutterForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$TenantStatus = Get-ItemProperty 'HKCU:\Software\O365 Admin Center' -Name TenantStatus | Select-Object -ExpandProperty TenantStatus
			If ($TenantStatus -eq 0)
			{
				
				#$UserEnableClutter = Read-Host "Which user would you like to enable Clutter for?"
				$SelectUsersFormText = "Select the User you want to enable Clutter for"
				#Call-SelectUsersForm_psf
				Show-SelectCachedDisplayNames_psf
				#$GlobalUPNenableClutter = $SelectUsersForm_comboboxUsers
				$GlobalUPNenableClutter = $SelectCachedDisplayNames_comboboxNames
				If (!$GlobalUPNenableClutter)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Enabling Clutter for $GlobalUPNenableClutter..."
					$textboxDetails.Text = "Get-Mailbox $GlobalUPNenableClutter | Set-Clutter -Enable `$True"
					$TextboxResults.text = Get-Mailbox $GlobalUPNenableClutter | Set-Clutter -Enable $True | Format-Table -AutoSize | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
				
			}
			elseif ($TenantStatus -eq 1)
			{
				[System.Windows.Forms.MessageBox]::Show("Microsoft currently does not support configuring Clutter when connected to a tenant", "Info")
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to enable Clutter for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$disableClutterForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$TenantStatus = Get-ItemProperty 'HKCU:\Software\O365 Admin Center' -Name TenantStatus | Select-Object -ExpandProperty TenantStatus
			If ($TenantStatus -eq 0)
			{
				
				#$UserDisableClutter = Read-Host "Which user would you like to disable Clutter for?"
				$SelectUsersFormText = "Select the User you want to disable Clutter for"
				#Call-SelectUsersForm_psf
				Show-SelectCachedDisplayNames_psf
				#$GlobalUPNdisableClutter = $SelectUsersForm_comboboxUsers
				$GlobalUPNdisableClutter = $SelectCachedDisplayNames_comboboxNames
				If (!$GlobalUPNdisableClutter)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Disabling Clutter for $GlobalUPNdisableClutter..."
					$textboxDetails.Text = "Set-Clutter -Identity $GlobalUPNdisableClutter -Enable `$False"
					$TextboxResults.text = Set-Clutter -Identity $GlobalUPNdisableClutter -Enable $False | Format-Table MailboxIdentity, IsEnabled -AutoSize | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
			elseif ($TenantStatus -eq 1)
			{
				[System.Windows.Forms.MessageBox]::Show("Microsoft currently does not support configuring Clutter when connected to a tenant", "Info")
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to Disable Clutter for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getClutterInfoForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$TenantStatus = Get-ItemProperty 'HKCU:\Software\O365 Admin Center' -Name TenantStatus | Select-Object -ExpandProperty TenantStatus
			If ($TenantStatus -eq 0)
			{
				#$GetCluterInfoUser = Read-Host "What user would you like to view Clutter information about?"
				$SelectUsersFormText = "Select the User you want to get Clutter information for"
				#Call-SelectUsersForm_psf
				Show-SelectCachedDisplayNames_psf
				#$GlobalUPNinfoClutter = $SelectUsersForm_comboboxUsers
				$GlobalUPNinfoClutter = $SelectCachedDisplayNames_comboboxNames
				If (!$GlobalUPNinfoClutter)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Getting Clutter information for $GlobalUPNinfoClutter..."
					$textboxDetails.Text = "Get-Clutter -Identity $GlobalUPNinfoClutter"
					$TextboxResults.Text = Get-Clutter -Identity $GlobalUPNinfoClutter | Format-Table MailboxIdentity, IsEnabled -AutoSize | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
			elseif ($TenantStatus -eq 1)
			{
				[System.Windows.Forms.MessageBox]::Show("Microsoft currently does not support configuring/viewing Clutter when connected to a tenant", "Info")
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get Clutter status for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

#Recycle Bin

$displayAllDeletedUsersToolStripMenuItem_Click = {
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all deleted users..."
			$textboxDetails.Text = "Get-MsolUser -All -ReturnDeletedUsers |  Sort-Object UserprincipalName | Format-Table UserPrincipalName, ObjectID -Autosize "
			$TextboxResults.Text = Get-MsolUser -All -ReturnDeletedUsers | Sort-Object UserprincipalName | Format-Table UserPrincipalName, ObjectID -Autosize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all deleted users..."
			$textboxDetails.Text = "Get-MsolUser -All -TenantId $TenantText -ReturnDeletedUsers |  Sort-Object UserprincipalName | Format-Table UserPrincipalName, ObjectID -Autosize "
			$TextboxResults.Text = Get-MsolUser -All -TenantId $PartnerComboBox.SelectedItem.TenantID -ReturnDeletedUsers | Sort-Object UserPrincipalName | Format-Table UserPrincipalName, ObjectID -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all deleted users..."
			$textboxDetails.Text = "Get-MsolUser -All -ReturnDeletedUsers |  Sort-Object UserprincipalName | Format-Table UserPrincipalName, ObjectID -Autosize "
			$TextboxResults.Text = Get-MsolUser -All -ReturnDeletedUsers | Sort-Object UserprincipalName | Format-Table UserPrincipalName, ObjectID -Autosize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$deleteAllUsersInRecycleBinToolStripMenuItem_Click = {
	Try
	{
		$OUTPUT = [System.Windows.Forms.MessageBox]::Show("Are you sure you want to delete all users in the recycle bin?.", "Warning!", 4)
		If ($OUTPUT -eq "YES")
		{
			#What to do if connected to main o365 account
			If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Deleting all users in the recycle bin..."
				$textboxDetails.Text = "Get-MsolUser -ReturnDeletedUsers -All | Remove-MsolUser -RemoveFromRecycleBin –Force"
				$TextboxResults.Text = Get-MsolUser -ReturnDeletedUsers -All | Remove-MsolUser -RemoveFromRecycleBin –Force | Format-List | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			#What to do if connected to partner account
			ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
			{
				$TenantText = $PartnerComboBox.text
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Deleting all users in the recycle bin..."
				$textboxDetails.Text = "Get-MsolUser -TenantId $TenantText -ReturnDeletedUsers -All | Remove-MsolUser -RemoveFromRecycleBin –Force"
				$TextboxResults.Text = Get-MsolUser -TenantId $PartnerComboBox.SelectedItem.TenantID -ReturnDeletedUsers -All | Remove-MsolUser -RemoveFromRecycleBin –Force | Format-List | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Deleting all users in the recycle bin..."
				$textboxDetails.Text = "Get-MsolUser -ReturnDeletedUsers -All | Remove-MsolUser -RemoveFromRecycleBin –Force"
				$TextboxResults.Text = Get-MsolUser -ReturnDeletedUsers -All | Remove-MsolUser -RemoveFromRecycleBin –Force | Format-List | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Else
		{
			[System.Windows.Forms.MessageBox]::Show("All users in the recycle bin have not been deleted", "Info")
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
	
}

$deleteSpecificUsersInRecycleBinToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$DeletedUserRecycleBin = Read-Host "Please enter the User Principal Name of the user you want to permanently delete"
			$AliasRecycleBinText = "Select the User you want to delete from the Recycle Bin"
			Show-SelectUserRecycleBin_psf
			$GlobalUPNdeleteRecycle = $SelectUserRecycleBin_comboboxSelectRecycleBin
			$OUTPUT = [System.Windows.Forms.MessageBox]::Show("Are you sure you want to delete $GlobalUPNdeleteRecycle ?", "Warning!", 4)
			If ($OUTPUT -eq "YES")
			{
				#What to do if connected to main o365 account
				If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Deleting  $GlobalUPNdeleteRecycle from the Recycle Bin..."
					$textboxDetails.Text = "Remove-MsolUser -UserPrincipalName $GlobalUPNdeleteRecycle -RemoveFromRecycleBin -Force"
					Remove-MsolUser -UserPrincipalName $GlobalUPNdeleteRecycle -RemoveFromRecycleBin -Force
					$TextboxResults.Text = "Getting users in the recycle bin..."
					$TextboxResults.Text = Get-MsolUser -ReturnDeletedUsers | Sort-Object UserprincipalName | Format-Table UserPrincipalName, ObjectID -Autosize | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
				#What to do if connected to partner account
				ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
				{
					$TenantText = $PartnerComboBox.text
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Deleting  $GlobalUPNdeleteRecycle from the Recycle Bin..."
					$textboxDetails.Text = "Remove-MsolUser -TenantId $TenantText -UserPrincipalName $GlobalUPNdeleteRecycle -RemoveFromRecycleBin -Force"
					Remove-MsolUser -TenantId $PartnerComboBox.SelectedItem.TenantID -UserPrincipalName $GlobalUPNdeleteRecycle -RemoveFromRecycleBin -Force
					$TextboxResults.Text = "Getting users in the recycle bin..."
					$TextboxResults.Text = Get-MsolUser -TenantId $PartnerComboBox.SelectedItem.TenantID -ReturnDeletedUsers | Sort-Object UserprincipalName | Format-Table UserPrincipalName, ObjectID -Autosize | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Deleting  $GlobalUPNdeleteRecycle from the Recycle Bin..."
					$textboxDetails.Text = "Remove-MsolUser -UserPrincipalName $GlobalUPNdeleteRecycle -RemoveFromRecycleBin -Force"
					Remove-MsolUser -UserPrincipalName $GlobalUPNdeleteRecycle -RemoveFromRecycleBin -Force
					$TextboxResults.Text = "Getting users in the recycle bin..."
					$TextboxResults.Text = Get-MsolUser -ReturnDeletedUsers | Sort-Object UserprincipalName | Format-Table UserPrincipalName, ObjectID -Autosize | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
			Else
			{
				[System.Windows.Forms.MessageBox]::Show("$GlobalUPNdeleteRecycle was not deleted", "Info")
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to delete another User from the Recycle Bin?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$restoreDeletedUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$RestoredUserFromRecycleBin = Read-Host "Enter the User Principal Name of the user you want to restore"
			$SelectUsersFormText = "Select the User you want to restore from the Recycle Bin"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPNrestoreuser = $SelectUsersForm_comboboxUsers
			$GlobalUPNrestoreuser = $SelectCachedUserPrincipalName_comboboxUPN
			#What to do if connected to main o365 account
			If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Restoring $GlobalUPNrestoreuser from the Recycle Bin..."
				$textboxDetails.Text = "Restore-MsolUser –UserPrincipalName $GlobalUPNrestoreuser -AutoReconcileProxyConflicts"
				Restore-MsolUser –UserPrincipalName $GlobalUPNrestoreuser -AutoReconcileProxyConflicts
				$TextboxResults.Text = "Getting list of deleted users"
				$TextboxResults.Text = Get-MsolUser -ReturnDeletedUsers | Sort-Object UserprincipalName | Format-Table UserPrincipalName, ObjectID -Autosize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			#What to do if connected to partner account
			ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
			{
				$TenantText = $PartnerComboBox.text
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Restoring $GlobalUPNrestoreuser from the Recycle Bin..."
				$textboxDetails.Text = "Restore-MsolUser -TenantId $TenantText –UserPrincipalName $GlobalUPNrestoreuser -AutoReconcileProxyConflicts"
				Restore-MsolUser -TenantId $PartnerComboBox.SelectedItem.TenantID –UserPrincipalName $GlobalUPNrestoreuser -AutoReconcileProxyConflicts
				$TextboxResults.Text = "Getting list of deleted users"
				$TextboxResults.Text = Get-MsolUser -TenantId $PartnerComboBox.SelectedItem.TenantID -ReturnDeletedUsers | Sort-Object UserprincipalName | Format-Table UserPrincipalName, ObjectID -Autosize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Restoring $GlobalUPNrestoreuser from the Recycle Bin..."
				$textboxDetails.Text = "Restore-MsolUser –UserPrincipalName $GlobalUPNrestoreuser -AutoReconcileProxyConflicts"
				Restore-MsolUser –UserPrincipalName $GlobalUPNrestoreuser -AutoReconcileProxyConflicts
				$TextboxResults.Text = "Getting list of deleted users"
				$TextboxResults.Text = Get-MsolUser -ReturnDeletedUsers | Sort-Object UserprincipalName | Format-Table UserPrincipalName, ObjectID -Autosize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to restore another User from the Recycle Bin?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$restoreAllDeletedUsersToolStripMenuItem_Click = {
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Restoring all deleted users..."
			$textboxDetails.Text = "Get-MsolUser -All -ReturnDeletedUsers | Restore-MsolUser"
			Get-MsolUser -ReturnDeletedUsers -All | Restore-MsolUser
			$TextboxResults.Text = "Users that were deleted have now been restored"
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Restoring all deleted users..."
			$textboxDetails.Text = "Get-MsolUser -ReturnDeletedUsers -TenantID $TenantText -All | Restore-MsolUser"
			Get-MsolUser -ReturnDeletedUsers -TenantId $PartnerComboBox.SelectedItem.TenantID -All | Restore-MsolUser -TenantId $PartnerComboBox.SelectedItem.TenantID
			$TextboxResults.Text = "Users that were deleted have now been restored"
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Restoring all deleted users..."
			$textboxDetails.Text = "Get-MsolUser -All -ReturnDeletedUsers | Restore-MsolUser"
			Get-MsolUser -ReturnDeletedUsers -All | Restore-MsolUser
			$TextboxResults.Text = "Users that were deleted have now been restored"
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

#Quarentine

$getQuarantineBetweenDatesToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$StartDateQuarentine = Read-Host "Enter the beginning date. (Format MM/DD/YYYY)"
			$StartDateText = "Select the beginning date to view quarantine"
			$StartDateFormText = "Start Date"
			Show-SelectDatePicker_psf
			$startdate = $SelectDatePicker_monthcalendar1
			$StartDateQuarentine = "$startdate".trimend('00:00:00')
			If (!$startdate)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No beginning date was selected, please enter a beginning date", "Error")
			}
			Else
			{
				#$EndDateQuarentine = Read-Host "Enter the end date. (Format MM/DD/YYYY)"
				$StartDateText = "Select the ending date to view quarantine"
				$StartDateFormText = "End Date"
				Show-SelectDatePicker_psf
				$enddate = $SelectDatePicker_monthcalendar1
				$EndDateQuarentine = "$enddate".trimend('00:00:00')
				If (!$enddate)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No ending date was selected, please enter a ending date", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Getting quarantine between $StartDateQuarentine and $EndDateQuarentine..."
					$textboxDetails.Text = "Get-QuarantineMessage -StartReceivedDate $StartDateQuarentine -EndReceivedDate $EndDateQuarentine | Format-List ReceivedTime, SenderAddress, RecipientAddress, Subject, Size, Type, Expires, QuarantinedUser, ReleasedUser, Direction "
					$TextboxResults.Text = Get-QuarantineMessage -StartReceivedDate $StartDateQuarentine -EndReceivedDate $EndDateQuarentine | Format-List ReceivedTime, SenderAddress, RecipientAddress, Subject, Size, Type, Expires, QuarantinedUser, ReleasedUser, Direction | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get the Quarentine for another time?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getQuarantineFromASpecificUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$QuarentineFromUser = Read-Host "Enter the E-mail Address you want to see quarentine from"
			If (!$QuarentineFromUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No E-mail Address was entered, please enter a valid E-mail Address", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting Quarantine sent from $QuarentineFromUser ..."
				$textboxDetails.Text = "Get-QuarantineMessage -SenderAddress $QuarentineFromUser | Format-List ReceivedTime, SenderAddress, RecipientAddress, Subject, Size, Type, Expires, QuarantinedUser, ReleasedUser, Direction"
				$TextboxResults.Text = Get-QuarantineMessage -SenderAddress $QuarentineFromUser | Format-List ReceivedTime, SenderAddress, RecipientAddress, Subject, Size, Type, Expires, QuarantinedUser, ReleasedUser, Direction | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to view the Quarantine from a different E-mail Address?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getQuarantineToASpecificUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$QuarentineInfoForUser = Read-Host "Enter the email of the user you want to view quarantine for"
			$AllUsersEmailsText = "Select the E-mail Address or enter in one you want to view Quarantine for"
			Show-SelectAllEmailPrimaryAddresses_psf
			$QuarentineInfoForUser = $SelectAllEmailPrimaryAddresses_comboboxSelectAllEmailAddresses
			If (!$QuarentineInfoForUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No E-mail Address was selected, please select a valid E-mail Address", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting Auarantine sent to $QuarentineInfoForUser..."
				$textboxDetails.Text = " Get-QuarantineMessage -RecipientAddress $QuarentineInfoForUser | Format-List ReceivedTime, SenderAddress, Subject, Size, Type, Expires, QuarantinedUser, ReleasedUser, Direction"
				$TextboxResults.Text = Get-QuarantineMessage -RecipientAddress $QuarentineInfoForUser | Format-List ReceivedTime, SenderAddress, Subject, Size, Type, Expires, QuarantinedUser, ReleasedUser, Direction | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to view the Quarantine sent to another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

#Passwords

$enableStrongPasswordForAUserToolStripMenuItem_Click = {
	Do
	{
		#$UserEnableStrongPasswords = Read-Host "Enter the User Principal Name of the user you want to enable strong password policy for"
		$SelectUsersFormText = "Select the User you want to enable Strong Password Policy for"
		#Call-SelectUsersForm_psf
		Show-SelectCachedUserPrincipalName_psf
		#$GlobalUPNespp = $SelectUsersForm_comboboxUsers
		$GlobalUPNespp = $SelectCachedUserPrincipalName_comboboxUPN
		If (!$GlobalUPNespp)
		{
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
		}
		Else
		{
			#What to do if connected to main o365 account
			If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Enabling Strong Password Policy for $GlobalUPNespp..."
				$textboxDetails.Text = "Set-MsolUser -UserPrincipalName $GlobalUPNespp -StrongPasswordRequired `$True"
				Set-MsolUser -UserPrincipalName $GlobalUPNespp -StrongPasswordRequired $True
				$TextboxResults.text = Get-MsolUser -UserPrincipalName $GlobalUPNespp | Format-List UserPrincipalName, StrongPasswordRequired | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			#What to do if connected to partner account
			ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
			{
				$TenantText = $PartnerComboBox.text
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Enabling Strong Password Policy for $GlobalUPNespp..."
				$textboxDetails.Text = "Set-MsolUser -UserPrincipalName $GlobalUPNespp -StrongPasswordRequired `$True -TenantId $TenantText"
				Set-MsolUser -UserPrincipalName $GlobalUPNespp -StrongPasswordRequired $True -TenantId $PartnerComboBox.SelectedItem.TenantID
				$TextboxResults.text = Get-MsolUser -UserPrincipalName $GlobalUPNespp -TenantId $PartnerComboBox.SelectedItem.TenantID | Format-List UserPrincipalName, StrongPasswordRequired | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Enabling Strong Password Policy for $GlobalUPNespp..."
				$textboxDetails.Text = "Set-MsolUser -UserPrincipalName $GlobalUPNespp -StrongPasswordRequired `$True"
				Set-MsolUser -UserPrincipalName $GlobalUPNespp -StrongPasswordRequired $True
				$TextboxResults.text = Get-MsolUser -UserPrincipalName $GlobalUPNespp | Format-List UserPrincipalName, StrongPasswordRequired | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to enable Strong Password Policy for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getAllUsersStrongPasswordPolicyInfoToolStripMenuItem_Click = {
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting strong password policy for all users..."
			$textboxDetails.Text = "Get-MsolUser -All | Sort-Object DisplayName | Format-Table DisplayName, strongpasswordrequired -AutoSize"
			$TextboxResults.text = Get-MsolUser -All | Sort-Object DisplayName | Format-Table  DisplayName, strongpasswordrequired -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting strong password policy for all users..."
			$textboxDetails.Text = "Get-MsolUser -All -TenantId $TenantText  | Sort-Object DisplayName | Format-Table  DisplayName, strongpasswordrequired -AutoSize"
			$TextboxResults.text = Get-MsolUser -All -TenantId $PartnerComboBox.SelectedItem.TenantID | Sort-Object DisplayName | Format-Table DisplayName, strongpasswordrequired -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting strong password policy for all users..."
			$textboxDetails.Text = "Get-MsolUser -All | Sort-Object DisplayName | Format-Table DisplayName, strongpasswordrequired -AutoSize"
			$TextboxResults.text = Get-MsolUser -All | Sort-Object DisplayName | Format-Table  DisplayName, strongpasswordrequired -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$disableStrongPasswordsForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$UserdisableStrongPasswords = Read-Host "Enter the User Principal Name of the user you want to disable strong password policy for"
			$SelectUsersFormText = "Select the User you want to disable Strong Password Policy for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPNdspp = $SelectUsersForm_comboboxUsers
			$GlobalUPNdspp = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$GlobalUPNdspp)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			Else
			{
				#What to do if connected to main o365 account
				If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Disabling Strong Password Policy for $GlobalUPNdspp..."
					$textboxDetails.Text = "Set-MsolUser -UserPrincipalName $GlobalUPNdspp -StrongPasswordRequired `$False"
					Set-MsolUser -UserPrincipalName $GlobalUPNdspp -StrongPasswordRequired $False
					$TextboxResults.text = Get-MsolUser -UserPrincipalName $GlobalUPNdspp | Format-List UserPrincipalName, StrongPasswordRequired | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
				#What to do if connected to partner account
				ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
				{
					$TenantText = $PartnerComboBox.text
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Disabling Strong Password Policy for $GlobalUPNdspp..."
					$textboxDetails.Text = "Set-MsolUser -UserPrincipalName $GlobalUPNdspp -StrongPasswordRequired `$False -TenantID $TenantText"
					Set-MsolUser -UserPrincipalName $GlobalUPNdspp -StrongPasswordRequired $False -TenantId $PartnerComboBox.SelectedItem.TenantID
					$TextboxResults.text = Get-MsolUser -UserPrincipalName $GlobalUPNdspp -TenantId $PartnerComboBox.SelectedItem.TenantID | Format-List UserPrincipalName, StrongPasswordRequired | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Disabling Strong Password Policy for $GlobalUPNdspp..."
					$textboxDetails.Text = "Set-MsolUser -UserPrincipalName $GlobalUPNdspp -StrongPasswordRequired `$False"
					Set-MsolUser -UserPrincipalName $GlobalUPNdspp -StrongPasswordRequired $False
					$TextboxResults.text = Get-MsolUser -UserPrincipalName $GlobalUPNdspp | Format-List UserPrincipalName, StrongPasswordRequired | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to disable Strong Password Policy for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$enableStrongPasswordsForAllToolStripMenuItem_Click = {
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Enabling strong password policy for all users..."
			$textboxDetails.Text = "Get-MsolUser -All | Set-MsolUser -StrongPasswordRequired `$True"
			Get-MsolUser -All | Set-MsolUser -StrongPasswordRequired $True
			$TextboxResults.text = Get-MsolUser -All | Sort-Object DisplayName | Format-Table  DisplayName, strongpasswordrequired -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Enabling strong password policy for all users..."
			$textboxDetails.Text = "Get-MsolUser -All -TenantId $TenantText | Set-MsolUser -StrongPasswordRequired -TenantId $TenantText `$True"
			Get-MsolUser -All -TenantId $PartnerComboBox.SelectedItem.TenantID | Set-MsolUser -StrongPasswordRequired $True -TenantId $PartnerComboBox.SelectedItem.TenantID
			$TextboxResults.text = Get-MsolUser -All -TenantId $PartnerComboBox.SelectedItem.TenantID | Sort-Object DisplayName | Format-Table  DisplayName, strongpasswordrequired -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Enabling strong password policy for all users..."
			$textboxDetails.Text = "Get-MsolUser -All | Set-MsolUser -StrongPasswordRequired `$True"
			Get-MsolUser -All | Set-MsolUser -StrongPasswordRequired $True
			$TextboxResults.text = Get-MsolUser -All | Sort-Object DisplayName | Format-Table  DisplayName, strongpasswordrequired -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$disableStrongPasswordsForAllToolStripMenuItem_Click = {
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Disabling strong password policy for all users..."
			$textboxDetails.Text = "Get-MsolUser -All | Set-MsolUser -StrongPasswordRequired `$False"
			Get-MsolUser -All | Set-MsolUser -StrongPasswordRequired $False
			$TextboxResults.text = Get-MsolUser -All | Sort-Object DisplayName | Format-Table  DisplayName, strongpasswordrequired -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Disabling strong password policy for all users..."
			$textboxDetails.Text = "Get-MsolUser -All -TenantId $TenantText | Set-MsolUser -StrongPasswordRequired `$False -TenantId $TenantText"
			Get-MsolUser -All -TenantId $PartnerComboBox.SelectedItem.TenantID | Set-MsolUser -StrongPasswordRequired $False -TenantId $PartnerComboBox.SelectedItem.TenantID
			$TextboxResults.text = Get-MsolUser -All -TenantId $PartnerComboBox.SelectedItem.TenantID | Sort-Object DisplayName | Format-Table  DisplayName, strongpasswordrequired -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Disabling strong password policy for all users..."
			$textboxDetails.Text = "Get-MsolUser -All | Set-MsolUser -StrongPasswordRequired `$False"
			Get-MsolUser -All | Set-MsolUser -StrongPasswordRequired $False
			$TextboxResults.text = Get-MsolUser -All | Sort-Object DisplayName | Format-Table  DisplayName, strongpasswordrequired -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$resetPasswordForAUserToolStripMenuItem1_Click = {
	Do
	{
		Try
		{
			#$ResetPasswordUser = Read-Host "Enter the UPN of the user you want to reset the password for"
			$SelectUsersFormText = "Select the User you want to reset the password for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPNrpp = $SelectUsersForm_comboboxUsers
			$GlobalUPNrpp = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$GlobalUPNrpp)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			Else
			{
				$NewPassword = Read-Host "What would you like the new password to be?"
				If (!$NewPassword)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No password was entered for $GlobalUPNrpp, please enter a password", "Error")
				}
				Else
				{
					#What to do if connected to main o365 account
					If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Resetting $GlobalUPNrpp password to $NewPassword..."
						$textboxDetails.Text = "Set-MsolUserPassword –UserPrincipalName $GlobalUPNrpp –NewPassword $NewPassword -ForceChangePassword `$False"
						Set-MsolUserPassword –UserPrincipalName $GlobalUPNrpp –NewPassword $NewPassword -ForceChangePassword $False
						$TextboxResults.Text = "The password for $GlobalUPNrpp has been set to $NewPassword"
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
					#What to do if connected to partner account
					ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
					{
						$TenantText = $PartnerComboBox.text
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Resetting $GlobalUPNrpp password to $NewPassword..."
						$textboxDetails.Text = "Set-MsolUserPassword –UserPrincipalName $GlobalUPNrpp –NewPassword $NewPassword -ForceChangePassword `$False -TenantId $TenantText"
						Set-MsolUserPassword –UserPrincipalName $GlobalUPNrpp –NewPassword $NewPassword -ForceChangePassword $False -TenantId $PartnerComboBox.SelectedItem.TenantID
						$TextboxResults.Text = "The password for $GlobalUPNrpp has been set to $NewPassword"
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
					Else
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Resetting $GlobalUPNrpp password to $NewPassword..."
						$textboxDetails.Text = "Set-MsolUserPassword –UserPrincipalName $GlobalUPNrpp –NewPassword $NewPassword -ForceChangePassword `$False"
						Set-MsolUserPassword –UserPrincipalName $GlobalUPNrpp –NewPassword $NewPassword -ForceChangePassword $False
						$TextboxResults.Text = "The password for $GlobalUPNrpp has been set to $NewPassword"
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to reset another Users password?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$setPasswordToNeverExpireForAllToolStripMenuItem1_Click = {
	Try
	{
		$OUTPUT = [System.Windows.Forms.MessageBox]::Show("Are you sure you want to set everyones password to never expire?", "Warning!", 4)
		If ($OUTPUT -eq "YES")
		{
			#What to do if connected to main o365 account
			If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Setting password to never expire for all..."
				$textboxDetails.Text = "Get-MsolUser -All | Set-MsolUser –PasswordNeverExpires `$True"
				Get-MsolUser -All | Set-MsolUser –PasswordNeverExpires $True
				$TextboxResults.text = Get-MSOLUser -All | Sort-Object UserPrincipalName | Format-Table UserPrincipalName, PasswordNeverExpires -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			#What to do if connected to partner account
			ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
			{
				$TenantText = $PartnerComboBox.text
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Setting password to never expire for all..."
				$textboxDetails.Text = "Get-MsolUser -All -TenantId $TenantText | Set-MsolUser –PasswordNeverExpires `$True -TenantId $TenantText"
				Get-MsolUser -All -TenantId $PartnerComboBox.SelectedItem.TenantID | Set-MsolUser –PasswordNeverExpires $True -TenantId $PartnerComboBox.SelectedItem.TenantID
				$TextboxResults.text = Get-MSOLUser -All -TenantId $PartnerComboBox.SelectedItem.TenantID | Sort-Object UserPrincipalName | Format-Table UserPrincipalName, PasswordNeverExpires -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Setting password to never expire for all..."
				$textboxDetails.Text = "Get-MsolUser -All | Set-MsolUser –PasswordNeverExpires `$True"
				Get-MsolUser -All | Set-MsolUser –PasswordNeverExpires $True
				$TextboxResults.text = Get-MSOLUser -All | Sort-Object UserPrincipalName | Format-Table UserPrincipalName, PasswordNeverExpires -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Else
		{
			[System.Windows.Forms.MessageBox]::Show("No changes have been made", "Info")
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$setPasswordToExpireForAllToolStripMenuItem1_Click = {
	Try
	{
		$OUTPUT = [System.Windows.Forms.MessageBox]::Show("Are you sure you want to set everyones password to expire?", "Warning!", 4)
		If ($OUTPUT -eq "YES")
		{
			#What to do if connected to main o365 account
			If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Setting password to expire for all..."
				$textboxDetails.Text = "Get-MsolUser -All | Set-MsolUser –PasswordNeverExpires `$False"
				Get-MsolUser -All | Set-MsolUser –PasswordNeverExpires $False
				$TextboxResults.text = Get-MSOLUser -All | Sort-Object UserPrincipalName | Format-Table UserPrincipalName, PasswordNeverExpires -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			#What to do if connected to partner account
			ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
			{
				$TenantText = $PartnerComboBox.text
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Setting password to expire for all..."
				$textboxDetails.Text = "Get-MsolUser -All -Tenant $TenantText | Set-MsolUser –PasswordNeverExpires `$False -TenantId $TenantText"
				Get-MsolUser -All -TenantId $PartnerComboBox.SelectedItem.TenantID | Set-MsolUser –PasswordNeverExpires $False -TenantId $PartnerComboBox.SelectedItem.TenantID
				$TextboxResults.text = Get-MSOLUser -All -TenantId $PartnerComboBox.SelectedItem.TenantID | Sort-Object UserPrincipalName | Format-Table UserPrincipalName, PasswordNeverExpires -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Setting password to expire for all..."
				$textboxDetails.Text = "Get-MsolUser -All | Set-MsolUser –PasswordNeverExpires `$False"
				Get-MsolUser -All | Set-MsolUser –PasswordNeverExpires $False
				$TextboxResults.text = Get-MSOLUser -All | Sort-Object UserPrincipalName | Format-Table UserPrincipalName, PasswordNeverExpires -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Else
		{
			[System.Windows.Forms.MessageBox]::Show("No changes have been made", "Info")
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$resetPasswordForAllToolStripMenuItem_Click = {
	Try
	{
		$SetPasswordforAll = Read-Host "What password would you like to set for all users?"
		If (!$SetPasswordforAll)
		{
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("No password was entered, please enter a valid password", "Error")
		}
		Else
		{
			$OUTPUT = [System.Windows.Forms.MessageBox]::Show("Are you sure you want to change all users password to $SetPasswordforAll", "Warning!", 4)
			If ($OUTPUT -eq "YES")
			{
				#What to do if connected to main o365 account
				If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Resetting all users passwords to $SetPasswordforAll..."
					$textboxDetails.Text = "Get-MsolUser -All | ForEach-Object{ 
Set-MsolUserPassword -userPrincipalName `$_.UserPrincipalName –NewPassword $SetPasswordforAll -ForceChangePassword `$False }"
					Get-MsolUser -All | ForEach-Object{ Set-MsolUserPassword -UserPrincipalName $_.UserPrincipalName –NewPassword $SetPasswordforAll -ForceChangePassword $False }
					$TextboxResults.Text = "Password for all users has been set to $SetPasswordforAll"
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
				#What to do if connected to partner account
				ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
				{
					$TenantText = $PartnerComboBox.text
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Resetting all users passwords to $SetPasswordforAll..."
					$textboxDetails.Text = "Get-MsolUser -All -TenantId $TenantText | ForEach-Object{ 
Set-MsolUserPassword -TenantId $TenantText -userPrincipalName `$_.UserPrincipalName –NewPassword $SetPasswordforAll -ForceChangePassword `$False }"
					Get-MsolUser -All -TenantId $PartnerComboBox.SelectedItem.TenantID | ForEach-Object { Set-MsolUserPassword -TenantId $PartnerComboBox.SelectedItem.TenantID -UserPrincipalName $_.UserPrincipalName –NewPassword $SetPasswordforAll -ForceChangePassword $False }
					$TextboxResults.Text = "Password for all users has been set to $SetPasswordforAll"
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Resetting all users passwords to $SetPasswordforAll..."
					$textboxDetails.Text = "Get-MsolUser -All | ForEach-Object{ 
Set-MsolUserPassword -userPrincipalName `$_.UserPrincipalName –NewPassword $SetPasswordforAll -ForceChangePassword `$False }"
					Get-MsolUser -All | ForEach-Object{ Set-MsolUserPassword -UserPrincipalName $_.UserPrincipalName –NewPassword $SetPasswordforAll -ForceChangePassword $False }
					$TextboxResults.Text = "Password for all users has been set to $SetPasswordforAll"
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
			Else
			{
				[System.Windows.Forms.MessageBox]::Show("No user passwords have not been changed", "Info")
			}
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$setATemporaryPasswordForAllToolStripMenuItem_Click = {
	Try
	{
		$SetTempPasswordforAll = Read-Host "What password would you like to set for all users?"
		If (!$SetTempPasswordforAll)
		{
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("No password was entered, please enter a valid password", "Error")
		}
		Else
		{
			$OUTPUT = [System.Windows.Forms.MessageBox]::Show("Are you sure you want change all users passwords to $SetTempPasswordforAll", "Warning!", 4)
			If ($OUTPUT -eq "YES")
			{
				#What to do if connected to main o365 account
				If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Setting $SetTempPasswordforAll as the temporary password for all users..."
					$textboxDetails.Text = "Get-MsolUser -All | Set-MsolUserPassword –NewPassword $SetTempPasswordforAll -ForceChangePassword `$True"
					Get-MsolUser -All | Set-MsolUserPassword –NewPassword $SetTempPasswordforAll -ForceChangePassword $True
					$TextboxResults.Text = "Temporary password has been set to $SetTempPasswordforAll Please note that users will be prompted to change it upon logon"
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
				#What to do if connected to partner account
				ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
				{
					$TenantText = $PartnerComboBox.text
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Setting $SetTempPasswordforAll as the temporary password for all users..."
					$textboxDetails.Text = "Get-MsolUser -TenantId $PartnerComboBox.SelectedItem.TenantID -All | Set-MsolUserPassword -TenantId $TenantText –NewPassword $SetTempPasswordforAll -ForceChangePassword `$True"
					Get-MsolUser -TenantId $PartnerComboBox.SelectedItem.TenantID -All | Set-MsolUserPassword -TenantId $PartnerComboBox.SelectedItem.TenantID –NewPassword $SetTempPasswordforAll -ForceChangePassword $True
					$TextboxResults.Text = "Temporary password has been set to $SetTempPasswordforAll Please note that users will be prompted to change it upon logon"
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Setting $SetTempPasswordforAll as the temporary password for all users..."
					$textboxDetails.Text = "Get-MsolUser -All | Set-MsolUserPassword –NewPassword $SetTempPasswordforAll -ForceChangePassword `$True"
					Get-MsolUser -All | Set-MsolUserPassword –NewPassword $SetTempPasswordforAll -ForceChangePassword $True
					$TextboxResults.Text = "Temporary password has been set to $SetTempPasswordforAll Please note that users will be prompted to change it upon logon"
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
			Else
			{
				[System.Windows.Forms.MessageBox]::Show("No user passwords have not been changed", "Info")
			}
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
	
}

$TemporaryPasswordForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$ResetPasswordUser2 = Read-Host "Enter the UPN of the user you want to reset the password for"
			$SelectUsersFormText = "Select the User you want to reset the password for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPNrtp = $SelectUsersForm_comboboxUsers
			$GlobalUPNrtp = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$GlobalUPNrtp)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			Else
			{
				$NewPassword2 = Read-Host "What would you like the new password to be?"
				If (!$NewPassword2)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No password was entered, please enter a valid password", "Error")
				}
				Else
				{
					#What to do if connected to main o365 account
					If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Setting $NewPassword2 as the temporary password for $GlobalUPNrtp..."
						$textboxDetails.Text = "Set-MsolUserPassword –UserPrincipalName $GlobalUPNrtp –NewPassword $NewPassword2 -ForceChangePassword `$True"
						Set-MsolUserPassword –UserPrincipalName $GlobalUPNrtp –NewPassword $NewPassword2 -ForceChangePassword $True
						$TextboxResults.Text = "Temporary password has been set to $NewPassword2 Please note that $GlobalUPNrtp will be prompted to change it upon logon"
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
					#What to do if connected to partner account
					ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
					{
						$TenantText = $PartnerComboBox.text
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Setting $NewPassword2 as the temporary password for $GlobalUPNrtp..."
						$textboxDetails.Text = "Set-MsolUserPassword -TenantId $TenantText –UserPrincipalName $GlobalUPNrtp –NewPassword $NewPassword2 -ForceChangePassword `$True"
						Set-MsolUserPassword -TenantId $PartnerComboBox.SelectedItem.TenantID –UserPrincipalName $GlobalUPNrtp –NewPassword $NewPassword2 -ForceChangePassword $True
						$TextboxResults.Text = "Temporary password has been set to $NewPassword2 Please note that $GlobalUPNrtp will be prompted to change it upon logon"
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
					Else
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Setting $NewPassword2 as the temporary password for $GlobalUPNrtp..."
						$textboxDetails.Text = "Set-MsolUserPassword –UserPrincipalName $GlobalUPNrtp –NewPassword $NewPassword2 -ForceChangePassword `$True"
						Set-MsolUserPassword –UserPrincipalName $GlobalUPNrtp –NewPassword $NewPassword2 -ForceChangePassword $True
						$TextboxResults.Text = "Temporary password has been set to $NewPassword2 Please note that $GlobalUPNrtp will be prompted to change it upon logon"
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to set a temporary password for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getPasswordResetDateForAUserToolStripMenuItem_Click = {
	Try
	{
		#$GetPasswordInfoUser = Read-Host "Enter the UPN of the user you want to view the password last changed date for"
		$SelectUsersFormText = "Select the user you want to view last password changed date for"
		#Call-SelectUsersForm_psf
		Show-SelectCachedUserPrincipalName_psf
		#$GlobalUPNgpifu = $SelectUsersForm_comboboxUsers
		$GlobalUPNgpifu = $SelectCachedUserPrincipalName_comboboxUPN
		If (!$GlobalUPNgpifu)
		{
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a user", "Error")
		}
		Else
		{
			#What to do if connected to main o365 account
			If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting last password reset date for $GlobalUPNgpifu..."
				$textboxDetails.Text = "Get-MsolUser -userprincipalname $GlobalUPNgpifu | Format-List UserPrincipalName, lastpasswordchangetimestamp"
				$TextboxResults.Text = Get-MsolUser -userprincipalname $GlobalUPNgpifu | Format-List UserPrincipalName, lastpasswordchangetimestamp | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			#What to do if connected to partner account
			ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
			{
				$TenantText = $PartnerComboBox.text
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting last password reset date for $GlobalUPNgpifu..."
				$textboxDetails.Text = "Get-MsolUser -TenantId $TenantText -userprincipalname $GlobalUPNgpifu | Format-List UserPrincipalName, lastpasswordchangetimestamp"
				$TextboxResults.Text = Get-MsolUser -TenantId $PartnerComboBox.SelectedItem.TenantID -userprincipalname $GlobalUPNgpifu | Format-List UserPrincipalName, lastpasswordchangetimestamp | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting last password reset date for $GlobalUPNgpifu..."
				$textboxDetails.Text = "Get-MsolUser -userprincipalname $GlobalUPNgpifu | Format-List UserPrincipalName, lastpasswordchangetimestamp"
				$TextboxResults.Text = Get-MsolUser -userprincipalname $GlobalUPNgpifu | Format-List UserPrincipalName, lastpasswordchangetimestamp | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
	
}

$getPasswordLastResetDateForAllToolStripMenuItem_Click = {
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting last password reset date for all users..."
			$textboxDetails.Text = "Get-MsolUser -All | Sort-Object UserPrincipalName | Format-Table UserPrincipalName, lastpasswordchangetimestamp -AutoSize "
			$TextboxResults.Text = Get-MsolUser -All | Sort-Object UserPrincipalName | Format-Table UserPrincipalName, lastpasswordchangetimestamp -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting last password reset date for all users..."
			$textboxDetails.Text = "Get-MsolUser -All -TenantId $TenantText | Sort-Object UserPrincipalName | Format-Table UserPrincipalName, lastpasswordchangetimestamp -AutoSize "
			$TextboxResults.Text = Get-MsolUser -All -TenantId $PartnerComboBox.SelectedItem.TenantID | Sort-Object UserPrincipalName | Format-Table UserPrincipalName, lastpasswordchangetimestamp -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting last password reset date for all users..."
			$textboxDetails.Text = "Get-MsolUser -All | Sort-Object UserPrincipalName | Format-Table UserPrincipalName, lastpasswordchangetimestamp -AutoSize "
			$TextboxResults.Text = Get-MsolUser -All | Sort-Object UserPrincipalName | Format-Table UserPrincipalName, lastpasswordchangetimestamp -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$setPasswordToExpireForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$PasswordtoExpireforUser = Read-Host "Enter the UPN of the user you want the password to expire for"
			$SelectUsersFormText = "Select the User you want to set password to expire for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPNspte = $SelectUsersForm_comboboxUsers
			$GlobalUPNspte = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$GlobalUPNspte)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			Else
			{
				#What to do if connected to main o365 account
				If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Setting password to expire for $GlobalUPNspte..."
					$textboxDetails.Text = "Set-MsolUser -UserPrincipalName $GlobalUPNspte –PasswordNeverExpires `$False"
					Set-MsolUser -UserPrincipalName $GlobalUPNspte –PasswordNeverExpires $False
					$TextboxResults.text = Get-MSOLUser -UserPrincipalName $GlobalUPNspte | Format-List UserPrincipalName, PasswordNeverExpires | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
				#What to do if connected to partner account
				ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
				{
					$TenantText = $PartnerComboBox.text
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Setting password to expire for $GlobalUPNspte..."
					$textboxDetails.Text = "Set-MsolUser -TenantId $TenantText -UserPrincipalName $GlobalUPNspte –PasswordNeverExpires `$False"
					Set-MsolUser -TenantId $PartnerComboBox.SelectedItem.TenantID -UserPrincipalName $GlobalUPNspte –PasswordNeverExpires $False
					$TextboxResults.text = Get-MSOLUser -TenantId $PartnerComboBox.SelectedItem.TenantID -UserPrincipalName $GlobalUPNspte | Format-List UserPrincipalName, PasswordNeverExpires | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Setting password to expire for $GlobalUPNspte..."
					$textboxDetails.Text = "Set-MsolUser -UserPrincipalName $GlobalUPNspte –PasswordNeverExpires `$False"
					Set-MsolUser -UserPrincipalName $GlobalUPNspte –PasswordNeverExpires $False
					$TextboxResults.text = Get-MSOLUser -UserPrincipalName $GlobalUPNspte | Format-List UserPrincipalName, PasswordNeverExpires | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to set the password to expire for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$setPasswordToNeverExpireForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$PasswordtoNeverExpireforUser = Read-Host "Enter the UPN of the user you want the password to never expire for"
			$SelectUsersFormText = "Select the User you want to set the password to never expire"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$PasswordtoNeverExpireforUser = $SelectUsersForm_comboboxUsers
			$PasswordtoNeverExpireforUser = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$PasswordtoNeverExpireforUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			Else
			{
				#What to do if connected to main o365 account
				If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Setting password to never expire for $PasswordtoNeverExpireforUser..."
					$textboxDetails.Text = "Set-MsolUser -UserPrincipalName $PasswordtoNeverExpireforUser –PasswordNeverExpires `$True"
					Set-MsolUser -UserPrincipalName $PasswordtoNeverExpireforUser –PasswordNeverExpires $True
					$TextboxResults.text = Get-MSOLUser -UserPrincipalName $PasswordtoNeverExpireforUser | Format-List UserPrincipalName, PasswordNeverExpires | Out-String -Width 2147483647
					
				}
				#What to do if connected to partner account
				ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
				{
					$TenantText = $PartnerComboBox.text
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Setting password to never expire for $PasswordtoNeverExpireforUser..."
					$textboxDetails.Text = "Set-MsolUser -TenantId $TenantText -UserPrincipalName $PasswordtoNeverExpireforUser –PasswordNeverExpires `$True"
					Set-MsolUser -TenantId $PartnerComboBox.SelectedItem.TenantID -UserPrincipalName $PasswordtoNeverExpireforUser –PasswordNeverExpires $True
					$TextboxResults.text = Get-MSOLUser -TenantId $PartnerComboBox.SelectedItem.TenantID -UserPrincipalName $PasswordtoNeverExpireforUser | Format-List UserPrincipalName, PasswordNeverExpires | Out-String -Width 2147483647
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Setting password to never expire for $PasswordtoNeverExpireforUser..."
					$textboxDetails.Text = "Set-MsolUser -UserPrincipalName $PasswordtoNeverExpireforUser –PasswordNeverExpires `$True"
					Set-MsolUser -UserPrincipalName $PasswordtoNeverExpireforUser –PasswordNeverExpires $True
					$TextboxResults.text = Get-MSOLUser -UserPrincipalName $PasswordtoNeverExpireforUser | Format-List UserPrincipalName, PasswordNeverExpires | Out-String -Width 2147483647
					
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to set the password to never expire for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getUsersWhosPasswordNeverExpiresToolStripMenuItem_Click = {
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting users where the password is set to never expire..."
			$textboxDetails.Text = "Get-MsolUser -All | Where-Object { `$_.PasswordNeverExpires -eq `$True } | Sort-Object UserPrincipalName | Format-Table UserPrincipalName, PasswordNeverExpires"
			$TextboxResults.text = Get-MsolUser -All | Where-Object { $_.PasswordNeverExpires -eq $True } | Sort-Object UserPrincipalName | Format-Table UserPrincipalName, PasswordNeverExpires | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting users where the password is set to never expire..."
			$textboxDetails.Text = "Get-MsolUser -All -TenantId $TenantText | Where-Object { `$_.PasswordNeverExpires -eq `$True } | Sort-Object UserPrincipalName | Format-Table UserPrincipalName, PasswordNeverExpires"
			$TextboxResults.text = Get-MsolUser -All -TenantId $PartnerComboBox.SelectedItem.TenantID | Where-Object { $_.PasswordNeverExpires -eq $True } | Sort-Object UserPrincipalName | Format-Table UserPrincipalName, PasswordNeverExpires | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting users where the password is set to never expire..."
			$textboxDetails.Text = "Get-MsolUser -All | Where-Object { `$_.PasswordNeverExpires -eq `$True } | Sort-Object UserPrincipalName | Format-Table UserPrincipalName, PasswordNeverExpires"
			$TextboxResults.text = Get-MsolUser -All | Where-Object { $_.PasswordNeverExpires -eq $True } | Sort-Object UserPrincipalName | Format-Table UserPrincipalName, PasswordNeverExpires | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getUsersWhosPasswordWillExpireToolStripMenuItem_Click = {
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting users where the password is set to expire..."
			$textboxDetails.Text = "Get-MsolUser -All | Where-Object { `$_.PasswordNeverExpires -eq `$False } | Sort-Object UserPrincipalName | Format-Table UserPrincipalName, PasswordNeverExpires"
			$TextboxResults.text = Get-MsolUser -All | Where-Object { $_.PasswordNeverExpires -eq $False } | Sort-Object UserPrincipalName | Format-Table UserPrincipalName, PasswordNeverExpires | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting users where the password is set to expire..."
			$textboxDetails.Text = "Get-MsolUser -All -TenantId $TenantText | Where-Object { `$_.PasswordNeverExpires -eq `$False } | Sort-Object UserPrincipalName | Format-Table UserPrincipalName, PasswordNeverExpires"
			$TextboxResults.text = Get-MsolUser -All -TenantId $PartnerComboBox.SelectedItem.TenantID | Where-Object { $_.PasswordNeverExpires -eq $False } | Sort-Object UserPrincipalName | Format-Table UserPrincipalName, PasswordNeverExpires | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
			}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting users where the password is set to expire..."
			$textboxDetails.Text = "Get-MsolUser -All | Where-Object { `$_.PasswordNeverExpires -eq `$False } | Sort-Object UserPrincipalName | Format-Table UserPrincipalName, PasswordNeverExpires"
			$TextboxResults.text = Get-MsolUser -All | Where-Object { $_.PasswordNeverExpires -eq $False } | Sort-Object UserPrincipalName | Format-Table UserPrincipalName, PasswordNeverExpires | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getPasswordLastResetDateForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$GetPasswordInfoUser = Read-Host "Enter the UPN of the user you want to view the password last changed date for"
			$SelectUsersFormText = "Select the User you want to view the password last changed date for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GetPasswordInfoUser = $SelectUsersForm_comboboxUsers
			$GetPasswordInfoUser = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$GetPasswordInfoUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			Else
			{
				#What to do if connected to main o365 account
				If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Getting last password reset date for $GetPasswordInfoUser..."
					$textboxDetails.Text = "Get-MsolUser -userprincipalname $GetPasswordInfoUser | Format-List UserPrincipalName, lastpasswordchangetimestamp"
					$TextboxResults.Text = Get-MsolUser -userprincipalname $GetPasswordInfoUser | Format-List UserPrincipalName, lastpasswordchangetimestamp | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
				#What to do if connected to partner account
				ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
				{
					$TenantText = $PartnerComboBox.text
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Getting last password reset date for $GetPasswordInfoUser..."
					$textboxDetails.Text = "Get-MsolUser -TenantId $TenantText -UserPrincipalName $GetPasswordInfoUser | Format-List UserPrincipalName, lastpasswordchangetimestamp"
					$TextboxResults.Text = Get-MsolUser -TenantId $PartnerComboBox.SelectedItem.TenantID -userprincipalname $GetPasswordInfoUser | Format-List UserPrincipalName, lastpasswordchangetimestamp | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Getting last password reset date for $GetPasswordInfoUser..."
					$textboxDetails.Text = "Get-MsolUser -userprincipalname $GetPasswordInfoUser | Format-List UserPrincipalName, lastpasswordchangetimestamp"
					$TextboxResults.Text = Get-MsolUser -userprincipalname $GetPasswordInfoUser | Format-List UserPrincipalName, lastpasswordchangetimestamp | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get the last password reset date for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getUsersNextPasswordResetDateToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$NextUserResetDateUser = Read-Host "Enter the UPN of the user"
			$SelectUsersFormText = "Select the User you want to view the next password reset date for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$NextUserResetDateUser = $SelectUsersForm_comboboxUsers
			$NextUserResetDateUser = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$NextUserResetDateUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			Else
			{
				$VarDate = Read-Host "Enter days before passwords expires. EX: 90"
				If (!$VarDate)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No number was entered, please enter a valid number", "Error")
				}
				Else
				{
					#What to do if connected to main o365 account
					If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Getting $NextUserResetDateUser next password reset date..."
						$textboxDetails.Text = "(Get-MSOLUser -All -userprincipalname $NextUserResetDateUser).lastpasswordchangetimestamp.adddays($VarDate) | Format-List DateTime"
						$TextboxResults.Text = (Get-MSOLUser -All -userprincipalname $NextUserResetDateUser).lastpasswordchangetimestamp.adddays($VarDate) | Format-List DateTime | Out-String -Width 2147483647
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
					#What to do if connected to partner account
					ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
					{
						$TenantText = $PartnerComboBox.text
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Getting $NextUserResetDateUser next password reset date..."
						$textboxDetails.Text = "(Get-MSOLUser -All -TenantId $TenantText -userprincipalname $NextUserResetDateUser).lastpasswordchangetimestamp.adddays($VarDate) | Format-List DateTime"
						$TextboxResults.Text = (Get-MsolUser -All -TenantId $PartnerComboBox.SelectedItem.TenantID -userprincipalname $NextUserResetDateUser).lastpasswordchangetimestamp.adddays($VarDate) | Format-List DateTime | Out-String -Width 2147483647
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
					Else
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Getting $NextUserResetDateUser next password reset date..."
						$textboxDetails.Text = "(Get-MSOLUser -All -userprincipalname $NextUserResetDateUser).lastpasswordchangetimestamp.adddays($VarDate) | Format-List DateTime"
						$TextboxResults.Text = (Get-MSOLUser -All -userprincipalname $NextUserResetDateUser).lastpasswordchangetimestamp.adddays($VarDate) | Format-List DateTime | Out-String -Width 2147483647
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get the next password reset date for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
}

#Mailbox Permissions

$addFullPermissionsToAMailboxToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$SelectUsersFormText = "Select the User you are changing permissions for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedDisplayNames_psf
			#$mailboxAccess = $SelectUsersForm_comboboxUsers
			$mailboxAccess = $SelectCachedDisplayNames_comboboxNames
			#$mailboxAccess = read-host "Mailbox you want to give full-access to"
			If (!$mailboxAccess)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			Else
			{
				$SelectUsersFormText = "Select the User you want to give full access to $mailboxAccess"
				#Call-SelectUsersForm_psf
				Show-SelectCachedDisplayNames_psf
				#$mailboxUser = $SelectUsersForm_comboboxUsers
				$mailboxUser = $SelectCachedDisplayNames_comboboxNames
				#$mailboxUser = read-host "Enter the UPN of the user that will have full access"
				If (!$mailboxUser)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Assigning full access permissions to $mailboxUser for the account $mailboxAccess..."
					$textboxDetails.Text = "Add-MailboxPermission -identity $mailboxAccess -User $mailboxUser -AccessRights FullAccess -InheritanceType All"
					$TextboxResults.text = Add-MailboxPermission -identity $mailboxAccess -User $mailboxUser -AccessRights FullAccess -InheritanceType All | Format-List | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to modify permissions for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$addSendAsPermissionToAMailboxToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$SendAsAccess = read-host "Mailbox you want to give Send As access to"
			$SelectUsersFormText = "Select the User you want to modify Send As access permissions for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedDisplayNames_psf
			#$SendAsAccess = $SelectUsersForm_comboboxUsers
			$SendAsAccess = $SelectCachedDisplayNames_comboboxNames
			If (!$SendAsAccess)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			Else
			{
				#$mailboxUserAccess = read-host "Enter the UPN of the user that will have Send As access"
				$SelectUsersFormText = "Select the User you want to give Send As access to $SendAsAccess"
				#Call-SelectUsersForm_psf
				Show-SelectCachedDisplayNames_psf
				#$mailboxUserAccess = $SelectUsersForm_comboboxUsers
				$mailboxUserAccess = $SelectCachedDisplayNames_comboboxNames
				If (!$mailboxUserAccess)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Assigning Send-As access to $mailboxUserAccess for the account $SendAsAccess..."
					$textboxDetails.Text = "Add-RecipientPermission $SendAsAccess -Trustee $mailboxUserAccess -AccessRights SendAs"
					$TextboxResults.text = Add-RecipientPermission $SendAsAccess -Trustee $mailboxUserAccess -AccessRights SendAs | Format-List | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to modify permissions for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$assignSendOnBehalfPermissionsForAMailboxToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$SendonBehalfof = read-host "Mailbox you want to give Send on Behalf access to"
			$SelectUsersFormText = "Select the User you want to modify Send on Behalf permissions for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedDisplayNames_psf
			#$SendonBehalfof = $SelectUsersForm_comboboxUsers
			$SendonBehalfof = $SelectCachedDisplayNames_comboboxNames
			If (!$SendonBehalfof)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			Else
			{
				#$mailboxUserSendonBehalfAccess = read-host "Enter the UPN of the user that will have Send As access"
				$SelectUsersFormText = "Select the User you want to give Send on Behalf permissions for $SendonBehalfof"
				#Call-SelectUsersForm_psf
				Show-SelectCachedDisplayNames_psf
				#$mailboxUserSendonBehalfAccess = $SelectUsersForm_comboboxUsers
				$mailboxUserSendonBehalfAccess = $SelectCachedDisplayNames_comboboxNames
				If (!$mailboxUserSendonBehalfAccess)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a user", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Assigning Send On Behalf of permissions to $mailboxUserSendonBehalfAccess for the account $SendonBehalfof..."
					$textboxDetails.Text = "Set-Mailbox -Identity $SendonBehalfof -GrantSendOnBehalfTo $mailboxUserSendonBehalfAccess"
					Set-Mailbox -Identity $SendonBehalfof -GrantSendOnBehalfTo $mailboxUserSendonBehalfAccess
					$TextboxResults.text = Get-Mailbox -Identity $SendonBehalfof | Format-List Identity, GrantSendOnBehalfTo | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to modify permissions for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$displayMailboxPermissionsForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$MailboxUserFullAccessPermission = Read-Host "Enter the UPN of the user want to view Full Access permissions for"
			$SelectUsersFormText = "Select the user you want to view Full Access permissions for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedDisplayNames_psf
			#$MailboxUserFullAccessPermission = $SelectUsersForm_comboboxUsers
			$MailboxUserFullAccessPermission = $SelectCachedDisplayNames_comboboxNames
			If (!$MailboxUserFullAccessPermission)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a user", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting Full Access permissions for $MailboxUserFullAccessPermission..."
				$textboxDetails.Text = "Get-MailboxPermission $MailboxUserFullAccessPermission | Where-Object { (`$_.IsInherited -eq `$False) -and (`$_.User -notcontains 'NT AUTHORITY\SELF') } | Sort-Object User | Format-Table -AutoSize"
				$TextboxResults.text = Get-MailboxPermission $MailboxUserFullAccessPermission | Where-Object { ($_.IsInherited -eq $False) -and ($_.User -notcontains 'NT AUTHORITY\SELF') } | Sort-Object User | Format-Table -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to view Mailboxes permission for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

<# $displaySendAsPermissionForAMailboxToolStripMenuItem_Click = {
	#$MailboxUserSendAsPermission = Read-Host "Enter the UPN of the user you want to view Send As permissions for"
	$SelectUsersFormText = "Select the user you want to view Send As permissions for"
	Call-SelectUsersForm_psf
	$MailboxUserSendAsPermission = $SelectUsersForm_comboboxUsers
	try
	{
		$TextboxResults.Text = "Getting Send As Permissions for $MailboxUserSendAsPermission..."
		$textboxDetails.Text = "Get-RecipientPermission $MailboxUserSendAsPermission | Where-Object { (`$_.IsInherited -eq `$False) -and -not (`$_.Trustee -like 'NT AUTHORITY\SELF') } | Sort-Object User | Format-Table -AutoSize"
		$TextboxResults.text = Get-RecipientPermission $MailboxUserSendAsPermission | Where-Object { ($_.IsInherited -eq $False) -and -not ($_.Trustee -like "NT AUTHORITY\SELF") } | Sort-Object User | Format-Table -AutoSize | Out-String
	}
	Catch
	{
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}

}
#>

<#
$displaySendOnBehalfPermissionsForMailboxToolStripMenuItem_Click = {
	#$MailboxUserSendonPermission = Read-Host "Enter the UPN of the user you want to view Send On Behalf Of permission for"
	$SelectUsersFormText = "Select the user you want to view Send on Behalf permissions for"
	Call-SelectUsersForm_psf
	$MailboxUserSendonPermission = $SelectUsersForm_comboboxUsers
	try
	{
		$TextboxResults.Text = "Getting Send On Behalf permissions for $MailboxUserSendonPermission..."
		$textboxDetails.Text = "Get-RecipientPermission $MailboxUserSendonPermission | Where-Object { (`$_.IsInherited -eq `$False) -and -not (`$_.Trustee -like 'NT AUTHORITY\SELF') } | Sort-Object User | Format-Table"
		$TextboxResults.text = Get-RecipientPermission $MailboxUserSendonPermission | Where-Object { ($_.IsInherited -eq $False) -and -not ($_.Trustee -like "NT AUTHORITY\SELF") } | Sort-Object User | Format-Table | Out-String
	}
	Catch
	{
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}
#>

$removeFullAccessPermissionsForAMailboxToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$UserRemoveFullAccessRights = Read-Host "What user mailbox would you like modify Full Access rights to"
			$SelectUsersFormText = "Select the User you want to modify Full Access rights for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedDisplayNames_psf
			#$UserRemoveFullAccessRights = $SelectUsersForm_comboboxUsers
			$UserRemoveFullAccessRights = $SelectCachedDisplayNames_comboboxNames
			If (!$UserRemoveFullAccessRights)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			Else
			{
				#$RemoveFullAccessRightsUser = Read-Host "Enter the UPN of the user you want to remove"
				$FullPermissionsText = "Select the User you want to remove"
				Show-SelectUserFullPermissions_psf
				$RemoveFullAccessRightsUser = $SelectUserFullPermissions_comboboxSelectFullAccessUsers
				If (!$RemoveFullAccessRightsUser)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Removing Full Access Permissions for $RemoveFullAccessRightsUser on account $UserRemoveFullAccessRights..."
					$textboxDetails.Text = "Remove-MailboxPermission  $UserRemoveFullAccessRights -User $RemoveFullAccessRightsUser -AccessRights FullAccess -Confirm:`$False -ea 1"
					Remove-MailboxPermission  $UserRemoveFullAccessRights -User $RemoveFullAccessRightsUser -AccessRights FullAccess -Confirm:$False -ea 1
					$TextboxResults.text = Get-MailboxPermission $UserRemoveFullAccessRights | Where-Object { ($_.IsInherited -eq $False) -and -not ($_.User -like "NT AUTHORITY\SELF") } | Sort-Object User | Format-Table | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to modify permissions for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$revokeSendAsPermissionsForAMailboxToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$UserDeleteSendAsAccessOn = Read-Host "What user mailbox would you like to modify Send As permission for?"
			$SelectUsersFormText = "Select the User you want to modify Send As permissions for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedDisplayNames_psf
			#$GlobalUserCurrentPermissions = $SelectUsersForm_comboboxUsers
			$GlobalUserCurrentPermissions = $SelectCachedDisplayNames_comboboxNames
			If (!$GlobalUserCurrentPermissions)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			Else
			{
				#$UserDeleteSendAsAccess = Read-Host "Enter the UPN of the user you want to remove Send As access to?"
				$CurrentMailboxPermissionsText = "Select the user you want to remove Send As access to"
				Show-SelectExistingMailboxPermissions_psf
				$UserDeleteSendAsAccess = $SelectExistingMailboxPermissions_comboboxSelectCurrentPermissions
				If (!$UserDeleteSendAsAccess)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Removing Send As permission for $UserDeleteSendAsAccess on account $GlobalUserCurrentPermissions..."
					$textboxDetails.Text = "Remove-RecipientPermission $GlobalUserCurrentPermissions -AccessRights SendAs -Trustee $UserDeleteSendAsAccess"
					$TextboxResults.Text = Remove-RecipientPermission $GlobalUserCurrentPermissions -AccessRights SendAs -Trustee $UserDeleteSendAsAccess | Sort-Object User | Format-Table | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
					
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to modify permissions for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$viewAllMailboxesAUserHasFullAccessToToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$ViewAllFullAccess = Read-Host "Enter the UPN of the account you want to view"
			$SelectUsersFormText = "Select the User you want to view"
			#Call-SelectUsersForm_psf
			Show-SelectCachedDisplayNames_psf
			#$ViewAllFullAccess = $SelectUsersForm_comboboxUsers
			$ViewAllFullAccess = $SelectCachedDisplayNames_comboboxNames
			If (!$ViewAllFullAccess)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting all mailboxes $ViewAllFullAccess has Full Access permissions to..."
				$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Get-MailboxPermission -User $ViewAllFullAccess |  Sort-Object Identity | Format-Table"
				$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Get-MailboxPermission -User $ViewAllFullAccess | Sort-Object Identity | Format-Table | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to view all Mailboxes another user has Full Access to?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$viewAllMailboxesAUserHasSendAsPermissionsToToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$ViewSendAsAccess = Read-Host "Enter the UPN of the account you want to view"
			$SelectUsersFormText = "Select the user you want to view all accounts they have Send As permissions for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedDisplayNames_psf
			$ViewSendAsAccess = $SelectUsersForm_comboboxUsers
			$ViewSendAsAccess = $SelectCachedDisplayNames_comboboxNames
			If (!$ViewSendAsAccess)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a user", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting all mailboxes $ViewSendAsAccess has Send As permissions to..."
				$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Get-RecipientPermission -Trustee $ViewSendAsAccess | Sort-Object Identity | Format-Table"
				$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Get-RecipientPermission -Trustee $ViewSendAsAccess | Sort-Object Identity | Format-Table | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to view all Mailboxes another user has Send As Permission to?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$viewAllMailboxesAUserHasSendOnBehaldPermissionsToToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$ViewSendonBehalf = Read-Host "Enter the Name of the account you want to view"
			$SelectUsersFormText = "Select the User you want to view all accounts they have Send On Behalf Of permissiosn for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedDisplayNames_psf
			#$ViewSendonBehalf = $SelectUsersForm_comboboxUsers
			$ViewSendonBehalf = $SelectCachedDisplayNames_comboboxNames
			If (!$ViewSendonBehalf)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting all mailboxes $ViewSendonBehalf has Send On Behalf permissions to..."
				$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Where-Object { `$_.GrantSendOnBehalfTo -match $ViewSendonBehalf } | Sort-Object DisplayName | Format-Table DisplayName, GrantSendOnBehalfTo, PrimarySmtpAddress, RecipientType"
				$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Where-Object { $_.GrantSendOnBehalfTo -match $ViewSendonBehalf } | Sort-Object DisplayName | Format-Table DisplayName, GrantSendOnBehalfTo, PrimarySmtpAddress, RecipientType | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to view all Mailboxes another user has Send on Behalf to?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$removeAllPermissionsToAMailboxToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$UserDeleteAllAccessOn = Read-Host "What user mailbox would you like to modify permissions for?"
			$SelectUsersFormText = "Select the User you want to modify permissions for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedDisplayNames_psf
			#$GlobalUserCurrentPermissions = $SelectUsersForm_comboboxUsers
			$GlobalUserCurrentPermissions = $SelectCachedDisplayNames_comboboxNames
			If (!$GlobalUserCurrentPermissions)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			Else
			{
				#$UserDeleteAllAccess = Read-Host "Enter the UPN of the user you want to remove access to?"
				$CurrentMailboxPermissionsText = "Select the User you want to remove access to"
				Show-SelectExistingMailboxPermissions_psf
				$UserDeleteAllAccess = $SelectExistingMailboxPermissions_comboboxSelectCurrentPermissions
				If (!$UserDeleteAllAccess)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Removing all permissions for $UserDeleteAllAccess on account $GlobalUserCurrentPermissions..."
					$textboxDetails.Text = "Remove-MailboxPermission -Identity $GlobalUserCurrentPermissions -User $UserDeleteAllAccess -AccessRights FullAccess -InheritanceType All"
					Remove-MailboxPermission -Identity $GlobalUserCurrentPermissions -User $UserDeleteAllAccess -AccessRights FullAccess -InheritanceType All
					$TextboxResults.Text = "Getting mailbox permissions for $GlobalUserCurrentPermissions..."
					$TextboxResults.Text = Get-MailboxPermission -Identity $GlobalUserCurrentPermissions | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to modify permissions for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

#Forwarding

$getAllUsersForwardinToInternalRecipientToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting all users forwarding to internal users..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Where-Object { `$_.ForwardingAddress -ne `$Null -and `$_.RecipientType -eq 'UserMailbox' } | Sort-Object Name | Format-Table Name, ForwardingAddress, DeliverToMailboxAndForward -AutoSize"
		$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Where-Object { $_.ForwardingAddress -ne $Null -and $_.RecipientType -eq "UserMailbox" } | Sort-Object Name | Format-Table Name, ForwardingAddress, DeliverToMailboxAndForward -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		$FormO365AdministrationCenter.Cursor = 'Default'
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$forwardToInternalRecipientAndDontSaveLocalCopyToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$UsertoFWD2 = Read-Host "Enter the users UPN, Display Name, Alias, or Email Address of the user to forward"
			$SelectUsersFormText = "Select the user you want to modify fowarding for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedDisplayNames_psf
			#$UsertoFWD2 = $SelectUsersForm_comboboxUsers
			$UsertoFWD2 = $SelectCachedDisplayNames_comboboxNames
			If (!$UsertoFWD2)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a user", "Error")
			}
			Else
			{
				#$Fwd2me2 = Read-Host "Enter the Name, Display Name, Alias, or Email Address of the user to forward to"
				$SelectUsersFormText = "Select the User you want $UsertoFWD2 to forward to"
				#Call-SelectUsersForm_psf
				Show-SelectCachedDisplayNames_psf
				#$Fwd2me2 = $SelectUsersForm_comboboxUsers
				$Fwd2me2 = $SelectCachedDisplayNames_comboboxNames
				If (!$Fwd2me2)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Setting up forwarding from $UsertoFWD2 to $Fwd2me2..."
					$textboxDetails.Text = "Set-Mailbox  $UsertoFWD2 -ForwardingAddress $Fwd2me2 -DeliverToMailboxAndForward `$False"
					Set-Mailbox  $UsertoFWD2 -ForwardingAddress $Fwd2me2 -DeliverToMailboxAndForward $False
					$TextboxResults.Text = Get-Mailbox $UsertoFWD2 | Format-List Name, DeliverToMailboxAndForward, ForwardingAddress | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to modify forwarding for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$forwardToExternalAddressAndSaveLocalCopyToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$UsertoFWD3 = Read-Host "Enter the users UPN, Display Name, Alias, or Email Address of the user to forward"
			$SelectUsersFormText = "Select the User you want to modify fowarding for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedDisplayNames_psf
			#$UsertoFWD3 = $SelectUsersForm_comboboxUsers
			$UsertoFWD3 = $SelectCachedDisplayNames_comboboxNames
			If (!$UsertoFWD3)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			Else
			{
				$Fwd2me2External = Read-Host "Enter the external Email Address to forward to"
				If (!$Fwd2me2External)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No external E-mail Address was entered, please enter a valid E-mail Address", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Setting up forwarding from $UsertoFWD3 to $Fwd2me2External..."
					$textboxDetails.Text = "Set-Mailbox $UsertoFWD3 -ForwardingsmtpAddress $Fwd2me2External -DeliverToMailboxAndForward `$true"
					Set-Mailbox $UsertoFWD3 -ForwardingsmtpAddress $Fwd2me2External -DeliverToMailboxAndForward $true
					$TextboxResults.Text = Get-Mailbox $UsertoFWD3 | Format-List Name, DeliverToMailboxAndForward, ForwardingSmtpAddress | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to modify forwarding for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$forwardToExternalAddressAndDontSaveLocalCopyToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$UsertoFWD4 = Read-Host "Enter the users UPN, Display Name, Alias, or Email Address of the user to forward"
			$SelectUsersFormText = "Select the User you want to modify fowarding for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedDisplayNames_psf
			#$UsertoFWD4 = $SelectUsersForm_comboboxUsers
			$UsertoFWD4 = $SelectCachedDisplayNames_comboboxNames
			If (!$UsertoFWD4)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			Else
			{
				$Fwd2me2External2 = Read-Host "Enter the external Email Address to forward to"
				If (!$Fwd2me2External2)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No external E-mail Address was entered, please enter a valid external E-mail Address", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Setting up forwarding from $UsertoFWD4 to $Fwd2me2External2..."
					$textboxDetails.Text = "Set-Mailbox $UsertoFWD4 -ForwardingsmtpAddress $Fwd2me2External2 -DeliverToMailboxAndForward `$False"
					Set-Mailbox $UsertoFWD4 -ForwardingsmtpAddress $Fwd2me2External2 -DeliverToMailboxAndForward $False
					$TextboxResults.Text = Get-Mailbox $UsertoFWD4 | Format-List Name, DeliverToMailboxAndForward, ForwardingSmtpAddress | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to modify forwarding for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getForwardingInfoForAUserToolStripMenuItem_Click = {
	Do
	{
		try
		{
			#$UserFwdInfo = Read-Host "Enter the users UPN, Display Name, Alias, or Email Address of the user"
			$SelectUsersFormText = "Select the user you want view Forwarding information for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedDisplayNames_psf
			#$UserFwdInfo = $SelectUsersForm_comboboxUsers
			$UserFwdInfo = $SelectCachedDisplayNames_comboboxNames
			If (!$UserFwdInfo)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a user", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting forwarding info for $UserFwdInfo..."
				$textboxDetails.Text = "Get-Mailbox $UserFwdInfo | Format-List Name, DeliverToMailboxAndForward, ForwardingAddress, ForwardingSmtpAddress"
				$TextboxResults.Text = Get-Mailbox $UserFwdInfo | Format-List Name, DeliverToMailboxAndForward, ForwardingAddress, ForwardingSmtpAddress | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get forwarding information for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$removeExternalForwadingForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$RemoveFWDfromUserExternal = Read-Host "Enter the users UPN, Display Name, Alias, or Email Address"
			$SelectUsersWithForwardingFormText = "Select the user you want remove forwarding for"
			Show-SelectExternalUsersWithForwarding_psf
			$RemoveFWDfromUserExternal = $SelectExternalUsersWithForwarding_comboboxUsersWithForwarding
			If (!$RemoveFWDfromUserExternal)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a user", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Removing all external forwarding from $RemoveFWDfromUserExternal..."
				$textboxDetails.Text = "Set-Mailbox $RemoveFWDfromUserExternal -ForwardingSmtpAddress `$Null"
				Set-Mailbox $RemoveFWDfromUserExternal -ForwardingSmtpAddress $Null
				$TextboxResults.Text = Get-Mailbox $RemoveFWDfromUserExternal | Sort-Object Name | Format-Table Name, DeliverToMailboxAndForward, ForwardingSmtpAddress -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to remove all external forwarding for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$removeAllForwardingForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$RemoveAllFWDforUser = Read-Host "Enter the users UPN, Display Name, Alias, or Email Address"
			$SelectUsersAllForwaringFormText = "Select the user you want to remove forwarding for"
			Show-SelectUsersAnyForwarding_psf
			$RemoveAllFWDforUser = $SelectUsersForm_comboboxUsers
			If (!$RemoveAllFWDforUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a user", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Removing all forwarding from $RemoveAllFWDforUser..."
				$textboxDetails.Text = "Set-Mailbox $RemoveAllFWDforUser -ForwardingAddress `$Null -ForwardingSmtpAddress `$Null"
				Set-Mailbox $RemoveAllFWDforUser -ForwardingAddress $Null -ForwardingSmtpAddress $Null
				$TextboxResults.Text = Get-Mailbox $RemoveAllFWDforUser | Format-List Name, DeliverToMailboxAndForward, ForwardingAddress, ForwardingSmtpAddress | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to remove all forwarding another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$removeInternalForwardingForUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$RemoveFWDfromUser = Read-Host "Enter the users UPN, Display Name, Alias, or Email Address"
			$SelectUsersInternalForwaringFormText = "Select the User to remove forwarding for"
			Show-SelectUsersInternalForwarding_psf
			$RemoveFWDfromUser = $SelectUsersInternalForwarding_comboboxUsersInternalForwarding
			If (!$RemoveFWDfromUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Removing all internal forwarding from $RemoveFWDfromUser..."
				$textboxDetails.Text = "Set-Mailbox $RemoveFWDfromUser -ForwardingAddress `$Null"
				Set-Mailbox $RemoveFWDfromUser -ForwardingAddress $Null
				$TextboxResults.Text = Get-Mailbox $RemoveFWDfromUser | Format-List Name, DeliverToMailboxAndForward, ForwardingAddress | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to remove all internal forwarding another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$forwardToInternalRecipientAndSaveLocalCopyToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$UsertoFWD = Read-Host "Enter the users UPN, Display Name, Alias, or Email Address of the user to forward"
			$SelectUsersFormText = "Select the User you want to modify fowarding for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedDisplayNames_psf
			#$UsertoFWD = $SelectUsersForm_comboboxUsers
			$UsertoFWD = $SelectCachedDisplayNames_comboboxNames
			If (!$UsertoFWD)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			Else
			{
				#$Fwd2me = Read-Host "Enter the Name, Display Name, Alias, or Email Address of the user to forward to"
				$SelectUsersFormText = "Select the User you want to $UsertoFWD to forward to"
				#Call-SelectUsersForm_psf
				Show-SelectCachedDisplayNames_psf
				#$Fwd2me = $SelectUsersForm_comboboxUsers
				$Fwd2me = $SelectCachedDisplayNames_comboboxNames
				If (!$Fwd2me)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Setting up forwarding from $UsertoFWD to $Fwd2me..."
					$textboxDetails.Text = "Set-Mailbox  $UsertoFWD -ForwardingAddress $Fwd2me -DeliverToMailboxAndForward `$True"
					Set-Mailbox  $UsertoFWD -ForwardingAddress $Fwd2me -DeliverToMailboxAndForward $True
					$TextboxResults.Text = Get-Mailbox $UsertoFWD | Format-List Name, DeliverToMailboxAndForward, ForwardingAddress | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to modify forwarding for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getAllUsersForwardingToExternalRecipientToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting all users forwarding to external users..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Where-Object { `$_.ForwardingSmtpAddress -ne `$Null -and `$_.RecipientType -eq 'UserMailbox' } | Sort-Object Name | Format-Table Name, DeliverToMailboxAndForward, ForwardingSmtpAddress -AutoSize"
		$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Where-Object { $_.ForwardingSmtpAddress -ne $Null -and $_.RecipientType -eq "UserMailbox" } | Sort-Object Name | Format-Table Name, DeliverToMailboxAndForward, ForwardingSmtpAddress -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
	
}

$removeAllForwardingForAllUsersToolStripMenuItem_Click = {
	Try
	{
		$OUTPUT = [System.Windows.Forms.MessageBox]::Show("Are you sure you want to remove all forwarding from all users?", "Warning!", 4)
		If ($OUTPUT -eq "YES")
		{
			Try
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Removing all forwarding from all users..."
				$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Where-Object { `$_.RecipientType -eq 'UserMailbox' } | Set-Mailbox -ForwardingAddress `$Null -ForwardingSmtpAddress `$Null"
				$AllMailboxes = Get-Mailbox -ResultSize unlimited | Where-Object { $_.RecipientType -eq "UserMailbox" } | Set-Mailbox -ForwardingAddress $Null -ForwardingSmtpAddress $Null
				$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Where-Object { $_.RecipientType -eq "UserMailbox" } | Sort-Object Name | Format-Table Name, DeliverToMailboxAndForward, ForwardingAddress, ForwardingSmtpAddress -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			Catch
			{
				$FormO365AdministrationCenter.Cursor = 'Default'
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("$_", "Error")
			}
		}
		Else
		{
			[System.Windows.Forms.MessageBox]::Show("All users forwarding has not been changed", "Info")
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$removeExternalForwardingForAllUsersToolStripMenuItem_Click = {
	Try
	{
		$OUTPUT = [System.Windows.Forms.MessageBox]::Show("Are you sure you want to remove external forwarding for all users?", "Warning!", 4)
		If ($OUTPUT -eq "YES")
		{
			Try
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Removing all external forwarding from all users..."
				$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Where-Object { `$_.RecipientType -eq 'UserMailbox' } | Set-Mailbox -ForwardingSmtpAddress `$Null"
				Get-Mailbox -ResultSize unlimited | Where-Object { $_.RecipientType -eq "UserMailbox" } | Set-Mailbox -ForwardingSmtpAddress $Null
				$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Where-Object { $_.RecipientType -eq "UserMailbox" } | Sort-Object Name | Format-Table Name, DeliverToMailboxAndForward, ForwardingSmtpAddress -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			Catch
			{
				$FormO365AdministrationCenter.Cursor = 'Default'
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("$_", "Error")
			}
		}
		Else
		{
			[System.Windows.Forms.MessageBox]::Show("External forwarding for all users has not been changed", "Info")
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
	
}

$removeInternalForwardingForAllUsersToolStripMenuItem_Click = {
	Try
	{
		$OUTPUT = [System.Windows.Forms.MessageBox]::Show("Are you sure you want to remove internal forwarding for all users?", "Warning!", 4)
		If ($OUTPUT -eq "YES")
		{
			Try
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Removing all internal forwarding from all users..."
				$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Where-Object { `$_.RecipientType -eq 'UserMailbox' } | Set-Mailbox -ForwardingAddress `$Null"
				Get-Mailbox -ResultSize unlimited | Where-Object { $_.RecipientType -eq "UserMailbox" } | Set-Mailbox -ForwardingAddress $Null
				$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Where-Object { $_.RecipientType -eq "UserMailbox" } | Sort-Object Name | Format-Table Name, DeliverToMailboxAndForward, ForwardingAddress -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			Catch
			{
				$FormO365AdministrationCenter.Cursor = 'Default'
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("$_", "Error")
			}
		}
		Else
		{
			[System.Windows.Forms.MessageBox]::Show("Internal forwarding for all users has not been changed", "Info")
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
	
}

$forwardAllUsersEmailToExternalRecipientAndSaveALocalCopyToolStripMenuItem_Click = {
	Try
	{
		$ForwardAllToExternal = Read-Host "Enter the email to forward all email to"
		If (!$ForwardAllToExternal)
		{
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("No e-mail address was entered, please enter a valid e-mail address", "Error")
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Setting up forwarding for all users to $ForwardAllToExternal..."
			$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Where-Object { `$_.RecipientType -eq 'UserMailbox' } | Set-Mailbox -ForwardingsmtpAddress $ForwardAllToExternal -DeliverToMailboxAndForward `$True"
			Get-Mailbox -ResultSize unlimited | Where-Object { $_.RecipientType -eq "UserMailbox" } | Set-Mailbox -ForwardingsmtpAddress $ForwardAllToExternal -DeliverToMailboxAndForward $True
			$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Where-Object { $_.RecipientType -eq "UserMailbox" } | Sort-Object Name | Format-Table Name, DeliverToMailboxAndForward, ForwardingSmtpAddress -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$forwardAllUsersEmailToExternalRecipientAndDontSaveALocalCopyToolStripMenuItem_Click = {
	Try
	{
		$ForwardAllToExternal2 = Read-Host "Enter the email to forward all email to"
		If (!$ForwardAllToExternal2)
		{
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("No e-mail was entered, please enter a valid e-mail", "Error")
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Setting up forwarding for all users to $ForwardAllToExternal2..."
			$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Where-Object { `$_.RecipientType -eq 'UserMailbox' } | Set-Mailbox -ForwardingsmtpAddress $ForwardAllToExternal2 -DeliverToMailboxAndForward `$False"
			Get-Mailbox -ResultSize unlimited | Where-Object { $_.RecipientType -eq "UserMailbox" } | Set-Mailbox -ForwardingsmtpAddress $ForwardAllToExternal2 -DeliverToMailboxAndForward $False
			$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Where-Object { $_.RecipientType -eq "UserMailbox" } | Sort-Object Name | Format-Table Name, DeliverToMailboxAndForward, ForwardingSmtpAddress -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$forwardAllUsersEmailToInternalRecipientAndSaveLocalCopyToolStripMenuItem_Click = {
	Try
	{
		#$ForwardAllToInternal = Read-Host "Enter the users UPN, Display Name, Alias, or Email Address of the user to forward"
		$SelectUsersFormText = "Select the user you want to forward all email to"
		#Call-SelectUsersForm_psf
		Show-SelectCachedDisplayNames_psf
		#$ForwardAllToInternal = $SelectUsersForm_comboboxUsers
		$ForwardAllToInternal = $SelectCachedDisplayNames_comboboxNames
		If (!$ForwardAllToInternal)
		{
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a user", "Error")
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Setting up forwarding for all users to $ForwardAllToInternal..."
			$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Where-Object { `$_.RecipientType -eq 'UserMailbox' } | Set-Mailbox -ForwardingAddress $ForwardAllToInternal -DeliverToMailboxAndForward `$True"
			Get-Mailbox -ResultSize unlimited | Where-Object { $_.RecipientType -eq "UserMailbox" } | Set-Mailbox -ForwardingAddress $ForwardAllToInternal -DeliverToMailboxAndForward $True
			$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Where-Object { $_.RecipientType -eq "UserMailbox" } | Sort-Object Name | Format-Table Name, DeliverToMailboxAndForward, ForwardingAddress | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$forwardAllUsersEmailToInternalRecipientAndDontSaveLocalCopyToolStripMenuItem_Click = {
	Try
	{
		#$ForwardAllToInternal2 = Read-Host "Enter the users UPN, Display Name, Alias, or Email Address of the user to forward"
		$SelectUsersFormText = "Select the user you want to forward all email to"
		#Call-SelectUsersForm_psf
		Show-SelectCachedDisplayNames_psf
		#$ForwardAllToInternal2 = $SelectUsersForm_comboboxUsers
		$ForwardAllToInternal2 = $SelectCachedDisplayNames_comboboxNames
		If (!$ForwardAllToInternal2)
		{
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a user", "Error")
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Setting up forwarding for all users to $ForwardAllToInternal2..."
			$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Where-Object { `$_.RecipientType -eq 'UserMailbox' } | Set-Mailbox -ForwardingAddress $ForwardAllToInternal2 -DeliverToMailboxAndForward `$True"
			Get-Mailbox -ResultSize unlimited | Where-Object { $_.RecipientType -eq "UserMailbox" } | Set-Mailbox -ForwardingAddress $ForwardAllToInternal2 -DeliverToMailboxAndForward $True
			$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Where-Object { $_.RecipientType -eq "UserMailbox" } | Sort-Object Name | Format-Table Name, DeliverToMailboxAndForward, ForwardingAddress -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

#Aliases

$addEmailAddressForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$AddAliasforUser = Read-Host "Enter the UPN of the user you want to add an alias for"
			$SelectUsersFormText = "Select the User you want to add an Alias for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedDisplayNames_psf
			#$AddAliasforUser = $SelectUsersForm_comboboxUsers
			$AddAliasforUser = $SelectCachedDisplayNames_comboboxNames
			If (!$AddAliasforUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			Else
			{
				$AddAlias = Read-Host "Enter the Alias Address"
				If (!$AddAlias)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Alias Address was entered, please enter a valid Alias Address", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Adding $AddAlias as an Alias for $AddAliasforUser..."
					$textboxDetails.Text = "Set-Mailbox $AddAliasforUser -EmailAddresses @{ add = '$AddAlias' }"
					Set-Mailbox $AddAliasforUser -EmailAddresses @{ add = $AddAlias }
					$TextboxResults.Text = "Getting all aliases for $AddAliasforUser..."
					$TextboxResults.Text = Get-Mailbox $AddAliasforUser | Format-List EmailAddresses | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to add an Alias for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$removeAnEmailAddressForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$RemoveAliasforUser = Read-Host "Enter the UPN of the user you want to remove an alias for"
			$SelectUsersFormText = "Select the user you want to remove an Alias for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedDisplayNames_psf
			#$EmailAddressUser = $SelectUsersForm_comboboxUsers
			$EmailAddressUser = $SelectCachedDisplayNames_comboboxNames
			If (!$EmailAddressUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a user", "Error")
			}
			Else
			{
				$EmailAddressText = "Select the users Alias you want to remove"
				Show-SelectEmailAddresses_psf
				$removeAlias = $SelectEmailAddresses_comboboxSelectEmailAddresses
				#$removeAlias = Read-Host "Enter the alias address"
				If (!$removeAlias)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Alias was selected, please select a valid Alias address you want to remove", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Removing $removeAlias as an Alias for $EmailAddressUser..."
					$textboxDetails.Text = "Set-Mailbox $EmailAddressUser -EmailAddresses @{ remove = '$removeAlias' }"
					Set-Mailbox $EmailAddressUser -EmailAddresses @{ remove = $removeAlias }
					$TextboxResults.Text = "Getting all aliases for $EmailAddressUser..."
					$TextboxResults.Text = Get-Mailbox $EmailAddressUser | Format-List EmailAddresses | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to remove an Alias for another user?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getAUsersEmailAddressesToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$ViewAliasforaUser = Read-Host "Enter the UPN of the user you want to view email addresses for"
			$SelectUsersFormText = "Select the User you want to view all Email Addresses for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedDisplayNames_psf
			#$ViewAliasforaUser = $SelectUsersForm_comboboxUsers
			$ViewAliasforaUser = $SelectCachedDisplayNames_comboboxNames
			If (!$ViewAliasforaUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting all Email Addresses for $ViewAliasforaUser..."
				$textboxDetails.Text = "Get-Mailbox -identity $ViewAliasforaUser | Format-List EmailAddresses"
				$TextboxResults.Text = Get-Mailbox -identity $ViewAliasforaUser | Format-List EmailAddresses | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to view all Email Addresses for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}



###GROUPS###

	#Distribution Groups

$displayDistributionGroupsToolStripMenuItem_Click = {
	try
	{
		$TempDir = $env:temp
		$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter\distros.txt")
		If ((Test-Path $O365AdminTempFolder) -eq $false)
		{
			$Textboxresults.text = "Caching Distribution Groups…"
			(Get-DistributionGroup -ResultSize unlimited | Where-Object { $_.GroupType -notlike 'Universal, SecurityEnabled' }).DisplayName | Out-File "$O365AdminTempFolder"
			$Textboxresults.text = ""
			
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all Distribution Groups..."
			$textboxDetails.Text = "Get-DistributionGroup -ResultSize unlimited | Where-Object { `$_.GroupType -notlike 'Universal, SecurityEnabled'} | Sort-Object DisplayName | Format-Table DisplayName -AutoSize"
			#$TextboxResults.text = Get-DistributionGroup -ResultSize unlimited | Where-Object { $_.GroupType -notlike "Universal, SecurityEnabled" } | Sort-Object DisplayName | Format-Table DisplayName -AutoSize | Out-String -Width 2147483647
			$TextboxResults.Text = Get-Content $O365AdminTempFolder | Format-Table DisplayName -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all Distribution Groups..."
			$textboxDetails.Text = "Get-DistributionGroup -ResultSize unlimited | Where-Object { `$_.GroupType -notlike 'Universal, SecurityEnabled'} | Sort-Object DisplayName | Format-Table DisplayName -AutoSize"
			#$TextboxResults.text = Get-DistributionGroup -ResultSize unlimited | Where-Object { $_.GroupType -notlike "Universal, SecurityEnabled" } | Sort-Object DisplayName | Format-Table DisplayName -AutoSize | Out-String -Width 2147483647
			$TextboxResults.Text = Get-Content $O365AdminTempFolder | Format-Table DisplayName -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$createADistributionGroupToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$NewDistroGroup = Read-Host "What is the name of the new Distribution Group?"
			If (!$NewDistroGroup)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Distribution Group name was entered, please enter a valid name", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Creating the $NewDistroGroup Distribution Group..."
				$textboxDetails.Text = "New-DistributionGroup -Name $NewDistroGroup | Format-List"
				$TextboxResults.Text = New-DistributionGroup -Name $NewDistroGroup | Format-List | Out-String -Width 2147483647
				$TempDir = $env:temp
				$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter\distros.txt")
				Remove-Item $O365AdminTempFolder -Force
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to create another Distribution Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$deleteADistributionGroupToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			
			$TempDir = $env:temp
			$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter\distros.txt")
			If ((Test-Path $O365AdminTempFolder) -eq $false)
			{
				$Textboxresults.text = "Caching Distribution Groups…"
				(Get-DistributionGroup -ResultSize unlimited | Where-Object { $_.GroupType -notlike 'Universal, SecurityEnabled' }).DisplayName | Out-File "$O365AdminTempFolder"
				$Textboxresults.text = ""
				
				#$DeleteDistroGroup = Read-Host "Enter the name of the Distribtuion group you want deleted."
				$DistroGroupsText = "Select the Distribution Group you want to delete"
				Show-SelectCachedDistroGroups_psf
				$DeleteDistroGroup = $SelectCachedDistroGroups_comboboxNames
				If (!$DeleteDistroGroup)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group to delete", "Error")
				}
				Else
				{
					$OUTPUT = [System.Windows.Forms.MessageBox]::Show("Are you sure you want to delete $DeleteDistroGroup ?", "Warning!", 4)
					If ($OUTPUT -eq "YES")
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Deleting the $DeleteDistroGroup Distribution Group..."
						$textboxDetails.Text = "Remove-DistributionGroup $DeleteDistroGroup"
						Remove-DistributionGroup $DeleteDistroGroup
						$TextboxResults.Text = "Getting list of distribution groups"
						$TextboxResults.text = Get-DistributionGroup -ResultSize unlimited | Where-Object { $_.GroupType -notlike "Universal, SecurityEnabled" } | Sort-Object DisplayName | Format-Table DisplayName -AutoSize | Out-String -Width 2147483647
						$TempDir = $env:temp
						$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter\distros.txt")
						Remove-Item $O365AdminTempFolder -Force
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
					Else
					{
						[System.Windows.Forms.MessageBox]::Show("$DeleteDistroGroup was not deleted", "Info")
					}
				}
			}
			Else
			{
				
				#$DeleteDistroGroup = Read-Host "Enter the name of the Distribtuion group you want deleted."
				$DistroGroupsText = "Select the Distribution Group you want to delete"
				Show-SelectCachedDistroGroups_psf
				$DeleteDistroGroup = $SelectCachedDistroGroups_comboboxNames
				If (!$DeleteDistroGroup)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group to delete", "Error")
				}
				Else
				{
					$OUTPUT = [System.Windows.Forms.MessageBox]::Show("Are you sure you want to delete $DeleteDistroGroup ?", "Warning!", 4)
					If ($OUTPUT -eq "YES")
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Deleting the $DeleteDistroGroup Distribution Group..."
						$textboxDetails.Text = "Remove-DistributionGroup $DeleteDistroGroup"
						Remove-DistributionGroup $DeleteDistroGroup
						$TextboxResults.Text = "Getting list of distribution groups"
						$TextboxResults.text = Get-DistributionGroup -ResultSize unlimited | Where-Object { $_.GroupType -notlike "Universal, SecurityEnabled" } | Sort-Object DisplayName | Format-Table DisplayName -AutoSize | Out-String -Width 2147483647
						$TempDir = $env:temp
						$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter\distros.txt")
						Remove-Item $O365AdminTempFolder -Force
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
					Else
					{
						[System.Windows.Forms.MessageBox]::Show("$DeleteDistroGroup was not deleted", "Info")
					}
				}
			}
		}
		
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to delete another Distribution Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$allowDistributionGroupToReceiveExternalEmailToolStripMenuItem_Click = {
	Try
	{
		$TempDir = $env:temp
		$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter\distros.txt")
		If ((Test-Path $O365AdminTempFolder) -eq $false)
		{
			$Textboxresults.text = "Caching Distribution Groups…"
			(Get-DistributionGroup -ResultSize unlimited | Where-Object { $_.GroupType -notlike 'Universal, SecurityEnabled' }).DisplayName | Out-File $O365AdminTempFolder
			$Textboxresults.text = ""
			#$AllowExternalEmail = Read-Host "Enter the name of the Distribtuion Group you want to allow external email to"
			$DistroGroupsText = "Select the Distribution Group you want to allow External Email to"
			Show-SelectCachedDistroGroups_psf
			$AllowExternalEmail = $SelectCachedDistroGroups_comboboxNames
			If (!$AllowExternalEmail)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group you want to allow external e-mail to", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Allowing extneral senders for the $AllowExternalEmail Distribution Group..."
				$textboxDetails.Text = "Set-DistributionGroup $AllowExternalEmail -RequireSenderAuthenticationEnabled `$False"
				Set-DistributionGroup $AllowExternalEmail -RequireSenderAuthenticationEnabled $False
				$TextboxResults.text = Get-DistributionGroup $AllowExternalEmail | Format-List Name, RequireSenderAuthenticationEnabled | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Else
		{
			#$AllowExternalEmail = Read-Host "Enter the name of the Distribtuion Group you want to allow external email to"
			$DistroGroupsText = "Select the Distribution Group you want to allow External Email to"
			Show-SelectCachedDistroGroups_psf
			$AllowExternalEmail = $SelectCachedDistroGroups_comboboxNames
			If (!$AllowExternalEmail)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group you want to allow external e-mail to", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Allowing extneral senders for the $AllowExternalEmail Distribution Group..."
				$textboxDetails.Text = "Set-DistributionGroup $AllowExternalEmail -RequireSenderAuthenticationEnabled `$False"
				Set-DistributionGroup $AllowExternalEmail -RequireSenderAuthenticationEnabled $False
				$TextboxResults.text = Get-DistributionGroup $AllowExternalEmail | Format-List Name, RequireSenderAuthenticationEnabled | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$hideDistributionGroupFromGALToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$TempDir = $env:temp
			$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter\distros.txt")
			If ((Test-Path $O365AdminTempFolder) -eq $false)
			{
				$Textboxresults.text = "Caching Distribution Groups…"
				(Get-DistributionGroup -ResultSize unlimited | Where-Object { $_.GroupType -notlike 'Universal, SecurityEnabled' }).DisplayName | Out-File "$O365AdminTempFolder"
				$Textboxresults.text = ""
				
				#$GroupHideGAL = Read-Host "Enter the name of the Distribtuion Group you want to hide from the GAL"
				$DistroGroupsText = "Select the Distribution Group you want to hide from the Global Address List"
				Show-SelectCachedDistroGroups_psf
				$GroupHideGAL = $SelectCachedDistroGroups_comboboxNames
				If (!$GroupHideGAL)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group you want to hide from the Global Address List", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Hiding the $GroupHideGAL from the Global Address List..."
					$textboxDetails.Text = "Set-DistributionGroup $GroupHideGAL -HiddenFromAddressListsEnabled `$True"
					Set-DistributionGroup $GroupHideGAL -HiddenFromAddressListsEnabled $True
					$TextboxResults.text = Get-DistributionGroup $GroupHideGAL | Format-List Name, HiddenFromAddressListsEnabled | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
			Else
			{
				#$GroupHideGAL = Read-Host "Enter the name of the Distribtuion Group you want to hide from the GAL"
				$DistroGroupsText = "Select the Distribution Group you want to hide from the Global Address List"
				Show-SelectCachedDistroGroups_psf
				$GroupHideGAL = $SelectCachedDistroGroups_comboboxNames
				If (!$GroupHideGAL)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group you want to hide from the Global Address List", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Hiding the $GroupHideGAL from the Global Address List..."
					$textboxDetails.Text = "Set-DistributionGroup $GroupHideGAL -HiddenFromAddressListsEnabled `$True"
					Set-DistributionGroup $GroupHideGAL -HiddenFromAddressListsEnabled $True
					$TextboxResults.text = Get-DistributionGroup $GroupHideGAL | Format-List Name, HiddenFromAddressListsEnabled | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to hide another Distribution Group from the Global Address List?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$displayDistributionGroupMembersToolStripMenuItem_Click = {
	Try
	{
		$TempDir = $env:temp
		$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter\distros.txt")
		If ((Test-Path $O365AdminTempFolder) -eq $false)
		{
			$Textboxresults.text = "Caching Distribution Groups…"
			(Get-DistributionGroup -ResultSize unlimited | Where-Object { $_.GroupType -notlike 'Universal, SecurityEnabled' }).DisplayName | Out-File "$O365AdminTempFolder"
			$Textboxresults.text = ""
			
			#$ListDistributionGroupMembers = Read-Host "Enter the name of the Distribution Group you want to list members of"
			$DistroGroupsText = "Select the Distribution Group you want to view the members of"
			Show-SelectCachedDistroGroups_psf
			$ListDistributionGroupMembers = $SelectCachedDistroGroups_comboboxNames
			If (!$ListDistributionGroupMembers)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group you want to view members of", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting all members of the $ListDistributionGroupMembers Distrubution Group..."
				$textboxDetails.Text = "Get-DistributionGroupMember $ListDistributionGroupMembers | Sort-Object DisplayName | Format-Table -AutoSize"
				$TextboxResults.Text = Get-DistributionGroupMember $ListDistributionGroupMembers | Sort-Object DisplayName | Format-Table -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Else
		{
			#$ListDistributionGroupMembers = Read-Host "Enter the name of the Distribution Group you want to list members of"
			$DistroGroupsText = "Select the Distribution Group you want to view the members of"
			Show-SelectCachedDistroGroups_psf
			$ListDistributionGroupMembers = $SelectCachedDistroGroups_comboboxNames
			If (!$ListDistributionGroupMembers)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group you want to view members of", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting all members of the $ListDistributionGroupMembers Distrubution Group..."
				$textboxDetails.Text = "Get-DistributionGroupMember $ListDistributionGroupMembers | Sort-Object DisplayName | Format-Table -AutoSize"
				$TextboxResults.Text = Get-DistributionGroupMember $ListDistributionGroupMembers | Sort-Object DisplayName | Format-Table -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$addAUserToADistributionGroupToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$TempDir = $env:temp
			$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter\distros.txt")
			If ((Test-Path $O365AdminTempFolder) -eq $false)
			{
				$Textboxresults.text = "Caching Distribution Groups…"
				(Get-DistributionGroup -ResultSize unlimited | Where-Object { $_.GroupType -notlike 'Universal, SecurityEnabled' }).DisplayName | Out-File "$O365AdminTempFolder"
				$Textboxresults.text = ""
				
				#$DistroGroupAdd = Read-Host "Enter the name of the Distribution Group"
				$DistroGroupsText = "Select the Distribution Group you want to add a user to"
				Show-SelectCachedDistroGroups_psf
				$DistroGroupAdd = $SelectCachedDistroGroups_comboboxNames
				If (!$DistroGroupAdd)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group you want to add a user to", "Error")
				}
				Else
				{
					#$DistroGroupAddUser = Read-Host "Enter the UPN of the user you wish to add to $DistroGroupAdd"
					$SelectUsersFormText = "Select the user you want to add to $DistroGroupAdd"
					Show-SelectCachedDisplayNames_psf
					$DistroGroupAddUser = $SelectCachedDisplayNames_comboboxNames
					If (!$DistroGroupAddUser)
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a user you want to add to $DistroGroupAdd", "Error")
					}
					Else
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Adding $DistroGroupAddUser to the $DistroGroupAdd Distribution Group..."
						$textboxDetails.Text = "Add-DistributionGroupMember -Identity $DistroGroupAdd -Member $DistroGroupAddUser"
						Add-DistributionGroupMember -Identity $DistroGroupAdd -Member $DistroGroupAddUser
						$TextboxResults.Text = "Getting members of $DistroGroupAdd..."
						$TextboxResults.Text = Get-DistributionGroupMember $DistroGroupAdd | Sort-Object DisplayName | Format-Table -AutoSize | Out-String -Width 2147483647
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
				}
			}
			Else
			{
				#$DistroGroupAdd = Read-Host "Enter the name of the Distribution Group"
				$DistroGroupsText = "Select the Distribution Group you want to add a user to"
				Show-SelectCachedDistroGroups_psf
				$DistroGroupAdd = $SelectCachedDistroGroups_comboboxNames
				If (!$DistroGroupAdd)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group you want to add a user to", "Error")
				}
				Else
				{
					#$DistroGroupAddUser = Read-Host "Enter the UPN of the user you wish to add to $DistroGroupAdd"
					$SelectUsersFormText = "Select the user you want to add to $DistroGroupAdd"
					Show-SelectCachedDisplayNames_psf
					$DistroGroupAddUser = $SelectCachedDisplayNames_comboboxNames
					If (!$DistroGroupAddUser)
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a user you want to add to $DistroGroupAdd", "Error")
					}
					Else
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Adding $DistroGroupAddUser to the $DistroGroupAdd Distribution Group..."
						$textboxDetails.Text = "Add-DistributionGroupMember -Identity $DistroGroupAdd -Member $DistroGroupAddUser"
						Add-DistributionGroupMember -Identity $DistroGroupAdd -Member $DistroGroupAddUser
						$TextboxResults.Text = "Getting members of $DistroGroupAdd..."
						$TextboxResults.Text = Get-DistributionGroupMember $DistroGroupAdd | Sort-Object DisplayName | Format-Table -AutoSize | Out-String -Width 2147483647
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to add another User to a Distribution Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$removeAUserADistributionGroupToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$TempDir = $env:temp
			$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter\distros.txt")
			If ((Test-Path $O365AdminTempFolder) -eq $false)
			{
				$Textboxresults.text = "Caching Distribution Groups…"
				(Get-DistributionGroup -ResultSize unlimited | Where-Object { $_.GroupType -notlike 'Universal, SecurityEnabled' }).DisplayName | Out-File "$O365AdminTempFolder"
				$Textboxresults.text = ""
				
				#$DistroGroupRemove = Read-Host "Enter the name of the Distribution Group"
				$DistroGroupsText = "Select the Distribution Group you want to remove a user from"
				Show-SelectCachedDistroGroups_psf
				$GlobalDistroGroupMembers = $SelectCachedDistroGroups_comboboxNames
				If (!$GlobalDistroGroupMembers)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group you want to remove a user from", "Error")
				}
				Else
				{
					#$DistroGroupRemoveUser = Read-Host "Enter the UPN of the user you wish to remove from $GlobalDistroGroupMembers"
					$DistroGroupMembersText = "Select the User you want to remove from $GlobalDistroGroupMembers"
					Show-SelectCachedDistroGroups_psf
					$DistroGroupRemoveUser = $SelectCachedDistroGroups_comboboxNames
					If (!$DistroGroupRemoveUser)
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a user you want to remove from $GlobalDistroGroupMembers", "Error")
					}
					Else
					{
						$OUTPUT = [System.Windows.Forms.MessageBox]::Show("Are you sure you want to remove $DistroGroupRemoveUser from $GlobalDistroGroupMembers ?", "Warning!", 4)
						If ($OUTPUT -eq "YES")
						{
							$FormO365AdministrationCenter.Cursor = 'WaitCursor'
							$TextboxResults.Text = "Removing $DistroGroupRemoveUser from the $GlobalDistroGroupMembers Distribution Group..."
							$textboxDetails.Text = "Remove-DistributionGroupMember -Identity $GlobalDistroGroupMembers -Member $DistroGroupRemoveUser"
							Remove-DistributionGroupMember -Identity $GlobalDistroGroupMembers -Member $DistroGroupRemoveUser
							$TextboxResults.Text = "Getting members of $GlobalDistroGroupMembers"
							$TextboxResults.Text = Get-DistributionGroupMember $GlobalDistroGroupMembers | Sort-Object DisplayName | Format-Table -AutoSize | Out-String -Width 2147483647
							$FormO365AdministrationCenter.Cursor = 'Default'
						}
						Else
						{
							[System.Windows.Forms.MessageBox]::Show("$DistroGroupRemoveUser was not removed from $DistroGroupRemove ?", "Info")
						}
					}
				}
			}
			Else
			{
				#$DistroGroupRemove = Read-Host "Enter the name of the Distribution Group"
				$DistroGroupsText = "Select the Distribution Group you want to remove a user from"
				Show-SelectCachedDistroGroups_psf
				$GlobalDistroGroupMembers = $SelectCachedDistroGroups_comboboxNames
				If (!$GlobalDistroGroupMembers)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group you want to remove a user from", "Error")
				}
				Else
				{
					#$DistroGroupRemoveUser = Read-Host "Enter the UPN of the user you wish to remove from $GlobalDistroGroupMembers"
					$DistroGroupMembersText = "Select the User you want to remove from $GlobalDistroGroupMembers"
					Show-SelectDistroGroupMembers_psf
					$DistroGroupRemoveUser = $SelectDistroGroupMembers_comboboxSelectDistroGroupMembers
					If (!$DistroGroupRemoveUser)
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a user you want to remove from $GlobalDistroGroupMembers", "Error")
					}
					Else
					{
						$OUTPUT = [System.Windows.Forms.MessageBox]::Show("Are you sure you want to remove $DistroGroupRemoveUser from $GlobalDistroGroupMembers ?", "Warning!", 4)
						If ($OUTPUT -eq "YES")
						{
							$FormO365AdministrationCenter.Cursor = 'WaitCursor'
							$TextboxResults.Text = "Removing $DistroGroupRemoveUser from the $GlobalDistroGroupMembers Distribution Group..."
							$textboxDetails.Text = "Remove-DistributionGroupMember -Identity $GlobalDistroGroupMembers -Member $DistroGroupRemoveUser"
							Remove-DistributionGroupMember -Identity $GlobalDistroGroupMembers -Member $DistroGroupRemoveUser
							$TextboxResults.Text = "Getting members of $GlobalDistroGroupMembers"
							$TextboxResults.Text = Get-DistributionGroupMember $GlobalDistroGroupMembers | Sort-Object DisplayName | Format-Table -AutoSize | Out-String -Width 2147483647
							$FormO365AdministrationCenter.Cursor = 'Default'
						}
						Else
						{
							[System.Windows.Forms.MessageBox]::Show("$DistroGroupRemoveUser was not removed from $DistroGroupRemove ?", "Info")
						}
					}
				}
			}
		}
		catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to remove another user from a Distribution Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$addAllUsersToADistributionGroupToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$TempDir = $env:temp
			$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter\distros.txt")
			If ((Test-Path $O365AdminTempFolder) -eq $false)
			{
				$Textboxresults.text = "Caching Distribution Groups…"
				(Get-DistributionGroup -ResultSize unlimited | Where-Object { $_.GroupType -notlike 'Universal, SecurityEnabled' }).DisplayName | Out-File "$O365AdminTempFolder"
				$Textboxresults.text = ""
				
				$users = Get-Mailbox -ResultSize unlimited | Select-Object -ExpandProperty Alias
				#$AddAllUsersToSingleDistro = Read-Host "Enter the name of the Distribution Group you want to add all users to"
				$DistroGroupsText = "Select the Distribution Group you want to add all users too"
				Show-SelectCachedDistroGroups_psf
				$AddAllUsersToSingleDistro = $SelectCachedDistroGroups_comboboxNames
				If (!$AddAllUsersToSingleDistro)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group you want to add all users too", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Adding all users to the $AddAllUsersToSingleDistro distribution group..."
					$textboxDetails.Text = "Foreach (`$user in `$users) { Add-DistributionGroupMember -Identity $AddAllUsersToSingleDistro -Member `$user }"
					Foreach ($user in $users) { Add-DistributionGroupMember -Identity $AddAllUsersToSingleDistro -Member $user }
					$TextboxResults.Text = "Getting members of $AddAllUsersToSingleDistro"
					$TextboxResults.Text = Get-DistributionGroupMember $AddAllUsersToSingleDistro | Sort-Object DisplayName | Format-Table -AutoSize | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
			Else
			{
				$users = Get-Mailbox -ResultSize unlimited | Select-Object -ExpandProperty Alias
				#$AddAllUsersToSingleDistro = Read-Host "Enter the name of the Distribution Group you want to add all users to"
				$DistroGroupsText = "Select the Distribution Group you want to add all users too"
				Show-SelectCachedDistroGroups_psf
				$AddAllUsersToSingleDistro = $SelectCachedDistroGroups_comboboxNames
				If (!$AddAllUsersToSingleDistro)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group you want to add all users too", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Adding all users to the $AddAllUsersToSingleDistro distribution group..."
					$textboxDetails.Text = "Foreach (`$user in `$users) { Add-DistributionGroupMember -Identity $AddAllUsersToSingleDistro -Member `$user }"
					Foreach ($user in $users) { Add-DistributionGroupMember -Identity $AddAllUsersToSingleDistro -Member $user }
					$TextboxResults.Text = "Getting members of $AddAllUsersToSingleDistro"
					$TextboxResults.Text = Get-DistributionGroupMember $AddAllUsersToSingleDistro | Sort-Object DisplayName | Format-Table -AutoSize | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to add all Users to another Distribtuion Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getDetailedInfoForDistributionGroupToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$TempDir = $env:temp
			$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter\distros.txt")
			If ((Test-Path $O365AdminTempFolder) -eq $false)
			{
				$Textboxresults.text = "Caching Distribution Groups…"
				(Get-DistributionGroup -ResultSize unlimited | Where-Object { $_.GroupType -notlike 'Universal, SecurityEnabled' }).DisplayName | Out-File "$O365AdminTempFolder"
				$Textboxresults.text = ""
				
				#$DetailedInfoMailDistroGroup = Read-Host "Enter the group name"
				$DistroGroupsText = "Select the Distribution Group you want to view more information on"
				Show-SelectCachedDistroGroups_psf
				$DetailedInfoMailDistroGroup = $SelectCachedDistroGroups_comboboxNames
				If (!$DetailedInfoMailDistroGroup)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group you want to view detailed information for", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Getting detailed info about the $DetailedInfoMailDistroGroup group..."
					$textboxDetails.Text = "Get-DistributionGroup $DetailedInfoMailDistroGroup | Format-List"
					$TextboxResults.text = Get-DistributionGroup $DetailedInfoMailDistroGroup | Format-List | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
			Else
			{
				#$DetailedInfoMailDistroGroup = Read-Host "Enter the group name"
				$DistroGroupsText = "Select the Distribution Group you want to view more information on"
				Show-SelectCachedDistroGroups_psf
				$DetailedInfoMailDistroGroup = $SelectCachedDistroGroups_comboboxNames
				If (!$DetailedInfoMailDistroGroup)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group you want to view detailed information for", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Getting detailed info about the $DetailedInfoMailDistroGroup group..."
					$textboxDetails.Text = "Get-DistributionGroup $DetailedInfoMailDistroGroup | Format-List"
					$TextboxResults.text = Get-DistributionGroup $DetailedInfoMailDistroGroup | Format-List | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get information on another Distribution Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$allowAllDistributionGroupsToReceiveExternalEmailToolStripMenuItem_Click = {
	try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Allowing extneral senders for all Distribution Groups..."
		$textboxDetails.Text = "Get-DistributionGroup -ResultSize unlimited | Set-DistributionGroup -RequireSenderAuthenticationEnabled `$False"
		Get-DistributionGroup -ResultSize unlimited | Set-DistributionGroup -RequireSenderAuthenticationEnabled $False
		$TextboxResults.text = Get-DistributionGroup -ResultSize unlimited | Sort-Object Name | Format-Table Name, RequireSenderAuthenticationEnabled -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$denyDistributionGroupFromReceivingExternalEmailToolStripMenuItem_Click = {
	Try
	{
		$TempDir = $env:temp
		$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter\distros.txt")
		If ((Test-Path $O365AdminTempFolder) -eq $false)
		{
			$Textboxresults.text = "Caching Distribution Groups…"
			(Get-DistributionGroup -ResultSize unlimited | Where-Object { $_.GroupType -notlike 'Universal, SecurityEnabled' }).DisplayName | Out-File "$O365AdminTempFolder"
			$Textboxresults.text = ""
			
			#$DenyExternalEmail = Read-Host "Enter the name of the Distribtuion Group you want to deny external email to"
			$DistroGroupsText = "Select the Distribution Group you want to deny external email to"
			Show-SelectCachedDistroGroups_psf
			$DenyExternalEmail = $SelectCachedDistroGroups_comboboxNames
			If (!$DenyExternalEmail)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Distribution Group selected, please select a valid Distribution Group you want to deny external email to", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Denying extneral senders for the $DenyExternalEmail Distribution Group..."
				$textboxDetails.Text = "Set-DistributionGroup $DenyExternalEmail -RequireSenderAuthenticationEnabled `$True"
				Set-DistributionGroup $DenyExternalEmail -RequireSenderAuthenticationEnabled $True
				$TextboxResults.text = Get-DistributionGroup $DenyExternalEmail | Sort-Object Name | Format-Table Name, RequireSenderAuthenticationEnabled -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
				}
		}
		Else
		{
			#$DenyExternalEmail = Read-Host "Enter the name of the Distribtuion Group you want to deny external email to"
			$DistroGroupsText = "Select the Distribution Group you want to deny external email to"
			Show-SelectCachedDistroGroups_psf
			$DenyExternalEmail = $SelectCachedDistroGroups_comboboxNames
			If (!$DenyExternalEmail)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Distribution Group selected, please select a valid Distribution Group you want to deny external email to", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Denying extneral senders for the $DenyExternalEmail Distribution Group..."
				$textboxDetails.Text = "Set-DistributionGroup $DenyExternalEmail -RequireSenderAuthenticationEnabled `$True"
				Set-DistributionGroup $DenyExternalEmail -RequireSenderAuthenticationEnabled $True
				$TextboxResults.text = Get-DistributionGroup $DenyExternalEmail | Sort-Object Name | Format-Table Name, RequireSenderAuthenticationEnabled -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$denyAllDistributionGroupsFromReceivingExternalEmailToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Denying extneral senders for all Distribution Groups..."
		$textboxDetails.Text = "Get-DistributionGroup -ResultSize unlimited | Set-DistributionGroup -RequireSenderAuthenticationEnabled `$True"
		Get-DistributionGroup -ResultSize unlimited | Set-DistributionGroup -RequireSenderAuthenticationEnabled $True
		$TextboxResults.text = Get-DistributionGroup -ResultSize unlimited | Sort-Objects Name | Format-Table Name, RequireSenderAuthenticationEnabled -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getExternalEmailStatusForADistributionGroupToolStripMenuItem_Click = {
	Try
	{
		$TempDir = $env:temp
		$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter\distros.txt")
		If ((Test-Path $O365AdminTempFolder) -eq $false)
		{
			$Textboxresults.text = "Caching Distribution Groups…"
			(Get-DistributionGroup -ResultSize unlimited | Where-Object { $_.GroupType -notlike 'Universal, SecurityEnabled' }).DisplayName | Out-File "$O365AdminTempFolder"
			$Textboxresults.text = ""
			
			#$ExternalEmailStatus = Read-Host "Enter the Distribution Group"
			$DistroGroupsText = "Select the Distribution Group you want to view external email status for"
			Show-SelectCachedDistroGroups_psf
			$ExternalEmailStatus = $SelectCachedDistroGroups_comboboxNames
			If (!$ExternalEmailStatus)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group you want to view external email status for", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting external email status for $ExternalEmailStatus..."
				$textboxDetails.Text = "Get-DistributionGroup $ExternalEmailStatus | Format-List Name, RequireSenderAuthenticationEnabled"
				$TextboxResults.text = Get-DistributionGroup $ExternalEmailStatus | Format-List Name, RequireSenderAuthenticationEnabled | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Else
		{
			#$ExternalEmailStatus = Read-Host "Enter the Distribution Group"
			$DistroGroupsText = "Select the Distribution Group you want to view external email status for"
			Show-SelectCachedDistroGroups_psf
			$ExternalEmailStatus = $SelectCachedDistroGroups_comboboxNames
			If (!$ExternalEmailStatus)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group you want to view external email status for", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting external email status for $ExternalEmailStatus..."
				$textboxDetails.Text = "Get-DistributionGroup $ExternalEmailStatus | Format-List Name, RequireSenderAuthenticationEnabled"
				$TextboxResults.text = Get-DistributionGroup $ExternalEmailStatus | Format-List Name, RequireSenderAuthenticationEnabled | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getExternalEmailStatusForAllDistributionGroupsToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting external email status for all distribution groups..."
		$textboxDetails.Text = "Get-DistributionGroup -ResultSize unlimited | Sort-Object Name | Format-Table Name, RequireSenderAuthenticationEnabled -AutoSize"
		$TextboxResults.text = Get-DistributionGroup -ResultSize unlimited | Sort-Object Name | Format-Table Name, RequireSenderAuthenticationEnabled -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getDistributionGroupsAcceptMessagesFromInfoToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$TempDir = $env:temp
			$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter\distros.txt")
			If ((Test-Path $O365AdminTempFolder) -eq $false)
			{
				$Textboxresults.text = "Caching Distribution Groups…"
				(Get-DistributionGroup -ResultSize unlimited | Where-Object { $_.GroupType -notlike 'Universal, SecurityEnabled' }).DisplayName | Out-File "$O365AdminTempFolder"
				$Textboxresults.text = ""
				
				$DistroGroupsText = "Select the distro group you want to view Accept Messages Only From info for"
				Show-SelectCachedDistroGroups_psf
				$distro = $SelectCachedDistroGroups_comboboxNames
				If (!$distro)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$textboxDetails.Text = "Get-DistributionGroup -Identity $distro | Format-List Identity, AcceptMessagesOnlyFrom, AcceptMessagesOnlyFromDLMembers, AcceptMessagesOnlyFromSendersOrMember"
					$TextboxResults.Text = "Getting delivery restriction information for $distro..."
					$TextboxResults.text = Get-DistributionGroup -Identity $distro | Format-List Identity, AcceptMessagesOnlyFrom, AcceptMessagesOnlyFromDLMembers, AcceptMessagesOnlyFromSendersOrMembers | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
			Else
			{
				$DistroGroupsText = "Select the distro group you want to view Accept Messages Only From info for"
				Show-SelectCachedDistroGroups_psf
				$distro = $SelectCachedDistroGroups_comboboxNames
				If (!$distro)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$textboxDetails.Text = "Get-DistributionGroup -Identity $distro | Format-List Identity, AcceptMessagesOnlyFrom, AcceptMessagesOnlyFromDLMembers, AcceptMessagesOnlyFromSendersOrMember"
					$TextboxResults.Text = "Getting delivery restriction information for $distro..."
					$TextboxResults.text = Get-DistributionGroup -Identity $distro | Format-List Identity, AcceptMessagesOnlyFrom, AcceptMessagesOnlyFromDLMembers, AcceptMessagesOnlyFromSendersOrMembers | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to view another Distribution Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getDistributionGroupsRejectMessagesFromInfoToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$TempDir = $env:temp
			$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter\distros.txt")
			If ((Test-Path $O365AdminTempFolder) -eq $false)
			{
				$Textboxresults.text = "Caching Distribution Groups…"
				(Get-DistributionGroup -ResultSize unlimited | Where-Object { $_.GroupType -notlike 'Universal, SecurityEnabled' }).DisplayName | Out-File "$O365AdminTempFolder"
				$Textboxresults.text = ""
				
				$DistroGroupsText = "Select the distro group you want to view Reject Messages Only From info for"
				Show-SelectCachedDistroGroups_psf
				$distro = $SelectCachedDistroGroups_comboboxNames
				If (!$distro)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$textboxDetails.Text = "Get-DistributionGroup -Identity $distro | Format-List Identity, RejectMessagesFrom, RejectMessagesFromDLMembers, RejectMessagesFromSendersOrMembers"
					$TextboxResults.Text = "Getting delivery restriction information for $distro..."
					$TextboxResults.text = Get-DistributionGroup -Identity $distro | Format-List Identity, RejectMessagesFrom, RejectMessagesFromDLMembers, RejectMessagesFromSendersOrMembers | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
			Else
			{
				$DistroGroupsText = "Select the distro group you want to view Reject Messages Only From info for"
				Show-SelectCachedDistroGroups_psf
				$distro = $SelectCachedDistroGroups_comboboxNames
				If (!$distro)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$textboxDetails.Text = "Get-DistributionGroup -Identity $distro | Format-List Identity, RejectMessagesFrom, RejectMessagesFromDLMembers, RejectMessagesFromSendersOrMembers"
					$TextboxResults.Text = "Getting delivery restriction information for $distro..."
					$TextboxResults.text = Get-DistributionGroup -Identity $distro | Format-List Identity, RejectMessagesFrom, RejectMessagesFromDLMembers, RejectMessagesFromSendersOrMembers | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to view another Distribution Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
}

$getAllGroupsAndAllMembersToCSVToolStripMenuItem1_Click = {
	Try
	{
		$savedialog = New-Object windows.forms.savefiledialog
		$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
		$savedialog.title = "Export to File"
		$savedialog.filter = ".csv|*.csv"
		$savedialog.ShowHelp = $True
		$result = $savedialog.ShowDialog(); $result
		if ($result -eq "OK")
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			#Constant Variables 
			$OutputFile = $savedialog.filename
			$TextboxResults.Text = "Getting all groups and members..."
			$arrDLMembers = @{ }
			
			#Prepare Output file with headers 
			Out-File -FilePath $OutputFile -InputObject "Distribution Group DisplayName,Distribution Group Email,Member DisplayName, Member Email, Member Type" -Encoding UTF8
			
			#Get all Distribution Groups from Office 365 
			$objDistributionGroups = Get-DistributionGroup -ResultSize Unlimited
			
			#Iterate through all groups, one at a time     
			Foreach ($objDistributionGroup in $objDistributionGroups)
			{
				
				#write-host "Processing $($objDistributionGroup.DisplayName)..."
				
				#Get members of this group 
				$objDGMembers = Get-DistributionGroupMember -Identity $($objDistributionGroup.PrimarySmtpAddress)
				
				#write-host "Found $($objDGMembers.Count) members..."
				
				#Iterate through each member 
				Foreach ($objMember in $objDGMembers)
				{
					Out-File -FilePath $OutputFile -InputObject "$($objDistributionGroup.DisplayName),$($objDistributionGroup.PrimarySMTPAddress),$($objMember.DisplayName),$($objMember.PrimarySMTPAddress),$($objMember.RecipientType)" -Encoding UTF8 -append
					#write-host "`t$($objDistributionGroup.DisplayName),$($objDistributionGroup.PrimarySMTPAddress),$($objMember.DisplayName),$($objMember.PrimarySMTPAddress),$($objMember.RecipientType)"
				}
			}
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		$TextboxResults.Text = ""
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
	
}

$getADistributionGroupsMembersToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$TempDir = $env:temp
			$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter\distros.txt")
			If ((Test-Path $O365AdminTempFolder) -eq $false)
			{
				$Textboxresults.text = "Caching Distribution Groups…"
				(Get-DistributionGroup -ResultSize unlimited | Where-Object { $_.GroupType -notlike 'Universal, SecurityEnabled' }).DisplayName | Out-File "$O365AdminTempFolder"
				$Textboxresults.text = ""
				
				
				#$ListDistributionGroupMembers = Read-Host "Enter the name of the Distribution Group you want to list members of"
				$DistroGroupsText = "Select the Distribution Group you want to view the members of"
				Show-SelectCachedDistroGroups_psf
				$ListDistributionGroupMembers = $SelectCachedDistroGroups_comboboxNames
				If (!$ListDistributionGroupMembers)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group you want to view the members of", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Getting all members of the $ListDistributionGroupMembers Distrubution Group..."
					$textboxDetails.Text = "Get-DistributionGroupMember $ListDistributionGroupMembers | Sort-Object DisplayName | Format-Table -AutoSize"
					$TextboxResults.Text = Get-DistributionGroupMember $ListDistributionGroupMembers | Sort-Object DisplayName | Format-Table -AutoSize | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
			Else
			{
				#$ListDistributionGroupMembers = Read-Host "Enter the name of the Distribution Group you want to list members of"
				$DistroGroupsText = "Select the Distribution Group you want to view the members of"
				Show-SelectCachedDistroGroups_psf
				$ListDistributionGroupMembers = $SelectCachedDistroGroups_comboboxNames
				If (!$ListDistributionGroupMembers)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group you want to view the members of", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Getting all members of the $ListDistributionGroupMembers Distrubution Group..."
					$textboxDetails.Text = "Get-DistributionGroupMember $ListDistributionGroupMembers | Sort-Object DisplayName | Format-Table -AutoSize"
					$TextboxResults.Text = Get-DistributionGroupMember $ListDistributionGroupMembers | Sort-Object DisplayName | Format-Table -AutoSize | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get Members of another Distribution Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getAllDisabledUsersThatAreStillMembersOfDistroGroupsToCSVToolStripMenuItem_Click = {
	Try
	{
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$savedialog = New-Object windows.forms.savefiledialog
			$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
			$savedialog.title = "Export to File"
			$savedialog.filter = ".csv|*.csv"
			$savedialog.ShowHelp = $True
			$result = $savedialog.ShowDialog(); $result
			$TextboxResults.Text = "Getting all users that are disabled and still members of distro groups..."
			if ($result -eq "OK")
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				
				#Get All Groups 
				$Groups = Get-MsolGroup -All
				
				#Build Hash of all disabled users 
				$MSOLDisabledUsers = Get-MsolUser -All -EnabledFilter DisabledOnly | Select-Object ObjectId
				$AllDisabledUsers = @()
				$MSOLDisabledUsers | ForEach-Object { $AllDisabledUsers += $_.ObjectID.Guid }
				
				$DisabledUserMembers = @()
				
				foreach ($Group in $Groups)
				{
					#$TextboxResults.Text = "Processing $($Group.DisplayName)..."
					#Get All Members and Loop through them 
					$GroupMembers = Get-MsolGroupMember -All -GroupObjectID $Group.ObjectID
					foreach ($Member in $GroupMembers)
					{
						#Is this member in our disabled list? 
						if ($AllDisabledUsers -contains $Member.ObjectId)
						{
							#$TextboxResults.Text = "`tFound $($Member.DisplayName)"
							#Add them to the list 
							$DisabledUserMembers += (
								$Object = [pscustomobject][ordered] @{
									GroupName = $Group.DisplayName
									GroupEmail = $Group.EmailAddress
									UserName = $Member.DisplayName
									EmailAddress = $Member.EmailAddress
								}
							)
						}
					}
				}
				$DisabledUserMembers | Export-CSV -NoTypeInformation $savedialog.filename
				$TextboxResults.Text = ""
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$savedialog = New-Object windows.forms.savefiledialog
			$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
			$savedialog.title = "Export to File"
			$savedialog.filter = ".csv|*.csv"
			$savedialog.ShowHelp = $True
			$result = $savedialog.ShowDialog(); $result
			$TextboxResults.Text = "Getting all users that are disabled and still members of distro groups..."
			if ($result -eq "OK")
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				
				#Get All Groups 
				$Groups = Get-MsolGroup -All -TenantId $PartnerComboBox.SelectedItem.TenantID
				
				#Build Hash of all disabled users 
				$MSOLDisabledUsers = Get-MsolUser -All -TenantId $PartnerComboBox.SelectedItem.TenantID -EnabledFilter DisabledOnly | Select-Object ObjectId
				$AllDisabledUsers = @()
				$MSOLDisabledUsers | ForEach-Object { $AllDisabledUsers += $_.ObjectID.Guid }
				
				$DisabledUserMembers = @()
				
				foreach ($Group in $Groups)
				{
					#$TextboxResults.Text = "Processing $($Group.DisplayName)..."
					#Get All Members and Loop through them 
					$GroupMembers = Get-MsolGroupMember -All -GroupObjectID $Group.ObjectID -TenantId $PartnerComboBox.SelectedItem.TenantID
					foreach ($Member in $GroupMembers)
					{
						#Is this member in our disabled list? 
						if ($AllDisabledUsers -contains $Member.ObjectId)
						{
							#$TextboxResults.Text = "`tFound $($Member.DisplayName)"
							#Add them to the list 
							$DisabledUserMembers += (
								$Object = [pscustomobject][ordered] @{
									GroupName = $Group.DisplayName
									GroupEmail = $Group.EmailAddress
									UserName = $Member.DisplayName
									EmailAddress = $Member.EmailAddress
								}
							)
						}
					}
				}
				$DisabledUserMembers | Export-CSV -NoTypeInformation $savedialog.filename
				$TextboxResults.Text = ""
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Else
		{
			$savedialog = New-Object windows.forms.savefiledialog
			$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
			$savedialog.title = "Export to File"
			$savedialog.filter = ".csv|*.csv"
			$savedialog.ShowHelp = $True
			$result = $savedialog.ShowDialog(); $result
			$TextboxResults.Text = "Getting all users that are disabled and still members of distro groups..."
			if ($result -eq "OK")
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				
				#Get All Groups 
				$Groups = Get-MsolGroup -All
				
				#Build Hash of all disabled users 
				$MSOLDisabledUsers = Get-MsolUser -All -EnabledFilter DisabledOnly | Select-Object ObjectId
				$AllDisabledUsers = @()
				$MSOLDisabledUsers | ForEach-Object { $AllDisabledUsers += $_.ObjectID.Guid }
				
				$DisabledUserMembers = @()
				
				foreach ($Group in $Groups)
				{
					#$TextboxResults.Text = "Processing $($Group.DisplayName)..."
					#Get All Members and Loop through them 
					$GroupMembers = Get-MsolGroupMember -All -GroupObjectID $Group.ObjectID
					foreach ($Member in $GroupMembers)
					{
						#Is this member in our disabled list? 
						if ($AllDisabledUsers -contains $Member.ObjectId)
						{
							#$TextboxResults.Text = "`tFound $($Member.DisplayName)"
							#Add them to the list 
							$DisabledUserMembers += (
								$Object = [pscustomobject][ordered] @{
									GroupName = $Group.DisplayName
									GroupEmail = $Group.EmailAddress
									UserName = $Member.DisplayName
									EmailAddress = $Member.EmailAddress
								}
							)
						}
					}
				}
				$DisabledUserMembers | Export-CSV -NoTypeInformation $savedialog.filename
				$TextboxResults.Text = ""
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$rejectMessagesFromSpecificSenderForGroupToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$TempDir = $env:temp
			$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter\distros.txt")
			If ((Test-Path $O365AdminTempFolder) -eq $false)
			{
				$Textboxresults.text = "Caching Distribution Groups…"
				(Get-DistributionGroup -ResultSize unlimited | Where-Object { $_.GroupType -notlike 'Universal, SecurityEnabled' }).DisplayName | Out-File "$O365AdminTempFolder"
				$Textboxresults.text = ""
				
				$DistroGroupsText = "Select the distro group you want to modify delivery restriction for"
				Show-SelectCachedDistroGroups_psf
				$distro = $SelectCachedDistroGroups_comboboxNames
				If (!$distro)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group", "Error")
				}
				Else
				{
					$DistroGroupsText = "Select the distro group you don't want the members to be able to send to $distro"
					Show-SelectCachedDistroGroups_psf
					$rejectfrom = $SelectCachedDistroGroups_comboboxNames
					If (!$rejectfrom)
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group", "Error")
					}
					Else
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$textboxDetails.Text = "Set-DistributionGroup -Identity $distro -RejectMessagesFrom `@{ Add = $Rejectfrom }"
						$TextboxResults.Text = "Modifying delivery restriction information for $distro"
						Set-DistributionGroup -Identity $distro -RejectMessagesFromDLMembers @{ Add = $Rejectfrom }
						$TextboxResults.text = Get-DistributionGroup -Identity $distro | Format-List Identity, RejectMessagesFrom, RejectMessagesFromDLMembers, RejectMessagesFromSendersOrMembers | Out-String -Width 2147483647
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
				}
			}
			Else
			{
				
				$DistroGroupsText = "Select the distro group you want to modify delivery restriction for"
				Show-SelectCachedDistroGroups_psf
				$distro = $SelectCachedDistroGroups_comboboxNames
				If (!$distro)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group", "Error")
				}
				Else
				{
					$DistroGroupsText = "Select the distro group you don't want the members to be able to send to $distro"
					Show-SelectCachedDistroGroups_psf
					$rejectfrom = $SelectCachedDistroGroups_comboboxNames
					If (!$rejectfrom)
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group", "Error")
					}
					Else
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$textboxDetails.Text = "Set-DistributionGroup -Identity $distro -RejectMessagesFrom `@{ Add = $Rejectfrom }"
						$TextboxResults.Text = "Modifying delivery restriction information for $distro"
						Set-DistributionGroup -Identity $distro -RejectMessagesFromDLMembers @{ Add = $Rejectfrom }
						$TextboxResults.text = Get-DistributionGroup -Identity $distro | Format-List Identity, RejectMessagesFrom, RejectMessagesFromDLMembers, RejectMessagesFromSendersOrMembers | Out-String -Width 2147483647
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to modify another Distribution Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$acceptMessagesForAGroupFromMembersOfAGroupToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$TempDir = $env:temp
			$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter\distros.txt")
			If ((Test-Path $O365AdminTempFolder) -eq $false)
			{
				$Textboxresults.text = "Caching Distribution Groups…"
				(Get-DistributionGroup -ResultSize unlimited | Where-Object { $_.GroupType -notlike 'Universal, SecurityEnabled' }).DisplayName | Out-File "$O365AdminTempFolder"
				$Textboxresults.text = ""
				
				$DistroGroupsText = "Select the distro group you want to modify delivery restriction for"
				Show-SelectCachedDistroGroups_psf
				$distro = $SelectCachedDistroGroups_comboboxNames
				If (!$distro)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group", "Error")
				}
				Else
				{
					$DistroGroupsText = "Select the distro group you want the members to be able to send to $distro"
					Show-SelectCachedDistroGroups_psf
					$rejectfrom = $SelectCachedDistroGroups_comboboxNames
					If (!$rejectfrom)
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group", "Error")
					}
					Else
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$textboxDetails.Text = "Set-DistributionGroup -Identity $distro -AllowMessagesFrom `@{ Add = $Rejectfrom }"
						$TextboxResults.Text = "Modifying delivery restriction information for $distro"
						Set-DistributionGroup -Identity $distro -AcceptMessagesOnlyFromDLMembers @{ Add = $Rejectfrom }
						$TextboxResults.text = Get-DistributionGroup -Identity $distro | Format-List Identity, AcceptMessagesOnlyFrom, AcceptMessagesOnlyFromDLMembers, AcceptMessagesOnlyFromSendersOrMembers | Out-String -Width 2147483647
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
				}
			}
			Else
			{
				$DistroGroupsText = "Select the distro group you want to modify delivery restriction for"
				Show-SelectCachedDistroGroups_psf
				$distro = $SelectCachedDistroGroups_comboboxNames
				If (!$distro)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group", "Error")
				}
				Else
				{
					$DistroGroupsText = "Select the distro group you want the members to be able to send to $distro"
					Show-SelectCachedDistroGroups_psf
					$rejectfrom = $SelectCachedDistroGroups_comboboxNames
					If (!$rejectfrom)
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group", "Error")
					}
					Else
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$textboxDetails.Text = "Set-DistributionGroup -Identity $distro -AllowMessagesFrom `@{ Add = $Rejectfrom }"
						$TextboxResults.Text = "Modifying delivery restriction information for $distro"
						Set-DistributionGroup -Identity $distro -AcceptMessagesOnlyFromDLMembers @{ Add = $Rejectfrom }
						$TextboxResults.text = Get-DistributionGroup -Identity $distro | Format-List Identity, AcceptMessagesOnlyFrom, AcceptMessagesOnlyFromDLMembers, AcceptMessagesOnlyFromSendersOrMembers | Out-String -Width 2147483647
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to modify another Distribution Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

#Unified Groups

$getListOfUnifiedGroupsToolStripMenuItem_Click = {
	try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting list of all unified groups..."
		$textboxDetails.Text = "Get-UnifiedGroup | Sort-Object Name | Format-Table -AutoSize"
		$TextboxResults.Text = Get-UnifiedGroup | Sort-Object Name | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$listMembersOfAGroupToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$GetUnifiedGroupMembers = Read-Host "Enter the name of the group you want to view members for."
			$SelectUnifiedGroupsText = "Select the Unified Group you want to view members for"
			Show-SelectUnifiedGroups_psf
			$GetUnifiedGroupMembers = $SelectUnifiedGroups_comboboxUnifiedGroups
			If (!$GetUnifiedGroupMembers)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Unified Group was selected, please enter a valid Unified Group you want to view members for", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting all members of the $GetUnifiedGroupMembers group..."
				$textboxDetails.Text = "Get-UnifiedGroupLinks –Identity $GetUnifiedGroupMembers –LinkType Members | Sort-Object DisplayName | Format-Table DisplayName -AutoSize"
				$TextboxResults.Text = Get-UnifiedGroupLinks –Identity $GetUnifiedGroupMembers –LinkType Members | Sort-Object DisplayName | Format-Table DisplayName -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get Members of another Unified Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$removeAGroupToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$RemoveUnifiedGroup = Read-Host "Enter the name of the group you want to remove"
			$SelectUnifiedGroupsText = "Select the Unified Group you want to remove"
			Show-SelectUnifiedGroups_psf
			$RemoveUnifiedGroup = $SelectUnifiedGroups_comboboxUnifiedGroups
			If (!$RemoveUnifiedGroup)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Unified Group was selected, please select a valid Unified Group to remove", "Error")
			}
			Else
			{
				$OUTPUT = [System.Windows.Forms.MessageBox]::Show("Are you sure you want to delete $RemoveUnifiedGroup ?", "Warning!", 4)
				
				If ($OUTPUT -eq "YES")
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Removing the $RemoveUnifiedGroup group..."
					$textboxDetails.Text = "Remove-UnifiedGroup $RemoveUnifiedGroup"
					Remove-UnifiedGroup $RemoveUnifiedGroup
					$TextboxResults.Text = "Getting list of unified groups..."
					$TextboxResults.Text = Get-UnifiedGroup | Sort-Object Name | Format-Table -AutoSize | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
					
				}
				Else
				{
					[System.Windows.Forms.MessageBox]::Show("$RemoveUnifiedGroup was not deleted", "Info")
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to remove another Unified Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$addAUserToAGroupToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$UnifiedGroupAddUser = Read-Host "Enter the name of the group you want to add a user to"
			$SelectUnifiedGroupsText = "Select the Unified Group you want to add a user to"
			Show-SelectUnifiedGroups_psf
			$UnifiedGroupAddUser = $SelectUnifiedGroups_comboboxUnifiedGroups
			If (!$UnifiedGroupAddUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Unified Group was selected, please select a valid Unified Group you want to add a user to", "Error")
			}
			Else
			{
				#$UnifiedGroupUserAdd = Read-Host "Enter the UPN of the user you want to add to the $UnifiedGroupAddUser group."
				$SelectUsersFormText = "Select the user you want add to $UnifiedGroupAddUser"
				Show-SelectCachedDisplayNames_psf
				$UnifiedGroupUserAdd = $SelectCachedDisplayNames_comboboxNames
				If (!$UnifiedGroupUserAdd)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a user you want to add to $UnifiedGroupAddUser", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Adding $UnifiedGroupUserAdd as a member of the $UnifiedGroupAddUser group..."
					$textboxDetails.Text = "Add-UnifiedGroupLinks $UnifiedGroupAddUser –Links $UnifiedGroupUserAdd –LinkType Members"
					Add-UnifiedGroupLinks $UnifiedGroupAddUser –Links $UnifiedGroupUserAdd –LinkType Members
					$TextboxResults.Text = "Getting members for $UnifiedGroupAddUser..."
					$TextboxResults.Text = Get-UnifiedGroupLinks –Identity $UnifiedGroupAddUser –LinkType Members | Sort-Object DisplayName | Format-Table DisplayName -AutoSize | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to add another User to a Unified Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$createANewGroupToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$NewUnifiedGroupName = Read-Host "Enter the Display Name of the new group"
			If (!$NewUnifiedGroupName)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Display Name was entered, please enter a valid display name for the new group", "Error")
			}
			Else
			{
				#$NewUnifiedGroupAccessType = Read-Host "Enter the Access Type for the group $NewUnifiedGroupName (Public or Private)"
				$UnifiedGroupAccessTypeText = "Select the Access Type for the group $NewUnifiedGroupName"
				Show-SelectUnifiedGroupAccessType_psf
				$NewUnifiedGroupAccessType = $SelectUnifiedGroupAccessType_comboboxAccessType_SelectedItem
				If (!$NewUnifiedGroupAccessType)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Access Type was selected, please select a valid access type", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Creating a the $NewUnifiedGroupName group..."
					$textboxDetails.Text = "New-UnifiedGroup –DisplayName $NewUnifiedGroupName -AccessType $NewUnifiedGroupAccessType"
					New-UnifiedGroup –DisplayName $NewUnifiedGroupName -AccessType $NewUnifiedGroupAccessType
					$TextboxResults.Text = Get-UnifiedGroup $NewUnifiedGroupName | Format-Table -AutoSize | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to create a new Unified Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$listOwnersOfAGroupToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$GetUnifiedGroupOwners = Read-Host "Enter the name of the group you want to view members for."
			$SelectUnifiedGroupsText = "Select the Unified Group you want to view owners for"
			Show-SelectUnifiedGroups_psf
			$GetUnifiedGroupOwners = $SelectUnifiedGroups_comboboxUnifiedGroups
			If (!$GetUnifiedGroupOwners)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Unified Group was selected, please select a valid Unified Group you want to view owners for", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting all owners of the $GetUnifiedGroupOwners group..."
				$textboxDetails.Text = "Get-UnifiedGroupLinks –Identity $GetUnifiedGroupOwners –LinkType Owners | Format-List DisplayName | Format-Table -AutoSize"
				$TextboxResults.Text = Get-UnifiedGroupLinks –Identity $GetUnifiedGroupOwners –LinkType Owners | Sort-Object DisplayName | Format-Table -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get Owners for another Unified Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$listSubscribersOfAGroupToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$GetUnifiedGroupSubscribers = Read-Host "Enter the name of the group you want to view members for."
			$SelectUnifiedGroupsText = "Select the Unified Group you want to view members for"
			Show-SelectUnifiedGroups_psf
			$GetUnifiedGroupSubscribers = $SelectUnifiedGroups_comboboxUnifiedGroups
			If (!$GetUnifiedGroupSubscribers)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Unified Group was selected, please select a valid Unified Group", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting all subscribers of the $GetUnifiedGroupSubscribers group..."
				$textboxDetails.Text = "Get-UnifiedGroupLinks –Identity $GetUnifiedGroupSubscribers –LinkType Subscribers | Sort-Object DisplayName | Format-Table -AutoSize"
				$TextboxResults.Text = Get-UnifiedGroupLinks –Identity $GetUnifiedGroupSubscribers –LinkType Subscribers | Sort-Object DisplayName | Format-Table -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get Subscribers of another Unified Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$addAnOwnerToAGroupToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$TextboxResults.Text = "Important! The user must be a member of the group prior to becoming an owner"
			#$UnifiedGroupAddOwner = Read-Host "Enter the name of the group you want to modify ownership for"
			$SelectUnifiedGroupsText = "Select the Unified Group you want to modify ownership for"
			Show-SelectUnifiedGroups_psf
			$UnifiedGroupModify = $SelectUnifiedGroups_comboboxUnifiedGroups
			If (!$UnifiedGroupModify)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Unified Group was selected, please select a Unified Group you want to modify ownership for", "Error")
			}
			Else
			{
				#$AddUnifiedGroupOwner = Read-Host "Enter the UPN of the user you want to become an owner"
				$UnifiedGroupMembersText = "Select the user you want to add as a owner to $UnifiedGroupModify"
				Show-SelectUnifiedGroupMembers_psf
				$AddUnifiedGroupOwner = $SelectUnifiedGroupMembers_comboboxUnifiedGroupMembers
				If (!$AddUnifiedGroupOwner)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a user you want to be an owner of $UnifiedGroupModify", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Adding $AddUnifiedGroupOwner as an owner of the $UnifiedGroupModify group..."
					$textboxDetails.Text = "Add-UnifiedGroupLinks -Identity $UnifiedGroupModify -LinkType Owners -Links $AddUnifiedGroupOwner"
					Add-UnifiedGroupLinks -Identity $UnifiedGroupModify -LinkType Owners -Links $AddUnifiedGroupOwner
					$TextboxResults.Text = "Getting list of owners for $UnifiedGroupModify..."
					$TextboxResults.Text = Get-UnifiedGroupLinks –Identity $UnifiedGroupModify –LinkType Owners | Sort-Object DisplayName | Format-Table -AutoSize | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to add another User as an Owner of a Unified Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$addASubscriberToAGroupToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$UnifiedGroupAddSubscriber = Read-Host "Enter the name of the group you want to add a subscriber for"
			$SelectUnifiedGroupsText = "Select the Unified Group you want to add a subscriber to"
			Show-SelectUnifiedGroups_psf
			$UnifiedGroupAddSubscriber = $SelectUnifiedGroups_comboboxUnifiedGroups
			If (!$UnifiedGroupAddSubscriber)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Unified Group was selected, please select a valid Unified Group", "Error")
			}
			Else
			{
				#$AddUnifiedGroupSubscriber = Read-Host "Enter the UPN of the user you want to add as a subscriber"
				$SelectUsersFormText = "Select the user you want to add as a subscriber to $UnifiedGroupAddSubscriber"
				Show-SelectCachedDisplayNames_psf
				$AddUnifiedGroupSubscriber = $SelectCachedDisplayNames_comboboxNames
				If (!$AddUnifiedGroupSubscriber)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a valid user you want to add as a subscriber to $UnifiedGroupAddSubscriber", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Adding $AddUnifiedGroupSubscriber as a subscriber to the $UnifiedGroupAddSubscriber group..."
					$textboxDetails.Text = "Add-UnifiedGroupLinks -Identity $UnifiedGroupAddSubscriber -LinkType Owners -Links $AddUnifiedGroupSubscriber"
					Add-UnifiedGroupLinks -Identity $UnifiedGroupAddSubscriber -LinkType Owners -Links $AddUnifiedGroupSubscriber
					$TextboxResults.Text = "Getting list of subscribers for $UnifiedGroupAddSubscriber..."
					$TextboxResults.Text = Get-UnifiedGroupLinks –Identity $UnifiedGroupAddSubscriber –LinkType Subscribers | Sort-Object DisplayName | Format-List | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to add a Subscriber to another Unified Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$removeAMemberFromAGroupToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$SelectUnifiedGroupsText = "Select the Unified Group you want to remove a member from"
			Show-SelectUnifiedGroups_psf
			$UnifiedGroupModify = $SelectUnifiedGroups_comboboxUnifiedGroups
			If (!$UnifiedGroupModify)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Unified Group was selected, please select a Unified Group you want to remove a member from", "Error")
			}
			Else
			{
				$UnifiedGroupMembersText = "Select the user you want to remove from $UnifiedGroupModify"
				Show-SelectUnifiedGroupMembers_psf
				$RemoveUserFromUnifiedGroup = $SelectUnifiedGroupMembers_comboboxUnifiedGroupMembers
				If (!$RemoveUserFromUnifiedGroup)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a user to remove from $UnifiedGroupModify", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Removing $RemoveUserFromUnifiedGroup from the $UnifiedGroupModify group..."
					$textboxDetails.Text = "Remove-UnifiedGroupLinks -Identity $UnifiedGroupModify -LinkType Members -Links $RemoveUserFromUnifiedGroup"
					Remove-UnifiedGroupLinks -Identity $UnifiedGroupModify -LinkType Members -Links $RemoveUserFromUnifiedGroup
					$TextboxResults.Text = "Getting members of $UnifiedGroupModify..."
					$TextboxResults.Text = Get-UnifiedGroupLinks –Identity $UnifiedGroupModify –LinkType Members | Sort-Object Name | Format-Table Name -AutoSize | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to remove another Member from a Unified Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

#Security Groups

$createARegularSecurityGroupToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$SecurityGroupName = Read-Host "Enter a name for the new Security Group"
			If (!$SecurityGroupName)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Name was entered, please enter a valid name for the Security Group", "Error")
			}
			Else
			{
				#What to do if connected to main o365 account
				If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Creating the $SecurityGroupName security group..."
					$textboxDetails.Text = "New-MsolGroup -DisplayName $SecurityGroupName "
					$TextboxResults.Text = New-MsolGroup -DisplayName $SecurityGroupName | Format-List | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
				#What to do if connected to partner account
				ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
				{
					$TenantText = $PartnerComboBox.text
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Creating the $SecurityGroupName security group..."
					$textboxDetails.Text = "New-MsolGroup -DisplayName $SecurityGroupName -TenantId $TenantText"
					$TextboxResults.Text = New-MsolGroup -DisplayName $SecurityGroupName -TenantId $PartnerComboBox.SelectedItem.TenantID | Format-List | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Creating the $SecurityGroupName security group..."
					$textboxDetails.Text = "New-MsolGroup -DisplayName $SecurityGroupName "
					$TextboxResults.Text = New-MsolGroup -DisplayName $SecurityGroupName | Format-List | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to create another Security Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getAllRegularSecurityGroupsToolStripMenuItem_Click = {
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting list of all Security groups..."
			$textboxDetails.Text = "Get-MsolGroup -All -GroupType Security | Sort-Object DisplayName | Format-Table DisplayName, GroupType -AutoSize"
			$TextboxResults.Text = Get-MsolGroup -All -GroupType Security | Sort-Object DisplayName | Format-Table DisplayName, GroupType -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting list of all Security groups..."
			$textboxDetails.Text = "Get-MsolGroup -All -TenantId $TenantText -GroupType Security | Sort-Object DisplayName | Format-Table DisplayName, GroupType -AutoSize"
			$TextboxResults.Text = Get-MsolGroup -All -TenantId $PartnerComboBox.SelectedItem.TenantID -GroupType Security | Sort-Object DisplayName | Format-Table DisplayName, GroupType -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting list of all Security groups..."
			$textboxDetails.Text = "Get-MsolGroup -All -GroupType Security | Sort-Object DisplayName | Format-Table DisplayName, GroupType -AutoSize"
			$TextboxResults.Text = Get-MsolGroup -All -GroupType Security | Sort-Object DisplayName | Format-Table DisplayName, GroupType -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
	
}

$getAllMailEnabledSecurityGroupsToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting all Mail Enabled Security Groups..."
		$textboxDetails.Text = "Get-DistributionGroup -ResultSize unlimited | Where-Object { `$_.GroupType -like 'Universal, SecurityEnabled' } | Sort-Object DisplayName | Format-Table DisplayName, SamAccountName, GroupType, IsDirSynced, EmailAddresses -AutoSize "
		$TextboxResults.text = Get-DistributionGroup -ResultSize unlimited | Where-Object { $_.GroupType -like "Universal, SecurityEnabled" } | Sort-Object DisplayName | Format-Table DisplayName, SamAccountName, GroupType, IsDirSynced, EmailAddresses -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$createAMailEnabledSecurityGroupToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$MailEnabledSecurityGroup = Read-Host "Enter the name of the Security Group"
			If (!$MailEnabledSecurityGroup)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No name was entered, please enter a valid name for the new Security Group", "Error")
			}
			Else
			{
				$MailEnabledSMTPAddress = Read-Host "Enter the Primary SMTP address for $MailEnabledSecurityGroup"
				If (!$MailEnabledSMTPAddress)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Primary SMTP address was entered, please enter a valid Primary SMTP address", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Creating the $MailEnabledSecurityGroup security group..."
					$textboxDetails.Text = "New-DistributionGroup -Name $MailEnabledSecurityGroup -Type Security -PrimarySmtpAddress $MailEnabledSMTPAddress"
					$TextboxResults.Text = New-DistributionGroup -Name $MailEnabledSecurityGroup -Type Security -PrimarySmtpAddress $MailEnabledSMTPAddress | Format-List | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to create another Mail Enabled Security Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$addAUserToAMailEnabledSecurityGroupToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$MailEnabledGroupAdd = Read-Host "Enter the name of the Group"
			$MailEnabledSecurityGroupText = "Select the Mail Enabled Security Group you want to add a user to"
			Show-SelectMailEnabledSecurityGroups_psf
			$MailEnabledGroupAdd = $SelectMailEnabledSecurityGroups_comboboxSelectMailEnabledSecurityGroups
			If (!$MailEnabledGroupAdd)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Mail Enabled Security Group was selected, please select a valid Mail Enabled Security Group", "Error")
			}
			Else
			{
				#$MailEnabledGroupAddUser = Read-Host "Enter the UPN of the user you wish to add to $MailEnabledGroupAdd"
				$SelectUsersFormText = "Select the user you want to add to $MailEnabledGroupAdd"
				Show-SelectCachedDisplayNames_psf
				$MailEnabledGroupAddUser = $SelectCachedDisplayNames_comboboxNames
				If (!$MailEnabledGroupAddUser)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a valid user to add to $MailEnabledGroupAdd", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Adding $MailEnabledGroupAddUser to the $MailEnabledGroupAdd Group..."
					$textboxDetails.Text = "Add-DistributionGroupMember -Identity $MailEnabledGroupAdd -Member $MailEnabledGroupAddUser"
					Add-DistributionGroupMember -Identity $MailEnabledGroupAdd -Member $MailEnabledGroupAddUser
					$TextboxResults.Text = "Getting members of $MailEnabledGroupAdd..."
					$TextboxResults.Text = Get-DistributionGroupMember $MailEnabledGroupAdd | Sort-Object DisplayName | Format-Table Displayname -AutoSize | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to add another User to a Mail Enabled Security Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$allowSecurityGroupToRecieveExternalMailToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$AllowExternalEmailSecurity = Read-Host "Enter the name of the Group you want to allow external email to"
			$MailEnabledSecurityGroupText = "Select the Mail Enabled Security Group you want to allow external email to"
			Show-SelectMailEnabledSecurityGroups_psf
			$AllowExternalEmailSecurity = $SelectMailEnabledSecurityGroups_comboboxSelectMailEnabledSecurityGroups
			If (!$AllowExternalEmailSecurity)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Mail Enabled Security Group was selected, please select a valid Mail Enabled Security Group", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Allowing extneral senders for the $AllowExternalEmailSecurity Group..."
				$textboxDetails.Text = "Set-DistributionGroup $AllowExternalEmailSecurity -RequireSenderAuthenticationEnabled `$False"
				Set-DistributionGroup $AllowExternalEmailSecurity -RequireSenderAuthenticationEnabled $False
				$TextboxResults.text = Get-DistributionGroup $AllowExternalEmailSecurity | Format-List Name, RequireSenderAuthenticationEnabled | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to Allow another Security Group to Recieve External Mail?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getDetailedInfoForMailEnabledSecurityGroupToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$DetailedInfoMailEnabledSecurityGroup = Read-Host "Enter the group name"
			$MailEnabledSecurityGroupText = "Select the Mail Enabled Security Group you want to get detailed information for"
			Show-SelectMailEnabledSecurityGroups_psf
			$DetailedInfoMailEnabledSecurityGroup = $SelectMailEnabledSecurityGroups_comboboxSelectMailEnabledSecurityGroups
			If (!$DetailedInfoMailEnabledSecurityGroup)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Mail Enabled Security Group was selected, please select a valid Mail Enabled Security Group to view detailed information about", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting detailed info about the $DetailedInfoMailEnabledSecurityGroup group..."
				$textboxDetails.Text = "Get-DistributionGroup $DetailedInfoMailEnabledSecurityGroup | Format-List"
				$TextboxResults.text = Get-DistributionGroup $DetailedInfoMailEnabledSecurityGroup | Format-List | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get detailed information for another Security Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$removeMailENabledSecurityGroupToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$DeleteMailEnabledSecurityGroup = Read-Host "Enter the name of the group you want deleted."
			$MailEnabledSecurityGroupText = "Select the Mail Enabled Security Group you want to remove"
			Show-SelectMailEnabledSecurityGroups_psf
			$DeleteMailEnabledSecurityGroup = $SelectMailEnabledSecurityGroups_comboboxSelectMailEnabledSecurityGroups
			If (!$DeleteMailEnabledSecurityGroup)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Mail Enabled Security Group was selected, please select a Mail Enabled Security Group that you want to delete", "Error")
			}
			Else
			{
				
				$OUTPUT = [System.Windows.Forms.MessageBox]::Show("Are you sure you want to delete $DeleteMailEnabledSecurityGroup ?", "Warning!", 4)
				
				If ($OUTPUT -eq "YES")
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Deleting the $DeleteMailEnabledSecurityGroup Group..."
					$textboxDetails.Text = "Remove-DistributionGroup $DeleteMailEnabledSecurityGroup"
					Remove-DistributionGroup $DeleteMailEnabledSecurityGroup
					$TextboxResults.Text = "Getting list of mail enabled security groups..."
					$TextboxResults.text = Get-DistributionGroup -ResultSize unlimited | Where-Object { $_.GroupType -like "Universal, SecurityEnabled" } | Sort-Object DisplayName | Format-Table DisplayName -AutoSize | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
				Else
				{
					[System.Windows.Forms.MessageBox]::Show("$DeleteMailEnabledSecurityGroup was not deleted", "Info")
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to remove another Mail Enabled Security Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$denySecurityGroupFromRecievingExternalEmailToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$DenyExternalEmailSecurity = Read-Host "Enter the name of the Group you want to deny external email to"
			$MailEnabledSecurityGroupText = "Select the Mail Enabled Security Group you want to deny external email to"
			Show-SelectMailEnabledSecurityGroups_psf
			$DenyExternalEmailSecurity = $SelectMailEnabledSecurityGroups_comboboxSelectMailEnabledSecurityGroups
			If (!$DenyExternalEmailSecurity)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Mail Enabled Security Group was selected, please select a valid Mail Enabled Security Group", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Denying extneral senders for the $DenyExternalEmailSecurity Group..."
				$textboxDetails.Text = "Set-DistributionGroup $DenyExternalEmailSecurity -RequireSenderAuthenticationEnabled `$True"
				Set-DistributionGroup $DenyExternalEmailSecurity -RequireSenderAuthenticationEnabled $True
				$TextboxResults.text = Get-DistributionGroup $DenyExternalEmailSecurity | Format-List Name, RequireSenderAuthenticationEnabled | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to Deny another Security Group from recieving External Email?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}



###RESOURCE MAILBOX###

	#Booking Options

$allowConflictMeetingsToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$ConflictMeetingAllow = Read-Host "Enter the Room Name of the Resource Calendar you want to allow conflicts"
			$RoomMailboxText = "Select a Room Mailbox to allow conflict meetings for"
			Show-SelectRoomMailbox_psf
			$ConflictMeetingAllow = $SelectRoomMailbox_comboboxSelectRoomMailbox
			If (!$ConflictMeetingAllow)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Room Mailbox was selected, please select a valid Room Mailbox", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Allowing conflict meetings $ConflictMeetingAllow..."
				$textboxDetails.Text = "Set-CalendarProcessing $ConflictMeetingAllow -AllowConflicts `$True"
				Set-CalendarProcessing $ConflictMeetingAllow -AllowConflicts $True
				$TextboxResults.Text = Get-CalendarProcessing -identity $ConflictMeetingAllow | Format-List Identity, AllowConflicts | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to allow conflict meetings on another Resource Mailbox?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$denyConflictMeetingsForAllResourceMailboxesToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Denying conflict meeting for all room calendars..."
		$textboxDetails.Text = "Get-MailBox -ResultSize unlimited | Where-Object { `$_.ResourceType -eq 'Room' } | Set-CalendarProcessing -AllowConflicts `$False"
		Get-MailBox -ResultSize unlimited | Where-Object { $_.ResourceType -eq "Room" } | Set-CalendarProcessing -AllowConflicts $False
		$TextboxResults.Text = Get-MailBox -ResultSize unlimited | Where-Object { $_.ResourceType -eq "Room" } | Get-CalendarProcessing | Sort-Object Identity | Format-Table Identity, AllowConflicts -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$allowConflicMeetingsForAllResourceMailboxesToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Allowing conflict meeting for all room calendars..."
		$textboxDetails.Text = "Get-MailBox -ResultSize unlimited | Where-Object { `$_.ResourceType -eq 'Room' } | Set-CalendarProcessing -AllowConflicts `$True"
		Get-MailBox -ResultSize unlimited | Where-Object { $_.ResourceType -eq "Room" } | Set-CalendarProcessing -AllowConflicts $True
		$TextboxResults.Text = Get-MailBox -ResultSize unlimited | Where-Object { $_.ResourceType -eq "Room" } | Get-CalendarProcessing | Sort-Object Identity | Format-Table Identity, AllowConflicts -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$disallowconflictmeetingsToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$ConflictMeetingDeny = Read-Host "Enter the Room Name of the Resource Calendar you want to disallow conflicts"
			$RoomMailboxText = "Select a Room Mailbox to disallow conflict meetings for"
			Show-SelectRoomMailbox_psf
			$ConflictMeetingDeny = $SelectRoomMailbox_comboboxSelectRoomMailbox
			If (!$ConflictMeetingDeny)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Room Mailbox was selected, please select a valid Room Mailbox", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Denying conflict meetings for $ConflictMeetingDeny..."
				$textboxDetails.Text = "Set-CalendarProcessing $ConflictMeetingDeny -AllowConflicts `$False"
				Set-CalendarProcessing $ConflictMeetingDeny -AllowConflicts $False
				$TextboxResults.Text = Get-CalendarProcessing -identity $ConflictMeetingDeny | Format-List Identity, AllowConflicts | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to deny conflict meetings on another Resource Mailbox?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$enableAutomaticBookingForAllResourceMailboxToolStripMenuItem1_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Enabling automatic booking on all room calendars..."
		$textboxDetails.Text = "Get-MailBox -ResultSize unlimited | Where-Object { `$_.ResourceType -eq 'Room' } | Set-CalendarProcessing -AutomateProcessing:AutoAccept"
		Get-MailBox -ResultSize unlimited | Where-Object { $_.ResourceType -eq "Room" } | Set-CalendarProcessing -AutomateProcessing:AutoAccept
		$TextboxResults.Text = Get-MailBox -ResultSize unlimited | Where-Object { $_.ResourceType -eq "Room" } | Get-CalendarProcessing | Sort-Object Identity | Format-Table Identity, AutomateProcessing -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$GetRoomMailBoxCalendarProcessingToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$RoomMailboxCalProcessing = Read-Host "Enter the Calendar Name you want to view calendar processing information for"
			$RoomMailboxText = "Select a Room Mailbox to view calendar processing for"
			Show-SelectRoomMailbox_psf
			$RoomMailboxCalProcessing = $SelectRoomMailbox_comboboxSelectRoomMailbox
			If (!$RoomMailboxCalProcessing)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Room Mailbox was selected, please select a valid Room Mailox", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting calendar processing information for $RoomMailboxCalProcessing..."
				$textboxDetails.Text = "Get-Mailbox $RoomMailboxCalProcessing | Get-CalendarProcessing | Format-List"
				$TextboxResults.Text = Get-Mailbox $RoomMailboxCalProcessing | Get-CalendarProcessing | Format-List | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get Calendar Processing for another Resource Mailbox?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

#Room Mailbox

$convertAMailboxToARoomMailboxToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$MailboxtoRoom = Read-Host "What user would you like to convert to a Room Mailbox? Please enter the full email address"
			$MailboxText = "Select a Mailbox to convert to a Room Mailbox"
			Show-SelectMailboxes_psf
			$MailboxtoRoom = $SelectMailboxes_comboboxSelectMailbox
			If (!$MailboxtoRoom)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Mailbox was selected, please select a valid Mailbox to convert to a Room Mailbox", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Converting $MailboxtoRoom to a Room Mailbox..."
				$textboxDetails.Text = "Set-Mailbox $MailboxtoRoom -Type Room"
				Set-Mailbox $MailboxtoRoom -Type Room
				$TextboxResults.Text = Get-MailBox $MailboxtoRoom | Format-List Name, ResourceType, PrimarySmtpAddress, EmailAddresses, UserPrincipalName, IsMailboxEnabled | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to convert another Mailbox to a Room Mailbox?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$createANewRoomMailboxToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$NewRoomMailbox = Read-Host "Enter the name of the new Room Mailbox"
			If (!$NewRoomMailbox)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No name was entered for the new Room Mailbox, please enter a valid name", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Creating the $NewRoomMailbox Room Mailbox..."
				$textboxDetails.Text = "New-Mailbox -Name $NewRoomMailbox -Room "
				$TextboxResults.Text = New-Mailbox -Name $NewRoomMailbox -Room | Format-List | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to create another Room Mailbox?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getListOfRoomMailboxesToolStripMenuItem_Click = {
	try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting list of all Room Mailboxes..."
		$textboxDetails.Text = "Get-MailBox -ResultSize unlimited | Where-Object { `$_.ResourceType -eq 'Room' } | Sort-Object Name | Format-Table -AutoSize"
		$TextboxResults.Text = Get-MailBox -ResultSize unlimited | Where-Object { $_.ResourceType -eq "Room" } | Sort-Object Name | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$removeARoomMailboxToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$RemoveRoomMailbox = Read-Host "Enter the name of the room mailbox"
			$RoomMailboxText = "Select a Room Mailbox to remove"
			Show-SelectRoomMailbox_psf
			$RemoveRoomMailbox = $SelectRoomMailbox_comboboxSelectRoomMailbox
			If (!$RemoveRoomMailbox)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Room Mailbox was selected, please select a valid Room Mailbox to remove", "Error")
			}
			Else
			{
				
				$OUTPUT = [System.Windows.Forms.MessageBox]::Show("Are you sure you want to remove $RemoveRoomMailbox ?", "Warning!", 4)
				
				If ($OUTPUT -eq "YES")
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Removing the $RemoveRoomMailbox Room Mailbox..."
					$textboxDetails.Text = "Remove-Mailbox $RemoveRoomMailbox"
					Remove-Mailbox $RemoveRoomMailbox
					$TextboxResults.Text = "Getting list of Room Mailboxes..."
					$TextboxResults.Text = Get-MailBox -ResultSize unlimited | Where-Object { $_.ResourceType -eq "Room" } | Sort-Object Name | Format-Table -AutoSize | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
				Else
				{
					[System.Windows.Forms.MessageBox]::Show("$RemoveRoomMailbox was not removed", "Info")
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to remove another Room Mailbox?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}




###JUNK EMAIL CONFIGURATION###

	#Blacklist

$blacklistDomainForAllToolStripMenuItem_Click = {
	Try
	{
		$BlacklistDomain = Read-Host "Enter the domain you want to blacklist for all users. EX: google.com"
		If (!$BlacklistDomain)
		{
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("No domain was entered, please enter a valid domain you want to blacklist for all users", "Error")
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Blacklisting $BlacklistDomain for all users..."
			$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Set-MailboxJunkEmailConfiguration -BlockedSendersAndDomains `@{ Add = $BlacklistDomain }"
			Get-Mailbox -ResultSize unlimited | Set-MailboxJunkEmailConfiguration -BlockedSendersAndDomains @{ Add = $BlacklistDomain }
			$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Get-MailboxJunkEmailConfiguration | Sort-Object Identity | Format-Table Identity, BlockedSendersAndDomains, Enabled -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$blacklistDomainForASingleUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$Blockeddomainuser = Read-Host "Enter the UPN of the user you want to modify junk email for"
			$SelectUsersFormText = "Select the User you want to modify the blacklist for"
			Show-SelectCachedDisplayNames_psf
			$Blockeddomainuser = $SelectCachedDisplayNames_comboboxNames
			If (!$Blockeddomainuser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid User", "Error")
			}
			Else
			{
				$BlockedDomain2 = Read-Host "Enter the Domain you want to blacklist"
				If (!$BlockedDomain2)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Domain was entered, please enter a valid Domain to blacklist", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Blacklisting $BlockedDomain2 for $Blockeddomainuser..."
					$textboxDetails.Text = "Set-MailboxJunkEmailConfiguration -Identity $Blockeddomainuser -BlockedSendersAndDomains `@{ Add = $BlockedDomain2 } "
					Set-MailboxJunkEmailConfiguration -Identity $Blockeddomainuser -BlockedSendersAndDomains @{ Add = $BlockedDomain2 }
					$TextboxResults.Text = Get-MailboxJunkEmailConfiguration -Identity $Blockeddomainuser | Format-List Identity, BlockedSendersAndDomains | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to modify the blacklist for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$blacklistASpecificEmailAddressForAllToolStripMenuItem_Click = {
	Try
	{
		$BlockSpecificEmailForAll = Read-Host "Enter the email address you want to blacklist for all"
		If (!$BlockSpecificEmailForAll)
		{
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("No e-mail address was entered, please enter a valid e-mail address you want to blacklist for all users", "Error")
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Blacklisting $BlockSpecificEmailForAll for all users..."
			$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Set-MailboxJunkEmailConfiguration -BlockedSendersAndDomains `@{ Add = $BlockSpecificEmailForAll }"
			Get-Mailbox -ResultSize unlimited | Set-MailboxJunkEmailConfiguration -BlockedSendersAndDomains @{ Add = $BlockSpecificEmailForAll }
			$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Get-MailboxJunkEmailConfiguration | Sort-Object Identity | Format-Table Identity, BlockedSendersAndDomains, Enabled -Autosize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$blacklistASpecificEmailAddressForASingleUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$ModifyblacklistforaUser = Read-Host "Enter the user you want to modify the blacklist for"
			$SelectUsersFormText = "Select the User you want to modify the blacklist for"
			Show-SelectCachedDisplayNames_psf
			$ModifyblacklistforaUser = $SelectCachedDisplayNames_comboboxNames
			If (!$ModifyblacklistforaUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid User", "Error")
			}
			Else
			{
				$DenySpecificEmailForOne = Read-Host "Enter the E-mail Address you want to blacklist for $ModifyblacklistforaUser"
				If (!$DenySpecificEmailForOne)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No E-mail Address was entered, please enter a valid E-mail Address to blacklist for $ModifyblacklistforaUser", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Blacklisting $DenySpecificEmailForOne for $ModifyblacklistforaUser..."
					$textboxDetails.Text = "Set-MailboxJunkEmailConfiguration -Identity $ModifyblacklistforaUser -BlockedSendersAndDomains `@{ Add = $DenySpecificEmailForOne }"
					Set-MailboxJunkEmailConfiguration -Identity $ModifyblacklistforaUser -BlockedSendersAndDomains @{ Add = $DenySpecificEmailForOne }
					$TextboxResults.Text = Get-MailboxJunkEmailConfiguration -Identity $ModifyblacklistforaUser | Format-List Identity, BlockedSendersAndDomains, Enabled | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to modify the blacklist for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

#Junk Email General Items

$checkSafeAndBlockedSendersForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$CheckSpamUser = Read-Host "Enter the UPN of the user you want to check blocked and allowed senders for"
			$SelectUsersFormText = "Select the User you want to check safe and blocked senders for"
			Show-SelectCachedDisplayNames_psf
			$GlobalUPN = $SelectCachedDisplayNames_comboboxNames
			If (!$GlobalUPN)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid User", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting safe and blocked senders for $GlobalUPN..."
				$textboxDetails.Text = "Get-MailboxJunkEmailConfiguration -Identity $GlobalUPN | Format-List Identity, TrustedListsOnly, ContactsTrusted, TrustedSendersAndDomains, BlockedSendersAndDomains, TrustedRecipientsAndDomains, IsValid "
				$TextboxResults.Text = Get-MailboxJunkEmailConfiguration -Identity $GlobalUPN | Format-List Identity, TrustedListsOnly, ContactsTrusted, TrustedSendersAndDomains, BlockedSendersAndDomains, TrustedRecipientsAndDomains, IsValid | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to check Safe and Blocked Senders for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$checkSafeAndBlockedSendersForAllToolStripMenuItem_Click = {
	try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting safe and blocked senders for all users..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Get-MailboxJunkEmailConfiguration | Sort-Object Identity | Format-List Identity, TrustedListsOnly, ContactsTrusted, TrustedSendersAndDomains, BlockedSendersAndDomains, TrustedRecipientsAndDomains, IsValid"
		$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Get-MailboxJunkEmailConfiguration | Sort-Object Identity | Format-List Identity, TrustedListsOnly, ContactsTrusted, TrustedSendersAndDomains, BlockedSendersAndDomains, TrustedRecipientsAndDomains, IsValid | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

	#Whitelist

$whitelistDomainForAllToolStripMenuItem_Click = {
	Try
	{
		$AllowedDomain = Read-Host "Enter the domain you want to whitelist for all users. EX: google.com"
		If (!$AllowedDomain)
		{
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("No domain was entered, please enter a valid domain to whitelist for all users", "Error")
		}
		
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Whitelisting $AllowedDomain for all..."
			$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Set-MailboxJunkEmailConfiguration -TrustedSendersAndDomains `@{ Add = $AllowedDomain }"
			Get-Mailbox -ResultSize unlimited | Set-MailboxJunkEmailConfiguration -TrustedSendersAndDomains @{ Add = $AllowedDomain }
			$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Get-MailboxJunkEmailConfiguration | Sort-Object Identity | Format-Table Identity, TrustedSendersAndDomains, TrustedRecipientsAndDomains -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$whitelistDomainForASingleUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$Alloweddomainuser = Read-Host "Enter the UPN of the user you want to modify junk email for"
			$SelectUsersFormText = "Select the User you want to modify the whitelist for"
			Show-SelectCachedDisplayNames_psf
			$Alloweddomainuser = $SelectCachedDisplayNames_comboboxNames
			If (!$Alloweddomainuser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid User", "Error")
			}
			Else
			{
				$AllowedDomain2 = Read-Host "Enter the Domain you want to whitelist for $Alloweddomainuser"
				If (!$AllowedDomain2)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Domain was entered, please enter a valid Domain you want to whitelist for $Alloweddomainuser", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Whitelisting $AllowedDomain2 for $Alloweddomainuser..."
					$textboxDetails.Text = "Set-MailboxJunkEmailConfiguration -Identity $Alloweddomainuser -TrustedSendersAndDomains `@{ Add = $AllowedDomain2 }"
					Set-MailboxJunkEmailConfiguration -Identity $Alloweddomainuser -TrustedSendersAndDomains @{ Add = $AllowedDomain2 }
					$TextboxResults.Text = Get-MailboxJunkEmailConfiguration -Identity $Alloweddomainuser | Format-List Identity, TrustedSendersAndDomains, TrustedRecipientsAndDomains | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to modify the Whitelist for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$whitelistASpecificEmailAddressForAllToolStripMenuItem_Click = {
	Try
	{
		$AllowSpecificEmailForAll = Read-Host "Enter the email address you want to whitelist for all"
		If (!$AllowSpecificEmailForAll)
		{
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("No e-mail address was entered, please enter a valid e-mail address you want to whitelist for all users", "Error")
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Whitelisting $AllowSpecificEmailForAll for all..."
			$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | | Where-Object { `$_.RecipientType -eq 'UserMailbox' } | Set-MailboxJunkEmailConfiguration -TrustedSendersAndDomains @{ Add = $AllowSpecificEmailForAll }"
			Get-Mailbox -ResultSize unlimited | Where-Object { $_.RecipientType -eq 'UserMailbox' } | Set-MailboxJunkEmailConfiguration -TrustedSendersAndDomains @{ Add = $AllowSpecificEmailForAll }
			$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Where-Object { $_.RecipientType -eq 'UserMailbox' } | Get-MailboxJunkEmailConfiguration | Sort-Object Identity | Format-Table Identity, TrustedSendersAndDomains, TrustedRecipientsAndDomains -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$whitelistASpecificEmailAddressForASingleUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$ModifyWhitelistforaUser = Read-Host "Enter the user you want to modify the whitelist for"
			$SelectUsersFormText = "Select the User you want to modify the Whitelist for"
			Show-SelectCachedDisplayNames_psf
			$ModifyWhitelistforaUser = $SelectCachedDisplayNames_comboboxNames
			If (!$ModifyWhitelistforaUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was slected, Please select a valid user you want to modify the Whitelist for", "Error")
			}
			Else
			{
				$AllowSpecificEmailForOne = Read-Host "Enter the E-mail Address you want to Whitelist for $ModifyWhitelistforaUser"
				If (!$AllowSpecificEmailForOne)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No E-mail Address was entered, please enter a valid E-mail address to add to the Whitelist for $ModifyWhitelistforaUser", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Whitelisting $AllowSpecificEmailForOne for $ModifyWhitelistforaUser..."
					$textboxDetails.Text = "Set-MailboxJunkEmailConfiguration -Identity $ModifyWhitelistforaUser -TrustedSendersAndDomains `@{ Add = $AllowSpecificEmailForOne }"
					Set-MailboxJunkEmailConfiguration -Identity $ModifyWhitelistforaUser -TrustedSendersAndDomains @{ Add = $AllowSpecificEmailForOne }
					$TextboxResults.Text = Get-MailboxJunkEmailConfiguration -Identity $ModifyWhitelistforaUser | Format-List Identity, TrustedSendersAndDomains, TrustedRecipientsAndDomains, Enabled | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to modify the Whitelist for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}


###CONTACTS FOLDER PERMISSIONS

$addContactsPermissionsForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$SelectUsersFormText = "Select the User you want to modify contacts permissions for"
			Show-SelectCachedDisplayNames_psf
			$GlobalUPNmodifycontacts = $SelectCachedDisplayNames_comboboxNames
			If (!$GlobalUPNmodifycontacts)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid User", "Error")
			}
			Else
			{
				$SelectUsersFormText = "Select the User you want to add to $GlobalUPNmodifycontacts contacts"
				Show-SelectCachedDisplayNames_psf
				$GlobalUPNadd2contacts = $SelectCachedDisplayNames_comboboxNames
				If (!$GlobalUPNadd2contacts)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid User", "Error")
				}
				Else
				{
					$LabelPermissionsText = "Select the level of access"
					Show-AccessPermissions_psf
					$GlobalContactsPermissions = $AccessPermissions_comboboxPermissions_SelectedItem
					If (!$GlobalContactsPermissions)
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						[System.Windows.Forms.MessageBox]::Show("No Access Level was selected, please select a valid Access Level", "Error")
					}
					Else
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Adding $GlobalUPNadd2contacts to $GlobalUPNmodifycontacts contacts folder with $GlobalContactsPermissions permissions..."
						$textboxDetails.Text = "Add-MailboxFolderPermission -Identity ${GlobalUPNmodifycontacts}:\contacts -user $GlobalUPNadd2contacts -AccessRights $GlobalContactsPermissions"
						Remove-MailboxFolderPermission -identity ${$GlobalUPNmodifycontacts}:\contacts -user $GlobalUPNadd2contacts -Confirm:$False
						Add-MailboxFolderPermission -Identity ${GlobalUPNmodifycontacts}:\contacts -user $GlobalUPNadd2contacts -AccessRights $GlobalContactsPermissions
						$TextboxResults.Text = "Getting contact folder permissions for $GlobalUPNmodifycontacts..."
						$TextboxResults.Text = Get-MailboxFolderPermission -Identity ${GlobalUPNmodifycontacts}:\contacts | Sort-Object User, AccessRights | Format-Table User, AccessRights, FolderName -AutoSize | Out-String -Width 2147483647
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to modify another Users Contacts Folder permissions?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getUsersContactsPermissionsToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$ContactsUserPermissions = Read-Host "What user would you like contacts folder permissions for?"
			$SelectUsersFormText = "Select the user you want to view contacts permissions for"
			Show-SelectUsersForm_psf
			$GlobalUPNremovecontacts = $SelectUsersForm_comboboxUsers
			If (!$GlobalUPNremovecontacts)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a valid users", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting $GlobalUPNremovecontacts contacts permissions..."
				$textboxDetails.Text = "Get-MailboxFolderPermission -Identity ${GlobalUPNremovecontacts}:\contacts | Sort-Object User, AccessRights | Format-Table User, AccessRights, FolderName "
				$TextboxResults.Text = Get-MailboxFolderPermission -Identity ${GlobalUPNremovecontacts}:\contacts | Sort-Object User, AccessRights | Format-Table User, AccessRights, FolderName -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get Contacts Folder permission for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$removeAUserFromSomeonesContactsPermissionsToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$SelectUsersFormText = "Select the user whose contacts you want to remove access to"
			Show-SelectCachedDisplayNames_psf
			$GlobalUPNremove = $SelectCachedDisplayNames_comboboxNames
			If (!$GlobalUPNremove)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid Users", "Error")
			}
			Else
			{
				$SelectUsersFormText = "Select the user you want to remove access to the contacts of $GlobalUPNremove"
				Show-SelectCachedDisplayNames_psf
				$GlobalUPN2remove = $SelectCachedDisplayNames_comboboxNames
				If (!$GlobalUPN2remove)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid user", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Removing $GlobalUPN2remove from $GlobalUPNremove contacts folder..."
					$textboxDetails.Text = "Remove-MailboxFolderPermission -Identity ${GlobalUPNremove}:\contacts -user $GlobalUPN2remove"
					Remove-MailboxFolderPermission -Identity ${GlobalUPNremove}:\contacts -user $GlobalUPN2remove
					$TextboxResults.Text = "Getting contact folder permissions for $GlobalUPNremove..."
					$TextboxResults.Text = Get-MailboxFolderPermission -Identity ${GlobalUPNremove}:\contacts | Sort-Object User, AccessRights | Format-Table User, AccessRights, FolderName -AutoSize | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to modify permissions for the Contacts Folder for another user?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$removeAUserFromAllContactsFoldersToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$RemoveUserFromAllContacts = Read-Host "Enter the UPN of the user you want to remove from all contacts folders"
			$SelectUsersFormText = "Select the user you want to remove from all users contacts folder"
			Show-SelectCachedDisplayNames_psf
			$GlobalUPNremovefromallcontacts = $SelectCachedDisplayNames_comboboxNames
			If (!$GlobalUPNremovefromallcontacts)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid user", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Removing $GlobalUPNremovefromallcontacts from all users contacts folders..."
				$textboxDetails.Text = "`$users = Get-Mailbox -ResultSize unlimited | Select-Object -ExpandProperty Alias
Foreach (`$user in `$users) { Remove-MailboxFolderPermission `${user}:\Contacts -user $GlobalUPNremovefromallcontacts -Confirm:`$false}﻿"
				$users = Get-Mailbox -ResultSize unlimited | Select-Object -ExpandProperty Alias
				Foreach ($user in $users) { Remove-MailboxFolderPermission ${user}:\Contacts -user $GlobalUPNremovefromallcontacts -Confirm:$false }﻿
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			#[System.Windows.Forms.MessageBox]::Show("$_", "Error")
			$TextboxResults.Text = ""
		}
		$TextboxResults.Text = ""
		
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to remove another user from everyones Contacts Folder?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$addASingleUserPermissionsOnAllContactsFoldersToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$SelectUsersFormText = "Select the user you want to add to everyones contacts folder"
			Show-SelectCachedDisplayNames_psf
			$GlobalUPNremoveaddtoallcontacts = $SelectCachedDisplayNames_comboboxNames
			If (!$GlobalUPNremoveaddtoallcontacts)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid User", "Error")
			}
			Else
			{
				$LabelPermissionsText = "Select the level of access"
				Show-AccessPermissions_psf
				$GlobalContactsPermissions2 = $AccessPermissions_comboboxPermissions_SelectedItem
				If (!$GlobalContactsPermissions2)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Access Level was selected, please select a valid Access Level", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Adding $GlobalUPNremoveaddtoallcontacts to everyones contacts folder with $GlobalContactsPermissions2 permissions..."
					$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Select-Object -ExpandProperty Alias
Foreach (`$user in `$users) { Add-MailboxFolderPermission `${user}:\Contacts -user $GlobalUPNremoveaddtoallcontacts -accessrights $GlobalContactsPermissions2 }﻿"
					$users = Get-Mailbox -ResultSize unlimited | Select-Object -ExpandProperty Alias
					Foreach ($user in $users) { Add-MailboxFolderPermission ${user}:\Contacts -user $GlobalUPNremoveaddtoallcontacts -accessrights $GlobalContactsPermissions2 }﻿
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to add another User to everyones Contacts Folder?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
}



###ADMIN###

	#OWA

$disableAccessToOWAForASingleUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$DisableOWAforUser = Read-Host "Enter the UPN of the user you want to disable OWA access for"
			$SelectUsersFormText = "Select the user you want to disable OWA access for"
			Show-SelectCachedDisplayNames_psf
			$DisableOWAforUser = $SelectCachedDisplayNames_comboboxNames
			If (!$DisableOWAforUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid user", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Disabling OWA access for $DisableOWAforUser..."
				$textboxDetails.Text = "Set-CASMailbox $DisableOWAforUser -OWAEnabled `$False"
				Set-CASMailbox $DisableOWAforUser -OWAEnabled $False
				$TextboxResults.Text = Get-CASMailbox $DisableOWAforUser | Format-List DisplayName, OWAEnabled | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to Disable OWA Access for another user?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$enableOWAAccessForASingleUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$EnableOWAforUser = Read-Host "Enter the UPN of the user you want to enable OWA access for"
			$SelectUsersFormText = "Select the user you want to enable OWA access for"
			Show-SelectCachedDisplayNames_psf
			$EnableOWAforUser = $SelectCachedDisplayNames_comboboxNames
			If (!$EnableOWAforUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid user", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Enabling OWA access for $EnableOWAforUser..."
				$textboxDetails.Text = "Set-CASMailbox $EnableOWAforUser -OWAEnabled `$True"
				Set-CASMailbox $EnableOWAforUser -OWAEnabled $True
				$TextboxResults.Text = Get-CASMailbox $EnableOWAforUser | Format-List DisplayName, OWAEnabled | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to Enable OWA Access for another user?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
}

$disableOWAAccessForAllToolStripMenuItem_Click = {
	Try
	{
		$OUTPUT = [System.Windows.Forms.MessageBox]::Show("Are you sure you want to disable OWA for all users?", "Warning!", 4)
		
		If ($OUTPUT -eq "YES")
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Disabling OWA access for all..."
			$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Set-CASMailbox -OWAEnabled `$False"
			Get-Mailbox -ResultSize unlimited | Set-CASMailbox -OWAEnabled $False
			$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Get-CASMailbox | Sort-Object DisplayName | Format-Table DisplayName, OWAEnabled -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			[System.Windows.Forms.MessageBox]::Show("ActiveSync has not been disabled for all users", "Info")
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
	
}

$enableOWAAccessForAllToolStripMenuItem_Click = {
	try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Enabling OWA access for all..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Set-CASMailbox -OWAEnabled `$True"
		Get-Mailbox -ResultSize unlimited | Set-CASMailbox -OWAEnabled $True
		$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Get-CASMailbox | Sort-Object DisplayName | Format-Table DisplayName, OWAEnabled -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getOWAAccessForAllToolStripMenuItem_Click = {
	try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting OWA info for all users..."
		$textboxDetails.Text = "Get-Mailbox | Get-CASMailbox | Sort-Object DisplayName | Format-Table DisplayName, OWAEnabled, OwaMailboxPolicy, OWAforDevicesEnabled -Autosize"
		$TextboxResults.Text = Get-Mailbox | Get-CASMailbox | Sort-Object DisplayName | Format-Table DisplayName, OWAEnabled, OwaMailboxPolicy, OWAforDevicesEnabled -Autosize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getOWAInfoForASingleUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$OWAAccessUser = Read-Host "Enter the UPN for the User you want to view OWA info for"
			$SelectUsersFormText = "Select the user you want to view OWA information for"
			Show-SelectCachedDisplayNames_psf
			$OWAAccessUser = $SelectCachedDisplayNames_comboboxNames
			If (!$OWAAccessUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid user", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting OWA Access for $OWAAccessUser..."
				$textboxDetails.Text = "Get-CASMailbox -identity $OWAAccessUser | Format-List DisplayName, OWAEnabled, OwaMailboxPolicy, OWAforDevicesEnabled"
				$TextboxResults.Text = Get-CASMailbox -identity $OWAAccessUser | Format-List DisplayName, OWAEnabled, OwaMailboxPolicy, OWAforDevicesEnabled | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get OWA information for another user?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

#ActiveSync

$getActiveSyncDevicesForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$ActiveSyncDevicesUser = Read-Host "Enter the UPN of the user you wish to see ActiveSync Devices for"
			$SelectUsersFormText = "Select the user you want to view ActiveSync devices for"
			Show-SelectCachedDisplayNames_psf
			$ActiveSyncDevicesUser = $SelectCachedDisplayNames_comboboxNames
			If (!$ActiveSyncDevicesUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid user", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting ActiveSync device info for $ActiveSyncDevicesUser..."
				$textboxDetails.Text = "Get-MobileDeviceStatistics -Mailbox $ActiveSyncDevicesUser | Format-List DeviceFriendlyName, DeviceModel, DeviceOS, DeviceMobileOperator, DeviceType, Status, FirstSyncTime, LastPolicyUpdateTime, LastSyncAttemptTime, LastSuccessSync, LastPingHeartbeat, DeviceAccessState, IsValid "
				$TextboxResults.Text = Get-MobileDeviceStatistics -Mailbox $ActiveSyncDevicesUser | Format-List DeviceFriendlyName, DeviceModel, DeviceOS, DeviceMobileOperator, DeviceType, Status, FirstSyncTime, LastPolicyUpdateTime, LastSyncAttemptTime, LastSuccessSync, LastPingHeartbeat, DeviceAccessState, IsValid | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get all ActiveSync devices for another user?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$disableActiveSyncForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$DisableActiveSyncForUser = Read-Host "Enter the UPN of the user you wish to disable ActiveSync for"
			$SelectUsersFormText = "Select the user you want to disable ActiveSync for"
			Show-SelectCachedDisplayNames_psf
			$DisableActiveSyncForUser = $SelectCachedDisplayNames_comboboxNames
			If (!$DisableActiveSyncForUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid user", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Disabling ActiveSync for $DisableActiveSyncForUser..."
				$textboxDetails.Text = "Set-CASMailbox $DisableActiveSyncForUser -ActiveSyncEnabled `$False"
				Set-CASMailbox $DisableActiveSyncForUser -ActiveSyncEnabled $False
				$TextboxResults.Text = Get-CASMailbox -Identity $DisableActiveSyncForUser | Format-List DisplayName, ActiveSyncEnabled | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to Disable ActiveSync for another user?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$enableActiveSyncForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$EnableActiveSyncForUser = Read-Host "Enter the UPN of the user you wish to enable ActiveSync for"
			$SelectUsersFormText = "Select the user you want to enable ActiveSync for"
			Show-SelectCachedDisplayNames_psf
			$EnableActiveSyncForUser = $SelectCachedDisplayNames_comboboxNames
			If (!$EnableActiveSyncForUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid user", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Enabling ActiveSync for $EnableActiveSyncForUser... "
				$textboxDetails.Text = "Set-CASMailbox $EnableActiveSyncForUser -ActiveSyncEnabled `$True"
				Set-CASMailbox $EnableActiveSyncForUser -ActiveSyncEnabled $True
				$TextboxResults.Text = Get-CASMailbox -Identity $EnableActiveSyncForUser | Format-List DisplayName, ActiveSyncEnabled | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to Enable ActiveSync for another user?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$viewActiveSyncInfoForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$ActiveSyncInfoForUser = Read-Host "Enter the UPN for the user you want to view ActiveSync info for"
			$SelectUsersFormText = "Select the user you want to view ActiveSync information for"
			Show-SelectCachedDisplayNames_psf
			$ActiveSyncInfoForUser = $SelectCachedDisplayNames_comboboxNames
			If (!$ActiveSyncInfoForUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid user", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting ActiveSync info for $ActiveSyncInfoForUser..."
				$textboxDetails.Text = "Get-CASMailbox -Identity $ActiveSyncInfoForUser | Format-List DisplayName, ActiveSyncEnabled, ActiveSyncAllowedDeviceIDs, ActiveSyncBlockedDeviceIDs, ActiveSyncMailboxPolicy, ActiveSyncMailboxPolicyIsDefaulted, ActiveSyncDebugLogging, HasActiveSyncDevicePartnership"
				$TextboxResults.Text = Get-CASMailbox -Identity $ActiveSyncInfoForUser | Format-List DisplayName, ActiveSyncEnabled, ActiveSyncAllowedDeviceIDs, ActiveSyncBlockedDeviceIDs, ActiveSyncMailboxPolicy, ActiveSyncMailboxPolicyIsDefaulted, ActiveSyncDebugLogging, HasActiveSyncDevicePartnership | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to view ActiveSync information for another user?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$disableActiveSyncForAllToolStripMenuItem_Click = {
	Try
	{
		$OUTPUT = [System.Windows.Forms.MessageBox]::Show("Are you sure you want to disable ActiveSync for all users?", "Warning!", 4)
		
		If ($OUTPUT -eq "YES")
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Disabling ActiveSync for all..."
			$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Set-CASMailbox -ActiveSyncEnabled `$False"
			Get-Mailbox -ResultSize unlimited | Set-CASMailbox -ActiveSyncEnabled $False
			$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Get-CASMailbox | Sort-Object DisplayName | Format-Table DisplayName, ActiveSyncEnabled -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			[System.Windows.Forms.MessageBox]::Show("ActiveSync has not been disabled for all users", "Info")
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getActiveSyncInfoForAllToolStripMenuItem_Click = {
	try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting ActiveSync info for all..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Get-CASMailbox | Sort-Object DisplayName | Format-Table DisplayName, ActiveSyncEnabled -AutoSize"
		$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Get-CASMailbox | Sort-Object DisplayName | Format-Table DisplayName, ActiveSyncEnabled -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		
	}
}

$enableActiveSyncForAllToolStripMenuItem_Click = {
	try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Enabling ActiveSync for all.."
		$textboxDetails.Text = "Get-Mailbox | Set-CASMailbox -ActiveSyncEnabled `$True"
		Get-Mailbox -ResultSize unlimited | Set-CASMailbox -ActiveSyncEnabled $True
		$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Get-CASMailbox | Sort-Object DisplayName | Format-Table DisplayName, ActiveSyncEnabled -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

	#PowerShell

$disableAccessToPowerShellForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$DisablePowerShellforUser = Read-Host "Enter the UPN of the user you want to disable PowerShell access for"
			$SelectUsersFormText = "Select the user you want to disable PowerShell access for"
			Show-SelectCachedDisplayNames_psf
			$DisablePowerShellforUser = $SelectCachedDisplayNames_comboboxNames
			If (!$DisablePowerShellforUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid user", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Disabling PowerShell access for $DisablePowerShellforUser..."
				$textboxDetails.Text = "Set-User $DisablePowerShellforUser -RemotePowerShellEnabled `$False"
				Set-User $DisablePowerShellforUser -RemotePowerShellEnabled $False
				$TextboxResults.Text = Get-User $DisablePowerShellforUser | Format-List DisplayName, RemotePowerShellEnabled | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to Disable PowerShell Access for another user?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$displayPowerShellRemotingStatusForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$PowerShellRemotingStatusUser = Read-Host "Enter the UPN of the user you want to view PowerShell Remoting for"
			$SelectUsersFormText = "Select the user you want to view PowerShell remoting for"
			Show-SelectCachedDisplayNames_psf
			$PowerShellRemotingStatusUser = $SelectCachedDisplayNames_comboboxNames
			If (!$PowerShellRemotingStatusUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid user", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting PowerShell info for $PowerShellRemotingStatusUser..."
				$textboxDetails.Text = "Get-User $PowerShellRemotingStatusUser | Format-List DisplayName, RemotePowerShellEnabled"
				$TextboxResults.Text = Get-User $PowerShellRemotingStatusUser | Format-List DisplayName, RemotePowerShellEnabled | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get PowerShell Access for another user?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$enableAccessToPowerShellForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$EnablePowerShellforUser = Read-Host "Enter the UPN of the user you want to enable PowerShell access for"
			$SelectUsersFormText = "Select the user you want to enable PowerShell access for"
			Show-SelectCachedDisplayNames_psf
			$EnablePowerShellforUser = $SelectCachedDisplayNames_comboboxNames
			If (!$EnablePowerShellforUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid user", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Enabling PowerShell access for $EnablePowerShellforUser..."
				$textboxDetails.Text = "Set-User $EnablePowerShellforUser -RemotePowerShellEnabled `$True"
				Set-User $EnablePowerShellforUser -RemotePowerShellEnabled $True
				$TextboxResults.Text = Get-User $EnablePowerShellforUser | Format-List DisplayName, RemotePowerShellEnabled | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to enable PowerShell Access for another user?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getPowerShellRemotingStatusForAllToolStripMenuItem_Click = {
	try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting PowerShell info for all users..."
		$textboxDetails.Text = "Get-User -ResultSize unlimited | Sort-Object DisplayName | Format-Table DisplayName, RemotePowerShellEnabled -AutoSize"
		$TextboxResults.Text = Get-User -ResultSize unlimited | Sort-Object DisplayName | Format-Table DisplayName, RemotePowerShellEnabled -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}


	#Message Trace

$messageTraceToolStripMenuItem_Click = {
	
}

$GetAllRecentToolStripMenuItem_Click = {
	try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting recent messages..."
		$textboxDetails.Text = "Get-MessageTrace | Format-List Received, SenderAddress, RecipientAddress, FromIP, ToIP, Subject, Size, Status"
		$TextboxResults.Text = Get-MessageTrace | Format-List Received, SenderAddress, RecipientAddress, FromIP, ToIP, Subject, Size, Status | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$fromACertainSenderToolStripMenuItem1_Click = {
	Do
	{
		Try
		{
			$MessageTraceSender = Read-Host "Enter the senders email address"
			If (!$MessageTraceSender)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No e-mail was entered, please enter a valid sender e-mail", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting messages from $MessageTraceSender..."
				$textboxDetails.Text = "Get-MessageTrace -SenderAddress $MessageTraceSender | Format-List Received, SenderAddress, RecipientAddress, FromIP, ToIP, Subject, Size, Status"
				$TextboxResults.Text = Get-MessageTrace -SenderAddress $MessageTraceSender | Format-List Received, SenderAddress, RecipientAddress, FromIP, ToIP, Subject, Size, Status | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to run another message trace?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$toACertainRecipientToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$MessageTraceRecipient = Read-Host "Enter the recipients email address"
			If (!$MessageTraceRecipient)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No recipient e-mail was entered, please enter a valid e-mail address", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting messages sent to $MessageTraceRecipient..."
				$textboxDetails.Text = "Get-MessageTrace -RecipientAddress $MessageTraceRecipient | Format-List Received, SenderAddress, RecipientAddress, FromIP, ToIP, Subject, Size, Status"
				$TextboxResults.Text = Get-MessageTrace -RecipientAddress $MessageTraceRecipient | Format-List Received, SenderAddress, RecipientAddress, FromIP, ToIP, Subject, Size, Status | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to run another message trace?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getFailedMessagesToolStripMenuItem_Click = {
	try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting failed messages..."
		$textboxDetails.Text = "Get-MessageTrace -Status 'Failed' | Format-Table Received, SenderAddress, RecipientAddress, FromIP, ToIP, Subject, Size, Status"
		$TextboxResults.Text = Get-MessageTrace -Status "Failed" | Format-List Received, SenderAddress, RecipientAddress, FromIP, ToIP, Subject, Size, Status | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$GetMessagesBetweenDatesToolStripMenuItem_Click = {
	Do
	{
		#$MessageTraceStartDate = Read-Host "Enter the start date. EX: 06/13/2015 or 09/01/2015 5:00 PM"
		$StartDateText = "Select the beginning date for the message trace"
		$StartDateFormText = "Start Date"
		Show-SelectDatePicker_psf
		$startdate = $SelectDatePicker_monthcalendar1
		$MessageTraceStartDate = "$startdate".trimend('00:00:00')
		
		#$MessageTraceEndDate = Read-Host "Enter the end date. EX: 06/15/2015 or 09/01/2015 5:00 PM"
		$StartDateText = "Select the ending date for the message trace"
		$StartDateFormText = "End Date"
		Show-SelectDatePicker_psf
		$enddate = $SelectDatePicker_monthcalendar1
		$MessageTraceEndDate = "$enddate".trimend('00:00:00')
		
		try
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting messages between $MessageTraceStartDate and $MessageTraceEndDate..."
			$textboxDetails.Text = "Get-MessageTrace -StartDate $MessageTraceStartDate -EndDate $MessageTraceEndDate | Format-List Received, SenderAddress, RecipientAddress, FromIP, ToIP, Subject, Size, Status"
			$TextboxResults.Text = Get-MessageTrace -StartDate $MessageTraceStartDate -EndDate $MessageTraceEndDate | Format-List Received, SenderAddress, RecipientAddress, FromIP, ToIP, Subject, Size, Status | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to run another message trace?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

#Company Info

$getTechnicalNotificationEmailToolStripMenuItem_Click = {
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting technical account info..."
			$textboxDetails.Text = "Get-MsolCompanyInformation | Format-List TechnicalNotificationEmails"
			$TextboxResults.Text = Get-MsolCompanyInformation | Format-List TechnicalNotificationEmails | Out-String
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting technical account info..."
			$textboxDetails.Text = "Get-MsolCompanyInformation -TenantId $TenantText | Format-List TechnicalNotificationEmails"
			$TextboxResults.Text = Get-MsolCompanyInformation -TenantId $PartnerComboBox.SelectedItem.TenantID | Format-List TechnicalNotificationEmails | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting technical account info..."
			$textboxDetails.Text = "Get-MsolCompanyInformation | Format-List TechnicalNotificationEmails"
			$TextboxResults.Text = Get-MsolCompanyInformation | Format-List TechnicalNotificationEmails | Out-String
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$lastDirSyncTimeToolStripMenuItem_Click = {
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting last DirSync time..."
			$textboxDetails.Text = "Get-MsolCompanyInformation | Format-List LastDirSyncTime"
			$TextboxResults.Text = Get-MsolCompanyInformation | Format-List LastDirSyncTime | Out-String
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting last DirSync time..."
			$textboxDetails.Text = "Get-MsolCompanyInformation -TenantId $TenantText | Format-List LastDirSyncTime"
			$TextboxResults.Text = Get-MsolCompanyInformation -TenantId $PartnerComboBox.SelectedItem.TenantID | Format-List LastDirSyncTime | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting last DirSync time..."
			$textboxDetails.Text = "Get-MsolCompanyInformation | Format-List LastDirSyncTime"
			$TextboxResults.Text = Get-MsolCompanyInformation | Format-List LastDirSyncTime | Out-String
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getLastPasswordSyncTimeToolStripMenuItem_Click = {
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting last password sync time..."
			$textboxDetails.Text = "Get-MsolCompanyInformation | Format-List LastPasswordSyncTime"
			$TextboxResults.Text = Get-MsolCompanyInformation | Format-List LastPasswordSyncTime | Out-String
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting last password sync time..."
			$textboxDetails.Text = "Get-MsolCompanyInformation -TenantId $TenantText  | Format-List LastPasswordSyncTime"
			$TextboxResults.Text = Get-MsolCompanyInformation -TenantId $PartnerComboBox.SelectedItem.TenantID | Format-List LastPasswordSyncTime | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting last password sync time..."
			$textboxDetails.Text = "Get-MsolCompanyInformation | Format-List LastPasswordSyncTime"
			$TextboxResults.Text = Get-MsolCompanyInformation | Format-List LastPasswordSyncTime | Out-String
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getAllCompanyInfoToolStripMenuItem_Click = {
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all company info..."
			$textboxDetails.Text = "Get-MsolCompanyInformation | Format-List "
			$TextboxResults.Text = Get-MsolCompanyInformation | Format-List | Out-String
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all company info..."
			$textboxDetails.Text = "Get-MsolCompanyInformation -TenantId $TenantText | Format-List"
			$TextboxResults.Text = Get-MsolCompanyInformation -TenantId $PartnerComboBox.SelectedItem.TenantID | Format-List | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all company info..."
			$textboxDetails.Text = "Get-MsolCompanyInformation | Format-List "
			$TextboxResults.Text = Get-MsolCompanyInformation | Format-List | Out-String
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

#Sharing Policy

$getSharingPolicyToolStripMenuItem_Click = {
	try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting all sharing policies..."
		$textboxDetails.Text = "Get-SharingPolicy | Format-List Name, Domains, Enabled, Default, Identity, WhenChanged, WhenCreated, IsValid, ObjectState"
		$TextboxResults.Text = Get-SharingPolicy | Format-List Name, Domains, Enabled, Default, Identity, WhenChanged, WhenCreated, IsValid, ObjectState | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$disableASharingPolicyToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$DisableSharingPolicy = Read-Host "Enter the name of the policy you want to disable"
			$SharingPolicyText = "Select the Sharing Policy you want to disable"
			Show-SelectSharingPolicy_psf
			$DisableSharingPolicy = $SelectSharingPolicy_comboboxSharingPolicies
			If (!$DisableSharingPolicy)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Sharing Policy was selected, please selected a valid Sharing Policy to disable", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Disabling the sharing policy $DisableSharingPolicy..."
				$textboxDetails.Text = "Set-SharingPolicy -Identity $DisableSharingPolicy -Enabled `$False"
				Set-SharingPolicy -Identity $DisableSharingPolicy -Enabled $False
				$TextboxResults.Text = Get-SharingPolicy -Identity $DisableSharingPolicy | Format-List Name, Enabled, ObjectState | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to disable another Sharing Policy?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$enableASharingPolicyToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$EnableSharingPolicy = Read-Host "Enter the name of the policy you want to Enable"
			$SharingPolicyText = "Select the Sharing Policy you want to enable"
			Show-SelectSharingPolicy_psf
			$EnableSharingPolicy = $SelectSharingPolicy_comboboxSharingPolicies
			If (!$EnableSharingPolicy)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Sharing Policy was selected, please select a valid Sharing Policy to enable", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Enabling the sharing policy $EnableSharingPolicy..."
				$textboxDetails.Text = "Set-SharingPolicy -Identity $EnableSharingPolicy -Enabled `$True"
				Set-SharingPolicy -Identity $EnableSharingPolicy -Enabled $True
				$TextboxResults.Text = Get-SharingPolicy -Identity $EnableSharingPolicy | Format-List Name, Enabled, ObjectState | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to enable another Sharing Policy?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$createANewSharingPolicyToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$TextboxResults.Text = "You may need to enable organization customization if customization status is dehydrated."
			$TextboxResults.Text = Get-OrganizationConfig | Format-List  Identity, IsDehydrated | Out-String
			$NewSharingPolicyName = Read-Host "Enter the name for the Sharing Policy"
			If (!$NewSharingPolicyName)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No name was entered, please enter a valid name for the new Sharing Policy", "Error")
			}
			Else
			{
				$TextboxResults.Text = "The following Sharing Policy Action Values can be used:
CalendarSharingFreeBusySimple: Share free/busy hours only
CalendarSharingFreeBusyDetail: Share free/busy hours, subject, and location
CalendarSharingFreeBusyReviewer: Share free/busy hours, subject, location, and the body of the message or calendar item
ContactsSharing: Share contacts only

EXAMPLE: mail.contoso.com: CalendarSharingFreeBusyDetail, ContactsSharing "
				$SharingPolicy = Read-Host "Enter the domain this policy will apply to and the value"
				If (!$SharingPolicy)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Sharing Policy Action Value was entered, please enter a valid Sharing Policy Action Value", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Creating a new sharing policy $NewSharingPolicyName..."
					$textboxDetails.Text = "New-SharingPolicy -Name $NewSharingPolicyName -Domains $SharingPolicy"
					New-SharingPolicy -Name $NewSharingPolicyName -Domains $SharingPolicy
					$TextboxResults.Text = Get-SharingPolicy -Identity $NewSharingPolicyName | Format-List Name, Domains, Enabled, Default, Identity, WhenChanged, WhenCreated, IsValid, ObjectState | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to create another Sharing Policy?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getInfoForASingleSharingPolicyToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$DetailedInfoForSharingPolicy = Read-Host "Enter the name of the policy you want info for"
			$SharingPolicyText = "Select the Sharing Policy you want to view detailed information for"
			Show-SelectSharingPolicy_psf
			$DetailedInfoForSharingPolicy = $SelectSharingPolicy_comboboxSharingPolicies
			If (!$DetailedInfoForSharingPolicy)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Sharing Policy was selected, please select a valid Sharing Policy to get detailed information on", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting info for the sharing policy $DetailedInfoForSharingPolicy..."
				$textboxDetails.Text = "Get-SharingPolicy -Identity $DetailedInfoForSharingPolicy | Format-List Name, Domains, Enabled, Default, Identity, WhenChanged, WhenCreated, IsValid, ObjectState"
				$TextboxResults.Text = Get-SharingPolicy -Identity $DetailedInfoForSharingPolicy | Format-List Name, Domains, Enabled, Default, Identity, WhenChanged, WhenCreated, IsValid, ObjectState | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get information about another Sharing Policy?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

#Configuration 

$enableCustomizationToolStripMenuItem_Click = {
	try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Enabling customization..."
		$textboxDetails.Text = "Enable-OrganizationCustomization"
		Enable-OrganizationCustomization
		$TextboxResults.Text = "Success"
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getCustomizationStatusToolStripMenuItem_Click = {
	try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting customization status..."
		$textboxDetails.Text = "Get-OrganizationConfig | Format-Table  Identity, IsDehydrated -AutoSize "
		$TextboxResults.Text = Get-OrganizationConfig | Format-Table  Identity, IsDehydrated -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getOrganizationCustomizationToolStripMenuItem_Click = {
	try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting customization information..."
		$textboxDetails.Text = "Get-OrganizationConfig | Format-List"
		$TextboxResults.Text = Get-OrganizationConfig | Format-List | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getSharepointSiteToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting sharepoint URL..."
		$textboxDetails.Text = "Get-OrganizationConfig | Format-List SharePointUrl"
		$TextboxResults.Text = Get-OrganizationConfig | Format-List SharePointUrl | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}



###REPORTING###

$getAllMailboxSizesToolStripMenuItem_Click = {
	try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Generating mailbox sizes report..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize Unlimited | Get-MailboxStatistics | Select-Object DisplayName,`@{name = 'TotalItemSize (MB)'; expression = {[math]::Round( `
(`$_.TotalItemSize.ToString().Split('(')[1].Split(' ')[0].Replace(', ', '')/1MB), 2)}}, `
ItemCount | Sort-Object 'TotalItemSize (MB)' -Descending | Format-Table -AutoSize"
		$TextboxResults.Text =
		Get-Mailbox -ResultSize Unlimited | Get-MailboxStatistics | Select-Object DisplayName, `
		
		@{
			name = "TotalItemSize (MB)"; expression = {
				[math]::Round( `
					($_.TotalItemSize.ToString().Split("(")[1].Split(" ")[0].Replace(",", "")/1MB), 2)
			}
		}, `
		
		ItemCount | Sort-Object "TotalItemSize (MB)" -Descending | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getLicenceReconciliationReportToolStripMenuItem_Click = {
	$textboxDetails.Text = ""
	$TextboxResults.Text = ""
	Try
	{
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$savedialog = New-Object windows.forms.savefiledialog
			$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
			$savedialog.title = "Export to File"
			$savedialog.filter = ".csv|*.csv"
			$savedialog.ShowHelp = $True
			$result = $savedialog.ShowDialog(); $result
			if ($result -eq "OK")
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$LogFile = $savedialog.filename
				$TextboxResults.Text = "Getting License Report..."
				
				# Define Hashtables for lookup 
				$Sku = @{
					"DESKLESSPACK" = "Office 365 (Plan K1)"
					"DESKLESSWOFFPACK" = "Office 365 (Plan K2)"
					"LITEPACK" = "Office 365 (Plan P1)"
					"EXCHANGESTANDARD" = "Office 365 Exchange Online Only"
					"STANDARDPACK" = "Office 365 (Plan E1)"
					"STANDARDWOFFPACK" = "Office 365 (Plan E2)"
					"ENTERPRISEPACK" = "Office 365 (Plan E3)"
					"ENTERPRISEPACKLRG" = "Office 365 (Plan E3)"
					"ENTERPRISEWITHSCAL" = "Office 365 (Plan E4)"
					"STANDARDPACK_STUDENT" = "Office 365 (Plan A1) for Students"
					"STANDARDWOFFPACKPACK_STUDENT" = "Office 365 (Plan A2) for Students"
					"ENTERPRISEPACK_STUDENT" = "Office 365 (Plan A3) for Students"
					"ENTERPRISEWITHSCAL_STUDENT" = "Office 365 (Plan A4) for Students"
					"STANDARDPACK_FACULTY" = "Office 365 (Plan A1) for Faculty"
					"STANDARDWOFFPACKPACK_FACULTY" = "Office 365 (Plan A2) for Faculty"
					"ENTERPRISEPACK_FACULTY" = "Office 365 (Plan A3) for Faculty"
					"ENTERPRISEWITHSCAL_FACULTY" = "Office 365 (Plan A4) for Faculty"
					"ENTERPRISEPACK_B_PILOT" = "Office 365 (Enterprise Preview)"
					"STANDARD_B_PILOT" = "Office 365 (Small Business Preview)"
				}
				
				# Get a list of all licences that exist within the tenant 
				$licensetype = Get-MsolAccountSku | Where-Object { $_.ConsumedUnits -ge 1 }
				
				# Loop through all licence types found in the tenant 
				foreach ($license in $licensetype)
				{
					# Build and write the Header for the CSV file 
					$headerstring = "DisplayName,UserPrincipalName,AccountSku"
					
					foreach ($row in $($license.ServiceStatus))
					{
						
						# Build header string 
						switch -wildcard ($($row.ServicePlan.servicename))
						{
							"EXC*" { $thisLicence = "Exchange Online" }
							"MCO*" { $thisLicence = "Lync Online" }
							"LYN*" { $thisLicence = "Lync Online" }
							"OFF*" { $thisLicence = "Office Profesional Plus" }
							"SHA*" { $thisLicence = "Sharepoint Online" }
							"*WAC*" { $thisLicence = "Office Web Apps" }
							"WAC*" { $thisLicence = "Office Web Apps" }
							default { $thisLicence = $row.ServicePlan.servicename }
						}
						
						$headerstring = ($headerstring + "," + $thisLicence)
					}
					
					Out-File -FilePath $LogFile -InputObject $headerstring -Encoding UTF8 -append
					
					# Gather users for this particular AccountSku 
					$users = Get-MsolUser -all | Where-Object { $_.isLicensed -eq "True" -and $_.licenses[0].accountskuid.tostring() -eq $license.accountskuid }
					
					# Loop through all users and write them to the CSV file 
					foreach ($user in $users)
					{
						
						#write-host ("Processing " + $user.displayname)
						
						$datastring = ($user.displayname + "," + $user.userprincipalname + "," + $Sku.Item($user.licenses[0].AccountSku.SkuPartNumber))
						
						foreach ($row in $($user.licenses[0].servicestatus))
						{
							
							# Build data string 
							$datastring = ($datastring + "," + $($row.provisioningstatus))
						}
						
						Out-File -FilePath $LogFile -InputObject $datastring -Encoding UTF8 -append
						
					}
				}
				$FormO365AdministrationCenter.Cursor = 'Default'
				
			}
			$TextboxResults.Text = ""
		}
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$savedialog = New-Object windows.forms.savefiledialog
			$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
			$savedialog.title = "Export to File"
			$savedialog.filter = ".csv|*.csv"
			$savedialog.ShowHelp = $True
			$result = $savedialog.ShowDialog(); $result
			if ($result -eq "OK")
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$LogFile = $savedialog.filename
				$TextboxResults.Text = "Getting License Report..."
				
				# Define Hashtables for lookup 
				$Sku = @{
					"DESKLESSPACK" = "Office 365 (Plan K1)"
					"DESKLESSWOFFPACK" = "Office 365 (Plan K2)"
					"LITEPACK" = "Office 365 (Plan P1)"
					"EXCHANGESTANDARD" = "Office 365 Exchange Online Only"
					"STANDARDPACK" = "Office 365 (Plan E1)"
					"STANDARDWOFFPACK" = "Office 365 (Plan E2)"
					"ENTERPRISEPACK" = "Office 365 (Plan E3)"
					"ENTERPRISEPACKLRG" = "Office 365 (Plan E3)"
					"ENTERPRISEWITHSCAL" = "Office 365 (Plan E4)"
					"STANDARDPACK_STUDENT" = "Office 365 (Plan A1) for Students"
					"STANDARDWOFFPACKPACK_STUDENT" = "Office 365 (Plan A2) for Students"
					"ENTERPRISEPACK_STUDENT" = "Office 365 (Plan A3) for Students"
					"ENTERPRISEWITHSCAL_STUDENT" = "Office 365 (Plan A4) for Students"
					"STANDARDPACK_FACULTY" = "Office 365 (Plan A1) for Faculty"
					"STANDARDWOFFPACKPACK_FACULTY" = "Office 365 (Plan A2) for Faculty"
					"ENTERPRISEPACK_FACULTY" = "Office 365 (Plan A3) for Faculty"
					"ENTERPRISEWITHSCAL_FACULTY" = "Office 365 (Plan A4) for Faculty"
					"ENTERPRISEPACK_B_PILOT" = "Office 365 (Enterprise Preview)"
					"STANDARD_B_PILOT" = "Office 365 (Small Business Preview)"
				}
				
				# Get a list of all licences that exist within the tenant 
				$licensetype = Get-MsolAccountSku -TenantId $PartnerComboBox.SelectedItem.TenantID | Where-Object { $_.ConsumedUnits -ge 1 }
				
				# Loop through all licence types found in the tenant 
				foreach ($license in $licensetype)
				{
					# Build and write the Header for the CSV file 
					$headerstring = "DisplayName,UserPrincipalName,AccountSku"
					
					foreach ($row in $($license.ServiceStatus))
					{
						
						# Build header string 
						switch -wildcard ($($row.ServicePlan.servicename))
						{
							"EXC*" { $thisLicence = "Exchange Online" }
							"MCO*" { $thisLicence = "Lync Online" }
							"LYN*" { $thisLicence = "Lync Online" }
							"OFF*" { $thisLicence = "Office Profesional Plus" }
							"SHA*" { $thisLicence = "Sharepoint Online" }
							"*WAC*" { $thisLicence = "Office Web Apps" }
							"WAC*" { $thisLicence = "Office Web Apps" }
							default { $thisLicence = $row.ServicePlan.servicename }
						}
						
						$headerstring = ($headerstring + "," + $thisLicence)
					}
					
					Out-File -FilePath $LogFile -InputObject $headerstring -Encoding UTF8 -append
					
					# Gather users for this particular AccountSku 
					$users = Get-MsolUser -all -TenantId $PartnerComboBox.SelectedItem.TenantID | Where-Object { $_.isLicensed -eq "True" -and $_.licenses[0].accountskuid.tostring() -eq $license.accountskuid }
					
					# Loop through all users and write them to the CSV file 
					foreach ($user in $users)
					{
						
						#write-host ("Processing " + $user.displayname)
						
						$datastring = ($user.displayname + "," + $user.userprincipalname + "," + $Sku.Item($user.licenses[0].AccountSku.SkuPartNumber))
						
						foreach ($row in $($user.licenses[0].servicestatus))
						{
							
							# Build data string 
							$datastring = ($datastring + "," + $($row.provisioningstatus))
						}
						
						Out-File -FilePath $LogFile -InputObject $datastring -Encoding UTF8 -append
						
					}
				}
				$FormO365AdministrationCenter.Cursor = 'Default'
				
			}
			$TextboxResults.Text = ""
		}
		Else
		{
			$savedialog = New-Object windows.forms.savefiledialog
			$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
			$savedialog.title = "Export to File"
			$savedialog.filter = ".csv|*.csv"
			$savedialog.ShowHelp = $True
			$result = $savedialog.ShowDialog(); $result
			if ($result -eq "OK")
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$LogFile = $savedialog.filename
				$TextboxResults.Text = "Getting License Report..."
				
				# Define Hashtables for lookup 
				$Sku = @{
					"DESKLESSPACK" = "Office 365 (Plan K1)"
					"DESKLESSWOFFPACK" = "Office 365 (Plan K2)"
					"LITEPACK" = "Office 365 (Plan P1)"
					"EXCHANGESTANDARD" = "Office 365 Exchange Online Only"
					"STANDARDPACK" = "Office 365 (Plan E1)"
					"STANDARDWOFFPACK" = "Office 365 (Plan E2)"
					"ENTERPRISEPACK" = "Office 365 (Plan E3)"
					"ENTERPRISEPACKLRG" = "Office 365 (Plan E3)"
					"ENTERPRISEWITHSCAL" = "Office 365 (Plan E4)"
					"STANDARDPACK_STUDENT" = "Office 365 (Plan A1) for Students"
					"STANDARDWOFFPACKPACK_STUDENT" = "Office 365 (Plan A2) for Students"
					"ENTERPRISEPACK_STUDENT" = "Office 365 (Plan A3) for Students"
					"ENTERPRISEWITHSCAL_STUDENT" = "Office 365 (Plan A4) for Students"
					"STANDARDPACK_FACULTY" = "Office 365 (Plan A1) for Faculty"
					"STANDARDWOFFPACKPACK_FACULTY" = "Office 365 (Plan A2) for Faculty"
					"ENTERPRISEPACK_FACULTY" = "Office 365 (Plan A3) for Faculty"
					"ENTERPRISEWITHSCAL_FACULTY" = "Office 365 (Plan A4) for Faculty"
					"ENTERPRISEPACK_B_PILOT" = "Office 365 (Enterprise Preview)"
					"STANDARD_B_PILOT" = "Office 365 (Small Business Preview)"
				}
				
				# Get a list of all licences that exist within the tenant 
				$licensetype = Get-MsolAccountSku | Where-Object { $_.ConsumedUnits -ge 1 }
				
				# Loop through all licence types found in the tenant 
				foreach ($license in $licensetype)
				{
					# Build and write the Header for the CSV file 
					$headerstring = "DisplayName,UserPrincipalName,AccountSku"
					
					foreach ($row in $($license.ServiceStatus))
					{
						
						# Build header string 
						switch -wildcard ($($row.ServicePlan.servicename))
						{
							"EXC*" { $thisLicence = "Exchange Online" }
							"MCO*" { $thisLicence = "Lync Online" }
							"LYN*" { $thisLicence = "Lync Online" }
							"OFF*" { $thisLicence = "Office Profesional Plus" }
							"SHA*" { $thisLicence = "Sharepoint Online" }
							"*WAC*" { $thisLicence = "Office Web Apps" }
							"WAC*" { $thisLicence = "Office Web Apps" }
							default { $thisLicence = $row.ServicePlan.servicename }
						}
						
						$headerstring = ($headerstring + "," + $thisLicence)
					}
					
					Out-File -FilePath $LogFile -InputObject $headerstring -Encoding UTF8 -append
					
					# Gather users for this particular AccountSku 
					$users = Get-MsolUser -all | Where-Object { $_.isLicensed -eq "True" -and $_.licenses[0].accountskuid.tostring() -eq $license.accountskuid }
					
					# Loop through all users and write them to the CSV file 
					foreach ($user in $users)
					{
						
						#write-host ("Processing " + $user.displayname)
						
						$datastring = ($user.displayname + "," + $user.userprincipalname + "," + $Sku.Item($user.licenses[0].AccountSku.SkuPartNumber))
						
						foreach ($row in $($user.licenses[0].servicestatus))
						{
							
							# Build data string 
							$datastring = ($datastring + "," + $($row.provisioningstatus))
						}
						
						Out-File -FilePath $LogFile -InputObject $datastring -Encoding UTF8 -append
						
					}
				}
				$FormO365AdministrationCenter.Cursor = 'Default'
				
			}
			$TextboxResults.Text = ""
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getAllGroupsAndAllMembersToCSVToolStripMenuItem_Click = {
	Try
	{
		$savedialog = New-Object windows.forms.savefiledialog
		$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
		$savedialog.title = "Export to File"
		$savedialog.filter = ".csv|*.csv"
		$savedialog.ShowHelp = $True
		$result = $savedialog.ShowDialog(); $result
		if ($result -eq "OK")
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			#Constant Variables 
			$OutputFile = $savedialog.filename
			$TextboxResults.Text = "Getting all groups and members..."
			$arrDLMembers = @{ }
			
			#Prepare Output file with headers 
			Out-File -FilePath $OutputFile -InputObject "Distribution Group DisplayName,Distribution Group Email,Member DisplayName, Member Email, Member Type" -Encoding UTF8
			
			#Get all Distribution Groups from Office 365 
			$objDistributionGroups = Get-DistributionGroup -ResultSize Unlimited
			
			#Iterate through all groups, one at a time     
			Foreach ($objDistributionGroup in $objDistributionGroups)
			{
				
				#write-host "Processing $($objDistributionGroup.DisplayName)..."
				
				#Get members of this group 
				$objDGMembers = Get-DistributionGroupMember -Identity $($objDistributionGroup.PrimarySmtpAddress)
				
				#write-host "Found $($objDGMembers.Count) members..."
				
				#Iterate through each member 
				Foreach ($objMember in $objDGMembers)
				{
					Out-File -FilePath $OutputFile -InputObject "$($objDistributionGroup.DisplayName),$($objDistributionGroup.PrimarySMTPAddress),$($objMember.DisplayName),$($objMember.PrimarySMTPAddress),$($objMember.RecipientType)" -Encoding UTF8 -append
					#write-host "`t$($objDistributionGroup.DisplayName),$($objDistributionGroup.PrimarySMTPAddress),$($objMember.DisplayName),$($objMember.PrimarySMTPAddress),$($objMember.RecipientType)"
				}
			}
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		$TextboxResults.Text = ""
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getAllUsersLastLogonTimestampToCSVToolStripMenuItem_Click = {
	$savedialog = New-Object windows.forms.savefiledialog
	$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
	$savedialog.title = "Export to CSV"
	$savedialog.filter = ".csv|*.csv"
	$savedialog.ShowHelp = $True
	$result = $savedialog.ShowDialog(); $result
	if ($result -eq "OK")
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting all users last logon timestamp..."
		$textboxDetails.Text = "(Get-Mailbox) | ForEach-Object { Get-MailboxStatistics $_.Identity | Select-Object DisplayName, LastLogonTime } "
		(Get-Mailbox) | ForEach-Object { Get-MailboxStatistics $_.Identity | Select-Object DisplayName, LastLogonTime } | Export-CSV $savedialog.filename -Encoding utf8 -NoTypeInformation -Delimiter ","
		$TextboxResults.Text = ""
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	else
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getAllMailboxPermissionsToCSVToolStripMenuItem_Click = {
	Try
	{
		$savedialog = New-Object windows.forms.savefiledialog
		$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
		$savedialog.title = "Export to File"
		$savedialog.filter = ".csv|*.csv"
		$savedialog.ShowHelp = $True
		$result = $savedialog.ShowDialog(); $result
		if ($result -eq "OK")
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$OutputFile = $savedialog.filename
			$TextboxResults.Text = "Getting all mailbox permissions..."
			
			#$OutputFile = Read-Host "Enter the location and name for the CSV. EX: C:\Scripts\UserPerms.csv"
			$textboxDetails.Text = ""
			
			#Main
			Function Main
			{
				
				
				
				#Prepare Output file with headers
				Out-File -FilePath $OutputFile -InputObject "UserPrincipalName,ObjectWithAccess,ObjectType,AccessType,Inherited,AllowOrDeny" -Encoding UTF8
				
				
				$objUsers = get-mailbox -ResultSize Unlimited | Select-Object UserPrincipalName
				
				
				#Iterate through all users	
				Foreach ($objUser in $objUsers)
				{
					#Connect to the users mailbox
					$objUserMailbox = get-mailboxpermission -Identity $($objUser.UserPrincipalName) | Select-Object User, AccessRights, Deny, IsInherited
					
					#Prepare UserPrincipalName variable
					$strUserPrincipalName = $objUser.UserPrincipalName
					
					#Loop through each permission
					foreach ($objPermission in $objUserMailbox)
					{
						#Get the remaining permission details (We're only interested in real users, not built in system accounts/groups)
						if (($objPermission.user.tolower().contains("\domain admin")) -or ($objPermission.user.tolower().contains("\enterprise admin")) -or ($objPermission.user.tolower().contains("\organization management")) -or ($objPermission.user.tolower().contains("\administrator")) -or ($objPermission.user.tolower().contains("\exchange servers")) -or ($objPermission.user.tolower().contains("\public folder management")) -or ($objPermission.user.tolower().contains("nt authority")) -or ($objPermission.user.tolower().contains("\exchange trusted subsystem")) -or ($objPermission.user.tolower().contains("\discovery management")) -or ($objPermission.user.tolower().contains("s-1-5-21")))
						{ }
						Else
						{
							$objRecipient = (get-recipient $($objPermission.user) -EA SilentlyContinue)
							
							if ($objRecipient)
							{
								$strUserWithAccess = $($objRecipient.DisplayName) + " (" + $($objRecipient.PrimarySMTPAddress) + ")"
								$strObjectType = $objRecipient.RecipientType
							}
							else
							{
								$strUserWithAccess = $($objPermission.user)
								$strObjectType = "Other"
							}
							
							$strAccessType = $($objPermission.AccessRights) -replace ",", ";"
							
							if ($objPermission.Deny -eq $true)
							{
								$strAllowOrDeny = "Deny"
							}
							else
							{
								$strAllowOrDeny = "Allow"
							}
							
							$strInherited = $objPermission.IsInherited
							
							#Prepare the user details in CSV format for writing to file
							$strUserDetails = "$strUserPrincipalName,$strUserWithAccess,$strObjectType,$strAccessType,$strInherited,$strAllowOrDeny"
							
							$TextboxResults.Text = $strUserDetails
							
							#Append the data to file
							Out-File -FilePath $OutputFile -InputObject $strUserDetails -Encoding UTF8 -append
						}
					}
				}
				
				
			}
			
			# Start script
			. Main
			$TextboxResults.Text = ""
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getAllDIsabledUsersThatAreStillMembersOfDistroGroupsToolStripMenuItem_Click = {
	Try
	{
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
		$savedialog = New-Object windows.forms.savefiledialog
		$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
		$savedialog.title = "Export to File"
		$savedialog.filter = ".csv|*.csv"
		$savedialog.ShowHelp = $True
		$result = $savedialog.ShowDialog(); $result
		$TextboxResults.Text = "Getting all users that are disabled and still members of distro groups..."
			if ($result -eq "OK")
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				
				#Get All Groups 
				$Groups = Get-MsolGroup -All
				
				#Build Hash of all disabled users 
				$MSOLDisabledUsers = Get-MsolUser -All -EnabledFilter DisabledOnly | Select-Object ObjectId
				$AllDisabledUsers = @()
				$MSOLDisabledUsers | ForEach-Object { $AllDisabledUsers += $_.ObjectID.Guid }
				
				$DisabledUserMembers = @()
				
				foreach ($Group in $Groups)
				{
					#$TextboxResults.Text = "Processing $($Group.DisplayName)..."
					#Get All Members and Loop through them 
					$GroupMembers = Get-MsolGroupMember -All -GroupObjectID $Group.ObjectID
					foreach ($Member in $GroupMembers)
					{
						#Is this member in our disabled list? 
						if ($AllDisabledUsers -contains $Member.ObjectId)
						{
							#$TextboxResults.Text = "`tFound $($Member.DisplayName)"
							#Add them to the list 
							$DisabledUserMembers += (
								$Object = [pscustomobject][ordered] @{
									GroupName = $Group.DisplayName
									GroupEmail = $Group.EmailAddress
									UserName = $Member.DisplayName
									EmailAddress = $Member.EmailAddress
								}
							)
						}
					}
				}
				$DisabledUserMembers | Export-CSV -NoTypeInformation $savedialog.filename
				$TextboxResults.Text = ""
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
			{
				$savedialog = New-Object windows.forms.savefiledialog
				$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
				$savedialog.title = "Export to File"
				$savedialog.filter = ".csv|*.csv"
				$savedialog.ShowHelp = $True
				$result = $savedialog.ShowDialog(); $result
				$TextboxResults.Text = "Getting all users that are disabled and still members of distro groups..."
				if ($result -eq "OK")
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					
					#Get All Groups 
					$Groups = Get-MsolGroup -All
					
					#Build Hash of all disabled users 
					$MSOLDisabledUsers = Get-MsolUser -All -EnabledFilter DisabledOnly | Select-Object ObjectId
					$AllDisabledUsers = @()
					$MSOLDisabledUsers | ForEach-Object { $AllDisabledUsers += $_.ObjectID.Guid }
					
					$DisabledUserMembers = @()
					
					foreach ($Group in $Groups)
					{
						#$TextboxResults.Text = "Processing $($Group.DisplayName)..."
						#Get All Members and Loop through them 
						$GroupMembers = Get-MsolGroupMember -TenantId $PartnerComboBox.SelectedItem.TenantID -All -GroupObjectID $Group.ObjectID
						foreach ($Member in $GroupMembers)
						{
							#Is this member in our disabled list? 
							if ($AllDisabledUsers -contains $Member.ObjectId)
							{
								#$TextboxResults.Text = "`tFound $($Member.DisplayName)"
								#Add them to the list 
								$DisabledUserMembers += (
									$Object = [pscustomobject][ordered] @{
										GroupName = $Group.DisplayName
										GroupEmail = $Group.EmailAddress
										UserName = $Member.DisplayName
										EmailAddress = $Member.EmailAddress
									}
								)
							}
						}
					}
					$DisabledUserMembers | Export-CSV -NoTypeInformation $savedialog.filename
					$TextboxResults.Text = ""
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
			Else
			{
				$savedialog = New-Object windows.forms.savefiledialog
				$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
				$savedialog.title = "Export to File"
				$savedialog.filter = ".csv|*.csv"
				$savedialog.ShowHelp = $True
				$result = $savedialog.ShowDialog(); $result
				$TextboxResults.Text = "Getting all users that are disabled and still members of distro groups..."
				if ($result -eq "OK")
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					
					#Get All Groups 
					$Groups = Get-MsolGroup -All
					
					#Build Hash of all disabled users 
					$MSOLDisabledUsers = Get-MsolUser -All -EnabledFilter DisabledOnly | Select-Object ObjectId
					$AllDisabledUsers = @()
					$MSOLDisabledUsers | ForEach-Object { $AllDisabledUsers += $_.ObjectID.Guid }
					
					$DisabledUserMembers = @()
					
					foreach ($Group in $Groups)
					{
						#$TextboxResults.Text = "Processing $($Group.DisplayName)..."
						#Get All Members and Loop through them 
						$GroupMembers = Get-MsolGroupMember -All -GroupObjectID $Group.ObjectID
						foreach ($Member in $GroupMembers)
						{
							#Is this member in our disabled list? 
							if ($AllDisabledUsers -contains $Member.ObjectId)
							{
								#$TextboxResults.Text = "`tFound $($Member.DisplayName)"
								#Add them to the list 
								$DisabledUserMembers += (
									$Object = [pscustomobject][ordered] @{
										GroupName = $Group.DisplayName
										GroupEmail = $Group.EmailAddress
										UserName = $Member.DisplayName
										EmailAddress = $Member.EmailAddress
									}
								)
							}
						}
					}
					$DisabledUserMembers | Export-CSV -NoTypeInformation $savedialog.filename
					$TextboxResults.Text = ""
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
			
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
}

$UsersGetLicensesRecoReportToolStripMenuItem1_Click = {
	$textboxDetails.Text = ""
	$TextboxResults.Text = ""
	Try
	{
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$savedialog = New-Object windows.forms.savefiledialog
			$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
			$savedialog.title = "Export to File"
			$savedialog.filter = ".csv|*.csv"
			$savedialog.ShowHelp = $True
			$result = $savedialog.ShowDialog(); $result
			if ($result -eq "OK")
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				
				$LogFile = $savedialog.filename
				$TextboxResults.Text = "Getting License Report..."
				
				# Define Hashtables for lookup 
				$Sku = @{
					"DESKLESSPACK" = "Office 365 (Plan K1)"
					"DESKLESSWOFFPACK" = "Office 365 (Plan K2)"
					"LITEPACK" = "Office 365 (Plan P1)"
					"EXCHANGESTANDARD" = "Office 365 Exchange Online Only"
					"STANDARDPACK" = "Office 365 (Plan E1)"
					"STANDARDWOFFPACK" = "Office 365 (Plan E2)"
					"ENTERPRISEPACK" = "Office 365 (Plan E3)"
					"ENTERPRISEPACKLRG" = "Office 365 (Plan E3)"
					"ENTERPRISEWITHSCAL" = "Office 365 (Plan E4)"
					"STANDARDPACK_STUDENT" = "Office 365 (Plan A1) for Students"
					"STANDARDWOFFPACKPACK_STUDENT" = "Office 365 (Plan A2) for Students"
					"ENTERPRISEPACK_STUDENT" = "Office 365 (Plan A3) for Students"
					"ENTERPRISEWITHSCAL_STUDENT" = "Office 365 (Plan A4) for Students"
					"STANDARDPACK_FACULTY" = "Office 365 (Plan A1) for Faculty"
					"STANDARDWOFFPACKPACK_FACULTY" = "Office 365 (Plan A2) for Faculty"
					"ENTERPRISEPACK_FACULTY" = "Office 365 (Plan A3) for Faculty"
					"ENTERPRISEWITHSCAL_FACULTY" = "Office 365 (Plan A4) for Faculty"
					"ENTERPRISEPACK_B_PILOT" = "Office 365 (Enterprise Preview)"
					"STANDARD_B_PILOT" = "Office 365 (Small Business Preview)"
				}
				
				# Get a list of all licences that exist within the tenant 
				$licensetype = Get-MsolAccountSku | Where-Object { $_.ConsumedUnits -ge 1 }
				
				# Loop through all licence types found in the tenant 
				foreach ($license in $licensetype)
				{
					# Build and write the Header for the CSV file 
					$headerstring = "DisplayName,UserPrincipalName,AccountSku"
					
					foreach ($row in $($license.ServiceStatus))
					{
						
						# Build header string 
						switch -wildcard ($($row.ServicePlan.servicename))
						{
							"EXC*" { $thisLicence = "Exchange Online" }
							"MCO*" { $thisLicence = "Lync Online" }
							"LYN*" { $thisLicence = "Lync Online" }
							"OFF*" { $thisLicence = "Office Profesional Plus" }
							"SHA*" { $thisLicence = "Sharepoint Online" }
							"*WAC*" { $thisLicence = "Office Web Apps" }
							"WAC*" { $thisLicence = "Office Web Apps" }
							default { $thisLicence = $row.ServicePlan.servicename }
						}
						
						$headerstring = ($headerstring + "," + $thisLicence)
					}
					
					Out-File -FilePath $LogFile -InputObject $headerstring -Encoding UTF8 -append
					
					# Gather users for this particular AccountSku 
					$users = Get-MsolUser -all | Where-Object { $_.isLicensed -eq "True" -and $_.licenses[0].accountskuid.tostring() -eq $license.accountskuid }
					
					# Loop through all users and write them to the CSV file 
					foreach ($user in $users)
					{
						
						$datastring = ($user.displayname + "," + $user.userprincipalname + "," + $Sku.Item($user.licenses[0].AccountSku.SkuPartNumber))
						
						foreach ($row in $($user.licenses[0].servicestatus))
						{
							
							# Build data string 
							$datastring = ($datastring + "," + $($row.provisioningstatus))
						}
						
						Out-File -FilePath $LogFile -InputObject $datastring -Encoding UTF8 -append
						
					}
				}
				$TextboxResults.Text = ""
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$savedialog = New-Object windows.forms.savefiledialog
			$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
			$savedialog.title = "Export to File"
			$savedialog.filter = ".csv|*.csv"
			$savedialog.ShowHelp = $True
			$result = $savedialog.ShowDialog(); $result
			if ($result -eq "OK")
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				
				$LogFile = $savedialog.filename
				$TextboxResults.Text = "Getting License Report..."
				
				# Define Hashtables for lookup 
				$Sku = @{
					"DESKLESSPACK" = "Office 365 (Plan K1)"
					"DESKLESSWOFFPACK" = "Office 365 (Plan K2)"
					"LITEPACK" = "Office 365 (Plan P1)"
					"EXCHANGESTANDARD" = "Office 365 Exchange Online Only"
					"STANDARDPACK" = "Office 365 (Plan E1)"
					"STANDARDWOFFPACK" = "Office 365 (Plan E2)"
					"ENTERPRISEPACK" = "Office 365 (Plan E3)"
					"ENTERPRISEPACKLRG" = "Office 365 (Plan E3)"
					"ENTERPRISEWITHSCAL" = "Office 365 (Plan E4)"
					"STANDARDPACK_STUDENT" = "Office 365 (Plan A1) for Students"
					"STANDARDWOFFPACKPACK_STUDENT" = "Office 365 (Plan A2) for Students"
					"ENTERPRISEPACK_STUDENT" = "Office 365 (Plan A3) for Students"
					"ENTERPRISEWITHSCAL_STUDENT" = "Office 365 (Plan A4) for Students"
					"STANDARDPACK_FACULTY" = "Office 365 (Plan A1) for Faculty"
					"STANDARDWOFFPACKPACK_FACULTY" = "Office 365 (Plan A2) for Faculty"
					"ENTERPRISEPACK_FACULTY" = "Office 365 (Plan A3) for Faculty"
					"ENTERPRISEWITHSCAL_FACULTY" = "Office 365 (Plan A4) for Faculty"
					"ENTERPRISEPACK_B_PILOT" = "Office 365 (Enterprise Preview)"
					"STANDARD_B_PILOT" = "Office 365 (Small Business Preview)"
				}
				
				# Get a list of all licences that exist within the tenant 
				$licensetype = Get-MsolAccountSku -TenantId $PartnerComboBox.SelectedItem.TenantID | Where-Object { $_.ConsumedUnits -ge 1 }
				
				# Loop through all licence types found in the tenant 
				foreach ($license in $licensetype)
				{
					# Build and write the Header for the CSV file 
					$headerstring = "DisplayName,UserPrincipalName,AccountSku"
					
					foreach ($row in $($license.ServiceStatus))
					{
						
						# Build header string 
						switch -wildcard ($($row.ServicePlan.servicename))
						{
							"EXC*" { $thisLicence = "Exchange Online" }
							"MCO*" { $thisLicence = "Lync Online" }
							"LYN*" { $thisLicence = "Lync Online" }
							"OFF*" { $thisLicence = "Office Profesional Plus" }
							"SHA*" { $thisLicence = "Sharepoint Online" }
							"*WAC*" { $thisLicence = "Office Web Apps" }
							"WAC*" { $thisLicence = "Office Web Apps" }
							default { $thisLicence = $row.ServicePlan.servicename }
						}
						
						$headerstring = ($headerstring + "," + $thisLicence)
					}
					
					Out-File -FilePath $LogFile -InputObject $headerstring -Encoding UTF8 -append
					
					# Gather users for this particular AccountSku 
					$users = Get-MsolUser -all -TenantId $PartnerComboBox.SelectedItem.TenantID | Where-Object { $_.isLicensed -eq "True" -and $_.licenses[0].accountskuid.tostring() -eq $license.accountskuid }
					
					# Loop through all users and write them to the CSV file 
					foreach ($user in $users)
					{
						
						$datastring = ($user.displayname + "," + $user.userprincipalname + "," + $Sku.Item($user.licenses[0].AccountSku.SkuPartNumber))
						
						foreach ($row in $($user.licenses[0].servicestatus))
						{
							
							# Build data string 
							$datastring = ($datastring + "," + $($row.provisioningstatus))
						}
						
						Out-File -FilePath $LogFile -InputObject $datastring -Encoding UTF8 -append
						
					}
				}
				$TextboxResults.Text = ""
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Else
		{
			$savedialog = New-Object windows.forms.savefiledialog
			$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
			$savedialog.title = "Export to File"
			$savedialog.filter = ".csv|*.csv"
			$savedialog.ShowHelp = $True
			$result = $savedialog.ShowDialog(); $result
			if ($result -eq "OK")
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				
				$LogFile = $savedialog.filename
				$TextboxResults.Text = "Getting License Report..."
				
				# Define Hashtables for lookup 
				$Sku = @{
					"DESKLESSPACK" = "Office 365 (Plan K1)"
					"DESKLESSWOFFPACK" = "Office 365 (Plan K2)"
					"LITEPACK" = "Office 365 (Plan P1)"
					"EXCHANGESTANDARD" = "Office 365 Exchange Online Only"
					"STANDARDPACK" = "Office 365 (Plan E1)"
					"STANDARDWOFFPACK" = "Office 365 (Plan E2)"
					"ENTERPRISEPACK" = "Office 365 (Plan E3)"
					"ENTERPRISEPACKLRG" = "Office 365 (Plan E3)"
					"ENTERPRISEWITHSCAL" = "Office 365 (Plan E4)"
					"STANDARDPACK_STUDENT" = "Office 365 (Plan A1) for Students"
					"STANDARDWOFFPACKPACK_STUDENT" = "Office 365 (Plan A2) for Students"
					"ENTERPRISEPACK_STUDENT" = "Office 365 (Plan A3) for Students"
					"ENTERPRISEWITHSCAL_STUDENT" = "Office 365 (Plan A4) for Students"
					"STANDARDPACK_FACULTY" = "Office 365 (Plan A1) for Faculty"
					"STANDARDWOFFPACKPACK_FACULTY" = "Office 365 (Plan A2) for Faculty"
					"ENTERPRISEPACK_FACULTY" = "Office 365 (Plan A3) for Faculty"
					"ENTERPRISEWITHSCAL_FACULTY" = "Office 365 (Plan A4) for Faculty"
					"ENTERPRISEPACK_B_PILOT" = "Office 365 (Enterprise Preview)"
					"STANDARD_B_PILOT" = "Office 365 (Small Business Preview)"
				}
				
				# Get a list of all licences that exist within the tenant 
				$licensetype = Get-MsolAccountSku | Where-Object { $_.ConsumedUnits -ge 1 }
				
				# Loop through all licence types found in the tenant 
				foreach ($license in $licensetype)
				{
					# Build and write the Header for the CSV file 
					$headerstring = "DisplayName,UserPrincipalName,AccountSku"
					
					foreach ($row in $($license.ServiceStatus))
					{
						
						# Build header string 
						switch -wildcard ($($row.ServicePlan.servicename))
						{
							"EXC*" { $thisLicence = "Exchange Online" }
							"MCO*" { $thisLicence = "Lync Online" }
							"LYN*" { $thisLicence = "Lync Online" }
							"OFF*" { $thisLicence = "Office Profesional Plus" }
							"SHA*" { $thisLicence = "Sharepoint Online" }
							"*WAC*" { $thisLicence = "Office Web Apps" }
							"WAC*" { $thisLicence = "Office Web Apps" }
							default { $thisLicence = $row.ServicePlan.servicename }
						}
						
						$headerstring = ($headerstring + "," + $thisLicence)
					}
					
					Out-File -FilePath $LogFile -InputObject $headerstring -Encoding UTF8 -append
					
					# Gather users for this particular AccountSku 
					$users = Get-MsolUser -all | Where-Object { $_.isLicensed -eq "True" -and $_.licenses[0].accountskuid.tostring() -eq $license.accountskuid }
					
					# Loop through all users and write them to the CSV file 
					foreach ($user in $users)
					{
						
						$datastring = ($user.displayname + "," + $user.userprincipalname + "," + $Sku.Item($user.licenses[0].AccountSku.SkuPartNumber))
						
						foreach ($row in $($user.licenses[0].servicestatus))
						{
							
							# Build data string 
							$datastring = ($datastring + "," + $($row.provisioningstatus))
						}
						
						Out-File -FilePath $LogFile -InputObject $datastring -Encoding UTF8 -append
						
					}
				}
				$TextboxResults.Text = ""
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getAllGroupsAndAllMembersToolStripMenuItem_Click = {
	Try
	{
		$savedialog = New-Object windows.forms.savefiledialog
		$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
		$savedialog.title = "Export to File"
		$savedialog.filter = ".csv|*.csv"
		$savedialog.ShowHelp = $True
		$result = $savedialog.ShowDialog(); $result
		if ($result -eq "OK")
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			#Constant Variables 
			$OutputFile = $savedialog.filename
			$TextboxResults.Text = "Getting all groups and members..."
			$arrDLMembers = @{ }
			
			#Prepare Output file with headers 
			Out-File -FilePath $OutputFile -InputObject "Distribution Group DisplayName,Distribution Group Email,Member DisplayName, Member Email, Member Type" -Encoding UTF8
			
			#Get all Distribution Groups from Office 365 
			$objDistributionGroups = Get-DistributionGroup -ResultSize Unlimited
			
			#Iterate through all groups, one at a time     
			Foreach ($objDistributionGroup in $objDistributionGroups)
			{
				
				#write-host "Processing $($objDistributionGroup.DisplayName)..."
				
				#Get members of this group 
				$objDGMembers = Get-DistributionGroupMember -Identity $($objDistributionGroup.PrimarySmtpAddress)
				
				#write-host "Found $($objDGMembers.Count) members..."
				
				#Iterate through each member 
				Foreach ($objMember in $objDGMembers)
				{
					Out-File -FilePath $OutputFile -InputObject "$($objDistributionGroup.DisplayName),$($objDistributionGroup.PrimarySMTPAddress),$($objMember.DisplayName),$($objMember.PrimarySMTPAddress),$($objMember.RecipientType)" -Encoding UTF8 -append
					#write-host "`t$($objDistributionGroup.DisplayName),$($objDistributionGroup.PrimarySMTPAddress),$($objMember.DisplayName),$($objMember.PrimarySMTPAddress),$($objMember.RecipientType)"
				}
			}
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		$TextboxResults.Text = ""
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$exportAllEmailAddressesToCSVToolStripMenuItem_Click = {
	Try
	{
		$savedialog = New-Object windows.forms.savefiledialog
		$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
		$savedialog.title = "Export to File"
		$savedialog.filter = ".csv|*.csv"
		$savedialog.ShowHelp = $True
		$result = $savedialog.ShowDialog(); $result
		if ($result -eq "OK")
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$OutputFile = $savedialog.filename
			$textboxDetails.Text = "Get-Recipient -ResultSize Unlimited | Select-Object DisplayName, RecipientType, EmailAddresses"
			$TextboxResults.Text = "Exporting list of all email addresses..."
			Get-Recipient -ResultSize Unlimited | select-object DisplayName, RecipientType, EmailAddresses | Export-Csv $OutputFile -NoTypeInformation
			$TextboxResults.Text = ""
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

#Mail Malware Report

$getMailMalwareReportToolStripMenuItem1_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting mail malware report..."
		$textboxDetails.Text = "Get-MailDetailMalwareReport | Format-List"
		$TextboxResults.Text = Get-MailDetailMalwareReport | Format-List | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getMailMalwareReportFromSenderToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$MalwareSender = Read-Host "Enter the email of the sender"
			If (!$MalwareSender)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No e-mail was entered, please enter a valid e-mail of the sender", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Generating mail malware report sent from $MalwareSender..."
				$textboxDetails.Text = "Get-MailDetailMalwareReport -SenderAddress $MalwareSender | Format-List"
				$TextboxResults.Text = Get-MailDetailMalwareReport -SenderAddress $MalwareSender | Format-List | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get a Mail Malware report for a different Sender?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getMailMalwareReportBetweenDatesToolStripMenuItem_Click = {
	Do
	{
		#$MalwareReportStart = Read-Host "Enter the start date. EX: 06/13/2015"
		$StartDateText = "Select the beginning date for the mail malware report"
		$StartDateFormText = "Start Date"
		Show-SelectDatePicker_psf
		$startdate = $SelectDatePicker_monthcalendar1
		$MalwareReportStart = "$startdate".trimend('00:00:00')
		
		#$MalwareReportEnd = Read-Host "Enter the end date. EX: 06/15/2015 "
		$StartDateText = "Select the ending date for the mail malware report"
		$StartDateFormText = "End Date"
		Show-SelectDatePicker_psf
		$enddate = $SelectDatePicker_monthcalendar1
		$MalwareReportEnd = "$enddate".trimend('00:00:00')
		
		try
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Generating mail malware report between $MalwareReportStart and $MalwareReportEnd..."
			$textboxDetails.Text = "Get-MailDetailMalwareReport -StartDate $MalwareReportStart -EndDate $MalwareReportEnd | Format-List"
			$TextboxResults.Text = Get-MailDetailMalwareReport -StartDate $MalwareReportStart -EndDate $MalwareReportEnd | Format-List | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get another Mail Malware report for a different date?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getMailMalwareReportToARecipientToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$MalwareRecipient = Read-Host "Enter the email of the recipient"
			If (!$MalwareRecipient)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Recipient E-mail was entered, please enter a valid recipient e-mail", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Generating mail malware report sent to $MalwareRecipient..."
				$textboxDetails.Text = "Get-MailDetailMalwareReport -RecipientAddress $MalwareRecipient | Format-List"
				$TextboxResults.Text = Get-MailDetailMalwareReport -RecipientAddress $MalwareRecipient | Format-List | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get another Mail Malware report for a different Recipient?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getMailMalwareReporforInboundToolStripMenuItem_Click = {
	try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Generating mail malware inbound report..."
		$textboxDetails.Text = "Get-MailDetailMalwareReport -Direction Inbound | Format-List "
		$TextboxResults.Text = Get-MailDetailMalwareReport -Direction Inbound | Format-List | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getMailMalwareReportForOutboundToolStripMenuItem_Click = {
	try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Generating mail malware outbound report..."
		$textboxDetails.Text = "Get-MailDetailMalwareReport -Direction Outbound | Format-List"
		$TextboxResults.Text = Get-MailDetailMalwareReport -Direction Outbound | Format-List | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

	#Mail Traffic Report

$getRecentMailTrafficReportToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Generating recent mail traffic report..."
		$textboxDetails.Text = "Get-MailTrafficReport | Format-Table -AutoSize"
		$TextboxResults.Text = Get-MailTrafficReport | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getInboundMailTrafficReportToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Generating inbound traffic report..."
		$textboxDetails.Text = "Get-MailTrafficReport -Direction Inbound | Format-Table -AutoSize"
		$TextboxResults.Text = Get-MailTrafficReport -Direction Inbound | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getOutboundMailTrafficReportToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Generating outbound mail traffic report..."
		$textboxDetails.Text = "Get-MailTrafficReport -Direction Outbound | Format-Table -AutoSize"
		$TextboxResults.Text = Get-MailTrafficReport -Direction Outbound | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getMailTrafficReportBetweenDatesToolStripMenuItem_Click = {
	
	#$MailTrafficStart = Read-Host "Enter the start date. EX: 06/13/2015"
	$StartDateText = "Select the beginning date for the mail traffic report"
	$StartDateFormText = "Start Date"
	Show-SelectDatePicker_psf
	$startdate = $SelectDatePicker_monthcalendar1
	$MailTrafficStart = "$startdate".trimend('00:00:00')
	
	#$MailTrafficEnd = Read-Host "Enter the end date. EX: 06/15/2015 "
	$StartDateText = "Select the ending date for the mail traffic report"
	$StartDateFormText = "End Date"
	Show-SelectDatePicker_psf
	$enddate = $SelectDatePicker_monthcalendar1
	$MailTrafficEnd = "$enddate".trimend('00:00:00')
	
	
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Generating mail traffic report between $MailTrafficStart and $MailTrafficEnd..."
		$textboxDetails.Text = "Get-MailTrafficReport -StartDate $MailTrafficStart -EndDate $MailTrafficEnd | Format-Table -AutoSize"
		$TextboxResults.Text = Get-MailTrafficReport -StartDate $MailTrafficStart -EndDate $MailTrafficEnd | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

	#ActiveSyncDevices

$getAllUsersActiveSyncDevicesToolStripMenuItem_Click = {
	Try
	{
		$savedialog = New-Object windows.forms.savefiledialog
		$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
		$savedialog.title = "Export to CSV"
		$savedialog.filter = ".csv|*.csv"
		$savedialog.ShowHelp = $True
		$result = $savedialog.ShowDialog(); $result
		if ($result -eq "OK")
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all ActiveSync Devices for all users..."
			$textboxDetails.Text = "Get-Mailbox -ResultSize Unlimited | ForEach-Object { `$PrimarySmtpAddress = `$_.PrimarySmtpAddress; Get-MobileDeviceStatistics -Mailbox `$_.Identity | Select-Object @{ Name = 'PrimarySmtpAddress'; Expression = { `$PrimarySmtpAddress } }, DeviceType, DeviceOS, DeviceMobileOperator, LastSyncAttemptTime } | Export-CSV `$savedialog.filename -Encoding utf8 -NoTypeInformation -Delimiter ", ""
			$MailBox = Get-Mailbox -ResultSize Unlimited
			$MailBox | ForEach-Object { $PrimarySmtpAddress = $_.PrimarySmtpAddress; Get-MobileDeviceStatistics -Mailbox $_.Identity | Select-Object @{ Name = "PrimarySmtpAddress"; Expression = { $PrimarySmtpAddress } }, DeviceType, DeviceOS, DeviceMobileOperator, LastSyncAttemptTime } | Export-CSV $savedialog.filename -Encoding utf8 -NoTypeInformation -Delimiter ","
			$TextboxResults.Text = ""
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}



###SHARED MAILBOXES###

$createASharedMailboxToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$NewSharedMailbox = Read-Host "Enter the name of the new Shared Mailbox"
			If (!$NewSharedMailbox)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No name was entered, please enter a valid name for the new Shared Mailbox", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Creating new shared mailbox $NewSharedMailbox"
				$textboxDetails.Text = "New-Mailbox -Name $NewSharedMailbox –Shared"
				New-Mailbox -Name $NewSharedMailbox –Shared
				$TextboxResults.Text = Get-Mailbox -ResultSize unlimited -RecipientTypeDetails SharedMailbox | Format-Table -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to create another Shared Mailbox?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getAllSharedMailboxesToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting list of shared mailboxes..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited -RecipientTypeDetails SharedMailbox | Format-Table -AutoSize"
		$TextboxResults.Text = Get-Mailbox -ResultSize unlimited -RecipientTypeDetails SharedMailbox | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$convertRegularMailboxToSharedToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$ConvertMailboxtoShared = Read-Host "Enter the name of the account you want to convert"
			$SelectUsersFormText = "Select the User you want to convert to a Shared Mailbox"
			Show-SelectCachedDisplayNames_psf
			$ConvertMailboxtoShared = $SelectCachedDisplayNames_comboboxNames
			If (!$ConvertMailboxtoShared)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid User to convert to a Shared Mailbox", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Converting $ConvertMailboxtoShared to a shared mailbox..."
				$textboxDetails.Text = "Set-Mailbox $ConvertMailboxtoShared –Type shared"
				Set-Mailbox $ConvertMailboxtoShared –Type shared
				$TextboxResults.Text = Get-Mailbox -Identity $ConvertMailboxtoShared | Format-List UserPrincipalName, DisplayName, RecipientTypeDetails, PrimarySmtpAddress, EmailAddresses, IsDirSynced | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to convert another User to a Shared Mailbox?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$convertSharedMailboxToRegularToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$ConvertMailboxtoRegular = Read-Host "Enter the name of the account you want to convert"
			$SharedMailboxesText = "Select the Shared Mailbox you want convert to a Regular Mailbox"
			Show-SelectSharedMailbox_psf
			$ConvertMailboxtoRegular = $SelectSharedMailbox_comboboxSharedMailboxes
			If (!$ConvertMailboxtoRegular)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Shared Mailbox was selected, please select a valid Shared Mailbox", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Converting $ConvertMailboxtoRegular to a Regular Mailbox..."
				$textboxDetails.Text = "Set-Mailbox $ConvertMailboxtoRegular –Type Regular"
				Set-Mailbox $ConvertMailboxtoRegular –Type Regular
				$TextboxResults.Text = Get-Mailbox -Identity $ConvertMailboxtoRegular | Format-List UserPrincipalName, DisplayName, RecipientTypeDetails, PrimarySmtpAddress, EmailAddresses, IsDirSynced | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to convert another Shared Mailbox to a Regular Mailbox?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getDetailedInfoForASharedMailboxToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$SharedMailboxDetailedInfo = Read-Host "Enter the name of the shared mailbox"
			$SharedMailboxesText = "Select the Shared Mailbox you want to view detailed information for"
			Show-SelectSharedMailbox_psf
			$SharedMailboxDetailedInfo = $SelectSharedMailbox_comboboxSharedMailboxes
			If (!$SharedMailboxDetailedInfo)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Shared Mailbox was selected, please select a valid Shared Mailbox", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting shared mailbox information for $SharedMailboxDetailedInfo..."
				$textboxDetails.Text = "Get-Mailbox $SharedMailboxDetailedInfo | Format-List"
				$TextboxResults.Text = Get-Mailbox $SharedMailboxDetailedInfo | Format-List | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get information on another Shared Mailbox?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$removeASharedMailboxToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$SharedMailboxesText = "Please select the Shared Mailbox you want to delete "
			Show-SelectSharedMailbox_psf
			$DeleteSharedMailbox = $SelectSharedMailbox_comboboxSharedMailboxes
			If (!$DeleteSharedMailbox)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Shared Mailbox was selected, please select a valid Shared Mailbox to delete", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$textboxDetails.Text = "Remove-Mailbox -Identity $DeleteSharedMailbox"
				$TextboxResults.Text = "Deleting the $DeleteSharedMailbox mailbox"
				Remove-Mailbox -Identity $DeleteSharedMailbox
				$TextboxResults.Text = "Getting list of shared mailboxes..."
				$TextboxResults.Text = Get-Mailbox -ResultSize unlimited -RecipientTypeDetails SharedMailbox | Format-Table -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to remove another Shared Mailbox?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

#Permissions

$exportAllUsersMailboxPermissionsToCSVToolStripMenuItem_Click = {
	
	
	Try
	{
		$savedialog = New-Object windows.forms.savefiledialog
		$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
		$savedialog.title = "Export to File"
		$savedialog.filter = ".csv|*.csv"
		$savedialog.ShowHelp = $True
		$result = $savedialog.ShowDialog(); $result
		if ($result -eq "OK")
		{
			$OutputFile = $savedialog.filename
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			#$OutputFile = Read-Host "Enter the location and name for the CSV. EX: C:\Scripts\UserPerms.csv"
			$textboxDetails.Text = "https://gallery.technet.microsoft.com/scriptcenter/Export-mailbox-permissions-d12a1d28"
			
			#Main
			Function Main
			{
				
				
				
				#Prepare Output file with headers
				Out-File -FilePath $OutputFile -InputObject "UserPrincipalName,ObjectWithAccess,ObjectType,AccessType,Inherited,AllowOrDeny" -Encoding UTF8
				
				
				$objUsers = get-mailbox -ResultSize Unlimited | Select-Object UserPrincipalName
				
				
				#Iterate through all users	
				Foreach ($objUser in $objUsers)
				{
					#Connect to the users mailbox
					$objUserMailbox = get-mailboxpermission -Identity $($objUser.UserPrincipalName) | Select-Object User, AccessRights, Deny, IsInherited
					
					#Prepare UserPrincipalName variable
					$strUserPrincipalName = $objUser.UserPrincipalName
					
					#Loop through each permission
					foreach ($objPermission in $objUserMailbox)
					{
						#Get the remaining permission details (We're only interested in real users, not built in system accounts/groups)
						if (($objPermission.user.tolower().contains("\domain admin")) -or ($objPermission.user.tolower().contains("\enterprise admin")) -or ($objPermission.user.tolower().contains("\organization management")) -or ($objPermission.user.tolower().contains("\administrator")) -or ($objPermission.user.tolower().contains("\exchange servers")) -or ($objPermission.user.tolower().contains("\public folder management")) -or ($objPermission.user.tolower().contains("nt authority")) -or ($objPermission.user.tolower().contains("\exchange trusted subsystem")) -or ($objPermission.user.tolower().contains("\discovery management")) -or ($objPermission.user.tolower().contains("s-1-5-21")))
						{ }
						Else
						{
							$objRecipient = (get-recipient $($objPermission.user) -EA SilentlyContinue)
							
							if ($objRecipient)
							{
								$strUserWithAccess = $($objRecipient.DisplayName) + " (" + $($objRecipient.PrimarySMTPAddress) + ")"
								$strObjectType = $objRecipient.RecipientType
							}
							else
							{
								$strUserWithAccess = $($objPermission.user)
								$strObjectType = "Other"
							}
							
							$strAccessType = $($objPermission.AccessRights) -replace ",", ";"
							
							if ($objPermission.Deny -eq $true)
							{
								$strAllowOrDeny = "Deny"
							}
							else
							{
								$strAllowOrDeny = "Allow"
							}
							
							$strInherited = $objPermission.IsInherited
							
							#Prepare the user details in CSV format for writing to file
							$strUserDetails = "$strUserPrincipalName,$strUserWithAccess,$strObjectType,$strAccessType,$strInherited,$strAllowOrDeny"
							
							$TextboxResults.Text = $strUserDetails
							
							#Append the data to file
							Out-File -FilePath $OutputFile -InputObject $strUserDetails -Encoding UTF8 -append
						}
					}
				}
				
				
			}
			
			# Start script
			. Main
			$TextboxResults.Text = ""
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$addFullAccessPermissionsToASharedMailboxToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$SharedMailboxFullAccess = Read-Host "Enter the name of the shared mailbox"
			$SharedMailboxesText = "Select the Shared Mailbox you want to modify Full Access permissions for"
			Show-SelectSharedMailbox_psf
			$SharedMailboxFullAccess = $SelectSharedMailbox_comboboxSharedMailboxes
			If (!$SharedMailboxFullAccess)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Shared Mailbox was selected, please select a valid Shared mailbox", "Error")
			}
			Else
			{
				#$GrantFullAccesstoSharedMailbox = Read-Host "Enter the UPN of the user that will have full access"
				$SelectUsersFormText = "Select the user you want to have full access to $SharedMailboxFullAccess"
				Show-SelectCachedDisplayNames_psf
				$GrantFullAccesstoSharedMailbox = $SelectCachedDisplayNames_comboboxNames
				If (!$GrantFullAccesstoSharedMailbox)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid user", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Granting Full Access permissions to $GrantFullAccesstoSharedMailbox for the $SharedMailboxFullAccess shared mailbox..."
					$textboxDetails.Text = "Add-MailboxPermission $SharedMailboxFullAccess -User $GrantFullAccesstoSharedMailbox -AccessRights FullAccess -InheritanceType All | Format-List"
					$TextboxResults.Text = Add-MailboxPermission $SharedMailboxFullAccess -User $GrantFullAccesstoSharedMailbox -AccessRights FullAccess -InheritanceType All | Format-List | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to modify permissions on another Shared Mailbox?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getSharedMailboxPermissionsToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$SharedMailboxPermissionsList = Read-Host "Enter the name of the Shared Mailbox"
			$SharedMailboxesText = "Select the Shared Mailbox you want to view permissions for"
			Show-SelectSharedMailbox_psf
			$SharedMailboxPermissionsList = $SelectSharedMailbox_comboboxSharedMailboxes
			If (!$SharedMailboxPermissionsList)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Shared Mailbox was selected, please select a valid Shared Mailbox", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting Send As permissions for $SharedMailboxPermissionsList..."
				$textboxDetails.Text = "Get-RecipientPermission $SharedMailboxPermissionsList | Where-Object { (`$_.Trustee -notlike 'NT AUTHORITY\SELF') } | Sort-Object Trustee | Format-Table Trustee, AccessControlType, AccessRights -AutoSize"
				#$TextboxResults.Text = Get-RecipientPermission $SharedMailboxPermissionsList | Format-List | Out-String
				$TextboxResults.Text = Get-RecipientPermission $SharedMailboxPermissionsList | Where-Object { ($_.Trustee -notlike "NT AUTHORITY\SELF") } | Sort-Object Trustee | Format-Table Trustee, AccessControlType, AccessRights -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to view permissions for another Shared Mailbox?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getSharedMailboxFullAccessPermissionsToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$SharedMailboxFullAccessPermissionsList = Read-Host "Enter the name of the Shared Mailbox"
			$SharedMailboxesText = "Select the Shared Mailbox you want to view Full Access permissions for"
			Show-SelectSharedMailbox_psf
			$SharedMailboxFullAccessPermissionsList = $SelectSharedMailbox_comboboxSharedMailboxes
			If (!$SharedMailboxFullAccessPermissionsList)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Shared Mailbox was selected, please select a valid Shared Mailbox", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting Full Access permissions for $SharedMailboxFullAccessPermissionsList..."
				$textboxDetails.Text = "Get-MailboxPermission $SharedMailboxFullAccessPermissionsList | Where-Object { (`$_.User -notlike 'NT AUTHORITY\SELF'') } | Sort-Object Identity | Format-Table Identity, User, AccessRights -AutoSize"
				$TextboxResults.Text = Get-MailboxPermission $SharedMailboxFullAccessPermissionsList | Where-Object { ($_.User -notlike "NT AUTHORITY\SELF") } | Sort-Object Identity | Format-Table Identity, User, AccessRights -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to view permissions on another Shared Mailbox?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$addSendAsAccessToASharedMailboxToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$SharedMailboxSendAsAccess = Read-Host "Enter the name of the shared mailbox"
			$SharedMailboxesText = "Select the Shared Mailbox you want to modify Send As permissions for"
			Show-SelectSharedMailbox_psf
			$SharedMailboxSendAsAccess = $SelectSharedMailbox_comboboxSharedMailboxes
			If (!$SharedMailboxSendAsAccess)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Shared Mailbox was selected, please select a valid Shared Mailbox", "Error")
			}
			Else
			{
				#$SharedMailboxSendAsUser = Read-Host "Enter the UPN of the user"
				$SelectUsersFormText = "Select the user you want grant Send As permissions for $SharedMailboxSendAsAccess shared mailbox"
				Show-SelectCachedDisplayNames_psf
				$SharedMailboxSendAsUser = $SelectCachedDisplayNames_comboboxNames
				If (!$SharedMailboxSendAsUser)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid user", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Getting Send As permissions for $SharedMailboxSendAsAccess..."
					$textboxDetails.Text = "Add-RecipientPermission $SharedMailboxSendAsAccess -Trustee $SharedMailboxSendAsUser -AccessRights SendAs | Format-List"
					$TextboxResults.Text = Add-RecipientPermission $SharedMailboxSendAsAccess -Trustee $SharedMailboxSendAsUser -AccessRights SendAs | Format-List | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to modify permissions on another Shared Mailbox?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}



###CONTACTS###

$createANewMailContactToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$ContactFirstName = Read-Host "Enter the contacts first name"
			If (!$ContactFirstName)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No first name was entered, please enter a valid first name", "Error")
			}
			Else
			{
				$ContactsLastName = Read-Host "Enter the contacts last name"
				If (!$ContactsLastName)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No last name was entered, please enter a valid last name", "Error")
				}
				Else
				{
					$ContactName = $ContactFirstName + " " + $ContactsLastName
					$ContactExternalEmail = Read-Host "Enter external email for $ContactName"
					If (!$ContactExternalEmail)
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						[System.Windows.Forms.MessageBox]::Show("No external email was entered, please enter a valid external email", "Error")
					}
					Else
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Creating a new contact $ContactName"
						$textboxDetails.Text = "New-MailContact -Name $ContactName -FirstName $ContactFirstName -LastName $ContactsLastName -ExternalEmailAddress $ContactExternalEmail"
						New-MailContact -Name $ContactName -FirstName $ContactFirstName -LastName $ContactsLastName -ExternalEmailAddress $ContactExternalEmail
						$TextboxResults.Text = Get-MailContact -Identity $ContactName | Format-List DisplayName, EmailAddresses, PrimarySmtpAddress, ExternalEmailAddress, RecipientType | Out-String -Width 2147483647
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to create another Contact?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getAllContactsToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting all contacts..."
		$textboxDetails.Text = "Get-MailContact -ResultSize unlimited | Sort-Object DisplayName | Format-Table DisplayName, EmailAddresses -AutoSize"
		$TextboxResults.Text = Get-MailContact -ResultSize unlimited | Sort-Object DisplayName | Format-Table DisplayName, EmailAddresses -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getDetailedInfoForAContactToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$DetailedInfoForContact = Read-Host "Enter the contact name, displayname, alias or email address"
			$MailContactText = "Select the Contact to get detailed information for"
			Show-SelectMailContact_psf
			$DetailedInfoForContact = $SelectMailContact_comboboxSelectMailContacts
			If (!$DetailedInfoForContact)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Contact was selected, please select a Contact to view detailed information of", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting detailed info for $DetailedInfoForContact..."
				$textboxDetails.Text = "Get-MailContact -Identity $DetailedInfoForContact | Format-List"
				$TextboxResults.Text = Get-MailContact -Identity $DetailedInfoForContact | Format-List | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get information on another Contact?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$removeAContactToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$RemoveMailContact = Read-Host "Enter the contact name, displayname, alias or email address"
			$MailContactText = "Select the Contact you want to remove"
			Show-SelectMailContact_psf
			$RemoveMailContact = $SelectMailContact_comboboxSelectMailContacts
			If (!$RemoveMailContact)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Contact was selected, please select a valid Contact to remove", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Removing contact $RemoveMailContact..."
				$textboxDetails.Text = "Remove-MailContact -Identity $RemoveMailContact"
				Remove-MailContact -Identity $RemoveMailContact
				$TextboxResults.Text = "Getting list of all contacts..."
				$TextboxResults.Text = Get-MailContact -ResultSize unlimited | Sort-Object DisplayName | Format-Table DisplayName, EmailAddresses, PrimarySmtpAddress, ExternalEmailAddress, RecipientType -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to remove another Contact?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

#Global Address List

$hideContactFromGALToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$HideGALMailContact = Read-Host "Enter the contact name, displayname, alias or email address"
			$MailContactText = "Select the Contact you want to hide from the Global Address List"
			Show-SelectMailContact_psf
			$HideGALMailContact = $SelectMailContact_comboboxSelectMailContacts
			If (!$HideGALMailContact)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Contact was selected, please select a valid Contact to hide from the Global Address List", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Hiding $HideGALMailContact from the GAL..."
				$textboxDetails.Text = "Set-MailContact -Identity $HideGALMailContact -HiddenFromAddressListsEnabled `$True"
				Set-MailContact -Identity $HideGALMailContact -HiddenFromAddressListsEnabled $True
				$TextboxResults.Text = Get-MailContact -Identity $HideGALMailContact | Format-List DisplayName, HiddenFromAddressListsEnabled | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to hide another Contact from the Global Address List?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$unhideContactFromGALToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$unHideGALMailContact = Read-Host "Enter the contact name, displayname, alias or email address"
			$MailContactText = "Select the Contact you want to unhide from the Global Address List"
			Show-SelectMailContact_psf
			$unHideGALMailContact = $SelectMailContact_comboboxSelectMailContacts
			If (!$unHideGALMailContact)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Contact was selected, please select a valid Contact to unhide from the Global Address List", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "unhiding $unHideGALMailContact from the GAL..."
				$textboxDetails.Text = "Set-MailContact -Identity $unHideGALMailContact -HiddenFromAddressListsEnabled `$False"
				Set-MailContact -Identity $unHideGALMailContact -HiddenFromAddressListsEnabled $False
				$TextboxResults.Text = Get-MailContact -Identity $unHideGALMailContact | Format-List DisplayName, HiddenFromAddressListsEnabled | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to unhide another Contact from the Global Address List?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getGALStatusForAllUsersToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting GAL status for all users..."
		$textboxDetails.Text = "Get-MailContact -ResultSize unlimited | Sort-Object DisplayName | Format-Table DisplayName, HiddenFromAddressListsEnabled -AutoSize"
		$TextboxResults.Text = Get-MailContact -ResultSize unlimited | Sort-Object DisplayName | Format-Table DisplayName, HiddenFromAddressListsEnabled -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getContactsHiddenFromGALToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting all users that are hidden from the GAL..."
		$textboxDetails.Text = "Get-MailContact -ResultSize unlimited | Where-Object { `$_.HiddenFromAddressListsEnabled -like 'True' } | Sort-Object DisplayName | Format-Table DisplayName, HiddenFromAddressListsEnabled -AutoSize"
		$TextboxResults.Text = Get-MailContact -ResultSize unlimited | Where-Object { $_.HiddenFromAddressListsEnabled -like "True" } | Sort-Object DisplayName | Format-Table DisplayName, HiddenFromAddressListsEnabled -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getContactsNotHiddenFromGALToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting all users that not are hidden from the GAL"
		$textboxDetails.Text = "Get-MailContact -ResultSize unlimited | Where-Object { `$_.HiddenFromAddressListsEnabled -like 'False' } | Sort-Object DisplayName | Format-Table DisplayName, HiddenFromAddressListsEnabled -AutoSize"
		$TextboxResults.Text = Get-MailContact -ResultSize unlimited | Where-Object { $_.HiddenFromAddressListsEnabled -like "False" } | Sort-Object DisplayName | Format-Table DisplayName, HiddenFromAddressListsEnabled -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}


###SKYPE###

$getAllOnlineUserToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting all online users..."
		$textboxDetails.Text = "Get-CsOnlineUser -ResultSize 2147483647 | Sort-Object DisplayName | Format-Table DisplayName "
		$TextboxResults.Text = Get-CsOnlineUser -ResultSize 2147483647 | Sort-Object DisplayName | Format-Table DisplayName -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getAllClientPoliciesToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting all client policies..."
		$textboxDetails.Text = "Get-CsClientPolicy "
		$TextboxResults.Text = Get-CsClientPolicy | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getExternalAccessPoliciesToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting external access policies..."
		$textboxDetails.Text = "Get-CsExternalAccessPolicy"
		$TextboxResults.Text = Get-CsExternalAccessPolicy | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getVoicePoliciesToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting voice policies..."
		$textboxDetails.Text = "Get-CsVoicePolicy"
		$TextboxResults.Text = Get-CsVoicePolicy | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getBroadcastMeetingPoliciesToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting broadcast meeting policies..."
		$textboxDetails.Text = "Get-CsBroadcastMeetingPolicy"
		$TextboxResults.Text = Get-CsBroadcastMeetingPolicy | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getBroadcaseMeetingConfigurationToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting broadcast meeting configuration..."
		$textboxDetails.Text = "Get-CsBroadcastMeetingConfiguration"
		$TextboxResults.Text = Get-CsBroadcastMeetingConfiguration | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getPushNotificationConfigurationToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Push Notification configuration..."
		$textboxDetails.Text = "Get-CsPushNotificationConfiguration"
		$TextboxResults.Text = Get-CsPushNotificationConfiguration | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getHostedVoicemailPolicyToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Hosted Voicemail policy..."
		$textboxDetails.Text = "Get-CsHostedVoicemailPolicy"
		$TextboxResults.Text = Get-CsHostedVoicemailPolicy | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}



###COMPLIANCE CENTER###

$newHoldCompliancePolicyToolStripMenuItem1_Click = {
	Do
	{
		Try
		{
			$NewRetentionPolicy = Read-Host "Enter the name for the new Retention Policy"
			If (!$NewRetentionPolicy)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No name was entered, please enter a valid name for the new Retention Policy ", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$textboxResults.Text = "Creating the $NewRetentionPolicy Retention Policy..."
				$textboxDetails.Text = "New-RetentionCompliancePolicy -Name $NewRetentionPolicy"
				$textboxResults.Text = New-RetentionCompliancePolicy -Name $NewRetentionPolicy | Sort-Object Name | Format-Table -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to create another Retention Compliance Policy?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getHoldCompliancePoliciesToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$textboxResults.Text = "Getting all Retention Policies..."
		$textboxDetails.Text = "Get-RetentionCompliancePolicy | Format-Table -AutoSize | Out-String"
		$textboxResults.Text = Get-RetentionCompliancePolicy | Sort-Object Name | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$removeARetentionCompliancePolicyToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$RemoveRetentionPolicy = Read-Host "Enter the policy name you want to remove"
			$RetentionPoliciesText = "Select the Retention Policy you want to remove"
			Show-SelectRetentionPolicy_psf
			$RemoveRetentionPolicy = $SelectRetentionPolicy_comboboxRetentionPolicies
			If (!$RemoveRetentionPolicy)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No policy was selected, please select a valid policy to delete", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$textboxResults.Text = "Removing the $RemoveRetentionPolicy retention policy..."
				$textboxDetails.Text = "Remove-RetentionCompliancePolicy -Identity $RemoveRetentionPolicy"
				Remove-RetentionCompliancePolicy -Identity $RemoveRetentionPolicy
				$textboxResults.Text = "Getting all retention policies..."
				$textboxResults.Text = Get-RetentionCompliancePolicy | Sort-Object Name | Format-Table -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to remove another Retention Policy?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getAllManagementRolesToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$textboxResults.Text = "Getting all management roles..."
		$textboxDetails.Text = "Get-ManagementRole | Sort-Object Name | Format-Table Name, RoleType -AutoSize"
		$textboxResults.Text = Get-ManagementRole | Sort-Object Name | Format-Table Name, RoleType -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

	#Data Loss Prevention Policies

$getDataLossPreventionPoliciesToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$textboxResults.Text = "Getting Data Loss Prevention Policies..."
		$textboxDetails.Text = "Get-DlpCompliancePolicy"
		$textboxResults.Text = Get-DlpCompliancePolicy | Sort-Object Name | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$newDataLossPreventionPolicyToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$NewDLP = Read-Host "Enter the name of the new Data Loss Prevention Policy"
			If (!$NewDLP)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No name was entered, please enter a valid name for the new Data Loss Prevention Policy", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$textboxResults.Text = "Creating the new $NewDLP Data Loss Prevention policy..."
				$textboxDetails.Text = "New-DlpCompliancePolicy -Name $NewDLP"
				$textboxResults.Text = New-DlpCompliancePolicy -Name $NewDLP | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to create another Data Loss Prevention Policy?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$removeDataLossPreventionPolicyToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$SelectDLPText = "Select the Data Loss Prevention Policy you want to remove"
			Show-SelectDLP_psf
			$RemoveDLP = $SelectDLP_comboboxDLP
			If (!$RemoveDLP)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Data Loss Prevention Policy was selected, please enter a valid Data Loss Prevention Policy", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Removing $RemoveDLP Data Loss Prevention policy..."
				$textboxDetails.Text = "Remove-DlpCompliancePolicy -Identity $RemoveDLP"
				Remove-DlpCompliancePolicy -Identity $RemoveDLP
				$TextboxResults.Text = "Getting list of Data Loss Prevention policies..."
				$textboxResults.Text = Get-DlpCompliancePolicy | Sort-Object Name | Format-Table -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to remove another Data Loss Prevention Policy?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

#Data Loss Compliance Rule

$getDataLossComplianceRulesToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$textboxResults.Text = "Getting Data Loss Compliance rules..."
		$textboxDetails.Text = "Get-DlpComplianceRule"
		$textboxResults.Text = Get-DlpComplianceRule | Sort-Object Name | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$newDataLossComplianceRuleToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$NewDLC = Read-Host "Enter the name of the new Data Loss Compliance Rule"
			If (!$NewDLC)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No name was entered, please enter a valid name for the new Data Loss Compliance Rule", "Error")
			}
			Else
			{
				$SelectDLPText = "Select the Data Loss Prevention Policy that will contain the DLP rule"
				Show-SelectDLP_psf
				$DLPolicy = $SelectDLP_comboboxDLP
				If (!$DLPolicy)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Data Loss Prevention Policy was selected, please select a valid Data Loss Prevention Policy for the new DLP rule", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$textboxResults.Text = "Creating the new $NewDLC Data Loss Compliance rule..."
					$textboxDetails.Text = "New-DlpComplianceRule -Name $NewDLC -Policy $DLPolicy"
					$textboxResults.Text = New-DlpComplianceRule -Name $NewDLC -Policy $DLPolicy | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to create another Data Loss Compliance Rule?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
}

$removeDataLossComplianceRuleToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$SelectDLCText = "Select the Data Loss Compliance Rule you want to remove"
			Show-SelectDataComplianceRule_psf
			$RemoveDLC = $SelectDataComplianceRule_comboboxDLC
			If (!$RemoveDLC)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Data Loss Compliance Rule was selected, please enter a valid Data Loss Compliance Rule", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$textboxResults.Text = "Removing the $RemoveDLC Data Loss Compliance rule..."
				$textboxDetails.Text = "Remove-DlpComplianceRule -Identity $RemoveDLC"
				Remove-DlpComplianceRule -Identity $RemoveDLC
				$textboxResults.Text = "Getting Data Loss Compliance rules..."
				$textboxResults.Text = Get-DlpComplianceRule | Sort-Object Name | Format-Table -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to remove another Data Loss Compliance Rule?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}


###eDISCOVERY###

	#Case Hold Policies

$getCaseHoldPoliciesToolStripMenuItem_Click = {
	Try
	{
		$ComplianceCaseText = "Select the eDiscovery case that is associated with the case hold policy"
		Show-SelectComplianceCase_psf
		$CCase = $SelectComplianceCase_comboboxComplianceCases
		If (!$CCase)
		{
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("No eDiscovery Case was selected, please select a valid eDiscovery Case", "Error")
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$textboxResults.Text = "Getting Case Hold Policies..."
			$textboxDetails.Text = "Get-CaseHoldPolicy -Case $CCase"
			$textboxResults.Text = Get-CaseHoldPolicy -Case $CCase | Sort-Object Name | Format-Table -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$newComplianceCaseToolStripMenuItem_Click = {
	Try
	{
		$NewCC = Read-Host "Enter the name for the new Compliance Case"
		If (!$NewCC)
		{
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("No Name was entered, please enter a valid name for the new Compliance Case", "Error")
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$textboxResults.Text = "Creating the $NewCC Compliance Case..."
			$textboxDetails.Text = "New-ComplianceCase -Name $NewCC"
			$textboxResults.Text = New-ComplianceCase -Name $NewCC | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$newCaseHoldPolicyToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$NewCaseHoldPolicy = Read-Host "Enter the name of the new Case Hold Policy"
			If (!$NewCaseHoldPolicy)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Name was entered, please enter a valid Name for the new Case Hold Policy", "Error")
			}
			Else
			{
				$ComplianceCaseText = "Select the eDiscovery Case that you want to associate with the $NewCaseHoldPolicy case hold policy"
				Show-SelectComplianceCase_psf
				$CCase = $SelectComplianceCase_comboboxComplianceCases
				If (!$CCase)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No eDiscovery Case was selected, please select a valid eDiscovery Case", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$textboxResults.Text = "Creating the new $NewCaseHoldPolicy Case Hold Policy..."
					$textboxDetails.Text = "New-CaseHoldPolicy -Name $NewCaseHoldPolicy -Case $CCase"
					$textboxResults.Text = New-CaseHoldPolicy -Name $NewCaseHoldPolicy -Case $CCase | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to create another Case Hold Policy?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$removeComplianceCaseToolStripMenuItem_Click = {
	Try
	{
		$ComplianceCaseText = "Select the Compliance Case you want to remove"
		Show-SelectComplianceCase_psf
		$RemoveCCase = $SelectComplianceCase_comboboxComplianceCases
		If (!$RemoveCCase)
		{
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("No Compliance Case was selected, please select a valid Compliance Case you want to remove", "Error")
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$textboxResults.Text = "Removing the Compliance Case $RemoveCCase..."
			$textboxDetails.Text = "Remove-ComplianceCase -Identity $RemoveCCase"
			$textboxResults.Text = Remove-ComplianceCase -Identity $RemoveCCase | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getComplianceCasesToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$textboxResults.Text = "Getting Compliance Cases..."
		$textboxDetails.Text = "Get-ComplianceCase"
		$textboxResults.Text = Get-ComplianceCase | Sort-Object Name | Format-Table Name -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getDetailedComplianceCaseInformationToolStripMenuItem_Click = {
	Try
	{
		$ComplianceCaseText = "Select the Compliance Case you want to view detailed information for"
		Show-SelectComplianceCase_psf
		$DetailedCCase = $SelectComplianceCase_comboboxComplianceCases
		If (!$DetailedCCase)
		{
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("No Compliance Case was selected, please select a valid Compliance Case", "Error")
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$textboxResults.Text = "Getting detailed information for $DetailedCCase..."
			$textboxDetails.Text = "Get-ComplianceCase -Identity $DetailedCCase | Format-List"
			$textboxResults.Text = Get-ComplianceCase -Identity $DetailedCCase | Format-List | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

#Case Admin

$addAEDiscoveryCaseAdminToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
			{
				$TextboxResults.Text = "Connecting to Exchange Online to get list of Users..."
				$exchangeSession = New-PSSession -Name MainAccount -ConfigurationName Microsoft.Exchange -ConnectionUri https://outlook.office365.com/powershell-liveid/ -Credential $global:o365credentials -Authentication Basic -AllowRedirection
				Import-PSSession $exchangeSession -AllowClobber
				$checkboxExchangeOnline.Checked = $true
				
				$TextboxResults.Text = "Caching Users..."
				$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter")
				Get-MSOLUser -All | Select-Object -ExpandProperty DisplayName | Out-File "$O365AdminTempFolder\names.txt"
				
				$SelectUsersFormText = "Select the User you want to add as a eDiscovery Case Admin"
				Show-SelectCachedDisplayNames_psf
				$NewECaseAdmin = $SelectCachedDisplayNames_comboboxNames
				If (!$NewECaseAdmin)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid User", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$textboxResults.Text = "Adding $NewECaseAdmin as a eDiscovery case admin..."
					$textboxDetails.Text = "Add-eDiscoveryCaseAdmin -User $NewECaseAdmin"
					Add-eDiscoveryCaseAdmin -User $NewECaseAdmin
					$TextboxResults.Text = "Getting eDiscovery Case Admins..."
					$TextboxResults.Text = Get-eDiscoveryCaseAdmin | Sort-Object Name | Format-Table Name -AutoSize | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
			ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
			{
				$TextboxResults.Text = "Connecting to Exchange Online to get list of Users..."
				$exchangeSession = New-PSSession -Name MainAccount -ConfigurationName Microsoft.Exchange -ConnectionUri https://outlook.office365.com/powershell-liveid/ -Credential $global:o365credentials -Authentication Basic -AllowRedirection
				Import-PSSession $exchangeSession -AllowClobber
				$checkboxExchangeOnline.Checked = $true
				
				$TextboxResults.Text = "Caching Users..."
				$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter")
				Get-MSOLUser -All -TenantId $PartnerComboBox.SelectedItem.TenantID | Select-Object -ExpandProperty DisplayName | Out-File "$O365AdminTempFolder\names.txt"
				
				$SelectUsersFormText = "Select the User you want to add as a eDiscovery Case Admin"
				Show-SelectCachedDisplayNames_psf
				$NewECaseAdmin = $SelectCachedDisplayNames_comboboxNames
				If (!$NewECaseAdmin)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid User", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$textboxResults.Text = "Adding $NewECaseAdmin as a eDiscovery case admin..."
					$textboxDetails.Text = "Add-eDiscoveryCaseAdmin -User $NewECaseAdmin"
					Add-eDiscoveryCaseAdmin -User $NewECaseAdmin
					$TextboxResults.Text = "Getting eDiscovery Case Admins..."
					$TextboxResults.Text = Get-eDiscoveryCaseAdmin | Sort-Object Name | Format-Table Name -AutoSize | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
			Else
			{
				$TextboxResults.Text = "Connecting to Exchange Online to get list of Users..."
				$exchangeSession = New-PSSession -Name MainAccount -ConfigurationName Microsoft.Exchange -ConnectionUri https://outlook.office365.com/powershell-liveid/ -Credential $global:o365credentials -Authentication Basic -AllowRedirection
				Import-PSSession $exchangeSession -AllowClobber
				$checkboxExchangeOnline.Checked = $true
				
				$TextboxResults.Text = "Caching Users..."
				$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter")
				Get-MSOLUser -All | Select-Object -ExpandProperty DisplayName | Out-File "$O365AdminTempFolder\names.txt"
				
				$SelectUsersFormText = "Select the User you want to add as a eDiscovery Case Admin"
				Show-SelectCachedDisplayNames_psf
				$NewECaseAdmin = $SelectCachedDisplayNames_comboboxNames
				If (!$NewECaseAdmin)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid User", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$textboxResults.Text = "Adding $NewECaseAdmin as a eDiscovery case admin..."
					$textboxDetails.Text = "Add-eDiscoveryCaseAdmin -User $NewECaseAdmin"
					Add-eDiscoveryCaseAdmin -User $NewECaseAdmin
					$TextboxResults.Text = "Getting eDiscovery Case Admins..."
					$TextboxResults.Text = Get-eDiscoveryCaseAdmin | Sort-Object Name | Format-Table Name -AutoSize | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to add another eDiscovery Case Admin?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getEDiscoveryCaseAdminsToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting eDiscovery Case Admins..."
		$textboxDetails.Text = "Get-eDiscoveryCaseAdmin"
		$TextboxResults.Text = Get-eDiscoveryCaseAdmin | Sort-Object Name | Format-Table Name -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}


###SHAREPOINT###

$getAllSiteCollectionsToolStripMenuItem_Click = {
	try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting list of sharepoint sites..."
		$textboxDetails.Text = "Get-SPOsite | Format-Table -Autosize"
		$TextboxResults.Text = Get-SPOSite | Format-Table -AutoSize | Out-string -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getAllDeletedSiteCollectionsToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting all deleted SharePoint sites..."
		$textboxDetails.Text = "Get-SPODeletedSite | Format-Table -Autosize"
		$TextboxResults.Text = Get-SPODeletedSite | Format-Table -AutoSize | Out-string -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getAllUsersForASiteToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$SPOSiteText = "Select the SharePoint Site you want to get all Users from"
			Show-SelectSPOSites_psf
			$site = $SelectSPOSites_comboboxSelectSPOSites
			If (!$site)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No SharePoint Site was selected, please select a valid SharePoint Site", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$textboxDetails.Text = "Get-SPOUser -Site $site | Format-Table -AutoSize"
				$TextboxResults.Text = "Getting all users from site $site..."
				$TextboxResults.Text = Get-SPOUser -Site $site | Format-Table -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get all Users for another SharePoint Site?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$testSharePointSiteToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$SPOSiteText = "Select the SharePoint Site you want to test"
			Show-SelectSPOSites_psf
			$site = $SelectSPOSites_comboboxSelectSPOSites
			If (!$site)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No SharePoint Site was selected, please select a valid SharePoint Site to test", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$textboxDetails.Text = "Test-SPOSite -identity $site"
				$TextboxResults.Text = "Testing $site..."
				$TextboxResults.Text = Test-SPOSite -identity $site | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to test another SharePoint Site?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$repairSharePointSiteToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$SPOSiteText = "Select the SharePoint Site you want to repair"
			Show-SelectSPOSites_psf
			$site = $SelectSPOSites_comboboxSelectSPOSites
			If (!$site)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No SharePoint Site was selected, please select a valid SharePoint Site to reapir", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$textboxDetails.Text = "Repair-SPOSite -identity $site"
				$TextboxResults.Text = "Repairing $site..."
				$TextboxResults.Text = Repair-SPOSite -identity $site | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to repair another SharePoint Site?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$removeSharePointSiteToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$SPOSiteText = "Select the SharePoint Site you want to remove"
			Show-SelectSPOSites_psf
			$site = $SelectSPOSites_comboboxSelectSPOSites
			If (!$site)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No SharePoint Site was selected, please select a valid SharePoint Site to delete", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$textboxDetails.Text = "Remove-SPOSite -identity $site"
				$TextboxResults.Text = "Removing $site..."
				$TextboxResults.Text = Remove-SPOSite -identity $site | Out-String -Width 2147483647
				$TextboxResults.Text = "Getting all deleted SharePoint sites..."
				$TextboxResults.Text = Get-SPODeletedSite | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to remove another SharePoint Site?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getDeletedSharePointSitesToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$textboxDetails.Text = "Get-SPODeletedSite"
		$TextboxResults.Text = "Getting all deleted SharePoint sites..."
		$TextboxResults.Text = Get-SPODeletedSite | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$restoreDeletedSharePointSiteToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$DeletedSitesText = "Please select the SharePoint Site you want to restore"
			Show-SelectDeletedSPOSites_psf
			$RestoreSite = $SelectDeletedSPOSites_comboboxDeletedSites
			If (!$RestoreSite)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No SharePoint Site was selected, please select a valid SharePoint Site to recover", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$textboxDetails.Text = "Restore-SPODeletedSite -identity $RestoreSite"
				$TextboxResults.Text = "Restoring $RestoreSite..."
				$TextboxResults.Text = Restore-SPODeletedSite -identity $RestoreSite | Out-String -Width 2147483647
				$TextboxResults.Text = "Getting all SharePoint sites..."
				$TextboxResults.Text = Get-SPOSite | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to restore another SharePoint Site?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$newSharePointSiteToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$NewSPOSite = Read-Host "Please enter the full URL for the new SharePoint Site"
			If (!$NewSPOSite)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No URL was entered, please enter a valid SharePoint URL", "Error")
			}
			Else
			{
				$SelectUsersFormText = "Select the user you want to be the owner of the new site"
				Show-SelectUsersForm_psf
				$SPOSiteOwner = $SelectUsersForm_comboboxUsers
				If (!$SPOSiteOwner)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid user", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$textboxDetails.Text = "New-SPOSite -url $NewSPOSite -Owner $SPOSiteOwner"
					$TextboxResults.Text = "Creating a new SharePoint site $NewSPOSite..."
					$TextboxResults.Text = New-SPOSite -url $NewSPOSite -Owner $SPOSiteOwner -StorageQuota 1048576 | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to create another SharePoint Site?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
}



###FILE###

#About

$aboutToolStripMenuItem_Click = {
	$TextboxResults.Text = "                                
M365 Admin Center Tools 


Version: $Version
Version Release Date: $UpdateDate
Website: https://www.o365admin.center
FAQ: https://www.o365admin.center/FAQ"
	
}

#Pre-Reqs

$prerequisitesToolStripMenuItem_Click = {
	Try
	{
		Start-Process -FilePath https://o365admin.center/prerequisites/
	}
	Catch
	{
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

#Changelog

$changelogToolStripMenuItem_Click = {
	Try
	{
		Start-Process -FilePath http://o365admin.center/changelog/
	}
	Catch
	{
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

#Context Menu

$clearScreenToolStripMenuItem1_Click = {
	$TextboxResults.Text = ""
}

$selectAllToolStripMenuItem_Click = {
	$TextboxResults.SelectAll()
}

$copyToolStripMenuItem_Click = {
	[System.Windows.Forms.Clipboard]::SetText($TextboxResults.SelectedText.Trim())
}

$cutToolStripMenuItem_Click = {
	$TextboxResults.SelectedText = ""
}

$pasteToolStripMenuItem_Click = {
	$PastedItem = [System.Windows.Forms.Clipboard]::GetText()
	$insertText = $PastedItem;
	$selectionIndex = $TextboxResults.SelectionStart;
	$TextboxResults.Text = $TextboxResults.Text.Insert($selectionIndex, $insertText);
	$TextboxResults.SelectionStart = $selectionIndex + $insertText.Length;
	
}

$cutToolStripMenuItem1_Click = {
	$TextboxResults.SelectedText = ""	
}

$copyToolStripMenuItem1_Click = {
	[System.Windows.Forms.Clipboard]::SetText($TextboxResults.SelectedText.Trim())	
}

$pasteToolStripMenuItem1_Click = {
	$PastedItem = [System.Windows.Forms.Clipboard]::GetText()
	$insertText = $PastedItem;
	$selectionIndex = $TextboxResults.SelectionStart;
	$TextboxResults.Text = $TextboxResults.Text.Insert($selectionIndex, $insertText);
	$TextboxResults.SelectionStart = $selectionIndex + $insertText.Length;
}

$selectAllToolStripMenuItem1_Click = {
	$TextboxResults.SelectAll()	
}

$clearScreenToolStripMenuItem2_Click = {
	$TextboxResults.Text = ""
}

$printToolStripMenuItem1_Click = {
	$Printdialog = New-Object System.Windows.Forms.PrintDialog
	$Printdialog.ShowHelp = $False
	$Printdialog.AllowSelection = $true
	$Printdialog.AllowPrintToFile = $true
	$Printdialog.AllowSomePages = $false
	$Printdialog.ShowNetwork = $true
	$result = $Printdialog.ShowDialog(); $result
	If ($result -eq 'OK')
	{
		$TextboxResults.Text | Out-Printer $Printdialog.PrinterSettings.PrinterName
	}
}

$saveAsToolStripMenuItem_Click = {
	$savedialog = New-Object windows.forms.savefiledialog
	$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
	$savedialog.title = "Export to File"
	$savedialog.filter = ".doc|*.doc|.txt|*.txt|.xls|*.xls"
	$savedialog.ShowHelp = $True
	$result = $savedialog.ShowDialog(); $result
	if ($result -eq "OK")
	{
		$TextboxResults.Text | Out-File -Encoding Default $savedialog.filename
	}
	
}



###JUNK ITEMS###

$TextboxResults_TextChanged = {
	
}

$menustripExchange_ItemClicked = [System.Windows.Forms.ToolStripItemClickedEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.ToolStripItemClickedEventArgs]
}


$tabpageComplianceCenter_Click={
	#ignore
	
}

$checkboxSharepoint_CheckedChanged={
	#ignore
	
}

$checkboxExchangeOnline_CheckedChanged={
	#ignore
	
}

$checkboxComplianceCenter_CheckedChanged={
	#ignore
	
}

$checkboxSkypeForBusiness_CheckedChanged={
	#ignore
	
}

$organizationCustomizationToolStripMenuItem_Click={
	#ignore
	
}

$getMailMalwareReportToolStripMenuItem_Click={
	#ignore
	
}

$securityGroupsToolStripMenuItem_Click={
	#ignore
	
}

$aliasAddressesToolStripMenuItem_Click={
	#ignore
	
}

$checkForUpdatesToolStripMenuItem1_Click = {
	Try
	{
		#Get reg-key to see if update should prompt
		$UpdateCheck = Get-ItemProperty 'HKCU:\Software\O365 Admin Center' -Name UpdateCheck | Select-Object -ExpandProperty UpdateCheck
		
		If ($UpdateCheck -eq 0)
		{
			#Check to see if there is a new version available 
			$PublicVersion = Invoke-WebRequest -Uri https://www.o365admin.center/update.txt | Select-Object -ExpandProperty content
			#If local version is less than the public version then prompt for update
			If ($Version -lt $publicVersion)
			{
				Show-UpdateCheck_psf
			}
			#If Publicversion equals nothing then ignore, this is if the website is down or the user does not have internet
			elseif ($PublicVersion = $Null)
			{
			}
			Else
			{
				#Create the pop-up message
				Add-Type -AssemblyName System.Windows.Forms
				[System.Windows.Forms.MessageBox]::Show('You are up to date!', 'O365 Admin Center Updates', 'OK', 'Info')
			}
		}
		elseif ($UpdateCheck -eq 1)
		{
			$InformationText = "Updates are set to never be checked. Please enable updates"
			Show-Info_OK_psf
		}
		
	}
	Catch
	{
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$neverCheckForUpdatesToolStripMenuItem_Click = {
	Try
	{
		#Sets the update check key
		Get-Item 'HKCU:\Software\O365 Admin Center' -Force | New-ItemProperty -Name UpdateCheck -Value 1 -Force | Out-Null
		$InformationText = "Updates have been disabled"
		Show-Info_OK_psf
	}
	Catch
	{
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$enableUpdatesToolStripMenuItem_Click = {
	Try
	{
		#Sets the update check key
		Get-Item 'HKCU:\Software\O365 Admin Center' -Force | New-ItemProperty -Name UpdateCheck -Value 0 -Force | Out-Null
		
		$InformationText = "Updates have been enabled"
		Show-Info_OK_psf
	}
	Catch
	{
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getUsersWithInPlaceArchiveToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting all users with an archive..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize Unlimited -Filter { ArchiveStatus -NE 'None' -AND RecipientTypeDetails -eq 'UserMailbox' }"
		$TextboxResults.Text = Get-Mailbox -ResultSize Unlimited | Where-Object { $_.ArchiveStatus -NE 'None'} | Sort-Object Name | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
	
}

$getUsersWithoutInPlaceArchiveToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting all users without an archive..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize Unlimited -Filter { ArchiveStatus -EQ 'None' -AND RecipientTypeDetails -eq 'UserMailbox' }"
		$TextboxResults.Text = Get-Mailbox -ResultSize Unlimited | Where-Object { $_.ArchiveStatus -EQ 'None'} | Sort-Object Name | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
	
}

$enableInPlaceArchiveForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$SelectUsersFormText = "Select the User you want to enable In-Place Archive for"
			Show-SelectCachedDisplayNames_psf
			$EnableInPlaceArchiveUser = $SelectCachedDisplayNames_comboboxNames
			If (!$EnableInPlaceArchiveUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid User", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Enabling In-Place Archive for $EnableInPlaceArchiveUser..."
				$textboxDetails.Text = "Enable-Mailbox -Identity $EnableInPlaceArchiveUser -Archive"
				Enable-Mailbox -Identity $EnableInPlaceArchiveUser -Archive | Out-String -Width 2147483647
				$TextboxResults.Text = "Getting all users with an Archive enabled..."
				$TextboxResults.Text = Get-Mailbox -ResultSize Unlimited | Where-Object { $_.ArchiveStatus -NE 'None' } | Sort-Object Name | Format-Table -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to enable In-Place Archiving for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$submitAIssueToolStripMenuItem_Click = {
	Try
	{
		Start-Process -FilePath mailto:issues@o365admin.center
	}
	Catch
	{
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$submitAFeatureRequestToolStripMenuItem_Click = {
	Try
	{
		Start-Process -FilePath mailto:request@o365admin.center
	}
	Catch
	{
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$disableInPlaceArchiveForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$SelectUsersFormText = "Select the User you want to disable In-Place Archive for"
			Show-SelectCachedDisplayNames_psf
			#$DisableInPlaceArchiveUser = $SelectCachedUserPrincipalName_comboboxUPN
			$DisableInPlaceArchiveUser = $SelectCachedDisplayNames_comboboxNames
			If (!$DisableInPlaceArchiveUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Disabling In-Place Archive for $DisableInPlaceArchiveUser..."
				$textboxDetails.Text = "Disable-Mailbox -Identity $DisableInPlaceArchiveUser -Archive"
				Disable-Mailbox -Identity $DisableInPlaceArchiveUser -Archive | Out-String -Width 2147483647
				$TextboxResults.Text = "Getting all users without an Archive..."
				$TextboxResults.Text = Get-Mailbox -ResultSize Unlimited | Where-Object { $_.ArchiveStatus -EQ 'None' } | Sort-Object Name | Format-Table -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to disable In-Place Archiving for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getAllPublicFoldersToolStripMenuItem_Click = {
	$CachedPF = ("$TempDir" + "\O365AdminCenter" + "\pf.txt")
	$TempDir = $env:temp
	Try
	{
		If ((Test-Path $CachedPF) -eq $false)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Caching Public Folders..."
			#$parentpath = Get-PublicFolder -ResultSize Unlimited -Identity "\" -Recurse | Select-Object -ExpandProperty ParentPath
			#$names = Get-PublicFolder -ResultSize Unlimited -Identity "\" -Recurse | Select-Object -ExpandProperty Name
			#$firstName = @($parentpath)
			#$lastName = @($names)
			#0..($firstName.Count - 1) | ForEach-Object { $fullName += @("$($firstName[$_])\$($lastName[$_])") }
			#$fullname | Out-File $CachedPF 
			(Get-PublicFolder -ResultSize Unlimited -Identity "\" -Recurse).Identity | Out-File $CachedPF
			
			$TextboxResults.Text = "Getting all Public Folders..."
			$textboxDetails.Text = "Get-PublicFolder -Identity '\' -Recurse"
			$TextboxResults.Text = Get-PublicFolder -ResultSize Unlimited -Identity "\" -Recurse | Select-Object Name, ParentPath |  Sort-Object Name | Format-Table -AutoSize | Out-String -Width 2147483647
			#$parentpath = Get-PublicFolder -ResultSize Unlimited -Identity "\" -Recurse | Select-Object -ExpandProperty ParentPath
			#$names = Get-PublicFolder -ResultSize Unlimited -Identity "\" -Recurse | Select-Object -ExpandProperty Name
			#$firstName = @($parentpath)
			#$lastName = @($names)
			#0..($firstName.Count - 1) | ForEach-Object { $fullName += @("$($firstName[$_])\$($lastName[$_])") }
			#$TextboxResults.Text = $fullname | Out-String 
			
			$FormO365AdministrationCenter.Cursor = 'Default'
			
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all Public Folders..."
			$textboxDetails.Text = "Get-PublicFolder -Identity '\' -Recurse"
			$TextboxResults.Text = Get-PublicFolder -ResultSize Unlimited -Identity "\" -Recurse | Select-Object Name, ParentPath | Sort-Object Name | Format-Table -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$contextmenustrip1_Opening=[System.ComponentModel.CancelEventHandler]{
	
}

$statisticsToolStripMenuItem_Click = {
	Do
	{
		$TempDir = $env:temp
		$CachedPF = ("$TempDir" + "\O365AdminCenter" + "\pf.txt")
		Try
		{
			If ((Test-Path $CachedPF) -eq $false)
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Caching Public Folders..."
				#$parentpath = Get-PublicFolder -ResultSize Unlimited -Identity "\" -Recurse | Select-Object -ExpandProperty ParentPath
				#$names = Get-PublicFolder -ResultSize Unlimited -Identity "\" -Recurse | Select-Object -ExpandProperty Name
				#$firstName = @($parentpath)
				#$lastName = @($names)
				#0..($firstName.Count - 1) | ForEach-Object { $fullName += @("$($firstName[$_])\$($lastName[$_])") }
				#$fullname | Out-File $CachedPF
				(Get-PublicFolder -ResultSize Unlimited -Identity "\" -Recurse).Identity | Out-File $CachedPF
				
				$PFText = "Please select the Public Folder you want to view statistics for"
				Show-SelectCachedPublicFolders_psf
				$PFStats = $SelectCachedPublicFolders_comboboxPF
				If (!$PFStats)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Public Folder was selected, please select a valid Public Folder", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Getting Public Folder statistics for $PFStats.."
					$textboxDetails.Text = "Get-PublicFolderItemStatistics -Identity $PFStats"
					$TextboxResults.Text = Get-PublicFolderItemStatistics -Identity $PFStats | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
			Else
			{
				
				$PFText = "Please select the Public Folder you want to view statistics for"
				Show-SelectCachedPublicFolders_psf
				$PFStats = $SelectCachedPublicFolders_comboboxPF
				If (!$PFStats)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Public Folder was selected, please select a valid Public Folder", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Getting Public Folder statistics for $PFStats.."
					$textboxDetails.Text = "Get-PublicFolderItemStatistics -Identity $PFStats"
					$TextboxResults.Text = Get-PublicFolderItemStatistics -Identity $PFStats | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
			
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get information on another Public Folder?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getPublicFoldersThatAreMailEnabledToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Mail Enabled Public Folders..."
		$textboxDetails.Text = "Get-PublicFolder -ResultSize Unlimited -Identity '\' -Recurse | Where-Object { `$_.MailEnabled -eq `$True } "
		$TextboxResults.Text = Get-PublicFolder -ResultSize Unlimited -Identity "\" -Recurse | Where-Object { $_.MailEnabled -eq $True } | Select-Object Name, ParentPath, MailEnabled | Sort-Object Name | Format-Table -Autosize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getPublicFoldersThatAreNotMailEnabledToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Mail Enabled Public Folders..."
		$textboxDetails.Text = "Get-PublicFolder -ResultSize Unlimited -Identity '\' -Recurse | Where-Object { `$_.MailEnabled -eq `$False } "
		$TextboxResults.Text = Get-PublicFolder -ResultSize Unlimited -Identity "\" -Recurse | Where-Object { $_.MailEnabled -eq $False } | Select-Object Name, ParentPath, MailEnabled | Sort-Object Name | Format-Table -Autosize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$ascendingToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Public Folders Sizes..."
		$textboxDetails.Text = "Get-PublicFolder -ResultSize Unlimited -Identity '\' -Recurse | Select-Object Name, FolderSize | Sort-Object FolderSize"
		$TextboxResults.Text = Get-PublicFolder -ResultSize Unlimited -Identity "\" -Recurse | Select-Object Name, FolderSize | Sort-Object FolderSize | Format-Table -Autosize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$descendingToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Public Folders Sizes..."
		$textboxDetails.Text = "Get-PublicFolder -ResultSize Unlimited -Identity '\' -Recurse | Select-Object Name, FolderSize | Sort-Object FolderSize -Descending"
		$TextboxResults.Text = Get-PublicFolder -ResultSize Unlimited -Identity "\" -Recurse | Select-Object Name, FolderSize | Sort-Object FolderSize -Descending | Format-Table -Autosize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$alphabeticallyToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Public Folders Sizes..."
		$textboxDetails.Text = "Get-PublicFolder -ResultSize Unlimited -Identity '\' -Recurse | Select-Object Name, FolderSize | Sort-Object Name"
		$TextboxResults.Text = Get-PublicFolder -ResultSize Unlimited -Identity "\" -Recurse | Select-Object Name, FolderSize | Sort-Object Name | Format-Table -Autosize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getAllPublicFoldersWithSubfoldersToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Public Folders with Subfolders..."
		$textboxDetails.Text = "Get-PublicFolder -ResultSize Unlimited -Identity '\'' -Recurse | Where-Object { `$_.HasSubFolders -eq `$True }"
		$TextboxResults.Text = Get-PublicFolder -ResultSize Unlimited -Identity "\" -Recurse | Where-Object { $_.HasSubFolders -eq $True } | Select-Object Name, ParentPath, HasSubFolders | Sort-Object Name | Format-Table -Autosize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getAllPublicFoldersWithoutSubfoldersToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Public Folders with Subfolders..."
		$textboxDetails.Text = "Get-PublicFolder -ResultSize Unlimited -Identity '\'' -Recurse | Where-Object { `$_.HasSubFolders -eq `$False }"
		$TextboxResults.Text = Get-PublicFolder -ResultSize Unlimited -Identity "\" -Recurse | Where-Object { $_.HasSubFolders -eq $False } | Select-Object Name, ParentPath, HasSubFolders | Sort-Object Name | Format-Table -Autosize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getAllPublicFolderQuotaToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting All Public Folder Quotas..."
		$textboxDetails.Text = "Get-PublicFolder -ResultSize Unlimited -Identity '\' -Recurse | Select-Object Name, ProhibitPostQuota, IssueWarningQuota, MaxItemSize "
		$TextboxResults.Text = Get-PublicFolder -ResultSize Unlimited -Identity "\" -Recurse | Select-Object Name, ProhibitPostQuota, IssueWarningQuota, MaxItemSize | Sort-Object Name | Format-Table -Autosize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getIssueWarningQuotaToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting All Public Folder Quotas..."
		$textboxDetails.Text = "Get-PublicFolder -ResultSize Unlimited -Identity '\' -Recurse | Select-Object Name, IssueWarningQuota "
		$TextboxResults.Text = Get-PublicFolder -ResultSize Unlimited -Identity "\" -Recurse | Select-Object Name, IssueWarningQuota | Sort-Object Name | Format-Table -Autosize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getMaxItemSizeQuotaToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting All Public Folder Quotas..."
		$textboxDetails.Text = "Get-PublicFolder -ResultSize Unlimited -Identity '\' -Recurse | Select-Object Name, MaxItemSize "
		$TextboxResults.Text = Get-PublicFolder -ResultSize Unlimited -Identity "\" -Recurse | Select-Object Name, MaxItemSize | Sort-Object Name | Format-Table -Autosize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getProhibitPostQuotaToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting All Public Folder Quotas..."
		$textboxDetails.Text = "Get-PublicFolder -ResultSize Unlimited -Identity '\' -Recurse | Select-Object Name, ProhibitPostQuota"
		$TextboxResults.Text = Get-PublicFolder -ResultSize Unlimited -Identity "\" -Recurse | Select-Object Name, ProhibitPostQuota| Sort-Object Name | Format-Table -Autosize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getDetailedPublicFolderReportToCSVToolStripMenuItem_Click={
	Try
	{
		$savedialog = New-Object windows.forms.savefiledialog
		$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
		$savedialog.title = "Export to File"
		$savedialog.filter = ".csv|*.csv"
		$savedialog.ShowHelp = $True
		$result = $savedialog.ShowDialog(); $result
		if ($result -eq "OK")
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$OutputFile = $savedialog.filename
			$textboxDetails.Text = "Get-PublicFolder -ResultSize Unlimited -Identity '\' -Recurse"
			$TextboxResults.Text = "Getting Detailed Public Folder Report..."
			Get-PublicFolder -ResultSize Unlimited -Identity '\' -Recurse | Export-Csv $OutputFile -NoTypeInformation
			$TextboxResults.Text = ""
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$checkForUpdatesToolStripMenuItem_Click={
	#Leave blank this is the parent button
	
}

$getMailTrafficTopReportToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Mail Traffic Top Report..."
		$textboxDetails.Text = "Get-MailTrafficTopReport | Sort-Object 'Direction' | Format-Table -AutoSize"
		$TextboxResults.Text = Get-MailTrafficTopReport | Sort-Object "Direction" | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getStaleMailboxReportToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Stale Mailbox Report..."
		$textboxDetails.Text = "Get-StaleMailboxReport | Format-Table -AutoSize"
		$TextboxResults.Text = Get-StaleMailboxReport | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
	
}

$getStaleMailboxDetailReportToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Stale Mailbox Detail Report..."
		$textboxDetails.Text = "Get-StaleMailboxDetailReport | Format-Table -AutoSize"
		$TextboxResults.Text = Get-StaleMailboxDetailReport | Sort-Object UserName | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$exportMailDetailedSpamReportToCSVToolStripMenuItem_Click={
	Try
	{
		$savedialog = New-Object windows.forms.savefiledialog
		$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
		$savedialog.title = "Export to File"
		$savedialog.filter = ".csv|*.csv"
		$savedialog.ShowHelp = $True
		$result = $savedialog.ShowDialog(); $result
		if ($result -eq "OK")
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$OutputFile = $savedialog.filename
			$textboxDetails.Text = "Get-MailDetailSpamReport"
			$TextboxResults.Text = "Getting Detailed Mail Spam Report..."
			Get-MailDetailSpamReport | Export-Csv $OutputFile -NoTypeInformation
			$TextboxResults.Text = ""
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getDetailedMailboxUsageReportToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Detailed Mailbox Usage Report..."
		$textboxDetails.Text = "Get-MailboxUsageDetailReport | Select-Object Username, MailboxSize, CurrentMailboxSize, PercentUsed, MailboxPlan, IsInactive |  Sort-Object PercentUsed | Format-Table -AutoSize"
		$TextboxResults.Text = Get-MailboxUsageDetailReport | Select-Object Username, MailboxSize, CurrentMailboxSize, PercentUsed, MailboxPlan, IsInactive | Sort-Object PercentUsed | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$exportDetailedMailboxUsageReportToCSVToolStripMenuItem_Click={
	Try
	{
		$savedialog = New-Object windows.forms.savefiledialog
		$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
		$savedialog.title = "Export to File"
		$savedialog.filter = ".csv|*.csv"
		$savedialog.ShowHelp = $True
		$result = $savedialog.ShowDialog(); $result
		if ($result -eq "OK")
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$OutputFile = $savedialog.filename
			$TextboxResults.Text = "Getting Detailed Mailbox Usage Report..."
			$textboxDetails.Text = "Get-MailboxUsageDetailReport"
			Get-MailboxUsageDetailReport | Export-Csv $OutputFile -NoTypeInformation
			$TextboxResults.Text = ""
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getMailboxUsageReportToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Mailbox Usage Report..."
		$textboxDetails.Text = "Get-MailboxUsageReport | Format-Table -AutoSize"
		$TextboxResults.Text = Get-MailboxUsageReport | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getMailTrafficPolicyReportToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Mail Traffic Policy Report..."
		$textboxDetails.Text = "Get-MailTrafficPolicyReport | Format-Table -AutoSize"
		$TextboxResults.Text = Get-MailTrafficPolicyReport | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$testToolStripMenuItem1_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$textboxDetails.Text = ""
		$Datacenter = @{ }
		$Datacenter["CP"] = @("LAM", "Brazil")
		$Datacenter["GR"] = @("LAM", "Brazil")
		$Datacenter["HK"] = @("APC", "Hong Kong")
		$Datacenter["SI"] = @("APC", "Singapore")
		$Datacenter["SG"] = @("APC", "Singapore")
		$Datacenter["KA"] = @("JPN", "Japan")
		$Datacenter["OS"] = @("JPN", "Japan")
		$Datacenter["TY"] = @("JPN", "Japan")
		$Datacenter["AM"] = @("EUR", "Amsterdam, Netherlands")
		$Datacenter["DB"] = @("EUR", "Dublin, Ireland")
		$Datacenter["HE"] = @("EUR", "Finland")
		$Datacenter["VI"] = @("EUR", "Austria")
		$Datacenter["BL"] = @("NAM", "Virginia, USA")
		$Datacenter["SN"] = @("NAM", "San Antonio, Texas, USA")
		$Datacenter["BN"] = @("NAM", "Virginia, USA")
		$Datacenter["DM"] = @("NAM", "Des Moines, Iowa, USA")
		$Datacenter["BY"] = @("NAM", "San Francisco, California, USA")
		$Datacenter["CY"] = @("NAM", "Cheyenne, Wyoming, USA")
		$Datacenter["CO"] = @("NAM", "Quincy, Washington, USA")
		$Datacenter["MW"] = @("NAM", "Quincy, Washington, USA")
		$Datacenter["CH"] = @("NAM", "Chicago, Illinois, USA")
		$Datacenter["ME"] = @("APC", "Melbourne, Victoria, Australia")
		$Datacenter["SY"] = @("APC", "Sydney, New South Wales, Australia")
		$Datacenter["KL"] = @("APC", "Kuala Lumpur, Malaysia")
		$Datacenter["PS"] = @("APC", "Busan, South Korea")
		$Datacenter["YQ"] = @("CAN", "Quebec City, Canada")
		$Datacenter["YT"] = @("CAN", "Toronto, Canada")
		$Datacenter["MM"] = @("GBR", "Durham, England")
		$Datacenter["LO"] = @("GBR", "London, England")
		
		
		Write-Host
		$TextboxResults.Text = "Getting Mailbox Information..."
		
		$Mailboxes = Get-Mailbox -ResultSize Unlimited | Where-Object { $_.RecipientTypeDetails -ne "DiscoveryMailbox" }
		
		$ServerCount = ($Mailboxes | Group-Object { $_.ServerName }).count
		
		$DatabaseCount = ($Mailboxes | Group-Object { $_.Database }).count
		
		$Mailboxes = $Mailboxes | Group-Object { $_.ServerName.SubString(0, 2) } | Select-Object @{ Name = "Datacenter"; Expression = { $_.Name } }, Count
		
		$Locations = @()
		
		# Not pretty error handling but allows counts to add properly when a datacenter location could not be identified from the table
		$E = $ErrorActionPreference
		$ErrorActionPreference = "SilentlyContinue"
		
		ForEach ($Mailbox in $Mailboxes)
		{
			$Object = New-Object -TypeName PSObject
			$Object | Add-Member -Name 'Datacenter' -MemberType NoteProperty -Value $Mailbox.Datacenter
			$Object | Add-Member -Name 'Region' -MemberType NoteProperty -Value $Datacenter[$Mailbox.Datacenter][0]
			$Object | Add-Member -Name 'Location' -MemberType NoteProperty -Value $Datacenter[$Mailbox.Datacenter][1]
			$Object | Add-Member -Name 'Count' -MemberType NoteProperty -Value $Mailbox.Count
			$Locations += $Object
		}
		
		$ErrorActionPreference = $E
		
		$TotalMailboxes = ($Locations | Measure-Object Count -Sum).sum
		
		$LocationsConsolidated = $Locations | Group-Object Location | ForEach-Object {
			New-Object PSObject -Property @{
				Location = $_.Name
				Mailboxes = ("{0,9:N0}" -f ($_.Group | Measure-Object Count -Sum).Sum)
			}
		} | Sort-Object Count -Descending
		
		$textboxresults.text = $LocationsConsolidated | Select-Object Location, Mailboxes | Sort-Object Mailboxes | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getTotalMailboxCountToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Mailbox Count..."
		$textboxDetails.Text = "(Get-Mailbox -ResultSize Unlimited).Count"
		$TextboxResults.Text = (Get-Mailbox -ResultSize Unlimited).Count | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$viewAllUsersFocusedInboxStatusToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$mbxs = (Get-Mailbox).userprincipalname
		$TextboxResults.Text = "Getting Focused Inbox status for all users...(this may take some time)"
		$textboxDetails.Text = "`$mbxs = (Get-Mailbox).userprincipalname
foreach (`$mbx in `$mbxs) { Get-FocusedInbox -Identity `$mbx }"
		$results = foreach ($mbx in $mbxs) { Get-FocusedInbox -Identity $mbx }
		$TextboxResults.Text = $results | Sort-Object MailboxIdentity | Format-Table MailboxIdentity, FocusedInboxOn -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getTenantFocusedInboxStatusToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Focus Inbox status..."
		$textboxDetails.Text = "Get-OrganizationConfig | Format-Table FocusedInboxOn -AutoSize"
		$TextboxResults.Text = Get-OrganizationConfig | Format-Table FocusedInboxOn -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$enableFocusedInboxForCompanyToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Enabling Focus Inbox..."
		$textboxDetails.Text = "Set-OrganizationConfig -FocusedInboxOn `$True"
		Set-OrganizationConfig -FocusedInboxOn $True
		$TextboxResults.Text = "Getting Focus Inbox status..."
		$TextboxResults.Text = Get-OrganizationConfig | Format-Table FocusedInboxOn -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$disableFocusedInboxForCompanyToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Disabling Focus Inbox..."
		$textboxDetails.Text = "Set-OrganizationConfig -FocusedInboxOn `$False"
		Set-OrganizationConfig -FocusedInboxOn $False
		$TextboxResults.Text = "Getting Focus Inbox status..."
		$TextboxResults.Text = Get-OrganizationConfig | Format-Table FocusedInboxOn -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$disableFocusedInboxForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$SelectUsersFormText = "Select the User you want to disable Focused Inbox for"
			Show-SelectCachedUserPrincipalName_psf
			$FocusedInboxOff = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$FocusedInboxOff)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid User", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Disabling Focused Inbox for $FocusedInboxOff "
				$textboxDetails.Text = "Set-FocusedInbox -Identity $FocusedInboxOff -FocusedInboxOn `$False"
				$TextboxResults.Text = Set-FocusedInbox -Identity $FocusedInboxOff -FocusedInboxOn $False | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to disable Focused Inbox for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$enableFocusedInboxForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$SelectUsersFormText = "Select the User you want to enable Focused Inbox for"
			Show-SelectCachedUserPrincipalName_psf
			$FocusedInboxOff = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$FocusedInboxOff)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid User", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Enabling Focused Inbox for $FocusedInboxOff "
				$TextboxResults.Text = Set-FocusedInbox -Identity $FocusedInboxOff -FocusedInboxOn $True | Out-String -Width 2147483647
				$textboxDetails.Text = "Set-FocusedInbox -Identity $FocusedInboxOff -FocusedInboxOn `$True"
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to enable Focused Inbox for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$disableFocusedInboxForAllUsersToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Disabling Focused Inbox for all users..."
		$TextboxResults.Text = Get-Mailbox | Where-Object { $_.RecipientTypeDetails -ne "SharedMailbox" } | Set-FocusedInbox -FocusedInboxOn $False | Out-String -Width 2147483647
		$textboxDetails.Text = "Get-Mailbox | Where-Object { `$_.RecipientTypeDetails -ne 'SharedMailbox' } | Set-FocusedInbox -FocusedInboxOn `$False"
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
	
}

$enableFocusedInboxForAllUsersToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Disabling Focused Inbox for all users..."
		$TextboxResults.Text = Get-Mailbox | Where-Object { $_.RecipientTypeDetails -ne "SharedMailbox" } | Set-FocusedInbox -FocusedInboxOn $True | Out-String -Width 2147483647
		$textboxDetails.Text = "Get-Mailbox | Where-Object { `$_.RecipientTypeDetails -ne 'SharedMailbox' } | Set-FocusedInbox -FocusedInboxOn `$True"
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getAUsersFocusedInboxStatusToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$SelectUsersFormText = "Select the User you want get Focused Inbox status for"
			Show-SelectCachedUserPrincipalName_psf
			$FocusedInbox = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$FocusedInbox)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid User", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting Focused Inbox status for $FocusedInbox"
				$TextboxResults.Text = Get-FocusedInbox -Identity $FocusedInbox | Out-String -Width 2147483647
				$textboxDetails.Text = "Get-FocusedInbox -Identity $FocusedInbox"
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get another Users Focused Inbox status?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
}

$getUserCountToolStripMenuItem_Click={
	Try
	{
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting User Count..."
			$textboxDetails.Text = "(Get-MsolUser -All).count"
			$TextboxResults.Text = (Get-MsolUser -All).count | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting User Count..."
			$textboxDetails.Text = "(Get-MsolUser -All).count"
			$TextboxResults.Text = (Get-MsolUser -TenantId $PartnerComboBox.SelectedItem.TenantID -All).count | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting User Count..."
			$textboxDetails.Text = "(Get-MsolUser -All).count"
			$TextboxResults.Text = (Get-MsolUser -All).count | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getMailboxCountToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Mailbox Count..."
		$textboxDetails.Text = "(Get-Mailbox -resultsize unlimited).count"
		$TextboxResults.Text = (Get-Mailbox -resultsize unlimited).count | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getSharedMailboxCountToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Shared Mailbox Count..."
		$textboxDetails.Text = "(Get-Mailbox -RecipientTypeDetails SharedMailbox -ResultSize Unlimited).count"
		$TextboxResults.Text = (Get-Mailbox -RecipientTypeDetails SharedMailbox -ResultSize Unlimited).count | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getDistributionGroupCountToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Distribution Group Count..."
		$textboxDetails.Text = "(Get-DistributionGroup -ResultSize Unlimited).count"
		$TextboxResults.Text = (Get-DistributionGroup -ResultSize Unlimited).count | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getRegularSecurityGroupCountToolStripMenuItem_Click={
	Try
	{
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting Regular Security Group Count..."
			$textboxDetails.Text = "(Get-MsolGroup -All -GroupType Security).count"
			$TextboxResults.Text = (Get-MsolGroup -All -GroupType Security).count | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting Regular Security Group Count..."
			$textboxDetails.Text = "(Get-MsolGroup -All -GroupType Security).count"
			$TextboxResults.Text = (Get-MsolGroup -TenantId $PartnerComboBox.SelectedItem.TenantID -All -GroupType Security).count | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting Regular Security Group Count..."
			$textboxDetails.Text = "(Get-MsolGroup -All -GroupType Security).count"
			$TextboxResults.Text = (Get-MsolGroup -All -GroupType Security).count | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getMailEnabledSecurityGroupCountToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Mail Enabled Security Group Count..."
		$textboxDetails.Text = "(Get-DistributionGroup -ResultSize unlimited | Where-Object { `$_.GroupType -like 'Universal, SecurityEnabled'}).count"
		$TextboxResults.Text = (Get-DistributionGroup -ResultSize unlimited | Where-Object { $_.GroupType -like "Universal, SecurityEnabled" }).count | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getAllDynamicDistributionGroupsToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting All Dynamic Distribution Groups..."
		$textboxDetails.Text = "Get-DynamicDistributionGroup -ResultSize Unlimited | Format-Table -AutoSize"
		$TextboxResults.Text = Get-DynamicDistributionGroup -ResultSize Unlimited | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getDynamicDistributionGroupCountToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Dynamic Distribution Groups Count..."
		$textboxDetails.Text = "(Get-DynamicDistributionGroup -ResultSize Unlimited).count"
		$TextboxResults.Text = (Get-DynamicDistributionGroup -ResultSize Unlimited).Count | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$createADynamicDistributionGroupForAllUsersToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$NewDynDistro = Read-Host "Please enter a name for the new Dynamic Distribution Group"
			If (!$NewDynDistro)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No name was entered, please enter a valid name for the new Dynamic Distribution Group", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Creating a new Dynamic Distribution Group for all Users..."
				$textboxDetails.Text = "New-DynamicDistributionGroup -Name $NewDynDistro –RecipientFilter { (RecipientType -eq 'UserMailbox') }"
				$TextboxResults.Text = New-DynamicDistributionGroup -Name $NewDynDistro –RecipientFilter { (RecipientType -eq 'UserMailbox') } | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to create another Dynamic Distribution Group for all Users?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
}

$createADynamicDistributionGroupForAllManagersToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$NewDynDistro = Read-Host "Please enter a name for the new Dynamic Distribution Group"
			If (!$NewDynDistro)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No name was entered, please enter a valid name for the new Dynamic Distribution Group", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Creating a new Dynamic Distribution Group for all Managers..."
				$textboxDetails.Text = "New-DynamicDistributionGroup -Name $NewDynDistro –RecipientFilter {(RecipientType -eq 'UserMailbox') -and (Title -like 'Director*' -or Title -like 'Manager*' )}"
				$TextboxResults.Text = New-DynamicDistributionGroup -Name $NewDynDistro –RecipientFilter { (RecipientType -eq 'UserMailbox') -and (Title -like 'Director*' -or Title -like 'Manager*') } | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to create another Dynamic Distribution Group for all Managers?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getDetailedInfoForADynamicDistributionGroupToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$DistroGroupsText = "Select the Dynamic Distribution Group you want detailed information on"
			Show-SelectDynamicDistributionGroups_psf
			$DetailedDyn = $SelectDynamicDistributionGroups_comboboxSelectDistroGroups
			If (!$DetailedDyn)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Dynamic Distribution Group was selected, please select a valid Dynamic Distribution Group", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting detailed information on $DetailedDyn..."
				$textboxDetails.Text = "Get-DynamicDistributionGroup $DetailedDyn | Format-List "
				$TextboxResults.Text = Get-DynamicDistributionGroup $DetailedDyn | Format-List | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get information for another Dynamic Distribution Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$removeADynamicDistributionGroupToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$DistroGroupsText = "Select the Dynamic Distribution Group you want to delete"
			Show-SelectDynamicDistributionGroups_psf
			$DetailedDyn = $SelectDynamicDistributionGroups_comboboxSelectDistroGroups
			If (!$DetailedDyn)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Dynamic Distribution Group was selected, please select a valid Dynamic Distribution Group", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Removing $DetailedDyn..."
				$textboxDetails.Text = "Remove-DynamicDistributionGroup $DetailedDyn "
				$TextboxResults.Text = Remove-DynamicDistributionGroup $DetailedDyn | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to remove another Dynamic Distribution Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getAllOnlineUsersCountToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting all online users count..."
		$textboxDetails.Text = "(Get-CsOnlineUser -ResultSize 2147483647).count"
		$TextboxResults.Text = (Get-CsOnlineUser -ResultSize 2147483647).count
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$preferencesToolStripMenuItem_Click = {
}

$resetPersonalPreferencesToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		Remove-Item 'HKCU:\Software\O365 Admin Center' -Force
		$InformationText = "All Personal preferences have been reset"
		$FormO365AdministrationCenter.Cursor = 'Default'
		Show-Info_OK_psf
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$disableAllPrerequisitesChecksToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableAzurePrompt -Value 1 -Force | Out-Null
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableArchPrompt -Value 1 -Force | Out-Null
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableMSOnlinePrompt -Value 1 -Force | Out-Null
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableSharePointOnlinePrompt -Value 1 -Force | Out-Null
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableSkypeOnlineConnectorPrompt -Value 1 -Force | Out-Null
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name ExecutionPolicy -Value 1 -Force | Out-Null
		$InformationText = "All Prerequisite Checks have been Disabled"
		$FormO365AdministrationCenter.Cursor = 'Default'
		Show-Info_OK_psf
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$enableAllPrerequisiteChecksToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableAzurePrompt -Value 0 -Force | Out-Null
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableArchPrompt -Value 0 -Force | Out-Null
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableMSOnlinePrompt -Value 0 -Force | Out-Null
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableSharePointOnlinePrompt -Value 0 -Force | Out-Null
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableSkypeOnlineConnectorPrompt -Value 0 -Force | Out-Null
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name ExecutionPolicy -Value 0 -Force | Out-Null
		$InformationText = "All Prerequisite Checks have been Enabled"
		$FormO365AdministrationCenter.Cursor = 'Default'
		Show-Info_OK_psf
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$requestSupportToolStripMenuItem_Click={
	Try
	{
		Start-Process -FilePath mailto:support@o365admin.center
	}
	Catch
	{
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$skypeForBusinessPrerequisiteToolStripMenuItem_Click={
	
}

$disableSkypeForBusinessPrerequisiteCheckToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableSkypeOnlineConnectorPrompt -Value 1 -Force | Out-Null
		$InformationText = "Skype For Business prerequisite check has been disabled"
		$FormO365AdministrationCenter.Cursor = 'Default'
		Show-Info_OK_psf
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$enableSkypeForBusinessPrerequisiteCheckToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableSkypeOnlineConnectorPrompt -Value 0 -Force | Out-Null
		$InformationText = "Skype For Business prerequisite check has been enabled"
		$FormO365AdministrationCenter.Cursor = 'Default'
		Show-Info_OK_psf
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$disableExchangeOnlinePrerequisiteCheckToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableAzurePrompt -Value 1 -Force | Out-Null
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableMSOnlinePrompt -Value 1 -Force | Out-Null
		$InformationText = "Exchange Online prerequisite check has been disabled"
		$FormO365AdministrationCenter.Cursor = 'Default'
		Show-Info_OK_psf
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$enableExchangeOnlinePrerequisiteCheckToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableAzurePrompt -Value 0 -Force | Out-Null
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableMSOnlinePrompt -Value 0 -Force | Out-Null
		$InformationText = "Exchange Online prerequisite check has been enabled"
		$FormO365AdministrationCenter.Cursor = 'Default'
		Show-Info_OK_psf
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$disableSharePointPrerequisiteCheckToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableSharePointOnlinePrompt -Value 1 -Force | Out-Null
		$InformationText = "SharePoint prerequisite check has been Disabled"
		$FormO365AdministrationCenter.Cursor = 'Default'
		Show-Info_OK_psf
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$enableSharePointPrerequisiteCheckToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableSharePointOnlinePrompt -Value 0 -Force | Out-Null
		$InformationText = "SharePoint prerequisite check has been Enabled"
		$FormO365AdministrationCenter.Cursor = 'Default'
		Show-Info_OK_psf
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$disableArchitecturePrerequisiteToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableArchPrompt -Value 1 -Force | Out-Null
		$InformationText = "Architecture prerequisite check has been disabled"
		$FormO365AdministrationCenter.Cursor = 'Default'
		Show-Info_OK_psf
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$enableArchitecturePrerequisiteToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableArchPrompt -Value 0 -Force | Out-Null
		$InformationText = "Architecture prerequisite check has been enabled"
		Show-Info_OK_psf
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getAllTransportRulesToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting all Transport Rules..."
		$textboxDetails.Text = "Get-TransportRule"
		$TextboxResults.Text = Get-TransportRule | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getAllDisabledTransportRulesToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting all disabled Transport Rules..."
		$textboxDetails.Text = "Get-TransportRule | Where-Object {`$_.State -ne 'Enabled'}"
		$TextboxResults.Text = Get-TransportRule | Where-Object {$_.State -ne 'Enabled'} | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getAllEnabledTransportRulesToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting all enabled Transport Rules..."
		$textboxDetails.Text = "Get-TransportRule | Where-Object {`$_.State -eq 'Enabled'}"
		$TextboxResults.Text = Get-TransportRule | Where-Object { $_.State -eq 'Enabled' } | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getSpoofedMailReportToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Spoof Mail Report..."
		$textboxDetails.Text = "Get-SpoofMailReport"
		$TextboxResults.Text = Get-SpoofMailReport | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getTransportRulePredicateToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Transport Rule Predicate..."
		$textboxDetails.Text = "Get-TransportRulePredicate"
		$TextboxResults.Text = Get-TransportRulePredicate | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getDetailedInfoForATransportRuleToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$TransportRulesText = "Select the Transport Rule you want to view detailed information on"
			Show-SelectTransportRules_psf
			$DetailedTransportRule = $SelectTransportRules_comboboxTPs
			If (!$DetailedTransportRule)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Transport Rule was selected, please select a valid Transport Rule", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting Detailed information on the Transport Rule, '$DetailedTransportRule'..."
				$textboxDetails.Text = "Get-TransportRule -Identity $DetailedTransportRule | Format-List "
				$TextboxResults.Text = Get-TransportRule -Identity $DetailedTransportRule | Format-List | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get information on another Transport Rule?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getTransportRuleActionToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Transport Rule Action..."
		$textboxDetails.Text = "Get-TransportRuleAction"
		$TextboxResults.Text = Get-TransportRuleAction | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$enableATransportRuleToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$TransportRulesText = "Select the Transport Rule you want to enable"
			Show-SelectDisabledTransportRules_psf
			$TransportRule = $SelectDisabledTransportRules_comboboxTPs
			If (! $TransportRule)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Transport Rule was selected, please select a valid Transport Rule", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Enabling the Transport Rule, '$TransportRule''..."
				$textboxDetails.Text = "Enable-TransportRule -Identity $TransportRule"
				$TextboxResults.Text = Enable-TransportRule -Identity $TransportRule | Out-String -Width 2147483647
				$TextboxResults.Text = Get-TransportRule | Where-Object { $_.State -eq 'Enabled' } | Format-Table -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to menable another Transport Rule?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$disableATransportRuleToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$TransportRulesText = "Select the Transport Rule you want to disable"
			Show-SelectEnabledTransportRules_psf
			$TransportRule = $SelectEnabledTransportRules_comboboxTPs
			If (!$TransportRule)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Transport Rule was selected, please select a valid Transport Rule", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Disabling the Transport Rule, '$TransportRule''..."
				$textboxDetails.Text = "Disable-TransportRule -Identity $TransportRule"
				$TextboxResults.Text = Disable-TransportRule -Identity $TransportRule | Out-String -Width 2147483647
				$TextboxResults.Text = Get-TransportRule | Where-Object { $_.State -ne 'Enabled' } | Format-Table -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to disable another Transport Rule?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$removeATransportRuleToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$TransportRulesText = "Select the Transport Rule you want to remove"
			Show-SelectTransportRules_psf
			$DetailedTransportRule = $SelectTransportRules_comboboxTPs
			If (!$DetailedTransportRule)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Transport Rule was selected, please select a valid Transport Rule", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Removing the Transport Rule, '$DetailedTransportRule''..."
				$textboxDetails.Text = "Remove-TransportRule -Identity $DetailedTransportRule "
				$TextboxResults.Text = Remove-TransportRule -Identity $DetailedTransportRule | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to remove another Transport Rule?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$newTransportRuleForSenderDomainToBypassClutterToolStripMenuItem_Click = {
	Try
	{
		$NewTransportRule = Read-Host "Please enter a name for the Transport Rule"
		If (!$NewTransportRule)
		{
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("No name was entered, please select a valid name for the new Transport Rule", "Error")
		}
		Else
		{
			$SenderDomain = Read-Host "Please enter the sender domain that will bypass Clutter"
			If (!$SenderDomain)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Domain was entered, please enter a valid domain name what will bypass Clutter", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Creating a new Transport Rule where $SenderDomain can bypass Clutter..."
				$textboxDetails.Text = "New-TransportRule -Name '$NewTransportRule' -SenderDomainIs $SenderDomain -SetHeaderName 'X-MS-Exchange-Organization-BypassClutter' -SetHeaderValue 'true' "
				$TextboxResults.Text = New-TransportRule -Name $NewTransportRule -SenderDomainIs $SenderDomain -SetHeaderName "X-MS-Exchange-Organization-BypassClutter" -SetHeaderValue "true" | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
				
			}
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$blockEMailMessagesBetweenTwoDistributionGroupsToolStripMenuItem_Click = {
	Try
	{
		$TempDir = $env:temp
		$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter\distros.txt")
		If ((Test-Path $O365AdminTempFolder) -eq $false)
		{
			$Textboxresults.text = "Caching Distribution Groups…"
			(Get-DistributionGroup -ResultSize unlimited | Where-Object { $_.GroupType -notlike 'Universal, SecurityEnabled' }).DisplayName | Out-File "$O365AdminTempFolder"
			$Textboxresults.text = ""
			
			$NewTransportRule = Read-Host "Please enter a name for the Transport Rule"
			If (!$NewTransportRule)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No name was entered, please select a valid name for the new Transport Rule", "Error")
			}
			Else
			{
				$DistroGroupsText = "Select the first Distribution Group"
				Show-SelectCachedDistroGroups_psf
				$Distro1 = $SelectCachedDistroGroups_comboboxNames
				If (!$Distro1)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group", "Error")
				}
				Else
				{
					$DistroGroupsText = "Select the second Distribution Group. Memers of $Distro1 will not be able to send to this group and this group will not be able to send to $Distro1 "
					Show-SelectCachedDistroGroups_psf
					$Distro2 = $SelectCachedDistroGroups_comboboxNames
					If (!$Distro2)
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group", "Error")
					}
					Else
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Creating a new Transport Rule where members of $Distro1 and $Distro2 cannot e-mail each other..."
						$textboxDetails.Text = "New-TransportRule $NewTransportRule -BetweenMemberOf1 $Distro1 -BetweenMemberOf2 $Distro2  -RejectMessageEnhancedStatusCode '5.7.1' -RejectMessageReasonText 'Email messages sent between $Distro1 and $Distro2 are prohibited.'"
						$TextboxResults.Text = New-TransportRule $NewTransportRule -BetweenMemberOf1 $Distro1 -BetweenMemberOf2 $Distro2 -RejectMessageEnhancedStatusCode "5.7.1" -RejectMessageReasonText "Email messages sent between $Distro1 and $Distro2 are prohibited." | Out-String -Width 2147483647
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
				}
			}
		}
		Else
		{
			$NewTransportRule = Read-Host "Please enter a name for the Transport Rule"
			If (!$NewTransportRule)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No name was entered, please select a valid name for the new Transport Rule", "Error")
			}
			Else
			{
				$DistroGroupsText = "Select the first Distribution Group"
				Show-SelectCachedDistroGroups_psf
				$Distro1 = $SelectCachedDistroGroups_comboboxNames
				If (!$Distro1)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group", "Error")
				}
				Else
				{
					$DistroGroupsText = "Select the second Distribution Group. Memers of $Distro1 will not be able to send to this group and this group will not be able to send to $Distro1 "
					Show-SelectCachedDistroGroups_psf
					$Distro2 = $SelectCachedDistroGroups_comboboxNames
					If (!$Distro2)
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group", "Error")
					}
					Else
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Creating a new Transport Rule where members of $Distro1 and $Distro2 cannot e-mail each other..."
						$textboxDetails.Text = "New-TransportRule $NewTransportRule -BetweenMemberOf1 $Distro1 -BetweenMemberOf2 $Distro2  -RejectMessageEnhancedStatusCode '5.7.1' -RejectMessageReasonText 'Email messages sent between $Distro1 and $Distro2 are prohibited.'"
						$TextboxResults.Text = New-TransportRule $NewTransportRule -BetweenMemberOf1 $Distro1 -BetweenMemberOf2 $Distro2 -RejectMessageEnhancedStatusCode "5.7.1" -RejectMessageReasonText "Email messages sent between $Distro1 and $Distro2 are prohibited." | Out-String -Width 2147483647
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
				}
			}
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$specificSenderBypassClutterToolStripMenuItem_Click={
	Try
	{
		$NewTransportRule = Read-Host "Please enter a name for the Transport Rule"
		If (!$NewTransportRule)
		{
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("No name was entered, please select a valid name for the new Transport Rule", "Error")
		}
		Else
		{
			$SenderDomain = Read-Host "Please enter the sender's e-mail that will bypass Clutter"
			If (!$SenderDomain)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Domain was entered, please enter a valid domain name what will bypass Clutter", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Creating a new Transport Rule where $SenderDomain can bypass Clutter..."
				$textboxDetails.Text = "New-TransportRule -Name '$NewTransportRule' -From $SenderDomain -SetHeaderName 'X-MS-Exchange-Organization-BypassClutter' -SetHeaderValue 'true' "
				$TextboxResults.Text = New-TransportRule -Name $NewTransportRule -From $SenderDomain -SetHeaderName "X-MS-Exchange-Organization-BypassClutter" -SetHeaderValue "true" | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
				
			}
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$changeATransportRulePriorityToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$TransportRulesText = "Select the Transport Rule you want to modify priority for"
			Show-SelectTransportRules_psf
			$DetailedTransportRule = $SelectTransportRules_comboboxTPs
			If (!$DetailedTransportRule)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Transport Rule was selected, please select a valid Transport Rule", "Error")
			}
			Else
			{
				$NewPriority = Read-Host "Please enter a new priority number. Ex: 1"
				If (!$NewPriority)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No priority was set, please enter a valid priority number ", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Setting the priority level for $DetailedTransportRule to $NewPriority..."
					$textboxDetails.Text = "Set-TransportRule -Identity $DetailedTransportRule -Priority $NewPriority"
					$TextboxResults.Text = Set-TransportRule -Identity $DetailedTransportRule -Priority $NewPriority | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to modify another Transport Rules priority?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$blockPasswordProtectedAttachmentsToolStripMenuItem_Click={
	Try
	{
		$NewTransportRule = Read-Host "Please enter a name for the Transport Rule"
		If (!$NewTransportRule)
		{
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("No name was entered, please select a valid name for the new Transport Rule", "Error")
		}
		Else
		{
			
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Creating a new Transport Rule where password protected attachments are blocked..."
			$textboxDetails.Text = "New-TransportRule -Name '$NewTransportRule' -AttachmentIsPasswordProtected $True -Quarantine $True "
			$TextboxResults.Text = New-TransportRule -Name $NewTransportRule -AttachmentIsPasswordProtected $True -Quarantine $True | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
	
}

$quarantineMessagesWithExecutableAttachmentsToolStripMenuItem_Click= {
	$NewTransportRule = Read-Host "Please enter a name for the Transport Rule"
	If (!$NewTransportRule)
	{
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("No name was entered, please select a valid name for the new Transport Rule", "Error")
	}
	Else
	{
		
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Creating a new Transport Rule where messages with executable content is quarantined..."
		$textboxDetails.Text = "New-TransportRule -Name '$NewTransportRule' -AttachmentHasExecutableContent $True -Quarantine $True "
		$TextboxResults.Text = New-TransportRule -Name $NewTransportRule -AttachmentHasExecutableContent $True -Quarantine $True | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$addAPublicFolderPermissionToolStripMenuItem_Click = {
	Do
	{
		$TempDir = $env:temp
		$CachedPF = ("$TempDir" + "\O365AdminCenter" + "\pf.txt")
		Try
		{
			If ((Test-Path $CachedPF) -eq $false)
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Caching Public Folders..."
				(Get-PublicFolder -ResultSize Unlimited -Identity "\" -Recurse).Identity | Out-File $CachedPF
				
				$PFText = "Please select the Public Folder you want to modify permissions for"
				Show-SelectCachedPublicFolders_psf
				$PFStats = $SelectCachedPublicFolders_comboboxPF
				If (!$PFStats)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Public Folder was selected, please select a valid Public Folder", "Error")
				}
				Else
				{
					$SelectUsersFormText = "Select the user you want to add permission to $PFStats"
					#Call-SelectUsersForm_psf
					Show-SelectCachedDisplayNames_psf
					#$GlobalUPNooouser = $SelectUsersForm_comboboxUsers
					$GlobalUPNooouser = $SelectCachedDisplayNames_comboboxNames
					If (!$GlobalUPNooouser)
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid user", "Error")
					}
					Else
					{
						$PermissionsText = "Select the level of access you want $GlobalUPNooouser to have"
						Show-SelectPFPermissions_psf
						$Permissions = $SelectPFPermissions_comboboxTPs
						If (!$Permissions)
						{
							$TextboxResults.Text = ""
							$textboxDetails.Text = ""
							[System.Windows.Forms.MessageBox]::Show("No level of access was selected, please select a valid level of access", "Error")
						}
						Else
						{
							$FormO365AdministrationCenter.Cursor = 'WaitCursor'
							$TextboxResults.Text = "Modifying permissions for the public folder '$PFStats' for $GlobalUPNooouser with $Permissions access.."
							$textboxDetails.Text = "Add-PublicFolderClientPermission -identity $PFStats -user $GlobalUPNooouser -accessrights $Permissions"
							$TextboxResults.Text = Add-PublicFolderClientPermission -identity $PFStats -user $GlobalUPNooouser -accessrights $Permissions | Out-String -Width 2147483647
							$FormO365AdministrationCenter.Cursor = 'Default'
						}
					}
				}
			}
			Else
			{
				
				$PFText = "Please select the Public Folder you want to modify permissions for"
				Show-SelectCachedPublicFolders_psf
				$PFStats = $SelectCachedPublicFolders_comboboxPF
				If (!$PFStats)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Public Folder was selected, please select a valid Public Folder", "Error")
				}
				Else
				{
					$SelectUsersFormText = "Select the user you want to add permission to $PFStats"
					#Call-SelectUsersForm_psf
					Show-SelectCachedDisplayNames_psf
					#$GlobalUPNooouser = $SelectUsersForm_comboboxUsers
					$GlobalUPNooouser = $SelectCachedDisplayNames_comboboxNames
					If (!$GlobalUPNooouser)
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid user", "Error")
					}
					Else
					{
						$PermissionsText = "Select the level of access you want $GlobalUPNooouser to have"
						Show-SelectPFPermissions_psf
						$Permissions = $SelectPFPermissions_comboboxTPs
						If (!$Permissions)
						{
							$TextboxResults.Text = ""
							$textboxDetails.Text = ""
							[System.Windows.Forms.MessageBox]::Show("No level of access was selected, please select a valid level of access", "Error")
						}
						Else
						{
							$FormO365AdministrationCenter.Cursor = 'WaitCursor'
							$TextboxResults.Text = "Modifying permissions for the public folder '$PFStats' for $GlobalUPNooouser with $Permissions access.."
							$textboxDetails.Text = "Add-PublicFolderClientPermission -identity $PFStats -user $GlobalUPNooouser -accessrights $Permissions"
							$TextboxResults.Text = Add-PublicFolderClientPermission -identity $PFStats -user $GlobalUPNooouser -accessrights $Permissions | Out-String -Width 2147483647
							$FormO365AdministrationCenter.Cursor = 'Default'
						}
					}
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to modify permissions on another Public Folder?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getAPublicFolderPermissionToolStripMenuItem_Click = {
	Do
	{
		$TempDir = $env:temp
		$CachedPF = ("$TempDir" + "\O365AdminCenter" + "\pf.txt")
		Try
		{
			If ((Test-Path $CachedPF) -eq $false)
			{
				$TextboxResults.Text = "Caching Public Folders..."
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Caching Public Folders..."
				(Get-PublicFolder -ResultSize Unlimited -Identity "\" -Recurse).Identity | Out-File $CachedPF
				$TextboxResults.Text = ""
				$PFText = "Please select the Public Folder you want to view permissions for"
				Show-SelectCachedPublicFolders_psf
				$PFStats = $SelectCachedPublicFolders_comboboxPF
				If (!$PFStats)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Public Folder was selected, please select a valid Public Folder", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Getting Public Folder permissions for $PFStats.."
					$textboxDetails.Text = "Get-PublicFolderClientPermission -Identity $PFStats"
					$TextboxResults.Text = Get-PublicFolderClientPermission -Identity $PFStats | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
			Else
			{
				
				$PFText = "Please select the Public Folder you want to view permissions for"
				Show-SelectCachedPublicFolders_psf
				$PFStats = $SelectCachedPublicFolders_comboboxPF
				If (!$PFStats)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Public Folder was selected, please select a valid Public Folder", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Getting Public Folder permissions for $PFStats.."
					$textboxDetails.Text = "Get-PublicFolderClientPermission -Identity $PFStats"
					$TextboxResults.Text = Get-PublicFolderClientPermission -Identity $PFStats | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
			
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to modify permissions on another Public Folder?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$disableExecutionPolicyCheckToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name ExecutionPolicy -Value 1 -Force | Out-Null
		$InformationText = "Execution Policy check has been disabled"
		$FormO365AdministrationCenter.Cursor = 'Default'
		Show-Info_OK_psf
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$enableExecutionPolicyCheckToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name ExecutionPolicy -Value 0 -Force | Out-Null
		$InformationText = "Execution Policy check has been enabled"
		$FormO365AdministrationCenter.Cursor = 'Default'
		Show-Info_OK_psf
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$TextboxResults_TextChanged={
	
	
}

$deleteAllMailboxContentForAUserToolStripMenuItem_Click = {
	Do
	{
		$SelectUsersFormText = "Select the User you want to delete Mailbox Content for"
		Show-SelectCachedDisplayNames_psf
		$DeleteMailboxContent = $SelectCachedDisplayNames_comboboxNames
		If (!$DeleteMailboxContent)
		{
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
		}
		Else
		{
			Try
			{
				$OUTPUT = [System.Windows.Forms.MessageBox]::Show("Are you sure you want to delete all Mailbox Content for $DeleteMailboxContent?.", "Warning!", 4)
				If ($OUTPUT -eq "YES")
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Removing mailbox conetent for $DeleteMailboxContent..."
					$textboxDetails.Text = "Search-Mailbox -Identity $DeleteMailboxContent -DeleteContent"
					$TextboxResults.Text = Search-Mailbox -Identity $DeleteMailboxContent -DeleteContent | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
				Else
				{
					[System.Windows.Forms.MessageBox]::Show("Mailbox Content for $DeleteMailboxContent has not been deleted", "Info")
				}
			}
			Catch
			{
				$FormO365AdministrationCenter.Cursor = 'Default'
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("$_", "Error")
			}
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to delete all Mailbox Content for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getMailboxContentForAUserToolStripMenuItem_Click = {
	Do
	{
		$SelectUsersFormText = "Select the User you want to get all Mailbox Content for"
		Show-SelectCachedDisplayNames_psf
		$MailboxContent = $SelectCachedDisplayNames_comboboxNames
		If (!$MailboxContent)
		{
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
		}
		Else
		{
			Try
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting mailbox content for $MailboxContent..."
				$textboxDetails.Text = "Get-MailboxFolderStatistics $MailboxContent | Select-Object Identity, ItemsInFolder"
				$TextboxResults.Text = Get-MailboxFolderStatistics $MailboxContent | Select-Object Identity, ItemsInFolder | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			Catch
			{
				$FormO365AdministrationCenter.Cursor = 'Default'
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("$_", "Error")
			}
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get Mailbox Content for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$createAnAutoReplyForAMailboxToolStripMenuItem_Click = {
	Do
	{
		#$OOOautoreplyUser = Read-Host "What user is the Out Of Office auto reply for?"
		$SelectUsersFormText = "Select the user you want to create an Auto Reply for"
		#Call-SelectUsersForm_psf
		Show-SelectCachedDisplayNames_psf
		#$GlobalUPNooouser = $SelectUsersForm_comboboxUsers
		$GlobalUPNooouser = $SelectCachedDisplayNames_comboboxNames
		
		Try
		{
			If (!$GlobalUPNooouser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("Please select a user you want to create an Auto Reply for", "Error")
			}
			Else
			{
				$OOOInternal = Read-Host "What is the Internal Message"
				If (!$OOOInternal)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("Please enter an internal Auto Reply message", "Error")
				}
				Else
				{
					$OOOExternal = Read-Host "What is the External Message"
					If (!$OOOExternal)
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						[System.Windows.Forms.MessageBox]::Show("Please enter an Auto Reply message", "Error")
					}
					Else
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Creating an Auto Reply for $GlobalUPNooouser..."
						$textboxDetails.Text = "Set-MailboxAutoReplyConfiguration -Identity $GlobalUPNooouser -AutoReplyState Enabled -ExternalMessage $OOOExternal -InternalMessage $OOOInternal"
						Set-MailboxAutoReplyConfiguration -Identity $GlobalUPNooouser -AutoReplyState Enabled -ExternalMessage $OOOExternal -InternalMessage $OOOInternal
						$TextboxResults.Text = Get-MailboxAutoReplyConfiguration -Identity $GlobalUPNooouser | Format-List | Out-String -Width 2147483647
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
				}
				
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to create an Auto-Reply for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$disableAutoReplyForAMailboxToolStripMenuItem_Click = {
	Do
	{
		#$OOOautoreplyUser = Read-Host "What user is the Out Of Office auto reply for?"
		$SelectUsersFormText = "Select the user you want to disable an Auto Reply for"
		#Call-SelectUsersForm_psf
		Show-SelectCachedDisplayNames_psf
		#$GlobalUPNooouser = $SelectUsersForm_comboboxUsers
		$GlobalUPNooouser = $SelectCachedDisplayNames_comboboxNames
		
		Try
		{
			If (!$GlobalUPNooouser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No user selected, please select a user.", "Error")
				
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Disabling an Auto Reply for $GlobalUPNooouser..."
				$textboxDetails.Text = "Set-MailboxAutoReplyConfiguration -Identity $GlobalUPNooouser -AutoReplyState Disabled"
				Set-MailboxAutoReplyConfiguration -Identity $GlobalUPNooouser -AutoReplyState Disabled
				$TextboxResults.Text = Get-MailboxAutoReplyConfiguration -Identity $GlobalUPNooouser | Format-List | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to Disable Auto-Reply for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$enableMailboxAuditingOnAllMailboxesToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Enabling Auditing on all user mailboxes..."
		$textboxDetails.text = "Get-Mailbox -ResultSize Unlimited -Filter { RecipientTypeDetails -eq 'UserMailbox' } | Set-Mailbox -AuditEnabled `$true" | Out-String -Width 2147483647
		$TextboxResults.Text = Get-Mailbox -ResultSize Unlimited -Filter { RecipientTypeDetails -eq "UserMailbox" } | Set-Mailbox -AuditEnabled $true | Out-String -Width 2147483647
		$TextboxResults.Text = Get-Mailbox -ResultSize Unlimited -Filter { RecipientTypeDetails -eq 'UserMailbox' } | Format-List Name, Audit* | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$disableMailboxAuditingOnAllUsersToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Disabling Auditing on all user mailboxes..."
		$textboxDetails.text = "Get-Mailbox -ResultSize Unlimited -Filter { RecipientTypeDetails -eq 'UserMailbox' } | Set-Mailbox -AuditEnabled `$false" | Out-String -Width 2147483647
		$TextboxResults.Text = Get-Mailbox -ResultSize Unlimited -Filter { RecipientTypeDetails -eq "UserMailbox" } | Set-Mailbox -AuditEnabled $false | Out-String -Width 2147483647
		$TextboxResults.Text = Get-Mailbox -ResultSize Unlimited -Filter { RecipientTypeDetails -eq 'UserMailbox' } | Format-List Name, Audit* | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getMailboxAuditingForAllUsersToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Mailbox Auditing for all user mailboxes..."
		$textboxDetails.text = "Get-Mailbox -ResultSize Unlimited -Filter { RecipientTypeDetails -eq 'UserMailbox' } | Format-List Name, Audit*" | Out-String -Width 2147483647
		$TextboxResults.Text = Get-Mailbox -ResultSize Unlimited -Filter { RecipientTypeDetails -eq 'UserMailbox' } | Format-List Name, Audit* | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getMailboxAuditingForAUserToolStripMenuItem_Click = {
	Do
	{
		$SelectUsersFormText = "Select the User you want to get Mailbox Auditing information for"
		Show-SelectCachedDisplayNames_psf
		$GlobalUPNdetailedmailbox = $SelectCachedDisplayNames_comboboxNames
		Try
		{
			If (!$GlobalUPNdetailedmailbox)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User selected, please select a User.", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting Mailbox Auditing information for $GlobalUPNdetailedmailbox..."
				$textboxDetails.Text = "Get-Mailbox $GlobalUPNdetailedmailbox | Format-List Audit*"
				$TextboxResults.Text = Get-Mailbox $GlobalUPNdetailedmailbox | Format-List Audit* | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get the Mailbox Auditing status for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$enableMailboxAuditingForAUserToolStripMenuItem_Click = {
	Do
	{
		$SelectUsersFormText = "Select the User you want to enable Mailbox Auditing for"
		Show-SelectCachedDisplayNames_psf
		$GlobalUPNdetailedmailbox = $SelectCachedDisplayNames_comboboxNames
		Try
		{
			If (!$GlobalUPNdetailedmailbox)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User selected, please select a User.", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Enabling Mailbox Auditing information for $GlobalUPNdetailedmailbox..."
				$textboxDetails.Text = "Set-Mailbox -Identity $GlobalUPNdetailedmailbox -AuditEnabled `$true"
				$TextboxResults.Text = Set-Mailbox -Identity $GlobalUPNdetailedmailbox -AuditEnabled $true | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to enable Mailbox Auditing for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$disableMailboxAuditingForAUserToolStripMenuItem_Click = {
	Do
	{
		$SelectUsersFormText = "Select the User you want to disable Mailbox Auditing for"
		Show-SelectCachedDisplayNames_psf
		$GlobalUPNdetailedmailbox = $SelectCachedDisplayNames_comboboxNames
		Try
		{
			If (!$GlobalUPNdetailedmailbox)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User selected, please select a User.", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Disabling Mailbox Auditing information for $GlobalUPNdetailedmailbox..."
				$textboxDetails.Text = "Set-Mailbox -Identity $GlobalUPNdetailedmailbox -AuditEnabled `$false"
				$TextboxResults.Text = Set-Mailbox -Identity $GlobalUPNdetailedmailbox -AuditEnabled $false | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to disable Mailbox Auditing for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$removeCachedCredentialsToolStripMenuItem_Click={
	Try
	{
		$TempDir = $env:temp
		$O365AdminTempFolderCreds = ("$TempDir" + "\O365AdminCenter_Creds")
		$CachedMem = "$O365AdminTempFolderCreds\Creds.xml"
		Remove-Item $CachedMem -Force
		
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name CredMem -Value 0 -Force | Out-Null
		
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("Saved credentials have been removed", "Error")
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$disableCachedCredentialsToolStripMenuItem_Click = {
	Try
	{
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name CredMem -Value 2 -Force | Out-Null
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("Cached Credentials have been disabled", "Info")
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$enable2FAToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name TFA -Value 1 -Force | Out-Null
		$InformationText = "Second-Factor Authentication has been enabled"
		Show-Info_OK_psf
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$disable2FAToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name TFA -Value 0 -Force | Out-Null
		$InformationText = "Second-Factor Authentication has been Disabled"
		Show-Info_OK_psf
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$clear2FAModulePathToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		Get-Item 'HKCU:\Software\O365 Admin Center' | Remove-ItemProperty -Name TFAPath -Force | Out-Null
		$InformationText = "Second-Factor Module has been cleared"
		Show-Info_OK_psf
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$set2FAModulePathToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TFAModule = Read-Host "Please enter the full path to the 2FA Module"
		If (!$TFAModule)
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("No Path was entered!", "Error")
		}
		Else
		{
			$InformationText = "Second-Factor Module has been set to $TFAModule"
			Show-Info_OK_psf
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$download2FAModuleToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		Start-Process -FilePath https://technet.microsoft.com/en-us/library/mt775114
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$enableDirectReportsGroupAutoCreationToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Enabling Direct Reports Group Auto Creation..."
		$textboxDetails.Text = "Set-OrganizationConfig -DirectReportsGroupAutoCreationEnabled `$True"
		$TextboxResults = Set-OrganizationConfig -DirectReportsGroupAutoCreationEnabled $true | Out-String -Width 2147483647
		$TextboxResults.Text = "Success"
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$disableDirectReportsGroupAutoCreationToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Disabling Direct Reports Group Auto Creation..."
		$textboxDetails.Text = "Set-OrganizationConfig -DirectReportsGroupAutoCreationEnabled `$False"
		$TextboxResults.Text = Set-OrganizationConfig -DirectReportsGroupAutoCreationEnabled $false | Out-String -Width 2147483647
		$TextboxResults.Text = "Success"
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getDirectReportsGroupAutoCreationStatusToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Direct Reports Group Auto Creation Status..."
		$textboxDetails.Text = "Get-OrganizationConfig | Format-List *group*"
		$TextboxResults.Text = Get-OrganizationConfig | Format-List *group* | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getAllGroupsCreatedByDirectReportsGroupAutoCreationToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting All Groups Created by Direct Reports Group Auto Creation..."
		$textboxDetails.Text = "Get-UnifiedGroup -ResultSize Unlimited | Where-Object { $_.GroupPersonification -eq 'Groupsona:AutoDirectReports' }"
		$TextboxResults.Text = Get-UnifiedGroup -ResultSize Unlimited | Where-Object { $_.GroupPersonification -eq 'Groupsona:AutoDirectReports' } | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}

}

$exportFullSMTPLogToCSVToolStripMenuItem_Click={
	Try
	{
		$savedialog = New-Object windows.forms.savefiledialog
		$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
		$savedialog.title = "Export to File"
		$savedialog.filter = ".csv|*.csv"
		$savedialog.ShowHelp = $True
		$result = $savedialog.ShowDialog(); $result
		$OutputFile = $savedialog.filename
		if ($result -eq "OK")
		{
			$TextboxResults.Text = "Exporting Full SMTP Log to csv..."
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			#Collect all recipients from Office 365 
			$Recipients = Get-Recipient -ResultSize Unlimited | Select-Object PrimarySMTPAddress
			$MailTraffic = @{ }
			foreach ($Recipient in $Recipients)
			{
				$MailTraffic[$Recipient.PrimarySMTPAddress.ToLower()] = @{ }
			}
			$Recipients = $null
			
			#Collect Message Tracking Logs (These are broken into "pages" in Office 365 so we need to collect them all with a loop) 
			$Messages = $null
			$Page = 1
			do
			{
				
				Write-Host "Collecting Message Tracking - Page $Page..."
				$CurrMessages = Get-MessageTrace -StartDate (Get-Date).AddDays(-7) -EndDate (Get-Date) -PageSize 5000 -Page $Page | Select-Object Received, *Address, *IP, Subject, Status, Size
				
				if ($CurrMessages -ne $null)
				{
					$CurrMessages | Export-Csv $OutputFile -NoTypeInformation
				}
				$Page++
				$Messages += $CurrMessages
				
				
			}
			until ($CurrMessages -eq $null)
		}
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$downloadMSOnlineModuleFor2FAToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		Start-Process -FilePath http://connect.microsoft.com/site1164/Downloads/DownloadDetails.aspx?DownloadID=59185
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}

	
}

$getMigrationStatisticsToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Migration Statistics..."
		$textboxDetails.Text = "Get-MigrationStatistics"
		$TextboxResults.Text = Get-MigrationStatistics | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getMigrationUserStatisticsToolStripMenuItem_Click = {
	Do
	{
		$SelectUsersFormText = "Select the user you want to get Migration User Statistics for"
		Show-SelectCachedDisplayNames_psf
		$GlobalUPNdetailedmailbox = $SelectCachedDisplayNames_comboboxNames
		Try
		{
			If (!$GlobalUPNdetailedmailbox)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No user selected, please select a user.", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting Migration User Statistics for $GlobalUPNdetailedmailbox..."
				$textboxDetails.Text = "Get-MailboxUserStatistics -Identity $GlobalUPNdetailedmailbox"
				$TextboxResults.Text = Get-MailboxUserStatistics -Identity $GlobalUPNdetailedmailbox | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get Migration User Statistics for another user?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getMoveRequestForAUserToolStripMenuItem_Click = {
	Do
	{
		$SelectUsersFormText = "Select the user you want to get the Move Request status for"
		Show-SelectCachedDisplayNames_psf
		$GlobalUPNdetailedmailbox = $SelectCachedDisplayNames_comboboxNames
		Try
		{
			If (!$GlobalUPNdetailedmailbox)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No user selected, please select a user.", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting the Move Request status for $GlobalUPNdetailedmailbox..."
				$textboxDetails.Text = "Get-MoveRequest -Identity $GlobalUPNdetailedmailbox"
				$TextboxResults.Text = Get-MoveRequest -Identity $GlobalUPNdetailedmailbox | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get the Move Request status for another user?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getMigrationUserStatusToolStripMenuItem_Click = {
	Do
	{
		$SelectUsersFormText = "Select the user you want to get the Migration User status for"
		Show-SelectCachedDisplayNames_psf
		$GlobalUPNdetailedmailbox = $SelectCachedDisplayNames_comboboxNames
		Try
		{
			If (!$GlobalUPNdetailedmailbox)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No user selected, please select a user.", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting Migration User status for $GlobalUPNdetailedmailbox..."
				$textboxDetails.Text = "Get-MailboxUser -Identity $GlobalUPNdetailedmailbox"
				$TextboxResults.Text = Get-MailboxUser -Identity $GlobalUPNdetailedmailbox | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get the Migration Status for another user?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$resumeMoveRequestForAUserToolStripMenuItem_Click = {
	Do
	{
		$SelectUsersFormText = "Select the user you want to resume the Move Request for"
		Show-SelectCachedDisplayNames_psf
		$GlobalUPNdetailedmailbox = $SelectCachedDisplayNames_comboboxNames
		Try
		{
			If (!$GlobalUPNdetailedmailbox)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No user selected, please select a user.", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Resuming the Move Request for $GlobalUPNdetailedmailbox..."
				$textboxDetails.Text = "Resume-MoveRequest -Identity $GlobalUPNdetailedmailbox"
				$TextboxResults.Text = Resume-MoveRequest -Identity $GlobalUPNdetailedmailbox | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to resume the Move Request for another user?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$removeMoveRequestForAUserToolStripMenuItem_Click = {
	Do
	{
		$SelectUsersFormText = "Select the user you want to remove the Move Request for"
		Show-SelectCachedDisplayNames_psf
		$GlobalUPNdetailedmailbox = $SelectCachedDisplayNames_comboboxNames
		Try
		{
			If (!$GlobalUPNdetailedmailbox)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No user selected, please select a user.", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Removing the Move Request for $GlobalUPNdetailedmailbox..."
				$textboxDetails.Text = "Remove-MoveRequest -Identity $GlobalUPNdetailedmailbox"
				$TextboxResults.Text = Remove-MoveRequest -Identity $GlobalUPNdetailedmailbox | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to remove a Move Request for another user?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$suspendMoveRequestForAUserToolStripMenuItem_Click = {
	Do
	{
		$SelectUsersFormText = "Select the user you want to suspend the Move Request for"
		Show-SelectCachedDisplayNames_psf
		$GlobalUPNdetailedmailbox = $SelectCachedDisplayNames_comboboxNames
		Try
		{
			If (!$GlobalUPNdetailedmailbox)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No user selected, please select a user.", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Suspending the Move Request for $GlobalUPNdetailedmailbox..."
				$textboxDetails.Text = "Suspend-MoveRequest -Identity $GlobalUPNdetailedmailbox"
				$TextboxResults.Text = Suspend-MoveRequest -Identity $GlobalUPNdetailedmailbox | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to suspend the Move REquest for another user?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getMembersOfADynamicDistributionGroupToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$DistroGroupsText = "Select the Dynamic Distribution Group you want to view the members of"
			Show-SelectDynamicDistributionGroups_psf
			$DetailedDyn = $SelectDynamicDistributionGroups_comboboxSelectDistroGroups
			If (!$DetailedDyn)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Dynamic Distribution Group was selected, please select a valid Dynamic Distribution Group", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting membership for $DetailedDyn..."
				$DDG = Get-DynamicDistributionGroup $DetailedDyn
				$textboxDetails.Text = "Get-Recipient -RecipientPreviewFilter $DDG.RecipientFilter"
				$TextboxResults.Text = Get-Recipient -RecipientPreviewFilter $DDG.RecipientFilter | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get Members of another Dynamic Distribution Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getAllUsersImmutableIDToolStripMenuItem_Click={
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all users ImmutableID..."
			$textboxDetails.Text = "Get-MsolUser -All | Select-Object DisplayName, ImmutableID"
			$TextboxResults.text = Get-MsolUser -All | Select-Object DisplayName, ImmutableID | Sort-Object DisplayName | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all users ImmutableID..."
			$textboxDetails.Text = "Get-MsolUser -TenantId $TenantText -All | Select-Object DisplayName, ImmutableID | Sort-Object DisplayName"
			$TextboxResults.text = Get-MsolUser -TenantId $PartnerComboBox.SelectedItem.TenantID -All | Select-Object DisplayName, ImmutableID | Sort-Object DisplayName | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all users ImmutableID..."
			$textboxDetails.Text = "Get-MsolUser -All | Select-Object DisplayName, ImmutableID"
			$TextboxResults.text = Get-MsolUser -All | Select-Object DisplayName, ImmutableID | Sort-Object DisplayName | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getAUsersImmutableIDToolStripMenuItem_Click = {
	Do
	{
		$SelectUsersFormText = "Select the User you want to get the ImmutableID of"
		#Call-SelectUsersForm_psf
		Show-SelectCachedUserPrincipalName_psf
		#$GlobalUPN = $SelectUsersForm_comboboxUsers
		$GlobalUPN = $SelectCachedUserPrincipalName_comboboxUPN
		Try
		{
			If (!$GlobalUPN)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User selected, please select a User.", "Error")
			}
			ElseIf (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting ImmutableID for $GlobalUPN..."
				$textboxDetails.Text = "Get-MsolUser -UserPrincipalName $GlobalUPN | Select-Object DisplayName, ImmutableID"
				$TextboxResults.text = Get-MsolUser -UserPrincipalName $GlobalUPN | Select-Object DisplayName, ImmutableID | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
			{
				$TenantText = $PartnerComboBox.text
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting detailed ImmutableID for $GlobalUPN..."
				$textboxDetails.Text = "Get-MsolUser -UserPrincipalName $GlobalUPN -TenantId $TenantText | Select-Object DisplayName, ImmutableID"
				$TextboxResults.text = Get-MsolUser -UserPrincipalName $GlobalUPN -TenantId $PartnerComboBox.SelectedItem.TenantID | Select-Object DisplayName, ImmutableID | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting ImmutableID for $GlobalUPN..."
				$textboxDetails.Text = "Get-MsolUser -UserPrincipalName $GlobalUPN | Select-Object DisplayName, ImmutableID"
				$TextboxResults.text = Get-MsolUser -UserPrincipalName $GlobalUPN | Select-Object DisplayName, ImmutableID | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get the ImmutableID for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$setAUsersImmutableIDToolStripMenuItem_Click = {
	Do
	{
		$SelectUsersFormText = "Select the User you want to set the ImmutableID for"
		#Call-SelectUsersForm_psf
		Show-SelectCachedUserPrincipalName_psf
		#$GlobalUPN = $SelectUsersForm_comboboxUsers
		$GlobalUPN = $SelectCachedUserPrincipalName_comboboxUPN
		Try
		{
			If (!$GlobalUPN)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User selected, please select a User.", "Error")
			}
			Else
			{
				$ImmutableIDVar = Read-Host "Please enter the ImmutableID you want to set for $GlobalUPN..."
				If (!$ImmutableIDVar)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No ImmutableID value was entered for $GlobalUPN! Please enter a valid ImmutableID.", "Error")
				}
				Else
				{
					If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Setting the ImmutableID for $GlobalUPN..."
						$textboxDetails.Text = "Set-MsolUser -UserPrincipalName $GlobalUPN -ImmutableID $ImmutableIDVar"
						Set-MsolUser -UserPrincipalName $GlobalUPN -ImmutableID $ImmutableIDVar
						$TextboxResults.text = Get-MsolUser -UserPrincipalName $GlobalUPN | Select-Object DisplayName, ImmutableID | Out-String -Width 2147483647
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
					ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
					{
						$TenantText = $PartnerComboBox.text
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Setting the ImmutableID for $GlobalUPN..."
						$textboxDetails.Text = "Set-MsolUser -TenantId $TenantText  -UserPrincipalName $GlobalUPN -ImmutableID $ImmutableIDVar"
						Set-MsolUser TenantId $PartnerComboBox.SelectedItem.TenantID -UserPrincipalName $GlobalUPN -ImmutableID $ImmutableIDVar
						$TextboxResults.text = Get-MsolUser TenantId $PartnerComboBox.SelectedItem.TenantID -UserPrincipalName $GlobalUPN | Select-Object DisplayName, ImmutableID | Out-String -Width 2147483647
						$FormO365AdministrationCenter.Cursor = 'Default'
						
					}
					Else
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Setting the ImmutableID for $GlobalUPN..."
						$textboxDetails.Text = "Set-MsolUser -UserPrincipalName $GlobalUPN -ImmutableID $ImmutableIDVar"
						Set-MsolUser -UserPrincipalName $GlobalUPN -ImmutableID $ImmutableIDVar
						$TextboxResults.text = Get-MsolUser -UserPrincipalName $GlobalUPN | Select-Object DisplayName, ImmutableID | Out-String -Width 2147483647
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to set the ImmutableID for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getAllGroupsToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.text = "Getting all Groups..."
		$textboxDetails.Text = "Get-Groups | Format-Table"
		$TextboxResults.text = Get-Groups | Format-Table | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getAllRecipientsToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.text = "Getting all Recipients..."
		$textboxDetails.Text = "Get-Recipient -ResultSize unlimited"
		$TextboxResults.text = Get-Recipient -ResultSize unlimited | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getAllSiteTemplatesToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.text = "Getting all Site Templates..."
		$textboxDetails.Text = "Get-SPOWebTemplate"
		$TextboxResults.text = Get-SPOWebTemplate | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getSharePointOnlinePropertiesToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.text = "Getting all SharePoint Site Online Organization Properties..."
		$textboxDetails.Text = "Get-SPOTenant"
		$TextboxResults.text = Get-SPOTenant | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}



$getSharePointOnlineLogsToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.text = "Getting all SharePoint Organization logs..."
		$textboxDetails.Text = "Get-SPOTenantLogEntry"
		$TextboxResults.text = Get-SPOTenantLogEntry | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getAllActivityAlertsToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.text = "Getting all Activity Alerts..."
		$textboxDetails.Text = "Get-ActivityAlert"
		$TextboxResults.text = Get-ActivityAlert | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$newActivityAlertToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$ActivityReport = Read-Host "Enter a name for the new Activity Report"
			If (!$ActivityReport)
			{
				[System.Windows.Forms.MessageBox]::Show("No name was entered for the Activity Report, please enter a valid name", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.text = "Getting all Activity Alerts..."
				$textboxDetails.Text = "New-ActivityAlert -Identity $ActivityReport"
				$TextboxResults.text = New-ActivityAlert -Identity $ActivityReport | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to create another Activity Report?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$disableOutlookAnyWhereForAUserToolStripMenuItem_Click={
	Do
	{
		Try
		{
			#$ResetPasswordUser = Read-Host "Enter the UPN of the user you want to reset the password for"
			$SelectUsersFormText = "Select the User you want to disable Outlook AnyWhere for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPNrpp = $SelectUsersForm_comboboxUsers
			$GlobalUPNrpp = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$GlobalUPNrpp)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			
			Else
			{
				
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Disabling Outlook AnyWhere for $GlobalUPNrpp..."
				$textboxDetails.Text = "Set-CASMailbox $GlobalUPNrpp -MAPIEnabled `$False"
				Set-CASMailbox $GlobalUPNrpp -MAPIEnabled $False 
				$TextboxResults.Text = Get-CASMailbox $GlobalUPNrpp | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
				
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to disable Outlook AnyWhere for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
}

$enableOutlookAnyWhereForAUserToolStripMenuItem_Click={
	Do
	{
		Try
		{
			#$ResetPasswordUser = Read-Host "Enter the UPN of the user you want to reset the password for"
			$SelectUsersFormText = "Select the User you want to enable Outlook AnyWhere for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPNrpp = $SelectUsersForm_comboboxUsers
			$GlobalUPNrpp = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$GlobalUPNrpp)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			
			Else
			{
				
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Enabling Outlook AnyWhere for $GlobalUPNrpp..."
				$textboxDetails.Text = "Set-CASMailbox $GlobalUPNrpp -MAPIEnabled `$True"
				Set-CASMailbox $GlobalUPNrpp -MAPIEnabled $True
				$TextboxResults.Text = Get-CASMailbox $GlobalUPNrpp | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
				
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to enable Outlook AnyWhere for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
}



$disableOutlookAnyWhereForAllUsersToolStripMenuItem_Click={
	Try
	{
		
		
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Disabling Outlook AnyWhere for all users..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize Unlimited | Set-CASMailbox -MAPIEnabled `$False"
		Get-Mailbox -ResultSize Unlimited | Set-CASMailbox -MAPIEnabled $False
		$TextboxResults.Text = Get-Mailbox -ResultSize Unlimited | Get-CASMailbox | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
		
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	

}

$getClientAccessSettingsForAllUsersToolStripMenuItem_Click={
	Try
	{
		
		
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Client Access Settings for all users..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize Unlimited | Get-CASMailbox"
		$TextboxResults.Text = Get-Mailbox -ResultSize Unlimited | Get-CASMailbox | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
		
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getClientAccessSettingsForAUserToolStripMenuItem_Click={
	Do
	{
		Try
		{
			#$ResetPasswordUser = Read-Host "Enter the UPN of the user you want to reset the password for"
			$SelectUsersFormText = "Select the User you want to get Client Access Settings for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPNrpp = $SelectUsersForm_comboboxUsers
			$GlobalUPNrpp = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$GlobalUPNrpp)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			
			Else
			{
				
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting Client Access Settings for $GlobalUPNrpp..."
				$textboxDetails.Text = "Get-CASMailbox $GlobalUPNrpp"
				$TextboxResults.Text =  Get-CASMailbox $GlobalUPNrpp | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
				
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get Client Access Settings for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
	
}

$enableOutlookAnyWhereForAllUsersToolStripMenuItem_Click={
	Try
	{
		
		
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Enabling Outlook AnyWhere for all users..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize Unlimited | Set-CASMailbox -MAPIEnabled `$True"
		Get-Mailbox -ResultSize Unlimited | Set-CASMailbox -MAPIEnabled $True
		$TextboxResults.Text = Get-Mailbox -ResultSize Unlimited | Get-CASMailbox | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
		
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$disableAllClientAccessSettingsForAUserToolStripMenuItem_Click={
	Do
	{
		Try
		{
			#$ResetPasswordUser = Read-Host "Enter the UPN of the user you want to reset the password for"
			$SelectUsersFormText = "Select the User you want to disable all Client Access Settings for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPNrpp = $SelectUsersForm_comboboxUsers
			$GlobalUPNrpp = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$GlobalUPNrpp)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			
			Else
			{
				
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Disabling all Client Access Settings for $GlobalUPNrpp..."
				$textboxDetails.Text = "Set-CASMailbox $GlobalUPNrpp -ActiveSyncEnabled `$False -OWAEnabled `$False -PopEnabled `$False -ImapEnabled `$False -MapiEnabled `$False"
				Set-CASMailbox $GlobalUPNrpp -ActiveSyncEnabled $False -OWAEnabled $False -PopEnabled $False -ImapEnabled $False -MapiEnabled $False
				$TextboxResults.Text = Get-CASMailbox $GlobalUPNrpp | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
				
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to disable all Client Access Settings for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
	
}

$enableAllClientAccessSettingsForAUserToolStripMenuItem_Click={
	Do
	{
		Try
		{
			#$ResetPasswordUser = Read-Host "Enter the UPN of the user you want to reset the password for"
			$SelectUsersFormText = "Select the User you want to enable all Client Access Settings for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPNrpp = $SelectUsersForm_comboboxUsers
			$GlobalUPNrpp = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$GlobalUPNrpp)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			
			Else
			{
				
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Enabling all Client Access Settings for $GlobalUPNrpp..."
				$textboxDetails.Text = "Set-CASMailbox $GlobalUPNrpp -ActiveSyncEnabled `$True -OWAEnabled `$True -PopEnabled `$True -ImapEnabled `$True -MapiEnabled `$True"
				Set-CASMailbox $GlobalUPNrpp -ActiveSyncEnabled $True -OWAEnabled $True -PopEnabled $True -ImapEnabled $True -MapiEnabled $True
				$TextboxResults.Text = Get-CASMailbox $GlobalUPNrpp | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
				
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to disable all Client Access Settings for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
}

$getDetailedClientAccessInformationForAUserToolStripMenuItem_Click={
	Do
	{
		Try
		{
			#$ResetPasswordUser = Read-Host "Enter the UPN of the user you want to reset the password for"
			$SelectUsersFormText = "Select the User you want to get detailed Client Access Settings for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPNrpp = $SelectUsersForm_comboboxUsers
			$GlobalUPNrpp = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$GlobalUPNrpp)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			
			Else
			{
				
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting detailed Client Access Settings for $GlobalUPNrpp..."
				$textboxDetails.Text = "Get-CASMailbox $GlobalUPNrpp | Format-List "
				$TextboxResults.Text = Get-CASMailbox $GlobalUPNrpp | Format-List | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
				
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get detailed Client Access Settings for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
	
}

$disableAllClientAccessSettingsForAllUsersToolStripMenuItem_Click={
	Try
	{
		
		
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Disabling all Client Access Settings for all users..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize Unlimited | Set-CASMailbox  -ActiveSyncEnabled `$False -OWAEnabled `$False -PopEnabled `$False -ImapEnabled `$False -MapiEnabled `$False"
		Get-Mailbox -ResultSize Unlimited | Set-CASMailbox -ActiveSyncEnabled $False -OWAEnabled $False -PopEnabled $False -ImapEnabled $False -MapiEnabled $False
		$TextboxResults.Text = Get-Mailbox -ResultSize Unlimited | Get-CASMailbox | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
		
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$enableAllClientAccessSettingsForAllUsersToolStripMenuItem_Click={
	Try
	{
		
		
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Enabling all Client Access Settings for all users..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize Unlimited | Set-CASMailbox  -ActiveSyncEnabled `$True -OWAEnabled `$True -PopEnabled `$True -ImapEnabled `$True -MapiEnabled `$True"
		Get-Mailbox -ResultSize Unlimited | Set-CASMailbox -ActiveSyncEnabled $FTrue -OWAEnabled $True -PopEnabled $True -ImapEnabled $True -MapiEnabled $True
		$TextboxResults.Text = Get-Mailbox -ResultSize Unlimited | Get-CASMailbox | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
		
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getOutlookAnyWhereStatusForAUserToolStripMenuItem_Click={
	Do
	{
		Try
		{
			#$ResetPasswordUser = Read-Host "Enter the UPN of the user you want to reset the password for"
			$SelectUsersFormText = "Select the User you want to get the Outlook AnyWhere status for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPNrpp = $SelectUsersForm_comboboxUsers
			$GlobalUPNrpp = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$GlobalUPNrpp)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			
			Else
			{
				
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting the Outlook AnyWhere status for $GlobalUPNrpp..."
				$textboxDetails.Text = "Get-CASMailbox $GlobalUPNrpp | Select-Object Name, MAPIEnabled "
				$TextboxResults.Text = Get-CASMailbox $GlobalUPNrpp | Select-Object Name, MAPIEnabled | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
				
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get the Outlook AnyWhere status for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
}

$getActiveSyncStatusForAUserToolStripMenuItem_Click={
	Do
	{
		Try
		{
			#$ResetPasswordUser = Read-Host "Enter the UPN of the user you want to reset the password for"
			$SelectUsersFormText = "Select the User you want to get the ActiveSync status for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPNrpp = $SelectUsersForm_comboboxUsers
			$GlobalUPNrpp = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$GlobalUPNrpp)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			
			Else
			{
				
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting the ActiveSync status for $GlobalUPNrpp..."
				$textboxDetails.Text = "Get-CASMailbox $GlobalUPNrpp | Select-Object Name, ActiveSyncEnabled "
				$TextboxResults.Text = Get-CASMailbox $GlobalUPNrpp | Select-Object Name, MAPIEnabled | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
				
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get the ActiveSync status for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
	
}

$disableActiveSyncForAUserToolStripMenuItem1_Click={
	Do
	{
		Try
		{
			#$ResetPasswordUser = Read-Host "Enter the UPN of the user you want to reset the password for"
			$SelectUsersFormText = "Select the User you want to disable ActiveSync for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPNrpp = $SelectUsersForm_comboboxUsers
			$GlobalUPNrpp = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$GlobalUPNrpp)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			
			Else
			{
				
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Disabling ActiveSync for $GlobalUPNrpp..."
				$textboxDetails.Text = "Set-CASMailbox $GlobalUPNrpp -ActiveSyncEnabled `$False"
				Set-CASMailbox $GlobalUPNrpp -ActiveSyncEnabled $False
				$TextboxResults.Text = Get-CASMailbox $GlobalUPNrpp | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
				
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to disable ActiveSync for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
}

$enableActiveSyncForAUserToolStripMenuItem1_Click={
	Do
	{
		Try
		{
			#$ResetPasswordUser = Read-Host "Enter the UPN of the user you want to reset the password for"
			$SelectUsersFormText = "Select the User you want to enable ActiveSync for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPNrpp = $SelectUsersForm_comboboxUsers
			$GlobalUPNrpp = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$GlobalUPNrpp)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			
			Else
			{
				
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Enabling ActiveSync for $GlobalUPNrpp..."
				$textboxDetails.Text = "Set-CASMailbox $GlobalUPNrpp -ActiveSyncEnabled `$True"
				Set-CASMailbox $GlobalUPNrpp -ActiveSyncEnabled $True
				$TextboxResults.Text = Get-CASMailbox $GlobalUPNrpp | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
				
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to Enable ActiveSync for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
}

$disableActiveSyncForAllUsersToolStripMenuItem_Click={
	Try
	{
		
		
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Disabling ActiveSync for all users..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize Unlimited | Set-CASMailbox -ActiveSyncEnabled `$False"
		Get-Mailbox -ResultSize Unlimited | Set-CASMailbox -ActiveSyncEnabled $False
		$TextboxResults.Text = Get-Mailbox -ResultSize Unlimited | Get-CASMailbox | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
		
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$enableActiveSyncForAllUsersToolStripMenuItem_Click={
	Try
	{
		
		
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Enabling ActiveSync for all users..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize Unlimited | Set-CASMailbox -ActiveSyncEnabled `$True"
		Get-Mailbox -ResultSize Unlimited | Set-CASMailbox -ActiveSyncEnabled $True
		$TextboxResults.Text = Get-Mailbox -ResultSize Unlimited | Get-CASMailbox | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
		
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getIMAPStatusForAUserToolStripMenuItem_Click={
	Do
	{
		Try
		{
			#$ResetPasswordUser = Read-Host "Enter the UPN of the user you want to reset the password for"
			$SelectUsersFormText = "Select the User you want to get the IMAP status for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPNrpp = $SelectUsersForm_comboboxUsers
			$GlobalUPNrpp = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$GlobalUPNrpp)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			
			Else
			{
				
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting the IMAP status for $GlobalUPNrpp..."
				$textboxDetails.Text = "Get-CASMailbox $GlobalUPNrpp | Select-Object Name, ImapEnabled"
				$TextboxResults.Text = Get-CASMailbox $GlobalUPNrpp | Select-Object Name, ImapEnabled | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
				
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get the IMAP status for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
}

$disableIMAPForAUserToolStripMenuItem_Click={
	Do
	{
		Try
		{
			#$ResetPasswordUser = Read-Host "Enter the UPN of the user you want to reset the password for"
			$SelectUsersFormText = "Select the User you want to disable IMAP for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPNrpp = $SelectUsersForm_comboboxUsers
			$GlobalUPNrpp = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$GlobalUPNrpp)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			
			Else
			{
				
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Disabling IMAP for $GlobalUPNrpp..."
				$textboxDetails.Text = "Set-CASMailbox $GlobalUPNrpp -ImapEnabled `$False"
				Set-CASMailbox $GlobalUPNrpp -ImapEnabled $False
				$TextboxResults.Text = Get-CASMailbox $GlobalUPNrpp | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
				
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to disable IMAP for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
	
}

$enableIMAPForAUserToolStripMenuItem_Click={
	Do
	{
		Try
		{
			#$ResetPasswordUser = Read-Host "Enter the UPN of the user you want to reset the password for"
			$SelectUsersFormText = "Select the User you want to enable IMAP for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPNrpp = $SelectUsersForm_comboboxUsers
			$GlobalUPNrpp = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$GlobalUPNrpp)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			
			Else
			{
				
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Disabling IMAP for $GlobalUPNrpp..."
				$textboxDetails.Text = "Set-CASMailbox $GlobalUPNrpp -ImapEnabled `$True"
				Set-CASMailbox $GlobalUPNrpp -ImapEnabled $True
				$TextboxResults.Text = Get-CASMailbox $GlobalUPNrpp | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
				
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to enable IMAP for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
}

$disableIMAPForAllUsersToolStripMenuItem_Click={
	Try
	{
		
		
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Disabling IMAP for all users..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize Unlimited | Set-CASMailbox -ImapEnabled `$False"
		Get-Mailbox -ResultSize Unlimited | Set-CASMailbox -ImapEnabled $False
		$TextboxResults.Text = Get-Mailbox -ResultSize Unlimited | Get-CASMailbox | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
		
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$enableIMAPForAllUsersToolStripMenuItem_Click={
	Try
	{
		
		
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Enabling IMAP for all users..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize Unlimited | Set-CASMailbox -ImapEnabled `$True"
		Get-Mailbox -ResultSize Unlimited | Set-CASMailbox -ImapEnabled $True
		$TextboxResults.Text = Get-Mailbox -ResultSize Unlimited | Get-CASMailbox | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
		
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getOutlookWebAccessStatusForAUserToolStripMenuItem_Click={
	Do
	{
		Try
		{
			#$ResetPasswordUser = Read-Host "Enter the UPN of the user you want to reset the password for"
			$SelectUsersFormText = "Select the User you want to get the Outlook Web Access status for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPNrpp = $SelectUsersForm_comboboxUsers
			$GlobalUPNrpp = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$GlobalUPNrpp)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			
			Else
			{
				
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting the Outlook Web Access status for $GlobalUPNrpp..."
				$textboxDetails.Text = "Get-CASMailbox $GlobalUPNrpp | Select-Object Name, OWAEnabled "
				$TextboxResults.Text = Get-CASMailbox $GlobalUPNrpp | Select-Object Name, OWAEnabled | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
				
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get the Outlook Web Access status for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
}

$disableOutlookWebAccessForAUserToolStripMenuItem_Click={
	Do
	{
		Try
		{
			#$ResetPasswordUser = Read-Host "Enter the UPN of the user you want to reset the password for"
			$SelectUsersFormText = "Select the User you want to disable Outlook Web Access for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPNrpp = $SelectUsersForm_comboboxUsers
			$GlobalUPNrpp = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$GlobalUPNrpp)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			
			Else
			{
				
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Disabling Outlook Web Access for $GlobalUPNrpp..."
				$textboxDetails.Text = "Set-CASMailbox $GlobalUPNrpp -OWAEnabled `$False"
				Set-CASMailbox $GlobalUPNrpp -OWAEnabled $False
				$TextboxResults.Text = Get-CASMailbox $GlobalUPNrpp | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
				
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to disable Outlook Web Acccess for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
}

$enableOutlookWebAccessForAUserToolStripMenuItem_Click={
	Do
	{
		Try
		{
			#$ResetPasswordUser = Read-Host "Enter the UPN of the user you want to reset the password for"
			$SelectUsersFormText = "Select the User you want to enable Outlook Web Access for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPNrpp = $SelectUsersForm_comboboxUsers
			$GlobalUPNrpp = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$GlobalUPNrpp)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			
			Else
			{
				
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Enabling Outlook Web Access for $GlobalUPNrpp..."
				$textboxDetails.Text = "Set-CASMailbox $GlobalUPNrpp -OWAEnabled `$True"
				Set-CASMailbox $GlobalUPNrpp -OWAEnabled $True
				$TextboxResults.Text = Get-CASMailbox $GlobalUPNrpp | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
				
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to True Outlook Web Acccess for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
}

$disableOutlookWebAccessForAllUsersToolStripMenuItem_Click={
	Try
	{
		
		
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Disabling Outlook Web Access for all users..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize Unlimited | Set-CASMailbox -OWAEnabled `$False"
		Get-Mailbox -ResultSize Unlimited | Set-CASMailbox -OWAEnabled $False
		$TextboxResults.Text = Get-Mailbox -ResultSize Unlimited | Get-CASMailbox | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
		
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$enableOutlookWebAccessForAllUsersToolStripMenuItem_Click={
	Try
	{
		
		
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Enabling Outlook Web Access for all users..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize Unlimited | Set-CASMailbox -OWAEnabled `$True"
		Get-Mailbox -ResultSize Unlimited | Set-CASMailbox -OWAEnabled $True
		$TextboxResults.Text = Get-Mailbox -ResultSize Unlimited | Get-CASMailbox | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
		
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getPOPStatusForAUserToolStripMenuItem_Click={
	Do
	{
		Try
		{
			#$ResetPasswordUser = Read-Host "Enter the UPN of the user you want to reset the password for"
			$SelectUsersFormText = "Select the User you want to get the POP status for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPNrpp = $SelectUsersForm_comboboxUsers
			$GlobalUPNrpp = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$GlobalUPNrpp)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			
			Else
			{
				
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting the POP status for $GlobalUPNrpp..."
				$textboxDetails.Text = "Get-CASMailbox $GlobalUPNrpp | Select-Object Name, PopEnabled "
				$TextboxResults.Text = Get-CASMailbox $GlobalUPNrpp | Select-Object Name, PopEnabled | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
				
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get the POP status for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
	
}

$disablePOPForAUserToolStripMenuItem_Click={
	Do
	{
		Try
		{
			#$ResetPasswordUser = Read-Host "Enter the UPN of the user you want to reset the password for"
			$SelectUsersFormText = "Select the User you want to disable POP for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPNrpp = $SelectUsersForm_comboboxUsers
			$GlobalUPNrpp = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$GlobalUPNrpp)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			
			Else
			{
				
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Disabling POP for $GlobalUPNrpp..."
				$textboxDetails.Text = "Set-CASMailbox $GlobalUPNrpp -PopEnabled `$False"
				Set-CASMailbox $GlobalUPNrpp -PopEnabled $False
				$TextboxResults.Text = Get-CASMailbox $GlobalUPNrpp | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
				
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to disable POP for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
	
}

$enablePOPForAUserToolStripMenuItem_Click={
	Try
	{
		
		
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Enabling POP for all users..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize Unlimited | Set-CASMailbox -PopEnabled `$True"
		Get-Mailbox -ResultSize Unlimited | Set-CASMailbox -PopEnabled $True
		$TextboxResults.Text = Get-Mailbox -ResultSize Unlimited | Get-CASMailbox | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
		
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$disablePOPForAllUsersToolStripMenuItem_Click={
	Try
	{
		
		
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Disabling POP for all users..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize Unlimited | Set-CASMailbox -PopEnabled `$False"
		Get-Mailbox -ResultSize Unlimited | Set-CASMailbox -PopEnabled $False
		$TextboxResults.Text = Get-Mailbox -ResultSize Unlimited | Get-CASMailbox | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
		
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$clearAllUsersImmutableIDToolStripMenuItem_Click={
	Try
	{
		$OUTPUT = [System.Windows.Forms.MessageBox]::Show("Are you sure you want to clear all users ImmutableID?.", "Warning!", 4)
		If ($OUTPUT -eq "YES")
		{
			
			#What to do if connected to main o365 account
			If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Clearing all users ImmutableID..."
				$textboxDetails.Text = "Get-MSOLUser -All | Set-MSOLUser -ImmutableID '`$Null'"
				Get-MSOLUser -All | Set-MSOLUser -ImmutableID "$Null"
				$TextboxResults.Text = Get-MsolUser -All | Select-Object DisplayName, ImmutableID | Sort-Object DisplayName | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			#What to do if connected to partner account
			ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
			{
				$TenantText = $PartnerComboBox.text
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Clearing all users ImmutableID..."
				$textboxDetails.Text = "Get-MSOLUser -TenantId $TenantText -All | Set-MSOLUser -TenantId $TenantText -ImmutableID '`$Null'"
				Get-MSOLUser -TenantId $PartnerComboBox.SelectedItem.TenantID -All | Set-MSOLUser -TenantId $PartnerComboBox.SelectedItem.TenantID -ImmutableID "$Null"
				$TextboxResults.Text = Get-MsolUser -TenantId $PartnerComboBox.SelectedItem.TenantID -All | Select-Object DisplayName, ImmutableID | Sort-Object DisplayName | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Clearing all users ImmutableID..."
				$textboxDetails.Text = "Get-MSOLUser -All | Set-MSOLUser -ImmutableID '`$Null'"
				Get-MSOLUser -All | Set-MSOLUser -ImmutableID "$Null"
				$TextboxResults.Text = Get-MsolUser -All | Select-Object DisplayName, ImmutableID | Sort-Object DisplayName | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Else
		{
			[System.Windows.Forms.MessageBox]::Show("All users ImmutableID has not been changed", "Info")
		}
	}
	
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
	
}

$getAllUsersWith2FAEnabledToolStripMenuItem_Click = {
	Try
	{
		
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all users with 2FA enabled..."
			$textboxDetails.Text = "Get-MsolUser | Where-Object { `$_.StrongAuthenticationRequirements -like ' * ' } | Select-Object UserPrincipalName, StrongAuthenticationMethods, StrongAuthenticationRequirements "
			#Find all MFA enabled users
			$TextboxResults.Text = Get-MsolUser -All | Where-Object { $_.StrongAuthenticationRequirements -like "*" } | Select-Object UserPrincipalName, StrongAuthenticationMethods, StrongAuthenticationRequirements | Sort-Object UserPrincipalName | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all users with 2FA enabled..."
			$textboxDetails.Text = "Get-MsolUser | Where-Object { `$_.StrongAuthenticationRequirements -like ' * ' } | Select-Object UserPrincipalName, StrongAuthenticationMethods, StrongAuthenticationRequirements "
			#Find all MFA enabled users
			$TextboxResults.Text = Get-MsolUser -All -TenantId $PartnerComboBox.SelectedItem.TenantID | Where-Object { $_.StrongAuthenticationRequirements -like "*" } | Select-Object UserPrincipalName, StrongAuthenticationMethods, StrongAuthenticationRequirements | Sort-Object UserPrincipalName | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all users with 2FA enabled..."
			$textboxDetails.Text = "Get-MsolUser | Where-Object { `$_.StrongAuthenticationRequirements -like ' * ' } | Select-Object UserPrincipalName, StrongAuthenticationMethods, StrongAuthenticationRequirements "
			#Find all MFA enabled users
			$TextboxResults.Text = Get-MsolUser -All | Where-Object { $_.StrongAuthenticationRequirements -like "*" } | Select-Object UserPrincipalName, StrongAuthenticationMethods, StrongAuthenticationRequirements | Sort-Object UserPrincipalName | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		
		
		
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
	
}

$getAllUsersWith2FADisabledToolStripMenuItem_Click={
	Try
	{
		
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all users with 2FA disabled..."
			$textboxDetails.Text = "Get-MsolUser -All | Where-Object { `$_.StrongAuthenticationMethods -like ' * ' } | Select-Object UserPrincipalName, StrongAuthenticationMethods, StrongAuthenticationRequirements "
			#Find all MFA enabled users
			$TextboxResults.Text = Get-MsolUser -All | Where-Object { $_.StrongAuthenticationMethods -like "*" } | Select-Object UserPrincipalName, StrongAuthenticationMethods, StrongAuthenticationRequirements | Sort-Object UserPrincipalName | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all users with 2FA disabled..."
			$textboxDetails.Text = "Get-MsolUser -All | Where-Object { `$_.StrongAuthenticationMethods -like ' * ' } | Select-Object UserPrincipalName, StrongAuthenticationMethods, StrongAuthenticationRequirements "
			#Find all MFA enabled users
			$TextboxResults.Text = Get-MsolUser -All -TenantId $PartnerComboBox.SelectedItem.TenantID | Where-Object { $_.StrongAuthenticationMethods -like "*" } | Select-Object UserPrincipalName, StrongAuthenticationMethods, StrongAuthenticationRequirements | Sort-Object UserPrincipalName | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all users with 2FA disabled..."
			$textboxDetails.Text = "Get-MsolUser -All | Where-Object { `$_.StrongAuthenticationMethods -like ' * ' } | Select-Object UserPrincipalName, StrongAuthenticationMethods, StrongAuthenticationRequirements "
			#Find all MFA enabled users
			$TextboxResults.Text = Get-MsolUser -All | Where-Object { $_.StrongAuthenticationMethods -like "*" } | Select-Object UserPrincipalName, StrongAuthenticationMethods, StrongAuthenticationRequirements | Sort-Object UserPrincipalName | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		
		
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$enableCachedCredentialsToolStripMenuItem_Click={
	Try
	{
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name CredMem -Value 1 -Force | Out-Null
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("Cached Credentials have been enabled", "Info")
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getLastDirSyncTimeToolStripMenuItem_Click={
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting last DirSync time..."
			$textboxDetails.Text = "Get-MsolCompanyInformation | Format-List LastDirSyncTime"
			$TextboxResults.Text = Get-MsolCompanyInformation | Format-List LastDirSyncTime | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting last DirSync time..."
			$textboxDetails.Text = "Get-MsolCompanyInformation -TenantId $TenantText | Format-List LastDirSyncTime"
			$TextboxResults.Text = Get-MsolCompanyInformation -TenantId $PartnerComboBox.SelectedItem.TenantID | Format-List LastDirSyncTime | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting last DirSync time..."
			$textboxDetails.Text = "Get-MsolCompanyInformation | Format-List LastDirSyncTime"
			$TextboxResults.Text = Get-MsolCompanyInformation | Format-List LastDirSyncTime | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getDirSyncServiceAccountToolStripMenuItem_Click={
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting DirSync service account..."
			$textboxDetails.Text = "Get-MsolCompanyInformation | Format-List DirSyncServiceAccount"
			$TextboxResults.Text = Get-MsolCompanyInformation | Format-List DirSyncServiceAccount | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting DirSync service account..."
			$textboxDetails.Text = "Get-MsolCompanyInformation -TenantId $TenantText | Format-List DirSyncServiceAccount"
			$TextboxResults.Text = Get-MsolCompanyInformation -TenantId $PartnerComboBox.SelectedItem.TenantID | Format-List DirSyncServiceAccount | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting DirSync service account..."
			$textboxDetails.Text = "Get-MsolCompanyInformation | Format-List DirSyncServiceAccount"
			$TextboxResults.Text = Get-MsolCompanyInformation | Format-List DirSyncServiceAccount | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$enableDirSyncTenantWideToolStripMenuItem_Click={
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Enabling DirSync..."
			$textboxDetails.Text = "Set-MsolDirSyncEnabled -EnableDirSync `$True"
			$TextboxResults.Text = Set-MsolDirSyncEnabled -EnableDirSync $True | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Enabling DirSync..."
			$textboxDetails.Text = "Set-MsolDirSyncEnabled -TenantId $TenantText -EnableDirSync `$True"
			$TextboxResults.Text = Set-MsolDirSyncEnabled -TenantId $PartnerComboBox.SelectedItem.TenantID -EnableDirSync $True | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Disabling DirSync..."
			$textboxDetails.Text = "Set-MsolDirSyncEnabled -EnableDirSync `$True"
			$TextboxResults.Text = Set-MsolDirSyncEnabled -EnableDirSync $True | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$disableDirSyncTenantWideToolStripMenuItem_Click={
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Disabling DirSync..."
			$textboxDetails.Text = "Set-MsolDirSyncEnabled -EnableDirSync `$False"
			$TextboxResults.Text = Set-MsolDirSyncEnabled -EnableDirSync $False | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Disabling DirSync..."
			$textboxDetails.Text = "Set-MsolDirSyncEnabled -TenantId $TenantText -EnableDirSync `$False"
			$TextboxResults.Text = Set-MsolDirSyncEnabled -TenantId $PartnerComboBox.SelectedItem.TenantID -EnableDirSync $False  | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Disabling DirSync..."
			$textboxDetails.Text = "Set-MsolDirSyncEnabled -EnableDirSync `$False"
			$TextboxResults.Text = Set-MsolDirSyncEnabled -EnableDirSync $False | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getLastPasswordSyncTimeToolStripMenuItem1_Click={
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting last Password Sync time..."
			$textboxDetails.Text = "Get-MsolCompanyInformation | Format-List LastPasswordSyncTime "
			$TextboxResults.Text = Get-MsolCompanyInformation | Format-List LastPasswordSyncTime  | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting last Password time..."
			$textboxDetails.Text = "Get-MsolCompanyInformation -TenantId $TenantText | Format-List LastPasswordSyncTime"
			$TextboxResults.Text = Get-MsolCompanyInformation -TenantId $PartnerComboBox.SelectedItem.TenantID | Format-List LastPasswordSyncTime  | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting last Password time..."
			$textboxDetails.Text = "Get-MsolCompanyInformation | Format-List LastPasswordSyncTime "
			$TextboxResults.Text = Get-MsolCompanyInformation | Format-List LastPasswordSyncTime  | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
	
}

$getDirSyncStatusToolStripMenuItem_Click={
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting Password Sync Status..."
			$textboxDetails.Text = "Get-MsolCompanyInformation | Format-List PasswordSynchronizationEnabled "
			$TextboxResults.Text = Get-MsolCompanyInformation | Format-List PasswordSynchronizationEnabled | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting Password Sync Status..."
			$textboxDetails.Text = "Get-MsolCompanyInformation -TenantId $TenantText | Format-List PasswordSynchronizationEnabled"
			$TextboxResults.Text = Get-MsolCompanyInformation -TenantId $PartnerComboBox.SelectedItem.TenantID | Format-List PasswordSynchronizationEnabled | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting Password Sync Status..."
			$textboxDetails.Text = "Get-MsolCompanyInformation | Format-List PasswordSynchronizationEnabled "
			$TextboxResults.Text = Get-MsolCompanyInformation | Format-List PasswordSynchronizationEnabled| Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getPasswordSyncStatusToolStripMenuItem_Click={
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting DirSync Status..."
			$textboxDetails.Text = "Get-MsolCompanyInformation | Format-List DirectorySynchronizationEnabled"
			$TextboxResults.Text = Get-MsolCompanyInformation | Format-List DirectorySynchronizationEnabled | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting Password Sync Status..."
			$textboxDetails.Text = "Get-MsolCompanyInformation -TenantId $TenantText | Format-List DirectorySynchronizationEnabled"
			$TextboxResults.Text = Get-MsolCompanyInformation -TenantId $PartnerComboBox.SelectedItem.TenantID | Format-List DirectorySynchronizationEnabled | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting Password Sync Status..."
			$textboxDetails.Text = "Get-MsolCompanyInformation | Format-List DirectorySynchronizationEnabled"
			$TextboxResults.Text = Get-MsolCompanyInformation | Format-List DirectorySynchronizationEnabled | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getDirSyncErrorsToolStripMenuItem_Click={
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting DirSync Errors..."
			$textboxDetails.Text = "Get-MsolDirSyncProvisioningError"
			$TextboxResults.Text = Get-MsolDirSyncProvisioningError | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting DirSync Errors..."
			$textboxDetails.Text = "Get-MsolDirSyncProvisioningError -TenantId $TenantText"
			$TextboxResults.Text = Get-MsolDirSyncProvisioningError -TenantId $PartnerComboBox.SelectedItem.TenantID | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting DirSync Errors..."
			$textboxDetails.Text = "Get-MsolDirSyncProvisioningError"
			$TextboxResults.Text = Get-MsolDirSyncProvisioningError | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getPartnerInformationToolStripMenuItem_Click={
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting Partner Information..."
			$textboxDetails.Text = "Get-MsolPartnerInformation"
			$TextboxResults.Text = Get-MsolPartnerInformation | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting Partner Information..."
			$textboxDetails.Text = "Get-MsolPartnerInformation -TenantId $TenantText"
			$TextboxResults.Text = Get-MsolPartnerInformation -TenantId $PartnerComboBox.SelectedItem.TenantID | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting Partner Information..."
			$textboxDetails.Text = "Get-MsolPartnerInformation"
			$TextboxResults.Text = Get-MsolPartnerInformation | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}



$setNewCachedCredentialsToolStripMenuItem_Click = {
	Try
	{
		$global:o365credentials = (Get-Credential -Message "Please enter your Office 365 credentials")
		$TempDir = $env:temp
		$O365AdminTempFolderCreds = ("$TempDir" + "\O365AdminCenter_Creds")
		#Create temporary directory
		#[system.io.directory]::CreateDirectory("$O365AdminTempFolderCreds")
		$global:o365credentials | Export-Clixml -path $O365AdminTempFolderCreds\Creds.xml -Force
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name CredMem -Value 1 -Force | Out-Null
		[System.Windows.Forms.MessageBox]::Show("The new credentials have been saved!", "Info", "OK", "Info")
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getAllGlobalAdminsToolStripMenuItem_Click = {
	$Role = "Company Administrators"
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$O365ROLE = Get-MsolRole -RoleName "Company Administrator"
			$TextboxResults.Text = "Getting All $Role..."
			$textboxDetails.Text = "`$O365ROLE = Get-MsolRole -RoleName 'Company Administrator'
Get-MsolRoleMember -All -RoleObjectId `$O365ROLE.ObjectId"
			$TextboxResults.Text = Get-MsolRoleMember -All -RoleObjectId $O365ROLE.ObjectId | Out-String -Width 2147483647
			
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$O365ROLE = Get-MsolRole -TenantId $PartnerComboBox.SelectedItem.TenantID -RoleName "Company Administrator"
			$TextboxResults.Text = "Getting All $Role..."
			$textboxDetails.Text = "`$O365ROLE = Get-MsolRole -RoleName 'Company Administrator'
Get-MsolRoleMember -All -RoleObjectId `$O365ROLE.ObjectId"
			$TextboxResults.Text = Get-MsolRoleMember -TenantId $PartnerComboBox.SelectedItem.TenantID -All -RoleObjectId $O365ROLE.ObjectId | Out-String -Width 2147483647
			
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$O365ROLE = Get-MsolRole -RoleName "Company Administrator"
			$TextboxResults.Text = "Getting All $Role..."
			$textboxDetails.Text = "`$O365ROLE = Get-MsolRole -RoleName 'Company Administrator'
Get-MsolRoleMember -All -RoleObjectId `$O365ROLE.ObjectId"
			$TextboxResults.Text = Get-MsolRoleMember -All -RoleObjectId $O365ROLE.ObjectId | Out-String -Width 2147483647
			
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
	
}

$getAllComplianceAdministratorsToolStripMenuItem_Click={
	$Role = "Compliance Administrators"
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$O365ROLE = Get-MsolRole -RoleName "Compliance Administrator"
			$TextboxResults.Text = "Getting All $Role..."
			$textboxDetails.Text = "`$O365ROLE = Get-MsolRole -RoleName 'Compliance Administrator'
Get-MsolRoleMember -All -RoleObjectId `$O365ROLE.ObjectId"
			$TextboxResults.Text = Get-MsolRoleMember -All -RoleObjectId $O365ROLE.ObjectId | Out-String -Width 2147483647
			
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$O365ROLE = Get-MsolRole -TenantId $PartnerComboBox.SelectedItem.TenantID -RoleName "Compliance Administrator"
			$TextboxResults.Text = "Getting All $Role..."
			$textboxDetails.Text = "`$O365ROLE = Get-MsolRole -RoleName 'Compliance Administrator'
Get-MsolRoleMember -All -RoleObjectId `$O365ROLE.ObjectId"
			$TextboxResults.Text = Get-MsolRoleMember -TenantId $PartnerComboBox.SelectedItem.TenantID -All -RoleObjectId $O365ROLE.ObjectId | Out-String -Width 2147483647
			
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$O365ROLE = Get-MsolRole -RoleName "Compliance Administrator"
			$TextboxResults.Text = "Getting All $Role..."
			$textboxDetails.Text = "`$O365ROLE = Get-MsolRole -RoleName 'Compliance Administrator'
Get-MsolRoleMember -All -RoleObjectId `$O365ROLE.ObjectId"
			$TextboxResults.Text = Get-MsolRoleMember -All -RoleObjectId $O365ROLE.ObjectId | Out-String -Width 2147483647
			
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getAllExchangeServiceAdministratorsToolStripMenuItem_Click={
	$Role = "Exchange Service Administrators"
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$O365ROLE = Get-MsolRole -RoleName "Exchange Service Administrator"
			$TextboxResults.Text = "Getting All $Role..."
			$textboxDetails.Text = "`$O365ROLE = Get-MsolRole -RoleName 'Exchange Service Administrator'
Get-MsolRoleMember -All -RoleObjectId `$O365ROLE.ObjectId"
			$TextboxResults.Text = Get-MsolRoleMember -All -RoleObjectId $O365ROLE.ObjectId | Out-String -Width 2147483647
			
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$O365ROLE = Get-MsolRole -TenantId $PartnerComboBox.SelectedItem.TenantID -RoleName "Exchange Service Administrator"
			$TextboxResults.Text = "Getting All $Role..."
			$textboxDetails.Text = "`$O365ROLE = Get-MsolRole -RoleName 'Exchange Service Administrator'
Get-MsolRoleMember -All -RoleObjectId `$O365ROLE.ObjectId"
			$TextboxResults.Text = Get-MsolRoleMember -TenantId $PartnerComboBox.SelectedItem.TenantID -All -RoleObjectId $O365ROLE.ObjectId | Out-String -Width 2147483647
			
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$O365ROLE = Get-MsolRole -RoleName "Exchange Service Administrator"
			$TextboxResults.Text = "Getting All $Role..."
			$textboxDetails.Text = "`$O365ROLE = Get-MsolRole -RoleName 'Exchange Service Administrator'
Get-MsolRoleMember -All -RoleObjectId `$O365ROLE.ObjectId"
			$TextboxResults.Text = Get-MsolRoleMember -All -RoleObjectId $O365ROLE.ObjectId | Out-String -Width 2147483647
			
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getAllHelpdeskAdministratorsToolStripMenuItem_Click={
	$Role = "Helpdesk Administrators"
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$O365ROLE = Get-MsolRole -RoleName "Helpdesk Administrator"
			$TextboxResults.Text = "Getting All $Role..."
			$textboxDetails.Text = "`$O365ROLE = Get-MsolRole -RoleName 'Helpdesk Administrator'
Get-MsolRoleMember -All -RoleObjectId `$O365ROLE.ObjectId"
			$TextboxResults.Text = Get-MsolRoleMember -All -RoleObjectId $O365ROLE.ObjectId | Out-String -Width 2147483647
			
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$O365ROLE = Get-MsolRole -TenantId $PartnerComboBox.SelectedItem.TenantID -RoleName "Helpdesk Administrator"
			$TextboxResults.Text = "Getting All $Role..."
			$textboxDetails.Text = "`$O365ROLE = Get-MsolRole -RoleName 'Helpdesk Administrator'
Get-MsolRoleMember -All -RoleObjectId `$O365ROLE.ObjectId"
			$TextboxResults.Text = Get-MsolRoleMember -TenantId $PartnerComboBox.SelectedItem.TenantID -All -RoleObjectId $O365ROLE.ObjectId | Out-String -Width 2147483647
			
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$O365ROLE = Get-MsolRole -RoleName "Helpdesk Administrator"
			$TextboxResults.Text = "Getting All $Role..."
			$textboxDetails.Text = "`$O365ROLE = Get-MsolRole -RoleName 'Helpdesk Administrator'
Get-MsolRoleMember -All -RoleObjectId `$O365ROLE.ObjectId"
			$TextboxResults.Text = Get-MsolRoleMember -All -RoleObjectId $O365ROLE.ObjectId | Out-String -Width 2147483647
			
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getAllDeviceUsersToolStripMenuItem_Click={
	$Role = "Device Users"
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$O365ROLE = Get-MsolRole -RoleName "Device Users"
			$TextboxResults.Text = "Getting All $Role..."
			$textboxDetails.Text = "`$O365ROLE = Get-MsolRole -RoleName 'Device Users'
Get-MsolRoleMember -All -RoleObjectId `$O365ROLE.ObjectId"
			$TextboxResults.Text = Get-MsolRoleMember -All -RoleObjectId $O365ROLE.ObjectId | Out-String -Width 2147483647
			
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$O365ROLE = Get-MsolRole -TenantId $PartnerComboBox.SelectedItem.TenantID -RoleName "Device Users"
			$TextboxResults.Text = "Getting All $Role..."
			$textboxDetails.Text = "`$O365ROLE = Get-MsolRole -RoleName 'Device Users'
Get-MsolRoleMember -All -RoleObjectId `$O365ROLE.ObjectId"
			$TextboxResults.Text = Get-MsolRoleMember -TenantId $PartnerComboBox.SelectedItem.TenantID -All -RoleObjectId $O365ROLE.ObjectId | Out-String -Width 2147483647
			
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$O365ROLE = Get-MsolRole -RoleName "Device Users"
			$TextboxResults.Text = "Getting All $Role..."
			$textboxDetails.Text = "`$O365ROLE = Get-MsolRole -RoleName 'Device Users'
Get-MsolRoleMember -All -RoleObjectId `$O365ROLE.ObjectId"
			$TextboxResults.Text = Get-MsolRoleMember -All -RoleObjectId $O365ROLE.ObjectId | Out-String -Width 2147483647
			
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getAllSharePointServiceAdministratorsToolStripMenuItem_Click={
	$Role = "SharePoint Service Administrators"
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$O365ROLE = Get-MsolRole -RoleName "SharePoint Service Administrator"
			$TextboxResults.Text = "Getting All $Role..."
			$textboxDetails.Text = "`$O365ROLE = Get-MsolRole -RoleName 'SharePoint Service Administrator'
Get-MsolRoleMember -All -RoleObjectId `$O365ROLE.ObjectId"
			$TextboxResults.Text = Get-MsolRoleMember -All -RoleObjectId $O365ROLE.ObjectId | Out-String -Width 2147483647
			
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$O365ROLE = Get-MsolRole -TenantId $PartnerComboBox.SelectedItem.TenantID -RoleName "SharePoint Service Administrator"
			$TextboxResults.Text = "Getting All $Role..."
			$textboxDetails.Text = "`$O365ROLE = Get-MsolRole -RoleName 'SharePoint Service Administrator'
Get-MsolRoleMember -All -RoleObjectId `$O365ROLE.ObjectId"
			$TextboxResults.Text = Get-MsolRoleMember -TenantId $PartnerComboBox.SelectedItem.TenantID -All -RoleObjectId $O365ROLE.ObjectId | Out-String -Width 2147483647
			
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$O365ROLE = Get-MsolRole -RoleName "SharePoint Service Administrator"
			$TextboxResults.Text = "Getting All $Role..."
			$textboxDetails.Text = "`$O365ROLE = Get-MsolRole -RoleName 'SharePoint Service Administrator'
Get-MsolRoleMember -All -RoleObjectId `$O365ROLE.ObjectId"
			$TextboxResults.Text = Get-MsolRoleMember -All -RoleObjectId $O365ROLE.ObjectId | Out-String -Width 2147483647
			
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getAllUserAccountAdministratorsToolStripMenuItem_Click={
	$Role = "User Account Administrators"
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$O365ROLE = Get-MsolRole -RoleName "User Account Administrator"
			$TextboxResults.Text = "Getting All $Role..."
			$textboxDetails.Text = "`$O365ROLE = Get-MsolRole -RoleName 'User Account Administrator'
Get-MsolRoleMember -All -RoleObjectId `$O365ROLE.ObjectId"
			$TextboxResults.Text = Get-MsolRoleMember -All -RoleObjectId $O365ROLE.ObjectId | Out-String -Width 2147483647
			
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$O365ROLE = Get-MsolRole -TenantId $PartnerComboBox.SelectedItem.TenantID -RoleName "User Account Administrator"
			$TextboxResults.Text = "Getting All $Role..."
			$textboxDetails.Text = "`$O365ROLE = Get-MsolRole -RoleName 'User Account Administrator'
Get-MsolRoleMember -All -RoleObjectId `$O365ROLE.ObjectId"
			$TextboxResults.Text = Get-MsolRoleMember -TenantId $PartnerComboBox.SelectedItem.TenantID -All -RoleObjectId $O365ROLE.ObjectId | Out-String -Width 2147483647
			
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$O365ROLE = Get-MsolRole -RoleName "User Account Administrator"
			$TextboxResults.Text = "Getting All $Role..."
			$textboxDetails.Text = "`$O365ROLE = Get-MsolRole -RoleName 'User Account Administrator'
Get-MsolRoleMember -All -RoleObjectId `$O365ROLE.ObjectId"
			$TextboxResults.Text = Get-MsolRoleMember -All -RoleObjectId $O365ROLE.ObjectId | Out-String -Width 2147483647
			
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$disable2FAForAUserToolStripMenuItem_Click = {

	
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$SelectUsersFormText = "Select the User you want to disable Second-Factor Authentication for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPN = $SelectUsersForm_comboboxUsers
			$GlobalUPN = $SelectCachedUserPrincipalName_comboboxUPN
			
			$mfa = @()
			
			$TextboxResults.Text = "Disabling 2FA for $GlobalUPN..."
			$textboxDetails.Text = "`$mfa = @()
Set-MsolUser -UserPrincipalName $GlobalUPN -StrongAuthenticationRequirements `$mfa "
			$TextboxResults.Text = Set-MsolUser -UserPrincipalName $GlobalUPN -StrongAuthenticationRequirements $mfa | Out-String -Width 2147483647
			$TextboxResults.Text = Get-MsolUser -All | Select-Object DisplayName, StrongAuthenticationMethods, StrongAuthenticationRequirements | Sort-Object DisplayName | Format-Table -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$SelectUsersFormText = "Select the User you want to disable Second-Factor Authentication for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPN = $SelectUsersForm_comboboxUsers
			$GlobalUPN = $SelectCachedUserPrincipalName_comboboxUPN
			
			$mfa = @()
			
			$TextboxResults.Text = "Disabling 2FA for $GlobalUPN..."
			$textboxDetails.Text = "`$mfa = @()
Set-MsolUser -TenantId $TenantText -UserPrincipalName $GlobalUPN -StrongAuthenticationRequirements `$mfa "
			$TextboxResults.Text = Set-MsolUser -TenantId $PartnerComboBox.SelectedItem.TenantID -UserPrincipalName $GlobalUPN -StrongAuthenticationRequirements $mfa | Out-String -Width 2147483647
			$TextboxResults.Text = Get-MsolUser -All -TenantId $PartnerComboBox.SelectedItem.TenantID| Select-Object DisplayName, StrongAuthenticationMethods, StrongAuthenticationRequirements | Sort-Object DisplayName | Format-Table -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
			
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$SelectUsersFormText = "Select the User you want to disable Second-Factor Authentication for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPN = $SelectUsersForm_comboboxUsers
			$GlobalUPN = $SelectCachedUserPrincipalName_comboboxUPN
			
			$mfa = @()
			
			$TextboxResults.Text = "Disabling 2FA for $GlobalUPN..."
			$textboxDetails.Text = "`$mfa = @()
Set-MsolUser -UserPrincipalName $GlobalUPN -StrongAuthenticationRequirements `$mfa "
			$TextboxResults.Text = Set-MsolUser -UserPrincipalName $GlobalUPN -StrongAuthenticationRequirements $mfa | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getAllUsers2FAStatusToolStripMenuItem_Click={
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all users 2FA status..."
			$textboxDetails.Text = "Get-MsolUser -All | Select-Object DisplayName, StrongAuthenticationMethods, StrongAuthenticationRequirements | Sort-Object DisplayName | Format-Table -AutoSize"
			$TextboxResults.Text = Get-MsolUser -All | Select-Object DisplayName, StrongAuthenticationMethods, StrongAuthenticationRequirements | Sort-Object DisplayName | Format-Table -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all users 2FA status..."
			$textboxDetails.Text = "Get-MsolUser -All -TenantId $TenantText | Select-Object DisplayName, StrongAuthenticationMethods, StrongAuthenticationRequirements | Sort-Object DisplayName | Format-Table -AutoSize"
			$TextboxResults.Text = Get-MsolUser -All -TenantId $PartnerComboBox.SelectedItem.TenantID | Select-Object DisplayName, StrongAuthenticationMethods, StrongAuthenticationRequirements | Sort-Object DisplayName | Format-Table -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
			
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all users 2FA status..."
			$textboxDetails.Text = "Get-MsolUser -All | Select-Object DisplayName, StrongAuthenticationMethods, StrongAuthenticationRequirements | Sort-Object DisplayName | Format-Table -AutoSize"
			$TextboxResults.Text = Get-MsolUser -All | Select-Object DisplayName, StrongAuthenticationMethods, StrongAuthenticationRequirements | Sort-Object DisplayName | Format-Table -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$enable2FAForAUserToolStripMenuItem_Click={

	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			#Create the StrongAuthenticationRequirement object and insert required settings
			$auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement
			$auth.RelyingParty = "*"
			$auth.State = "Enabled"
			$auth.RememberDevicesNotIssuedBefore = (Get-Date)
			
			
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$SelectUsersFormText = "Select the User you want to enable Second-Factor Authentication for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPN = $SelectUsersForm_comboboxUsers
			$GlobalUPN = $SelectCachedUserPrincipalName_comboboxUPN
			
			$mfa = @()
			
			$TextboxResults.Text = "Enabling 2FA for $GlobalUPN..."
			$textboxDetails.Text = "Set-MsolUser -UserPrincipalName $GlobalUPN -StrongAuthenticationRequirements  $auth "
			$TextboxResults.Text = Set-MsolUser -UserPrincipalName $GlobalUPN -StrongAuthenticationRequirements $auth | Out-String -Width 2147483647
			$TextboxResults.Text = Get-MsolUser -All | Select-Object DisplayName, StrongAuthenticationMethods, StrongAuthenticationRequirements | Sort-Object DisplayName | Format-Table -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			#Create the StrongAuthenticationRequirement object and insert required settings
			$auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement
			$auth.RelyingParty = "*"
			$auth.State = "Enabled"
			$auth.RememberDevicesNotIssuedBefore = (Get-Date)
			
			
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$SelectUsersFormText = "Select the User you want to enable Second-Factor Authentication for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPN = $SelectUsersForm_comboboxUsers
			$GlobalUPN = $SelectCachedUserPrincipalName_comboboxUPN
			
			$mfa = @()
			
			$TextboxResults.Text = "Enabling 2FA for $GlobalUPN..."
			$textboxDetails.Text = "Set-MsolUser -TenantId $TenantText -UserPrincipalName $GlobalUPN -StrongAuthenticationRequirements $auth "
			$TextboxResults.Text = Set-MsolUser -TenantId $PartnerComboBox.SelectedItem.TenantID -UserPrincipalName $GlobalUPN -StrongAuthenticationRequirements $auth | Out-String -Width 2147483647
			$TextboxResults.Text = Get-MsolUser -All -TenantId $PartnerComboBox.SelectedItem.TenantID | Select-Object DisplayName, StrongAuthenticationMethods, StrongAuthenticationRequirements | Sort-Object DisplayName | Format-Table -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
			
		}
		Else
		{
			#Create the StrongAuthenticationRequirement object and insert required settings
			$auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement
			$auth.RelyingParty = "*"
			$auth.State = "Enabled"
			$auth.RememberDevicesNotIssuedBefore = (Get-Date)
			
			
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$SelectUsersFormText = "Select the User you want to enable Second-Factor Authentication for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPN = $SelectUsersForm_comboboxUsers
			$GlobalUPN = $SelectCachedUserPrincipalName_comboboxUPN
			
			$mfa = @()
			
			$TextboxResults.Text = "Enabling 2FA for $GlobalUPN..."
			$textboxDetails.Text = "Set-MsolUser -UserPrincipalName $GlobalUPN -StrongAuthenticationRequirements  $auth "
			$TextboxResults.Text = Set-MsolUser -UserPrincipalName $GlobalUPN -StrongAuthenticationRequirements $auth | Out-String -Width 2147483647
			$TextboxResults.Text = Get-MsolUser -All | Select-Object DisplayName, StrongAuthenticationMethods, StrongAuthenticationRequirements | Sort-Object DisplayName | Format-Table -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$placeAUserOnLitigationHoldToolStripMenuItem_Click={
	Do
	{
		#$HidefromGALUser = Read-Host "Enter the UPN of the user you want to hide from the GAL"
		$SelectUsersFormText = "Select the User you want to place on Litigation Hold"
		#Call-SelectUsersForm_psf
		Show-SelectCachedDisplayNames_psf
		#$GlobalUPNhideGAL = $SelectUsersForm_comboboxUsers
		$GlobalUPNhideGAL = $SelectCachedDisplayNames_comboboxNames
		Try
		{
			If (!$GlobalUPNhideGAL)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User selected, please select a user.", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Placing $GlobalUPNhideGAL on Litigation Hold..."
				$textboxDetails.Text = "set-Mailbox -Identity $GlobalUPNhideGAL -LitigationHoldEnabled `$True"
				set-Mailbox -Identity $GlobalUPNhideGAL -LitigationHoldEnabled $True
				$TextboxResults.Text = get-mailbox | where-object { $_.litigationholdenabled -eq $true } | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to place another user on Litigation Hold?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
}

$getAllUsersOnLitigationHoldToolStripMenuItem_Click={
	Try
	{
		
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting all Users on Litigation Hold..."
		$textboxDetails.Text = "get-mailbox | where-object { `$_.litigationholdenabled -eq `$true } | Sort-Object"
		$TextboxResults.Text = get-mailbox | where-object { $_.litigationholdenabled -eq $true } | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$placeAllUsersOnLitigationHoldToolStripMenuItem_Click = {
	Try
	{
		
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Placing all users on Litigation Hold..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize Unlimited -Filter { RecipientTypeDetails -eq 'UserMailbox' } | Set-Mailbox -LitigationHoldEnabled `$True"
		Get-Mailbox -ResultSize Unlimited -Filter { RecipientTypeDetails -eq "UserMailbox" } | Set-Mailbox -LitigationHoldEnabled $true
		$TextboxResults.Text = get-mailbox | where-object { $_.litigationholdenabled -eq $true } | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$takeAllUsersOffLitigationHoldToolStripMenuItem_Click={
	Try
	{
		
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Placing all users off Litigation Hold..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize Unlimited -Filter { RecipientTypeDetails -eq 'UserMailbox' } | Set-Mailbox -LitigationHoldEnabled `$False"
		Get-Mailbox -ResultSize Unlimited -Filter { RecipientTypeDetails -eq "UserMailbox" } | Set-Mailbox -LitigationHoldEnabled $False
		$TextboxResults.Text = get-mailbox | where-object { $_.litigationholdenabled -eq $False } | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getAllUsersOffLitigationHoldToolStripMenuItem_Click={
	Try
	{
		
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting all Users off Litigation Hold..."
		$textboxDetails.Text = "get-mailbox | where-object { `$_.litigationholdenabled -eq `$False } | Sort-Object"
		$TextboxResults.Text = get-mailbox | where-object { $_.litigationholdenabled -eq $False } | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$placeAUserOffLitigationHoldToolStripMenuItem_Click={
	Do
	{
		#$HidefromGALUser = Read-Host "Enter the UPN of the user you want to hide from the GAL"
		$SelectUsersFormText = "Select the User you want to place off Litigation Hold"
		#Call-SelectUsersForm_psf
		Show-SelectCachedDisplayNames_psf
		#$GlobalUPNhideGAL = $SelectUsersForm_comboboxUsers
		$GlobalUPNhideGAL = $SelectCachedDisplayNames_comboboxNames
		Try
		{
			If (!$GlobalUPNhideGAL)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User selected, please select a user.", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Placing $GlobalUPNhideGAL off Litigation Hold..."
				$textboxDetails.Text = "set-Mailbox -Identity $GlobalUPNhideGAL -LitigationHoldEnabled `$False"
				set-Mailbox -Identity $GlobalUPNhideGAL -LitigationHoldEnabled $False
				$TextboxResults.Text = get-mailbox | where-object { $_.litigationholdenabled -eq $False } | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to place another user off Litigation Hold?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies>
    <Assembly>mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
    <Assembly>System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
  </Assemblies>
</File>