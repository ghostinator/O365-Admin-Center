<File version="3.2">
  <FileID>e3161ce4-358c-452c-bb7b-0f880be08620</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAHNQSURBVHhe7f1Xcxtpui3qrl+y9y9ZN+vyXOwV
sfeJfWJNP2f37DW7u6q6q7u8U8lbeu+9996A3juQIAmSoAEIQ3jQezvO+yUIiVJRJVWJVEnCeCIG
gUwmEolEIr83DRL/jYiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiu2Kf/
43/8j9LElIzS+CSVdIZhGIZh3sMkpWaVRkTGlP6f/8f/UXrexr/cf//v/72xfXASRvsmpqxrmFxm
GIZhGOZ9jGrH55zbSM8txnkz/3Ip6VmlauCuCTO6GYZhGIb5FbGgd8r6WumZtEiWL/3fi1HDqeEv
+99lUdPSM2XD+LzzNQuAlS3tgX0MwzAMw/zyTFrR1GdEfdck6rtfnjr5f+fYInRDJrlv0IZv6JmW
x848TX33VHDYTgN0wyZtePU4bVj5nxqmsTf4mIae4LDqf+r51bT0Gx0YnbW9ugBQxwtMrh15gB0D
0zYMzDgwoO5rt9It9wdnVoL/k5Gq237tvvSflf5yqx47GHrchYSGC93XxiPj7J9+fjiV0LgYhmEY
5n3K0KwD7SMLqG0fl9t5adznXprW/hlU6fSoUcNK494maeydQkl9H8qaBrXoBme1YdX/a9sntOFb
B2a0fi1yW9E8JP3GUN48iOa+abSpYeV5tXGOLmDY5IJ+zv56BcCCZ09rgNWDBgwLaOzolyebQu+E
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
e6m+E352coShgV4p1lZgWZxCY1s/1jdWteXBv3UIn3tZe46KvFgY5p/t2dlZd6O5tQkOWX4WpsYw
YZyX5d2GJZMZLr8bfT29sLrXYZL/9QwbcXK0gxXHiky3CwszC1iR+WWYkMdNLWB2ali7WmDAY9e+
809E767f/CTA06N9eH3Bi0W8LV6PGztHv/4I/G/haP81vht7TU5PTmQLO9RkS2O0syFbqc+f1/Ah
OtxZw/r57yh8KE4Pd+ENXP1vPxDR++etFAD8GiAREdG7hQUAERFRGGIBQEREFIZYABAREYUhFgBE
RERhiAUAERFRGGIBQEREFIZYABAREYUhFgBERERhiAUAERFRGGIBQEREFIZYABAREYUhFgBERERh
iAUAERFRGGIBQEREFIZYABAREYUhFgBERERhiAUAERFRGGIBQEREFIZYABAREYUhFgBERERhiAUA
ERFRGGIBQEREFIZYABAREYUhFgBERERhiAUAERFRGGIBQEREFIZYABAREYUhFgBERERhiAUAERFR
GGIBQEREFIZYABAREYUhFgBERERhiAUAERFRGGIBQEREFIZYABAREYUhFgBERERhiAUAERFRGGIB
QEREFIZYABAREYUhFgBERERhiAUAERFRGGIBQEREFIZYABAREYUhFgBERERhiAUAERFRGGIBQERE
FIZYABAREYUhFgBERERhiAUAERFRGGIBQEREFIZYABAREYUhFgBERERhiAUAERFRGGIBQEREFIZY
ABAREYUhFgBERERhiAUAERFRGGIBQEREFIZYABAREYUhFgBERERhiAUAERFRGGIBQEREFIZYABAR
EYUhFgBERERhiAUAERFRGGIBQEREFIZYABAREYUhFgBERERhiAUAERFRGGIBQEREFIZYABAREYUh
FgBERERhiAUAERFRGGIBQEREFIZYABAREYUhFgBERERhiAUAERFRGGIBQEREFIZYABAREYUhFgBE
RERhiAUAERFRGGIBQEREFIZYABAREYUhFgBERERhiAUAERFRGGIBQEREFIZYABAREYUhFgBERERh
iAUAERFRGGIBQEREFIZYABAREYUhFgBERERhiAUAERFRGGIBQEREFIZYABAREYUhFgBERERhiAUA
ERFRGGIBQEREFIZYABAREYUhFgBERERhiAUAERFRGGIBQEREFIZYABAREYUhFgBERERhiAUAERFR
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
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
REREREREREREREREREREREQv99/+2/8fscBsL773PHkAAAAASUVORK5CYII=</Preview>
  <Form>XU8G1f6l/vwPACODCAAAAAAABADsvW1T6s6yPvyeKr7Drv02p/6DPAWq7nOqFFRQ1IioyDvQRJ6fCcKnv7t7
JhAghITEtdA1OXXW/l0xdGau9PT0zPT0/H8Pjbb+Pp38XzTyn//8fxz8Z7oY6v/736fFZKr3/t9r
q/8xmE/+39Vg3OP//s9/nP70P/950ceT1qD/v8n/F8P/+5//5Gbd6Wys/29fn03H9e7//EebNbqt
91t9URl09P7/NlS1nnpPpc+yiaQey2T/+59+vQdvRnkPiXTq/KPX6rcm8NspyM3p/ak+/u9/3put
7scYfv7f3KA/HQ+6k/9S6aH82ngw1MfThZBz/v6uD6cXs+l00LeegafKuqHD79918Rh/oDzr52aT
6aCXG/R69f7Hf//DLLHMkrvvPbPp4Om93tXzrZ7eRw6gSNn0//wnm/b+27vBh/7f/8sPWwd/clF/
7+QG3cH4v//32mxN9acesHnwV7luCwh8ai3hLWepWOZ//nMWO0sc/NkVcPzf/zsft/D7Zf5fPDWc
HvxN8X2D74tWvz5e/N/5+fnF+fnb+SX8i1fx/GKA/1n7hH9y5590M3d+PsKbd8lL+Hd+xx/9PL/9
7MLP41eP5+eP8JdohEs4HzzC7wrtCYDcuSXh9vzz4vyylj1fX5/nuU+4eTFrws9vz3lZ6P45SXsU
74fbF+d7roeyWviqdvQvxUwVJkZWeVELjHX1L8ZS1YnBBI5Gtu9sYZDAEihhrHCJRi5npqrzT/h7
pqixrpHLMwtHI9t3PGAhMdaCMmaLJvz9qcQQRyNs645frOg1dmOwnrGosmgk1c90mbK+EwRHI59P
bZYaXA6YUr+41ViPcLJzxhRloTOWTNxVWPY9PWZKevpuwt8X493nBY5G1nfuRnAnf2uyYfe5zdTb
+yZjuTODsekwbrBMY3HPbFcqOUmI58Ub7kbI2+YdpujXJZP1my2VZbN6mjGjOhM4lXybiTIuv27a
LDu9/WJKvFczANeWwFu6dn/F2C3rmMyc9MfiF1xiK18A/Ak600CJ6fRHn2NFL94ZbDK8LsB/Fkog
cVg3WTIaSdxpWKtPxrTiQONPZLOtDDx2e8csiZMY4NK9xhJnKlA469cE7reWFaaOvmaMtfVo5AvL
VDXwj/Djyu2AscmgmxD4Ots2+C+4xNb9g8YG7UpbsDAexU2O08VYEnlLz4CHhTlQWSajw2fMJT4N
dharq1DmqwZj1ccx8gIqgL+wJHbyUPWbc5WxUr5ronAVeMt+5CagDWeGxr7MwdL+2Ya9yz7/hdJ6
fGA2CRu4qAB+0qCM0UinrbL0sFuCd5y3GWeamarCmJrOor69ayxdq11bv6DnbRLWuPccjTwaoF+X
BfhF+QLvbOJFp2piGdt7/r6JkTe6M+h2KgkowyXg17IGT3QqzC9GfVvdQYmpdK15PVZ6b2UqU4Mh
Zh5xNLLvCZBYK39Vh73nlpmudYtZZVR70tioB60OeC4yBxyNODwBEtoJlEBl/Ho+P9cYOz/PMzY/
P2cssxcDbweesONb0V9YncG6F8idX55bvczOBb9kc7DjLHORKgz0W/0lXRiCVW+qbbDyOtOP7Bd8
4WjEdgfeWU4XZlpXb6YNKpOxLiM2jnMdepozjfc8DhKpXwhcJgtDv+D9F6ve8JlRmbv64nwI+DMr
+rZoxGfv54qP6k93+ld9kccyf0Ivo5czxXoBnijgE016wmBHYeQtmAQ7Rt427oBXcN1MFWKt5BE+
APAWwGvYxl78kHK2OKt2jZaWTVWTbfi7UgTtAcy2MfLm/oQfDLwdKwF9Iw09mwp6Nh30bKKR7TtB
MPIWTIIdA2+Dc/C/6ufof33mwB8LgMF/CyjBjoE3pyeeDPTw+ujh3TDvmPy3y5LBZqMe+Gt3I5Co
zD4M9FQSviUib55+kSMftIU+aHGwDwNvLctLXRivjMWWt+CNGA2T7Vzgm5BHOIY6tJrkEbJNicLv
PfBOZ7zyk/f4venhsAw+5lUPfKVUtgGvrwBuPE3Av5uDUqmjVAzczU7MoeR4oR9yc7nrSR+Ho5Fm
zoQ7j2P8trfAA2Iqo6IswUMc988AF5MZ+vYa//v289nsMsfL5lDgYSdW3fmFF8z1bfMJ/Qr0r998
An1LPk8FNseJqvA5++0ljUja9r/T86Bv6zuJeAYcVnMJvjb8WGOZ7IPwg5XRC/hONAJJDz/uwDvT
wFWxv7EAA4UR+m/wRDGj7CmTwOsRyXpMo5gfhp2gRiUamWw8sfULVn0YmWzU7YBvXrvJ44jk3mCx
xUjDL/Uoag11SFB18Cvk8NuBt87odYwtY6qG/4kjtVFht0zWqCmPo6Q5tQmN42gE/Pgze3mzUyDL
9sT2L9TbF7Dqo3fwRRRmLNFSgMVsPQCRi2hkfgPMa/kOjZtMGIFAh8W0ArT09KgB46p4A8s0gDfm
kk2NZRUDR0kDpzfeRCN3WOpKCUe4C7wDeDYpVO3FjcfUiv3v288n4mMYIJmJDPJmzpImm08HeWD6
BbqlxvMUmqSq4zsnUKZrtWWAurMCfntoE4v2G5apjQ+VYbijZhlgHLmhvm2/k2rBR5PwC47T8y1t
wDfa/s6fj0ZWd5hRt0xDplQ/hydwrHcWu03Al6knGTiCWdDojDIWGl7KdQ1oxy9WGzEnMNo1kdkq
g7HgdLdMhAetZRVqCbVWWiXQN8KqerGlC09n2E7XT2z/IjPJPdEHFrXMTK6fcBz/BjZ6kUalVMEG
j+oVE0bIL2O0b8PuPbS7RxgdKgrr4wj3HZhuglUftPONnTcIfH+Pf6/QCDghsAkta0sbzhpV+xPb
v1h+DZc44oVvea20kberEvDcykGZ4SvUTP71od7wJcZDGKcnztQ+l4CtzIAR7wR4zfayNO43d94g
cJLG9a0HGvm323QH6vu1pQ0vU8P+963nmYHmIZ2aoh+SybzWaSZAtPR0KvXClJnxgjMotTF+iUcc
EZeFBFW9T5NGa+xrlkR8k7DeEI3svHM5Rp1PA9YeTI5V9SpuL60ya7/SXAWOwp+rq+ejEesX2Wwr
7dBH4AU9jbHzBidMvLk+gbMVGtk/+pYZgWGMDSxk6g1QjHlK8Gz1WWpWwdmL+wbYq3ifZss0Pnvh
eCmz5qux8wacD9m64w1fZgGXNZQIvpSFo5HVnRoYI2AWip6Il7Blm4k9PDpe6u1NnXjbeccReNhZ
cj8ErITSq2iM33HBo17HZJmx8kBtBvQTLJFVMvTGYCSONjZ7twCfMj4GAwdeQ95NoisG3jbvPD/i
LM4lSiyf+8XIW7wP9gr8M+zdyh9BJCJvh37xAtam9/JIc60lVxyNHHrCD45GjpAw6Ha0bLpWy+Pc
GDgjQ8A4e5an+beNO0Ewzb8FkpC+Aay3quUHDXmL4RzfB87oVWmOLwCORoJKsGPirUqzjLFKF+5c
94+cZUSMvPn7xXHzllTmIeK3IeACzluWseU/GzgrWWAOGHg78IQfjLx5+gWU0UhgmcUM37D3/FHZ
nmslP8RxtvUYDLwdI4HKBDyfYS8kZiEN6rOo1J9DfAK0o/YEOt3rtLMwHrhBbwqGz2Bz+8wLJt58
/UJg/kYoQRJLcMOoRLw/PSdmL/etAnq+9swef4+0HE1cz/GfN7pxiaujdH3mnvdKy298G/us9g3O
ag/6OKt9jzizMas90LfnezfvBMHWPHlAiVTmMnhchUkC58VvqFbb8+K78+SpwqcBtU4XUoWJruC8
uklz+ySR5i037mxgKkPZM7Z4ozvdtcTjMPDm6ReiVgOsZbKw8+2rE+NCKeP6Qjqc1YC/vL5wcP0B
9U0xqd7M3gYmRhOeWM3+FyZbqwHO2L6+4O0Xbph4CyTBjok3919grTkLHSN33sc1DwVXOCimwFoD
4VisyxTsUQcO2PYLN0y8bT/RXUv0h5G3YBKo1jkD10xukLdYk1YocJ3lCVdVjsfAW0AJdgy8hVAm
C4t1mY0ngIe3fgfw/c46TUFIWK/bbGAbb3ue8IORt3BWn45Zzypni+8JYKFkrjBYcft6lu1OYSXB
GTtIsGPibd8T3bVEb1jw5uMXbhh5KwReY7Mw6Vsoq3Z/Zx3QWlN7Wa+xVZOba24C29YB9zzhB2+t
AwaUSLwdK6FLcVxVjON6wTgu5G3rThBM64CBJNgx6VvgMlkYeVvd6X3mGrhW2aO1StM/xvXTYBLs
GHgLKMGOaT3Lyy+6nzlr9fP1fLUa+na+vX66dccjJonN3JKp9ZcOLQ/RuL5zWbDi/va+0ysG3gJK
ANyluMO3ywHy9oqxidad/hob9ARi/ottvPF877PVp3H9xz0uQfUMpqpKxYpWw3lIWq9SZuMGzt0P
NTYdXeOM8iQloiN3SiDiLTfKdDymdWeHUh+zDl0k3tZ30sUMuKTXKTS/qY8KrXh5nDym2VqQZo4T
Yq1x0LnMH1Wm7fV6z7/ofi76YuX6NX9riJXst7shrmQDb+bmndVqezGmipXsZAKGK1Brlb61wbKK
VsE/6WJFbfmVzrNMI/6AMxi0jscv0g7btcaj3kse37i5ur6FsZ26P+EDo77RnUfOA9qK1RM2nBzE
KbIVarW4zfPAT1YpDQ02n72B2tc/BjgzGo080dpkRayuryXQyjZT8R8+V29vI5t41OuWqATUTveX
ySe2eHN84lAMAdWJr1MvPl8ZxTngerzPKIQVC1uxGI5xDuPemRZanINH7BBzgHE1qzuD1tJgvN2S
zqeS7yau4SZEDAGPUhhsRS3YMOct/YamwsbD/jYx7l9Vtsq0RDxBHI3sj5TgT5S01S+2/76DkTdx
ZxXHUF/HNQxWcQ3AQnvNwoYGX6st8Tyu1ztFa6xx+ubcYgF4XAoeF60qY7NRnIk1X3oDfNP+S4PT
jSuJJktixImi5+Gzadd9ivY27WUE3qqgsddfGGyyFPHl6miItb4G3nZrtY17zQUTb6wXSigG8WCF
B+08sRB30l4ekb6WoK8lbGHOQlv/Isuh8TgH7DT1V4qCp1rPRczKuN81yKYKXihGRVESnwLTNgHx
e4wXgZERRiXwvmmMQSBZxcDl2kRW7Daw1UrfqiXhXnO5jkiJRlYRI4N3K0YFmO+DyR9vrFwLbeBx
+ZvPrzDp2+oO8YD7E8QvstOnmJAlaoW7DXoYTTQZxPO4tWGKnUwKv8RyacWHcCZJI9V6cwhWGjow
7odkxhgeQfFGk8HLUrAC3ZS22t+wKmM0shuJI3ZAKHXc8cDxYLUDot+ujKFM/TOHNqFEI237Hgrx
CyecvrkCGqraWMPdB8hrYy4kQv+K8STzBPGGsT7mtJAQ72i8TpmtTEy77IlV4Uwj/YB7AyiSv4O7
NubJ1RvbOM5imjYW7xh08upGrbZq2VvH+tTXcTiDNcY4B4uHnTahtHejhRwxZ0FVUXvFj0li24Cq
zad9Jn5B0UKLea1iKd2EHKoK1nIQI/KsKJnSi0LrgC9lxneSpFOpqnjnqNdhIrYHHFhDSBhsldGO
27ydYmxPfR3rM1jHF7WhqlDm2AYBQhvaDs+LeKTBZkSTxYMifCdl1n6jnkZENKVrTQy7M5O4lo4B
GMKLQN+SZTIzDLtINC1bkXlocIlKfFRndl6Bp1WEE0qoPk20dRlJ3xxrud5xs96zY8PULpmBDu66
TWDZ8B23rH1YAuF0jVjA3S+iVZkpESuE8UiJsYglIwtJe3r4G8gSxGPjAvDWqFBMKK65dfPiDTMe
UQcS0SjgLqFoJI7d+T1G47Y+MQpG21OmjVrmMTJnjjFTdxhDZWHijd9Z8bB93bIOxretJNDzjpji
VM8p+kzjGqvoVUvxoThLEbdFO5vMcb9gxWNOEqY9zotqDX097scCiRcUN2OghQQTczfrUC02frFZ
KyccjdCddVzWnRWXhfbKitPq5BPIwmK3TZTOO5r1e27f7JFd881IL2KhgRoKZTBWe8TgW88w9JTe
yG7R1kyHrzhvmc0ucREFNTC2uFFFzN0SyVGYRhHEmihzBp0RaDOGiLCD7iWBO8Q+qLc0KI5rq1a7
uC32jOmrXWibe8iQBWOxaqe2ngJ4MHZ/4YiJhUQyg9GVVYycTabsvOGOwpcmRtClMX63h5GtU41a
jbEx4sAoreXX0LS/AcazpVU73e7NyFYcLmO7T2WiaDfO2+qOTnc6FRV5+NptE8RCf+v5DRyNrO7c
EA+pLNXK8oWon0in79EiLq3AqOkwXrHKhBo/QVbU0ZlJ6/Xvz+ZOqaG/xDiH4T3FU9J6fULg3muZ
7dYSMbRT+x2HiLpUco07bbbLAvEMo0uN4pEuS4ej+G7uL0Scqk3CtkQxzgIeqhtl2C6TV7wZN+j2
i/WuR915F2Qby6YoamvPmBh8H/T2SyVqlziPFF9auyBtEomFJLBALct1lD0dXTc87MzkGPTtwBOe
cIUiEzMiblBb34Gq2fDLpdhNmkxkrBkWx8vqT6kP73djYK8WowJTxzcJ0SYOXdPRa1uUgJcoGlmX
abuM/nE04vzEEdGSqVQFtVe77qFDNCu5jZk9Ycu+CR56/SARnMSbz1o57dutcQy8bd1xwLQvVx2l
5rQn2+Dx504aT/NvTm3A5k31MbhzPLgy9uwlXmOwbwee8IOBNy9xqDcHMD3f4nGqo14MRz3KPY14
TXtsrO3i44mPuYmx2jgaOCtvS6Txgu9Y2X3YNb53wKNzMW61tY5bvbnfjGO1YewX3J/YwlMME86+
o4tPMfAwdsTdL80ij+9d/2IrdvYILPaJ+5cwWO88b/F95pcF0rfNO9tP7ODt520YeXN/wg+m/fWB
JNgx9Qv8TggxyKhvAaOYb3biom/2P+EH2+Ki9/8CWLBijlu2mOOXrRjkl+246J0nHKKWXTDq2/YT
u+/0ioG3YBIwM8IXz5TQeqW46AFlU7jhd1a4dgBvPw+Y9M31CT+YeAskwY6RN/udAsZu36drH1cU
F42+eazKvGLgzecv9uKbjysRT267EwQjb15+0aqW7xKAX292o8Xp+c148qvNJ7bxx7YERwy87X9i
W+JBTLwFkkCsvPUxJr7P4/AV/Q/E4fvGdt6CS9zmTdS6he595gJx00dkP8XhB94bYGGMww9nt4HP
/QtYa/TjRGQsaEfhAjO9pFeR/mL/gi32v3AA7+wVYJv7Fw48YZXRC17tX/D8iy087D3rZnr4cX3B
xP4Fto4Xb9XKcwMz3hTStWFR0T3ukOhwLPYv2O4Ewat9H6FIBN7wDtWqV3sqQi0v33fixbcxfqkb
ZAFtx3P7Hn+vKr065fkZCok30MrEO/tHYWqndS6R7hQJG8dh1LfdJ1TcGXKXgG/Xu6FaOdba2ifC
MwuJvRWUa4hflGto6wk/f8cRZTAJ9r/z/EhBJNj/vt6TEkYZbXtSQiijkBbSl+DSPEgY4P8+4j98
+83Fec7668Xqv3b38hxqVbhP5Bp35PRw54hyhrs64rh/wex/Z16pk9r3oaaiEV7vcrqgVrt6M2US
L4f29Dhj3PdRjmm4H6aNEln/l/J2/H4ZYqWjf6WBpY6eFz4AWSRXZvVmZgpfykjsyYT223nzn/8N
mM4mcD/W1JXXL+R1YqjEG+5W0RerPTxqEMx5C0viap9RKBKBtzBqSbzRvrZFYptZsCVJtASosb7y
wW3vzwqWo47yv4WS5e4v5c3DXH4faJMtWyF20n12dMlbGBJpn5FavLGYnRvXtDuvf4r5BgNJFPva
QpIo9O3wL3AHYmrF66vzTrl/ez/g8djijZjFnZVnQXbz/d39gMHzW3rH1n5AT79AXhO4Wy+uS97C
quXmPsqEXlaKphFohyHwFtKux9+wj3KFgWmzR7iPuIZ/38DEm+sTfjDtowwkwY4xH37wMllY8BaS
RDtvJ5iHNoQyWRj3n4aTbffI/L0uZx0I3kI4LeE7zl8Io0wW5vl7w5K45i2MHMM/MO/xkVjs2/X+
C9edwMRbKLuTf81+Z094xZuvnNX7MO7bDSYBd+mmU19VpvQeKa7GeiJwGYm3UGrpK8/2H+NtjW37
xOlOS3vEM0mKS5G1mImovwRt4aUYYxOzjycw0j/5E3k7fse0r/zkuG+c9sCq6kUS4wa/MN5cc04p
7rQfkHb+plIfuM3moYa7HDHPcbONO+EuXcuIvIVTyyP2iRt8jz/goRMG3g484YzxDc8zzAJaN1j8
rFSleEzHXcBHXxQXjbt8Gs/smDJuYuQtmAQH3gLmmhd4KM4RoF2NKsu+x4cic7LzRfHktPsllXxP
YMZq3D+DW0z3au/eC96YcC2j2F8fvJaEbXkJQpDodH5WfbUbPj2cVmhvMe2cs/bQJuIq4/tjstOH
GGOli66G+44ojit19oo7th4Ma2f5SuIXZgnwqb0Mswxf6SfKm8/99a1HjEEevS5ZZvLwhudn9TQ8
Zcwk3vDYhtaDZood+Pydnt+QKfWuN3nzdPGd5q5vAN6OySIQPC8B7tgf4A7++hWdEeGAKS8B3YFf
nMVurT2Lo2pF4/loDkmwY8xLsOcJdp1q+lNe/hVol7afMuzDxFsgCVu8eciFYM+2wPMQcJ1hBvhO
9+xGnDpB+8S1dbYFTxI38NesWN3kzdOl1stNH/kc/JXJEXvm7ZpnkKDTOvZi0DfrDjPezD1J4Wln
ujJ7f9HcJYo8GA5PZEqty02JFXxjfa7hORYafEszB1Y9kbG5cpSfvPvGNiTijpPp8FpjdHqHkh7U
TZ4BYk+ZKFsI5gSIRtRRcyT0ZTrs0a7ahFeenHjbc6qJM07ESw7bju36Nh3GG34k2s5RySWaGm8T
mUmuzPeJ32s7vyAesu+LAeMjkOnwtSL+Hu/W0CXW205lM6qmOLFyW+J8Vqzs2VGdwE1z8+mgsFFm
r7y55+qwMOibuJPNtvbtzhPt9KN/SCLx5vTEfJrUcE92l8po5QuplQvA26BO+02X9ufjZ2McL6j1
Wlecu0M5I2y8JBPvDUa88ovvf06l3oSE2biQt++Uy0QjlGHkPnHFMIWKVS1TzVq5OrzkOBHYnj9k
64wbR4ynl7pwS+10UGM+JNpwpqTnaF8vs87l4Wf/2PZNavku5QAQGUl4xoh4v2bys4L4RZ72sHtp
ZafpvSLv0cia+cbLVPCgPGC+GrqyWRN3fN3nRUYSkFAVOU3oSqfv2055V1xrdTi/CGKRd8XgOXFc
runoun1QIvYLTk8oMYP2P6s84wj3lLev2fiaWRJx//2E5yUQsxV4nS3r22XA/FvmhaWhGd3gf2fX
6RZmA7kp4TkqSTtvIrcLnuWyyriUyKy/rRfeOgvibW/Okm2cndZTbuRiO20O/Ui0YbAMJbFzkzKW
4B5PY8MY0iyPenvzIX4BXwJwvTsSmTS4Et71WptvQB6NWjSy6pHRxloZR9zLFFveNmxv5xrtn7dD
2Mrz03id7fMaqARkIQ9KBP/N4YlMqX6xK5JyJ5xhPhF1lNp4ns6qUtLzaOTD4LmGhJLh6VeDTsXK
V0PZZ7LZlVGjI3p4xptU9k3kS1pgOpdVnh96B+ajoXOdxGfDnb6pZCzlmTdbvhrHs6m2MfQkri4/
+Jaj176bhP2Y5eKfW1+O/JD5bGDs/EIdZWPCP5th1h7qeeyXpo1E9o8VryQNNVB4AfROPPvM/i0H
cQ011sDslHX7X2g+xFYCL7y556+xY9C3JWbSe3U9bYjaqQeJ0YjDE5QfafsCi3kOLKSbjGe14M8v
2lWRWwF5pn3iq5x0eNAV4Q1FoHwhMcyBSDl3+BupnxB/5xkOjeX2WAaz7GDvh7vfPeb9EWd507lk
yNvuWWiOGPvbPWc98oqlR9FI3XSR4Hb6WukFE6ZgsiVVvU/QCGWzppQBU2TAwV/AqByULD1piPPC
+cWzufU6qpCYi+l0qhPtr98uQ+rriXGNJq9Bvb3XsT/tmFiQBny76cTK2rNd5sO88Tw/8/hm3h9n
DPpmivna/dds1DM9SaT9p5tPAA/gNZA+8TIq84+Nb0m5sPgZX/z5VBPn366RN/BSrbEedHEJK3PQ
6g3qaDhCr7Uhzo4XZcIcT3QuHvm9yqj6xPPV+OBlP+an1AFvuyfjOWJb1jvHC7/1dn4kd4k2PJ8W
THFeIOGhyLuil+5E9pjYol6yaoFPxBY3jHLkiPxHVikwV1GugxI6eZGBiWd45W1BZM9alYFppaH4
KeUaypTKGfrWaK0KS47xNPqtMnvnzQvGsjVwQsvNNowbmjeJ2E437/Dz/5aLtJU5SPydn/Zn2iWM
urG+mN1Iz97F+YBjMWSyXZS9iHJ18IuvaHw828uEGYS95FM9i90u/fEmTix0OlfREcdjasnhxatr
hll7KD/SPgkuGMyq0D/Kz4WWgfJgdGIFkQ+pV3k0cE7ZsPtKs3G/JCTQ36nP5wNL0lho+W3gvfIo
zqPcPR0S2kSBZ97jXgONzLZxZvLwul3mg7xt5I06hGEkPn1Y7OWWYTv9mniVaM/HRXeAt905GJ5B
LpHMiJmC3TdmF/h7ysdlf4f2gH7GJWYywHMWXcu0863deDvM06oEIg8V6tvhMzDx1OCJm8vLe3DR
Tj1J3DzX09HfOzDfq6TNd+btDZ7P8fSM3XnzmfsK+vqYWnCrK/lGfFxP+d8mw9eCpT07b9zOx6V8
fbh5fM4XnWuMvyfejsvo5YAxn0MwCf7PP1XHF3jGef9M4+P+fZdd37APF3OCkwbaL5zbGtYoF1Fp
VSYNV+mqzv6eu/aCzp+5lXkbE28+T3ndj115C5DHTL0tg+9deRgZ4nxwv5eIc2i3lpjhN7XECax3
31K4xlOJkLdwsrWFlf/N8bxdv7nVauU8+ZyrLHhLNfT4kP0XeRHfnP/NBbvwRvnfepT/bZ0Pzh1T
XgKXJ/ANM/2ZfPMxOkQtxkeb/nnzdKnqTdIqAfDmsRZeMOXNCyLhj+R/e8QR6yv0dlM9SUNV/33X
6iugFV8u0yb3vYHZOK5A4Om3gc53DlTrP5g3z8M52UvMgH5n5QLErI/7rDad6KCqHzh+XXQoSzat
7JR+CG/+z8X2jkW+wQO/UG9rLcxeP6KTCXDJr/qEuei7DPy5q8TqeVu+wRDKuJVvMKBEF94MnnOT
5xv0hkW+QR+/cMMUF22daZ5fl/E4iYK3gGWyMPF2vITTO4d9L+bnCIQlMYQ8jZK3v8vbOm9jjWeO
BN627gTBW/ktA0pE3oKXiW3mtwxJoiNvA8Aqz2fJPZt1fkt3zHnz8ws3TLwFkmDHIr9lSBIpL6hf
CZzXm9plHLMq4t9j+PePS5Hf0nYnCEbegkmwY+AthDJZWPAWksQt3oDZhN6qlkvVozKNEm/BcpXa
MPIWQvbT8POp1nbyqXqSgLwagF/M7YyZPC8oCyGL58/LCxoEb/JGzA4/rq71EeD+iH4xxL8jZgex
4M3HL9ww8RZIgh1TfsvAZbIwxg36+kWKeOU5noD5unYS+VQ9YJ5PNSyJ35KHFjSYVrGsvJ83zes8
anQ2IXkLkr+31iwkdLDBn4xtZSnD/KtTzKWrEm+e8sx6xFv5ewNKXOWhDUXiKn9vMImcN7Rvu/nf
1hgz3eYSmLn2Iz0cbuXG3cXb+XsP/8INU1x0IAl2LPL3hiRR6JvTE7VuETS25sqrsWEpgLc8fpsi
ZQQGK40ZfkeYfZdn+PWJibdAEuwYeQsmwY6BN/8SBCvdYhvzbM/XliAa8ZjdlIlczDfXmIv5FXNY
t84wq3Gc8iYbv5M3Jx4TWOtoJI7ZnEtVsAVNk3g5xOPjdo7e9bWbvzfIJaVJaWFLu8V/igI80v9/
rqXlzi+dfkS5rP1mUt7Kh7/Tnw6T159mR29mKb9qEzPdjjTA7D5VneipX5K/V+aL3sHwbeFbZxKY
Z7uZbq++foyN9ItByat++dQ3n3izP00nnvvnSlktdDEXc/pL6tsP0rc/yRvXjsJEr+rTs5u5dqS+
BdXgaASjys6xVfX6aFPbJ86b1LfT4q0wMJJcewzjK5M/rG9h2NxzvZwqVEzsF77Uyo/kTerbSfEG
PfYUfMpyMuWmfwfPrTiE0YtN/SbepL6dFG+kX6H6veOPp/c8Wvnxb+ZN6tup8IZnU5k0imJB/F61
kOlc6HjKE/s558sILM/l+dG8oQYz0r9j/d6O/qWYP/l8GXkuz4/mjfTPv9+L83Mf/zJvUt9OhTfQ
4GzCo9+LZ2K2Tcmb1LeT4k1vJlVXv7drfHXyeM5YzMeJg7+fN6lvf5+3cqaQLbTey/P8Hr9XB0/5
NdH9J88H9ITluYp/mTfUz12/t6lfJK/A5n6mdcmb1LcT5Y308yoZjRQ+q/Y1s2zhLHFi53jK808l
bw64EDOikerG3MK8OdElb1LffgBvuesv4ffqZXbzaIZ1bqw8b1fy9id4M9APeSyBFW4+S96kvv0o
3srI24vWMXK3V5I3qW8/irfCHHhrgg4Xa5I3qW8/jbdrqCl4De2F/oKnx3fprPgqnh5/HBbn1weQ
YMd0fn3gMlmYeAullohR38KppeTtGAwWd4L7jIxWqSt5k/r2s3iLtVS9jLyZpuRN6tvP463Peavh
nZ51JwgG3gJKsGPBW0gSibdQail5OwneFhXiLdOBO+xG43eCYOAtoAQ7jkbCKJOFibdQail5k7xJ
3iRvkjfJ27/IWxVxV/BmrO8EwcRbIAl2jLwFL5OFgbeQail5k7xJ3iRvR0kcnAOun3PePnObd4Jg
zltYEpG34GWyMPAWUi0lb3+XtwbinuDN3LwTBAveQpJIvAUuk4WRt3BqKXmTvEneJG+SN8nbP8Tb
kwH4sg/44obWZbbvBMHAW0AJdky8BS6ThZG3Q7/Y5m3/85K347DkLVzeSGOvSiabDnsGnn86YIoy
1/Ec2csC/P1uRBqN44WnhuRN6tvf5I1sahE0dPT8pLHlfNgAZU3g2TRbp1arqqKxdPpjDBo9whN9
B3WTDdp5k35v60//Dd5OQN/aiAeIbzWOibeNO0Ew8hZMgh1HI0ElWCyki5Mk8qZ86SZLJiZ0on2K
+bsU0OhUFihNTjCTQCbzVGPKolk1Wb9VqR5k+ifxZsdc38KSeLS+5Qi32sL2cAy8bd0JggVvIUkk
3vxKuAB72G8uC0yt13qMNSoTxrJZM786cT6cy35+fSKu4j+ZAss0Fnd4PlaFYRnymxp92rztxahv
4WjHr9S3QLyRdlyWDDbuXzWgj281GbgDKfQBTNVR38LVXofLTGSgDF9g2uMxVWOZ0n2WKb2nMnjO
zdzS0ZZIfTuE+4iHhI01FrwZ+5/wg4m3QBLsGHnbeoJ6krsxea0GW8xvNKbM2jWwgVmmHa1v4Wqv
02Uu0/DPKM7YbPRq0+A/xVsADPoWknYcrW95wgvEdxsYebtzfcIPBt4CSrBhq53CnfTNxTljuWST
vE5VaMO36ts3SbtlHcOyLd/EW17oW0gSSd9C0Y6j9W1EGEfIi/EGRt7Grk/4wcDb0RJWrQ7G9WMY
8V+lUEOM+txgWcVsfIe+UR+fSGRMGJEZy6DSPFyZsVJe2ZaQeNvFQt9Ckkj6Fop2nJa+BePN6hf0
23sT+lMY+WSnr3HSJsxNxdSj7RuMpFDjNRg7PbAuDaA0dhaNLOt9Ma5Kj9/xdNxLxtLFGJryWdI8
LNd+HVU28HRK695Q6tvPaqfoySQ/F0xZdN5MdrZMJxjTcFJge651j4YoNBIzx6Djy0VaY6nUh8ay
H7kZ9cgam40TVZZOfb0wpXX3AG9stpidN223L2o+Jaz53m/X3tJ5hzn3hlLf9uFHGOPUL28ZjnjN
HYy8uT/hB0cjtjtcO5YF0KcUjKsqNwOTZTIPVZwNUDa/K2I1nYWuNaPAT2cGPNR4jkamODIbVsGP
uEmDzn9WNfArlqiRn1/WO221vqQ37ikj8bZd6uuSCcL1vG9N9K+9mcl1ZcWKG2+BvwToWwjf0pW3
o/E36lsAiaQ9V9EIaMOo91IANXxtoJlMGGDaTHAFjOqUsTGOuhNn6hjVGDQ6FzNMNhnE83xcpujF
O9OaV7K302bucDs8hrc3sNrmJOFbd4/Q3sW8Vl23MqlvJ9FO9XvooWfjaglsy20Vv6l21dfYfJqs
MPW21mdK77kMrmerjd/ueXoi/QJ/4kmFprXUj1Be39pbuuga+2st9c0JP0/QIpY0/FJLR0y8uT6x
H2Onew+OaPv9C3zOUW+JvCU7y1Uf7lviJgbeAkqwY+gXNu+Q15DOHmN5/WovtOyXdZvZLSPqWzi1
/AO8BZLoWd/6hJOI9b0Y9c39iX0YvsR8kljNM+G4S41G1BlY4cztK64nlE3rF2Slfb+BePP1CzeM
vNnvkNeAns33a+9yPjRcWRD6FkItv5+3YBJ96JuBOIF4ug8jb+5P7MET8FqXxtb6lu2bgmKAs/tm
olV+hf4y2YmBhEteRm9vFLx5L5MrJt7Wd1rQ4JTx+3G66097tTxN2+WWe8sI+hZSLb+dt4ASj9a3
kHnLlG7U7e/k+E3JKuO4Hkbdz2CTK2ub7N7KvpG36xJOckx9TvIepb0wPn1b2xapb55+0UL8xr+U
CybeXJ/Yg+eT/u639/BNzX4cJyBmGFfTba+1yeGNwJu/MrliwRvdeTcp6uB45fWuvcuvm77VTveW
EfXtzfYtqWWPhX/WxxHGIQnH8LbyAK03bHk2u7wF/xIe9Q3tW0vl/p0LJt5cn3DELLfQvawvuFyV
Yp9Zrc75jTT/5r1MB7DgzRRew6xf31OwrGJUmHK/zDN2q7TJB6owtf4xYEq8X9cQVym+9/oFKtCJ
GdC7aOM9wrTLnuleS/hyo2ike9lgmUbvmrGqNjZYIt5QoQzmBWONlymFzbVZOnUGYz+9UGLutd7D
G5UB58lp3pxaVXb6Cv5duzHHN0IVstPruVj5GffOStjO53Z9C/4ljtS3PRjbqX8J4DU4xnZ7197s
XctY9xOH9S1U3hjumejbi0P6l32PD2mGz1xZp72WwOpPwYqDNrwy/E/U4M11GJr1dq7loL1U4Y3K
BF2YaCR7mDKKxYBWlQPvq1rR9rcJJ97inTeodeqjhGtFHl5GMXtQJxxnqbdXH39Q3xZM8CraqQuG
dnrgCQcMXkPfsc6etTe2uM1bZd77RtQ3z2U6iIE3fgesy3gQt8abOLpUFPPDCMjbzR3WaoRiVxq8
/Kotd2qZHtaK9FrbiNfn7DE4XqCP7TfN+vYuvH3N3nAniel3J4l1KdGIwtpgr/RcGF/iKH3bi6md
+pPAcl/6nlhar1+hUhzsYd5R30LR4DVvyqyNByziaPJrNmi7tyJuGdbe2ULdz1vxzmDxs1JF1JLW
bWy1bJXuTYzNKBzNm+3SoLNQei9PmiNv8E41fQb31YxyWJbrRWWjvkkdnX0dYyED6luo9i1Tukq6
1vTgBV7DpxcWvqOd3uFOy3sDNRhnAm7v99jcdDGWZuw62dTY2bLeFmWOd9/Enp99vPXKjwbLZh+W
4DXUbf0tRkemH/YQAvaNGdAFPORhCHWbbUOrMoum8Hv3x91np3pK1MlWgtZ9NPJgRZQ4XqDRJnrW
CYy4g+JfZ9oaS8YzJREzuuebZjI6+N5FaA7fpm+tPPbIn3OyBNphHI34/IU5qbb36qUn7Y0t6vm1
tXJ5I+mbp1p4wcjbJ3oN/TOTLcy35Z4ykP6Rhu9c9G21Qt/kvBUc3ol9Ez0Rw61BQp/uHjT89vsk
XoPf26RvV9j5lkLnnWLwyB6mh8NHqwSoC7j6ufcrkOecKZUzjv2GBj1RUdvR4A1pC3Ogevp2oemb
K45G/P1CmX+4KKYX7a3cDFa2wpO+haTBnDdl1niGf96fHVo6lil712u6Fh+/LdjgaORtj61Qb8sg
QbvuC6uujqZT5qx/FK90oJ1WcO9To7JbEK5NGIFn0/h4rL7/K7T1L9NqI3t5Ipu875uOe2dUptL3
6NuX8L6sMh7EgjePv1DVi7jbpz2svaQdorc79MaVffNdKycMvOFy7XtiHc+2+cTtvYarKrte6W4d
Zr21/7b1zmHnmdZlXoTXAD1NyUEGjOyUeK8mtInaqVOpkaeFmdoXwWnUzbUF/SL9hOJFI+i5MAMj
pxO4MZR7Mo3Z7QHm0TrNPtzWT+O4v/TRPP5L+NO3Q3gvb07YnBT2+VI7NXW+4FvaWr4XfQullsK+
sbax0Niw2wH/7eYc7GHrET7VoAPKka7Vbtb7OlwvsJj9tf+29c7WwwPtoRC15NZq+1JwFJ+ula+8
tNP0/GPPqgpF1fNWJ56fJ4Tfi3HQFfRSY0m884BPtCsHeUoPP263R3p27VUx9r/yLfp2c2daVr2z
8IqBN8+/SJvb7XL7OqS94DWsynz4jdROj6rVLkbeeA+cSGY13DcEVTEw0j2RzIgViu3ZWuerqo1t
/tvmO6FNKBQNidqybODMwGhXgprOmmCjO9rq99BO99SCxvnOVyYz6wuNDYm3YfcS9w6YG6PyjW86
GVyNA30JP/p2GO/nbZfH1MGNi+7aK7wG3uo8vJHiLUOpJfoMIO3DqQ/3fPFZo/pHT/C2W4tx/6XK
h2do1U2xt277wtUC9LwP6RvyBOOofS7vcp4yeBsJi7dFq4r7U01nvxd9nZmOy4t/Rt9CtW+zcf/w
t3fVXrFC0fHcT4TYTlm/E43EDvQcDhffa/zAOtBN49q4G29gcztixQK8gmvKhLbHD+FZpKhVuekb
a+PSinPB7hOXdgmr39N8b2tZtfyIhwdc16v0D/ZNmQmUyeHi870K66N3VfwWfbu9o/0L2BcNln4w
8ublF+nZu4eYFjft5SsUvMzeygjt9MhabWB4o6JXNC/zIbTXcz6tqkwdX5yRrQGebd/embdh99ny
Eiq3A8SxPs5O7MTgiYtsslpv9hzbKUqck811mH0V12Je2/z26OWSRjNzGo0kcYZu1hb7sSiKmbz9
XW1BPGo84xz1nj0myBtJ6LfzRrAv4UPfvGHgzcMvwPvaZwR2arrng/EVCt7qPJaR2mnQWuIbU8mM
l/31yqyPFrFEo6DDvJGfe58Tg35RyxlY6V71CSN3DNfmTiO37PTpjLHrLEijuVSyqXnXzEDoqyu9
16fNMpbuDTD1H/u/gjlLGrhfC0dm0zJprCbaiFZwXvZnljS+M8Tft/OjbziaHGD0Nx9/+sDRiIdf
zMZVb7tu92oIeA2FVZm9lpHa6VG1suElErQ0PMyHULbTVHJydvgNylc0oms8SepGLdNV6F9p3J71
s0LraZUHZ4zF/O42j52lmE85LI37taa6z6rbLtNMaWwQjXQ6haP166C+cVuxRDzxjcm+HfhFeuo1
k80+3sRcA7U672VE/+24WtktKPxn6eA3ZWK/86CTx7itJK7Alta2Y/MN6P9Rnh+MLLTXsjQ0hBex
NW7nF63QKoqxO+t4oGymyNSCe2Ada1kCqx9fWdDAOa+yWVZg6u1Ly+a/Bf0SPvTNO0b75v6EOvry
HMXtzJuYa7j1y4Jop8fXElu+iFw8rCHopSbOVENMGjzkbxjLxT819PcaDryli5kMOpxL06rlokfr
zNZ83PZlGF+0VmnwrBWHeaNf8Pk3Me7aW0vK0uMgzWiYYobu8AVthKKe+dyDsI/fqm8DHF2mi9jb
tdD38Y35+NTlidko7n3XreNXoBWKdBH7CX9lRN6OqxXH8EbW99af7rlw/reUQ+3Bb7nLm1p/aQsv
9Wx5i1muYykx9tu+FKb1+WoA7lfFFbSiiUOlNK5oRCNnGo++BU8YSn2ttjQ26nYMb7xhXgxbL7Cq
aRpzDam3F3XGqo9j9IyVkmgTiWTGFLlf7tVr0U4H2BRB4sYbsZ0er1+u+nZ3T1nrEM+PwmDfXJ9I
jxs+dt06aQh5DQPqcX2WEXk7rlb34o3KPXSB6BOYLBGNxBtL0JceWEyjZtKK/lJ8S5dLK43Aoj5q
zry1+2LTZfV+yMQ7Z9UnBznotU6H8ZWE0v2KlVU71dZ3/NRardfazBZJYX0Fyoo97FRUSyPR7wCM
K4s354C1B7ahX45viEaC6JervsXpCTpPoXEUJt72PqGOphPvuuukvdxr4N/KbxmRt+NqJd6YTGQa
LDPJPSEmP2TTFojdAy4XX9PFeHJn3gyM1wWL+Z4eokQeob5vXly77q20ZbPM1E5Xd4QGx7Y0OraH
xxHOhdk9bfEVzCW6AvVKAO0Q+hZQgnd984s3edt6Yjbq+du4uKO9wmsQLfsP8ob9afvjSxPzAEXu
v20/AeMs1xWMJca4cGvlzBuPYzhbjvpCv5TZO/ZV5u5Ur6KY75a9c2mnaMopQyHuVFJGuDI9ImyC
jS1/OtSaVvWy+vqN66+gjobjE9W3+3vkoULeVuJYDLztfSI92rdx0av2Vm4Hq1r4LyPxdlwt4Y20
AwyHChr/O/K2+Qv19qoB/SuepOJ4Ze9m3RXzu7wtl2KutPowsnrD2iUjv9dJImh0prG4cZJI7XTU
e06I2Ivti3K6TgYvY4daJ1O4QpF02mck1jTIavvv8819vH2XvvnHwNueJ9RRd+hTebe0N3s3au37
+l7w0bzhG5PxTJ73pxjSqznytvKNxr0YzhPpCaGPfO6Le4xOb1i0opGqWJEACzlef/2G26YG8kPg
7690MovGZ9fQa0Xe+lgG50sr4W7Rsra3nbKNsE7rKyxxvjaZeNfEKhz1RYArB7CGKxqPf1rfQrVv
09Gr6xLMYe0lDzBIP3Esb9j/tuuWz2Np1x7e8mKmwNIOsKggwfUNOC+wqin16bZaDjuxEsYuuo91
aZcknZ9Fqwfu8SFfKXUfj9hOaefS3q/g/8Ksni/mt+qbQwTnUZjsm8MT8WHdf0zLBm/Ca+ClPqqM
jnGqHjAu2o+spS4eGabepOzt9CjewDDnzgzK3mCualrF4AZ4orH6BbxhMrxifOfvEbytL2VmvECr
qjyabmWi2CAP0jxeCp5B92pjKXx9S+KdB7rTxieOx2DfHJ5Q613/hneDN+E1cG05sozEm99a4Rv5
XJjti+C5F9EIeJ23OMp5WPuMBySS7ShrBo833x3XZz9yE3qnuVOGyaC7tHKeOGaGd+aNzzH3uzHy
g5cHy5gpvewsSQfRXhVGAzcN+xvC17c+99bxjph1PBaDfdt9Yjq6Pu6UkxVvYq4hlgxSRuLNZ63g
jazx5mT0oGy0mgT2jF1nWhSNi7GM9znUaJzPxVVijmcf8KcvM4nPjx31j2p6FrtNWDq+Wyb4Vjhb
kSm18iKSh88McK8B4yDID8a97bTvA73O+XSAmbgvmcdaj/tn6MncfkGtnyYGi8fGGIe/fcczxtM8
OurGG/+Avh2NhX3beCI+qB2Z4cvSXr5CIdrd0WU8hrc23yfu1rLERftf6BRNGBUNxAoZx/tjGzek
0frVeuTvUiaOwQcwhEVN4ahoVHvCyIo227FvPmqthTdeEK1Q+z59y3B90+jOkt8Jgmm9fuOOWm92
6QMdocGiP70bNVc8BCij4M37L/CN8bOx84ApcOzKlrTsx/UsjFqKdhrCtzyaN1ccpr6Nub6l6Y7J
7wTByNvGHVrN9LbDa4+GiLmGZCpoGQVvnn+BM5+Nl31pTUPV3rNoJFZXLY8u8Jeg/CGBv+WxvLnj
b9a3UHmL92t71oq8XKghNFdq7zn+FG9tyom4d9I0TO2tlqORMVv1h1LfDuObcxhEtB5B3ygO1Vzd
CYKJt9Ud4TUcHCPvu3Bk1I9hpPQXHTS9BInDEe020MQ7ea08lTEa8VEr5IlOtXYpW0hX9uN2vu5P
w/gSoG8hfMujeDuIv1PfQuUtkNeAl4OGoBU32gsRCUtehTo6M1djlvxyrdHm0byhd8UalYlLqwtN
e89i4/x6vCD1zRPWNP6tSd8y9jtBMPJm3Vm0qtoq3uN4v/fwRSde9s/ECm1sedvAc4njoNEUEcVX
aEV/KnhwrwX2Tdnpreveu7C0l+aZrP40pC8RjYTxLS3MeQtLYhj6dom4LPStsnknCBa8re703p4M
Np8lG7QPl+aVAsb3er1UcVLLeBjXcCYV+wVVfcmCTn88G3xmCXhZ+x3rWjyS1zB233sXjvZmpw9f
wr6ZwZi3Y9K3wN/Swqhv4WjH9+vbN/DGW00lwdTbex3HYQNm5UB09yrCnpWi/6EVLnOSMHifnSm1
crTogBodw/2C6DVUn/bl3g+1bOBZF9b9qdQ3b9jg2gQ4K3iz3QmCibcDv8B+oPdSxuynCRjXZ5cX
++IKv0V7nS5zmRYnu1O2Z1Dm5wDSPF8NPOhrNV4Ixrwdo74F/5YWBn0LSTv+jr59G2/CJqdTqQrF
UeNeqfvEKm/GH9PevyItO31a2sZZUt8O42GnDWOYWlHB3JOayYbA29adIBh4O1oClrH3/Giw2fh6
uYobTMQzNG113IxxuPoWqjSy8lDrTFDedjHqW/BvaWHQt5C047T07Vt54+102MVc8mqT4Y4vjBlY
Hnvex4lpb+NlShHrS6lvp6Fv38YbWeUnTUS6Zt8X3dU+cR+reKekvbRTHSPYNalvnvESdy/fMYxP
0hjHyNvmnSAYeAsowY6BN6cnqFYfmDUgppu49wSzCuB873fqWyBp/MRBSqdTuugYbDy4qlpf5s/x
diQmfQtFO36ovn0Xb9bXH/fPMNPtU1XMhfFMo0H07eC1TxrOASbiqsnTH2Qao0vKrqtZZV5rrNS3
H6dv38kbrj/UXvKUKU3MfWFyMFIq81u0l7cSvhMYZ4jNSR/zNXRvhacjynTivP0EfYvlAd+fI37U
1pjzZr8TBCNvwSTYMfAWQALUetSL4Sli8RvcHRON8DOAj9qkxETWOzWdTVDEMfKWHtcxv32numL6
N/C2jaORsLTjaH17Rty9RFzewMhb2fUJPxjPdw4mwY45b0El8nZcvkDeFr03A3fNNsQOCJf4NzzR
BneEYU66VBVPntJB4sujubZvv5s3C5O+hVLLo/XtgvG5VMCFDYy8FVyf8IOBt4AS7FjwFpJE4u1C
tOxR75L2IKq4A2wusi/wXM3XmZaGnnSF2Z6XvIUkUfIWHm9Wyx69PZlbfZXkTeqb5E3yFoi3lxwT
/lr3ubSDkTf3J/xg4C2gBDsG3kIok4WJt1BqKXmTvEneJG+SN8nbb+Wtlgf8+sgAdzRHTLy5PuEH
I2/BJNgx8BZCmSwMvIVUS8mb5E3yJnmTvEnefiVvl4jLONPeqezF0cihJ/xgzltYEom3wGWyMPIW
Ti0lb9/M2wA0eJqufSCu0t9j+PddTLy5PuEHI2/BJNgx8BZCmSwseAtJouTtW3i7qeVVvfVavktI
3qS+/Sze0Obep28+LvuIccUiRmfdXrE9GHlzf8IPBt4CSrBjwVtIEom3UGopefse3sDm1qugwU9X
kjepbz+Ot8um0qqWrzTJm9S3n8XboBsrV9LDl+uc0nsrm2zYu2zA35vXzAUjb+5P+MHRSFAJdgy8
hVAmCxNvodRS8hY+b7Ny+RFDrTMXqNETfYR/H9Hfh/h3Zyx4c3nCDybeAkmwY+QteJksjPvrw6ml
5C1E3sAGv9LZzueYTWleGHVjLw3Jm9S3H8FbtfzCbS7X4Nzr07yKf+9L3qS+nTRv/cxNrXTBbe5a
g3XwKuLmqPds4A7XAuZmLuMeRQdM+Wpcn/CDgbeAEuwYeAuhTBYm3kKppeQtOG+koTabu9bgRCrD
zvEX04LkTerbyfHWKJOGsi2ba9Pg9E3z+kHyJvXtpHij+be2s83d0eBas/AheZP69vd5G/YuPxI8
i4ubxjpocHGsj2pPuAv8mTK9FFGihYm3jTtBMPIWTIIdRyNhlMnCXN/Ckih584jBgo5t+sgzGnnU
4Enn+fMKJZj/Hm9S3/4qbzAuUxnpn10/UXsP21wbHvcvk/l0rVsYK6M6vaGDbxjiG+uCN9udIJh4
CyTBjpG34GWyMOhbSLWUvLniYe9ZN9OprwencRnU1KPXsOtFdAu6/ot5k/r2d3lD/Tqgj/78Xoe5
iOIDWvl7Dd7Y57zdUBnwxHG4EwQjb8Ek2DHwFkKZLCz0LSSJkjcLd4sxpVcrL/ue9M+X3+s6H/z0
2h9SO23/TN6kvv0l3mrDYpLrj9FfZvJ+9M+337sf67P3aKTyqYGn0vwAu1+c6CfOm9S3v8UbaUev
9nSVoHHUsfp3vN972A9RU8O7nN57e7pMQC16BWxlA6VXf7ozh2Cjm1LffpC+ef8F/7bwrRf4rW81
8e2bxYqRewHePr15BX707fI8jAukhXhJaVKalCalSWlSmpQmpUlpUlqI0nKf/D8f8Z8i/P8l/UtX
7nyPQ5z/pvm3b5oP2RifLq/flhd6lxW++l29nFRThYn+opfThZTZ0ZtKI1Wd6H3lRYWnu/oXY4AN
toVxnOX+hB8cjQSVYMfRSBhlsnA0ElYtJW+Stz/C25DxdlwYAG89pawWulVq6elqxrh+/+rdzatH
2ZKfYd/CnA85UkIic36hN5OFlgZfIjtEfRsYsd+qb7KdSt4kb555Q0sA3la8P9Avkm2yFT/Nvp1M
v5Bl5+da37iIjbG360l9k+1U8iZ5884b95QT849bRrbkxOzbafUL6cRzP6/DeKJflfom26nkTfIW
Hm+Fif6hT89u5om/Zt/84m/uF5owPiijX9vRpb7Jdip5k7x9M29ka66SheYfsW+n5fd+ZFlh3gce
0i9S32Q7lbxJ3v4Sb3oXbBHwNg8/vjccixlSv6CXM4VnqW9/Xd8kb5I3ydsmb4X5R4X9Lr83Vfis
Xyov6cK0L/Xt1PRN8iZ5k7yteWuyCtmrgDb4b/u9qergsyz17fT1TfImeZO8bfLWuij8NL/35fE8
vy8STOrbieub5E3yJnkTd2g/FjPm51cn7vcaxlfmBm3u0mOUgtS3U9Q3yZvkTfK2egLtGY8IOEW/
d/zx9H6PO0lSPiPDpL6dqL5J3iRvkrf1E03Wpd0Gp+P39vSnx5dUYWJkoIxFDcq4yGOZP5lHDLz5
/IUbjkaCSrBjrm9hSSR9C6WWkjfJm+TtT/NWBhuskb37y37vxFg8akFsrtQ3yZvkTfL2o3gje/fF
buh4lT/s99JsLsW/fSaUlwyWychhGedYxqNwNBJUgh1z3sKSSPoWSi0Ro76FU0vJm+RN8vZXeOsA
NhKJjJH7Y36vscxcQS+AGcJ+Lm9S3yRvkjfJW1De1EJWI4v4/X4vet5d/ZfwJvVN8iZ5k7wF5A0s
4rf6vcnE3Hj6hbxJfZO8Sd4kb4F4axsX2VL4fq/Y+ft7eZP6JnmTvEneAvJWTl43nTMAH+H3JjLn
5zSb0f/1vEl9k7xJ3iRvx/Omf7EaWUwW2O/Vy5ni5b/Cm9Q3yZvkTfIWjDeymEH8Xv2FXT+aXeOC
pf4l3qS+Sd4kb5K3ALyBxUz2L98PxZrt9Xu7+uLaAIlNkmjgGwrsECbefP3CDSNvwSTYMfAWQpks
LPQtJImSN8mb5O0X8aYWa0f4vQP96bL6T/Mm9U3yJnmTvAXiLV3oNK98zffirrSh/q/zJvVN8iZ5
k7wdz1s5U7ytevR7k9VP/TKAzf1NvEl9k7xJ3iRvwXgji3p4vlcvZ4uFatd4QgkxlJAlCUdg5C2Y
BDsG3kIok4UFbyFJJH0LpZaSN8mb5O138UYW1cXvzbLzc414y6ckb1LfJG+SN8lbOLzlUy7xvX0j
dzeWvEl9k7xJ3iRvYfP2kSkuzD07g+fNnuRN6pvkTfImefsG3q4Nh53B7EKHv5v49xI+3xK82e4E
wcRbIAl2jLwFL5OFgbeQail5k7xJ3iRve3+R+erdzW3zvfoNKy6qkjepb5I3yZvk7ft4axmLu67N
7+0YTxdnkjepb5I3yZvk7Rt5K8Q+PzYynMdacV3yJvVN8iZ5k7x9K29Tflb88vptuT2/K3mT+iZ5
k7xJ3r6HN25zy8nbC03yJvVN8iZ5k7z9Ed6aqWLZaBm5y6nkTeqb5E3yJnn7U7wVVcTP+otCuIV/
T+LfHTHwduAJP1jwFpJE4i1wmSyMvIVTS8mb5E3yJnnbeKI/b1ZxfjepAdbw7236O2N7seDN5Qk/
mHgLJMGOkbfgZbIw8BZSLSVvkjfJm+Rt44mB2TGeHrqSN6lvkjfJm+Ttj/AGNvfWTBWSrbkueZP6
JnmTvEne/hRvMcR4irDkTeqb5E3yJnn7E7xli7Nqx2iVlpI3qW+SN8mb5E3yJnmTvEneJG+/l7ca
PtEj3PePkbdgEuwYeAsowY4FbyFJJN5CqaXkTfImeZO8Ga0KPtFBfKP5x8hbMAl2HI0ElWDHnLew
JBJvodRS8iZ5k7z967xl8A4jvDgOE2+BJNgx8ha8TBYG3kIok4UFbyFJlLxJ3iRvkjfJm+RN8iZ5
k7xJ3iRvkjfJm+RN8iZ5k7xJ3iRvkjfJm+RN8iZ5k7z9PN6qnLcu3TH4nSAYeQsmwY6BtxDKZGHB
W0gSJW+SN8mb5E3yJnmTvEneJG+SN8mb5E3yJnmTvEneJG+SN8mb5O2v8zY4B1w/R/yZI9627gTB
0UhQCXbMeQtLIvIWTi0lb5I3yZvkTfImeZO8Sd4kb5I3yZvkTfImeZO8beAeYRNxY4WBt607QbDg
LSSJxFvgMlkYeQunlpI3yZvkTfImeZO8Sd4kb5I3yZvkTfImeZO8Sd4kb5I3yZvkTfImeZO8Sd4k
b5K3f4C3J8SXiC/2YeTN/Qk/GHgLKMGOBW8hSSTeQqml5E3yJnmTvLn8ok+YITb2YuDtwBN+sOAt
JInEW+AyWRh5C6eWkjfJm+RN8iZ5k7yFzpsYRW3EW5qSN6lvkjfJm+QtbN5W0eCDVttgav0FRlGz
9xeTDaKRdn4MT9yNaG+6trLKPcmb1DfJm+RN8uaDN/JiKZszWdRe+ZExc1JoM0XP3zKmprIGy2bN
PJjfdhV4Y9XS0GSzUU9l6eHHPVNat/foB7famC+kI6x2z8tc14/mTeqb5E3yJnnzwRutwHYJgx/b
WrbBrwVbySo3A8Yyql5gjCVUtudC2wuXuUzDUzH4J53MwM8yrw2mpAd1g426l2CDk+8L643cqq/e
+GN5k/omefPOWxvxAPGt5g0Tb75+4YaRt2AS7DgaCaNMFua8hSXxRHkjr9aKq6mCRXybg/P6VmHs
a1YEY6lrD8Kv9XwJ27t7KUzrM6YVwIC3P74MtjCLCbTqn8KT7jfbecbnJngePSseiWvsSfEm9U3y
JnmTvPmUgP0v+Zg4XTDsXBaAN3U0nDJmvMw0ls0+LMFQqlnv1taj7d21xUxNZ03wpOm1OrjIubNP
g0363T5Lv4GzrOhX0UhpM+PI0V6D1DfJ20nwliOM82+Doi+MvPn7hRsG3gJKsGPBW0gSibdQavkX
eeNjHIPjdHGeYsqiWTVYbHGbZ4pifoD9U6MRxYdfG5rt3b3MBHQA7QX8xzihsXisQf2CehEHX7z+
bLBBO99nfM7ZPmNMtZT6dgr6JnmTvP2TvK1nazF2W7+519i4f1VhmXH8gbFxJ2aAudUqYVpLhytU
aVmQRk6xCua3AUWvFAcaruIlWHpYK4laChZsM8YtQ+qbbKeSN8nbt/F2yfckGqzfbDFujVhuaWgs
mbjTwIdsmGC/FGb+QWv5/dJoFW+5TJsslcj0oWdRHpkS77yZbNiJ4Zz1+xez5iZoruKyL/VNtlPJ
m+TtSAk2W/I4Qd565UeTe4DZ6UMMrNEijTMHxjIM+xbg+uPSTJw8aTD2wDpQ/ZppsK9pssLUm2wd
WNI0XMV7SrDV/npbLIXUN9lO/xRvOFtWHBI2jsPEWyAJdoy8BS+ThYG3EMpkYcFbSBJ98kYz87Qb
IXdrskG7smRq/R5828rt0GBqNKLeo9UxU3/Ivv0oabhOqGJgm5rOLqFnyplianscjfS6BTHvTWuN
lg3+1/VNtlPJ27/J29qvfcIVsUmSKQvj1WSL+U0F5zlftuO8/r59+2HScDRgVGcobdyNmSz2lVJx
N14XYylK7B/TN9lOJW//Jm+a5W3hPKRexBWx3kuBZRr6JQ6PF4xlswzsAVOVb7ZI/7Q0c5ww2LAd
w5hiEfvzO/VNttO/ydsC79zhnTw9EQAL3kKSSLwFLpOFkbdwahkmb0Vrv4wJhnWZxxUxGOzmFjqz
VsSqU4YrYmHsXwhskf4RaRl1VmDp2tUFthIacfwafZPtVPL2T/ImvFqM83qeMqVXKWtsNr7GVi9W
xL5oitY4EHrg1YaEcv1z0h7UJq1VkqfS/sn6Jtvp6fLG8/curLxS/E4QDLwFlGDHgreQJBJvodTS
I280wqAIpsuShnvE8kyt1/qMVYF+pqJvxcxl6ttsiJR2hLTlLGnAt3ouMDHT/nP0TbZTyds/yRvN
4vAVMcDpYjLDlEWryljsa5hgijJu0ML6H7MhoUvDXWVm/wwz4Kga9Bx6HnHsJMoWzpWJRuxzDdxT
OVV9k+1U8vZP8mas4wbxTuvuAfMMnPVZZpKrMDbunWlgbg3aI7Z3RezbbIgfaWRRzSRY1DMVcyco
UPBZFQrers81drZIY76aTGN0w5R4t2awUe8lD9apXGSs/7k4Yq/xydreB7VFcdFPjxTX0D4lfZPt
VPL2T/JGK2JWXHS/1W6wdOrrGVv9tdoyWSo5wTwDxhfzsEfsD9gQIU21bGo8o1k2FaPR2o25wc6W
6SXLNGa3TEmPGgZ2FhWwqDeX0I+UHjQrZ9jdmCnrePJV7EXhDnfGve/uPv47NQ3jWs6AqmE00ulo
LOhcg2ynkjfJ25G8rfeeJD+XTBm9VUw2n77lmXKvXqM1U3mrR58xpMuPp0qZbxMZg2UyeoPykYNF
RdMfj93CwHlyjf2Ckp68i3wNwqaib06RFLjzja2iXrb2b/HVgP28gYQC8ABivr+mf0oaZUoDlvK2
fUaynZ5+O/1hvD0ivkTczHFMvG3cCYKRt2AS7DgaCaNMFua8bT+x9mvJnxt1O32clz2jYHvGshll
DM0zkfmWVm+XZi5Vsd8qk5m1xQxxv7kwWfys0YCbD29wc/5hssngaszSw5ciWNQHDX3xCnprGDlR
35gPEf7baoU1MG/JTzDx7fd5gDCMk7O9D6yNMw1lbb1e/536diz+19vpj+eNITYRjy2MvG3eCYKB
t4AS7FjwFpLEVX9Knk2zpYKvcw8eYXrcAPsWGxcY0/JdsH8ZL1O0Xls9Wm1+ak5Gwc2ryw+wqK2l
wRJn4zbL3ukGY7lYNGIYYFO7mPHm4w5sqqaZOL+B+RneZlYtdmNWnL9t+LzhHb14Z2LMcSmQqTst
27vEaZlhJ0bnHQ2/h7dwJP5b7VTy9qN5494++X8US1uORh5NNh3GweK9gxFj5jTBwBiy/hFtVs3Q
nKrdpupgU9tLnJIoLcGm9lqU61uDN/YaYFGbDyJmlGaMwaKadou6HTfo3l/+BX3rt/I412CeB7N1
J2V7aRac97/WeEG20xPRN8nbj+GNW6sijrExlnbQhgG8env/Ca7sdV/jWVNwXI9ujttFeVYwEiyb
fcDIMLUpMtsm4mMmbPZ1ugUWNRoZXmuWTX181Lgzm0q+m6IMnr3UH6BvNNdg1IPt+ODXydhezGum
9J7Lq3kn2U5PRt8kb6fL28iyZzijwvNOzTC7zHI+tFafNmJpFXH+gsbPy6U5Pjbun5l83272PT0W
UQs873Zq+CTmAAftfJvPc9q81JSV/y0UL/W09U0vRiN3ou8J4zoN27s0Uxobdi8bVu8o2+mJ6Jvk
7XR5o/X6cf/FYJnGqMhYW/8ScalMK/QYM4dxAyxqps2yH/AjVrro4r7dQh54S6dSb8LXGbQrJtpU
PA33qrSOovc87v9pvB2FKaohGslme8rftpYhSgNtweiP8jUTM1OynZ6Ivv0u3jCaiEbAzdzSEXPe
3J7wg4m3QBLsGHnDO7jaFO/VGPdrs3ejtrCp5qRvMvX2SgeL+vKEJ3a1E2BROzGyqKtWtRsfwnkK
UsafwFtAiXjCAzNq0Yh5Gue1hSPNmmtgK10ImzeBo5GwtOMf0bffxNsV4SfEz3sx8HbgCT9Y8BaO
ROpP9dt7HPE2VJbNvibIBqPX2jYtL5VHLeRWFvWKeh4HichbOLU8cd64vgUsk16kmYZG4u9byxCl
Led8rgGjmmlMEzpvUt/+ed76hJPUilwx2Tdfv3DDuC4TTIKFwYIOohGMslI+WEE0HTrLUdFL94xd
Jz5NNsJE1+CfzeEmzhT0yc/dI5F4C6WWp8wbYqFvASRgVEM228r8fWsZorRM5qGKcdEFqOUl7RMJ
nTepb5K3n86bydLFTgxbFs3n7l540gBF41ZLQ4NNB/ECS7/F0qtWRTsB/j3ewtC3dJGiGt5mx9i3
g9dfk6ble0wZ4cyUo3bIdirtm+QNcQvP9k5GI4lJ9XCrMjGstv+5wJ2/hQTPPq7ohRLdxFZG6/X/
BG/B9a3F5xpK6w7vN9je5Txl8j2LoA0j2U5PR99+F2+42oS7CXRcvz+IkTd/v3DDwFtACVCHQatS
wdwJV37baUIV0UOxRV1jah3X4Fr3D+QH8zhVboUDl/EUebNhoW/+JQwwriGb1dPH2Ddv11+Qlsk8
4O6W2g3DURH7Bt4cMbXTULTj1+qb5O2keMO5BsbaH19GsHaqJjMmS1HKmVJZgdHmazTyJM7lEb7P
5TF91anyFoa+UVzD60w7wr55vv64ND7X8Pq0Xg2Q7fRE9E3ydkq8tW7urHPKwmqnWUXsHo1Gsnet
T6bEW1WMlMivZiNcfaGfwVsI+la4EzkmjrBvPq4/K21jruHgmEe2U2nfjuKthfgN8bUfTLz5+oUb
Rt6OljBotbWN/ITh5woDS6yVRC7I3ELHdvmM+9beTWat0rWWP423HQz65vMXPK6h7rjj+sfa3kxG
NzA3UQnbCPWvofPmhkU7DUni79I3ydsp8ZYuDmKUn/DPtFOFaWPGHhKfjFWu+5hD7ApjK+bJn8Zb
GPr2CaQbL9M96Rp+qO3VCn2mzN4qIm5GttPT0bdfxRv5ayrimV8seAsgwY6JtyMk8LgGa67hz7ZT
VZw6YVRnJhvSyQV8PPEDeHPGqG+ef0FxDWeN/VvXfqLtXX6lNTbqXa7WoUPljSTymSqaQearB+vY
Ro5pH+VmxLlxyu2Uj6EP1WpdJzGHo9nsWygaDPYtpFr+qnb6PbwNMPe3cm9e/J12Slc2q2MOnWnF
0qcfwFsI+kZzDdPX+NG82S7KXkQxBeLENzydKB5r5Fn2fdaD8cXtgLFYNLIYVfBOl7HG08TgPa6i
tN/EKZw8djvIN81k9DZmmLvz+i1deeMSciYfmSkjzAYy6Z+NmToaTmnmirGvaVJjmUbrkrHrZFNj
80kC45HUURfs0+LjxeSnVK/mttbzH3+nnVrzlmRDMU8UZTed9F8aUKvuSMzH7dQKIzjV9Bk8H2+/
aWzcu8Txaky1+b052whD2rcT7xfSxc5StNOjW32AdsovozrF48yeV3udTp+3MPQNJ3galam2l5f9
vFHeY0Ux3xmrPkBjnY16SxHH1bp/YLw/FbZGrFhsxFvinQXjUS1KDzPFj3tnJcyPVBBRLtAbqvQm
n2XTCgM650nz/i23eSMvFePDaZUuU7pKYV4L0+BZeHg8uciwb6oOpVIVnuFZMXnePEXp16HvKfRN
NqX8+MVJIpR+wQcWK0Ma7wWwX2gOxbeDTpNOHJxTrcx9taIvkWXYUZoNeF4bifyqy2hkPqwytX6z
jul8sq2a/NP27XT7BR7XEM8UnL71H7K9iTPV4C3/O8anJ6tveEJSPKYePvFyxRtGjKRTH+ALlV4U
OtEXJVLM3vNq/HnIn3Pgja8aWxHqg9YSvK/bi3fsFyY4ImH7D4fb/qY010D+mJ9vaVlc5G2EWXaW
aEt4plGyNkddDvpGVtt4MzXciZkXPqe3uYhj9Q1ZgL7NQF/cRAejssqnGtoV5ecIYGd7NxaesTgf
0Gfv99vs28n2C9Zcw96zEP6A7fU913ACvIWgb3yu4cHD4D4RAx/J4NYoXbu6YJtxNd+jb2KHjSZG
wGNM28Gczibd+KaZzKwP37L74O9bfs7FuVFgkdIfeIqJmt150RGX2zirMRdb4oft5SpeKXR9WzSr
YA8TExxSLjdc2e9rWSqGc9K+SDzN+zfaNxrL0a5ZHLkFwdBOA0qwY+DN4y9EXIPrWQjfbnv5XMP7
82r+7fR584JJ31yewHwNNNfqctGJSrPRK50PSPZJaOCf1DecQxxhhnPeT4gRsfM31UpD+Ja1iqdv
qQr9u820cF5AJGv6o6uK0JMo9z3a9fOkHS6zF95U8W1ptpZOXD2ybCHUlE7CM8fVgujdoIweted3
2Lcw2qk/7JW31i3GNRw6C+F7NYTPNfSvcKhEM1M/gLcQ9A3jGvjJoI6XiQss08EZW7Hyd/UNy0Bz
iGfLOtqShKP/tlykcd7omXn4lmidbnE6QVG2EhP/hYgO2nmZHmIed/3amgU/qj8FTzoX/9TWPUng
snm+9kgzYCyB/QDFj+c9a8tvsG8n2y+IPRSjv6khYq7hq3JI50+ItxD0DdtAdnr7tctOIq6KFbNt
6/XX9a2FXmoSitd4npKxXJtf+qbWXIPm/i1x9KjMP0zMRFr60/rmclGtBu32mFkz8X54o1pN39Hm
zg6/y2/ZAkqjVqaOhuuZ93/Bvp1svyDiGmpezkL4Ng0JMNfwk/tT9I0a5a3BhsJwNjdlMLHyE0jf
xMr2Zo4nYQ/V43njcw+dNh3Lt/VND841vPEYFoOpqr5/1W5LQ0K4PErTTJZpzDDPD65+etY3qtVb
xRBRCt9TthCkmbjE53FE8hvs2+n2CyKuoeFNW75HQ6y5hopnbfj7vIWgb0WKa6hvUKKmp2PMJl50
80sO6Ju1JxFz42oi8rVeboqVHspuL2KqrH1GR9VK+Hcmz5/Pr+UiGqG5hm5+z7ekua04Dxv2riE7
F5+d4Ces9s40Hu0BNz9AmxIZmoPejcryqr3LBcZm9F+qrvq4wRu2onjs1r/N3Sqbae0rMscJQ9SK
YrPBYtJJBcTbwbP63GuanV7jlyjd/1S/lyJ56HwGaKfUP9ruBMG8nYYlkXjb94TIDdnL+tSQkC6S
Zs01rFdgT5833xj0besOj2u4Xq9UmQn0tm6d9Gtb4q6+8dmLAlNvb3QRCcZPKzWMBYWLmqLd4r5e
jIyl85/JBsfFuvOBdzq8kU6MtkXFZDMKrgOmU8Oyw7dEPB2+aiKmwL++0U4R2vehjr5MEXtG5wGm
i8mMiLCjSLFsFvemUK33SnO/su/pkegn3PUNazXpd6ELMCrHnhtNcdPRCJ3Njf2jgXs5S6JWrQcN
I4A7Few/22I+xLLBey+3mqogFr5Er8FssY0+9e1v2jdaJyzyNpRfrzuv7gTB0UhQCXbMeXN+AteV
DU9zDV6+qf8LpPG5ho8XzRoD/wTe/GPSt80nWONxbDGPUfF8FO6JhS19q+AOiFZ+tQvNy2X2zxir
3AwMPAeqvVzafXGPtXqfUSSYYUX2g+2BOkQjtB9msxaDVruyNzPQAQ3BUZHJvmbFCu7YWmf3EDMm
W774lPw5A55/qwoPclOal4t4FH4v1nK/vhXEDsGjLjoxSR1N0bO+AX0z983RrGZ5BnhiV6Z0n4Yy
LtMuog/4vdmWSvG+WKsc86tvP8a+hdJOA+C9vGGfvnEagpcrTNubOKM4VdDxiquOnxhv4eibbXza
bszBOrUrmL3t05P9E34I92hjNMo+5txi8LSzd71P5I2PP720w1V8EgNvDMbCygzMgW03DI0XVt+S
YsdSQ02M431caiprMPim08LS/s7DzFMdOmBztVyX9kMfc95HZpx+2PdGWiOpXZK0MYaf+L0UxQCb
m04t6Q2mD32zbPJ8khiLfSHOl1tNqS+b9M8Mz63uR9q30+0XyA/R3bpO39/U10UzDTg+PXu2a+DJ
8xaKvmWnuang4WuW7Pvqefj8W7p2cyFmOgNctPNpFo2MeuMjej+0b+S7Z7MPtBvmifF58tW3BIkY
r4uvctiF4XKdLUd9nA8547x5srnb/UIeXLtZ5dEu1qv20s4RkrA7GkCWFvoLaHA04ieOwbrI+wef
855t9nUe9Y1+gePVxtPE5du719RaSfTa6k7Evn0RFvlVLQy8bd0JgkU7DUki8Wa7s5prqB6hOGHZ
XjHTEI28rOKPTp23YBL5+DTF91BoY41nzFTrzQGz7Ws7LJFWtqCmH5S/YX+kvtcrm+1lye+9fzDc
dXwLY7s1J/0+3wyG8yW2dRlsNTSiTSYmDV/Fwa0a0B+/WJbBxpsv5oEnnm1mIw+QJ+2l2dd0KvW6
tk4btZ6jJ45RzT7bgmmCzU2PGth/ttTj9Q17FvBacdoep/WdL7ey0TmKMM4ar+3bAV5/kn0LrZ2G
IHGHN5prOFOPWxgIw/aKqIaX6nr99CfwFo6+xZfpJV8BU2boPfnpeShC4KxUDW30sVxiTEI00uta
dt1brWi24yb7BgZlFGdWhIotPmTU7YzRKnf8lAY8whTNfrCA7RSt06j3rOLOuoH9DV54S6gUvWHs
Wkhc6bHP7vr5ClYGzcRenr3qWx5zWqfIgrrMM+0tm8heTxnlViu0v8q+nW6/QHMNr0eHwgRu9SKq
gXs2PI7rR/AWir5lJ8pU7PgadWO29a1DEnA+eJnAaKOnUL4CXhSlhZ73en+9d997hAVJp+4L+C1f
rXbM99er9Y+eU5TB/guzNeSWhoNHeEw7zfMIAZw52LJOnnhbmCnHngj6G+2KV2yJedBqKM0cxjGe
96NPdxww9k3gbOAMSiYrvmUwfcMV/9jixr0Se2qKK6zKArNNOvrev8C+nWy/QHMNr1PHz+LtCtjq
ragGwzY+/QG8BZaI872siin+KPIrXbu/ZGJEezi2UeXP85j4ML4CXYkM7SkzeLyl93Z4hxHCzw34
T3BQ0Xdf1eHTRFcXvGh/a2poo6fDV8xZJ2acg7ZTjHNIxMfHxPeSX8Il2CXe3NE+N5PRPDtGsxls
GI10OoWNO4745jxLEg70bd70Db+UOjr7csqkcbCmmPXOHPeR6bcdpk/Uvt0QriDuOGLBm8sTfjDp
WyAJdoy8dbhG4lzD+JgF8QPf1OMl5hq6Vd5OfwpvwSVq7CwaWaZNcWrOovOG488O2NThUAMfsl7B
MTKMz3dx94Ep8X7N4Lt0w/gKdOHOOZqtRXvngzf0KWsv1zhYWdK3bFjfssSjZsb+yka7btOpbBVb
HY2Btt4I7dQ38yWWnT45RgAcKhvVCmxs3+kNx63X3/AowHD0jdb5WlWM6jPcM4061zRTqp9Tn+5T
g/9eO8V+orNY9V0OmHhzfcIPRn0LJsGOedxga1nF0xCOCIjx8k09XGKugVYwVlGpP4C3wBIxAjQ9
tHYt8dUkPg9JUVc8t9V+nM0+oHsDXmoYXwEvvso3OltFbXnlDW0JZfhKJTO0GlVl1h6LNiYL1h58
ls22j1xETuyUQLRT78zz2ItjzrlLp6ba2kv10PL/sL5h3zQZXI13opa91vQ61VxFXvsr47/QTo/U
t4O8UUzK/kVRH9eRrZ63Mhqf2lvZqfMWuEzQRqp3Q/OETljDTFbK4vPV9iU88Yb9Je0UVmbGi32d
MF27z9MOWM1f2RKJjMbX61ceYvB2ynAtcv+Ux/6yUQZzpfWorb2vk9I3Wt28vTdEXODBa6emX7NB
Q3jOv8++nWi/cBuN+Nk/7/uberisuYbGTis7Yd7C0DeDxRbpxtG8hfsV8GrrXyYb8LhVMbLzxlsO
2ny91gFffJY08Vtacfm05kZr577KRvFxtCZnrbYHbaeDdr7heMKgF94onnfAc6aveTkdfaPIQsr3
Rmd5e7g2a5pp9K6YFTH3u+zb6fYL7QruE/d0GoK3y3ert+IaNuYaTp63EPStwLJ3s+7RvIX6FRKx
NGPT0bXh6GMe4u0TvPfSRWc9b1RlSh3jIv5/9t61OXldSRv+nqr8B2p9mOd5i/Vscz7MzF5VnBJI
COckhC+7DDZgYmywzfHXv5JsA0mMLdk4NzZiZvZs5YaW+upWq9VqtVClZWbc+3J4izu2x8z02y7I
5TwtG+dbeo4BOW6p5Khv3la+Tn0bM/Fdpo8p66+cwnfqSnv+cIYbMvt2teuCfvvl/s7+NQSyD+Gs
h9nfRrUGq1l2nbhdQN+2xhvAbnG7kBT2mzS8AdGHt5XlvRvcUI30FLqyDKOMeqxhDqsOZJ8fRsea
YYRjS6deUNZVzrAtrucpXEkS80HrfAVg+7HlX3jes76dnEWenM971zd47reHYnMonHOG02wuOtYr
Jh1qrV2/fXt+gbugWcvUWMc2wI3wF3ZtpG+eKDB6lkwippT/oMd1WpEE6WcQcDu0UZzcDQWoTbHd
8qsl8FkKUWZtVLRpZqfG60OK/CAdx7gmxA3OfBUVKxgPV0Ydd0WKAysuo9P2z4+xXpfAcWw/P2sp
hqrwHFbk87iCeWo96p1xL5coc+d0bCjHbssxzmPQ22rc6BHlQcB1A90H7LTg/eVYXc//gDGYQ9V1
MlvyTd96ZZh7LVmtbhgfeN+ZP5yH6uuChzkRynlKpm/4bZTV8LzBnAsEH2xq+Xxzb96hOCv7q8PN
u76BFTz/shRc42b9QbdHZ+Mt9EFfoB+Sz89zho3dbQZ1fZ7qM1+Ckc9zqx0Gbui+qQRvmZk3cIxb
tvkPJspWUSXIRF+/I2vxweJUzylYiA2kHS2CeWr6SvrNXmjFCT7m2FA1GUWvJnMGJxQXTzI5Jdpm
mD6sWoEy6KJ8uQa++hkDwwfaCx90jSqs8ZYeqkuWy/Ec+Jper2FWJ9U3oD+Zp0IUSJvbujyiia6k
D4jbHBazMPfA4bJvV7sugBWaGXZUwnNnvA8mNTPWcDg1DgJu3vUNeDpMryZZAOJFCug2DNp9Zmob
mPn/cn/XOPixhxxi17PsBDdAIVfv5L6cpsPCH/BxihYzR5n9LCcab99afnA5RSuJYf8Mi3rkYWf6
6ub+FFWIgDUn1qiC1xjzyMlqbOnUy8zMJbPeD0D7p9cqsq1SZsWpXn1tVasbnjKmz4nyezO1VJph
Wo9zBv9M7ecH6R+yb72Q2rerXRdgrCF+Wj//922vc6zhCnHzrm8o1rBN/7xN5UkKiXgdzqFN4tRS
XBC3tXl/Qb8JjCLEp7JEsQYUvUCxBnTPw7aKDwGn6En2Z+azpUczMoPOg5HnhXIxMovBE5ynoM+1
jgOzVhIucYzCl4Du77LZRsbZIgrNJlwSXqxWUUdOUWXHVkWE92MqMNaqxphzdzDA/jSz0KBn3by/
Wzoga/8xKqK/6ytVaO3b9a4LMNbAlb4k8v6y7cWKNVwdbt71DcUaeN41btZgal04b4396wVxQ5KB
sYnsMg3vGem5Yz9lCW+dZYrsMdYwPBtrcMkprC2JXs9FGcKZNFfVc231EUXv76JrshN+q4+ekzx/
u7/rHE+i7WcRRp13G07ha/NRGHnvvyyMG4TZpabCOmYwQKFKMyY/SkiM/iwf+r6neYoiUQdfPmj2
Deo4eiHE8NWJ2sb9BQ8UTtuH/QIhBRhr6LeVb3vBX7W9ZqzhNNfi6nGzbqO8aMxfwLdGW4+S63qq
1h/0OgywkOOL4YZ27SgzLP8yn5o118+MDd3CWE3eYV4DzOzXK+ScjTV44dQ3atBP1jNjD+f1OLLs
PS/c3F8484GVglD1BeB7Q086m7P6litO8zC7w6hEesgqhTzp9u0Ss8rneVpH39j3zP0BcduYpx4o
nLYRbqQUXmCsAdUMuIRMz37sqBmxBnSHAkXsgoDb2TbUN6xfwBV8vx3Yx+eIpYBqRaZTseSFcIPe
FyoEAF+TZODtZtuxGbEGsIimZVivwYw1OOcUXIfthXmt6IRMnu3XpvfljJt+ipeCOSpJSwt5ibFd
hBp6c2QpoPXUgidg3y40q0IzT7Ha5LjNyn1UNeACMnX4nKVmxBpQvQY9LhkA3C6gbzNYgoFlz6Di
UgqHWMPhJEhFtkPfEbvBLfNUgbfJYuMWcF0bX2PSP8ZmxBoehkyURVUEFo9l7JyCP2970e29BXy/
/rsP4ICbHvUWcetf/ilOo41kBUZQOoeIXtjt2/WuCxsYa2guz7gkv6IheqxBr9eA8mqCgJt3fZPN
UxW3uFmD+QFM30KModOnCsoVOtwE1s/cjLpSBEjr0bU6jN5+gP/6eXrR8dvY9IoPUxhrQHeJnx9Y
6AfnMDOeDnlc8C4devHey4dkX49sLqoPd27fZadv8BerMdBglFF3ybHhfZyoZRl0/Tq6HL62nGUf
Jvt2teuCHmtYnj+R9V9DyGMNV4Cbd31DsYZNGtVriLrBzfKDInjR6J4zDvUz6TyslVt+MvbQG62v
v3O37X7zjPHiI2tdUnpW6s+xoQiwKouwrjusmrjiXhmzlhreB1HLZvkyk10ulgyjwFxY1x8H3NBr
y6humenn7l3pG5QlykogeWsD3R1zz5oFtR8flGuWzwsZYHM/ei18WV+xfZPhPO2j1/iMN6VlL20w
Tz1SOG3f3+H+Ap5U50cJmViml9MQFGvIPsH7MwLU4EDghtOG+ZY235j1YCr9O8LgF/enMAq534K5
sAZ2fwCrsD8UIPJQp/G4hNYJvYmTzzPVr2NDf8myT/BuAMyEUOaVvZEJhv8B1Fr1BbDasAqxAl/u
0XMG8OpvWVD7+kGvbURX/Y5xhobukAGuYl70rWdUY8N8dRhmMTT2JTg2dKcC/D/vNvjAKbyjiCrs
55REA+x64M05pG8kGhwO+3aBeUrYxsYtYeSw4Mn0Ip/v+1MYa0CvtspwRQ4Ibp71DVbKaBXRC+SY
s+7yUoBWuN9YtuB7ukk4RizrA9oLaK1Oc6iMsaF6DQlYmVtGtwsWnQpOfZqvn2Ty/g55zmDznqnB
7O55q9UCLvw7jFOuC0YGsX7/GZ2InfnAFy7Xs72R/zZmUolhErjTxbgZgzH0DZdrW32bw9LD6dQL
bnykVfjU37mLV41zFiNXbEx+/VfP2Vur93fJNayZA2ws2tOcrAu3at+udV2Au834/tk599E/24ti
DSqsJ6h7U4HAzbu+QR9zD+/x2toO/6WAsg6ANUqQ7TigpDILtgWrz7QO1FCsQZNFaMVh3AhZTP25
X/wPuhlwf4diDXBMa9N2wD7nzeYa+MGf8M0bUWaY5+gMRsvYGZPXYEY6er0ZvUOWG/JFsAqg1z3u
78QY9GtT6SOX7qzReX2DWXz5PJ/G5DIJVwFY9wzpG8y9VuAbI6hOI4zVw4eWNRg3Sk7gHgWsNHqN
zVZ1brz7hGrPozv/YA0aoZdFZ0jfNoSyDJZ9gxkBgMe4gdvJX7y0EW6eKJy27++cfwFjDTusvaBP
tteINcDXXgR4khMQ3PDbur59/wac+bncI3yxMnqMNaB8pDwyxMjzSWa/txFuJ3/Bt9p2UkB3/hef
vSwcYwyDKxhvW4qvsAqB9GFK8v5OjzU0OCRLVM9hjHW74OsH8vQI/N4JxAme6/0YA8zWMG3yidfa
OljUvalN5r/7P0/BGJh+fYEZD0G4RZevbUa3b19HPevB89GnAqqsAWvNv8Kamwv4rt2gB99HBe5y
ZlCJGr7TKQpn9M1t+wrtW8LkGs7T4Ze/eGmj+/WeKJy2DdzsfvGtQiHOPL3Mx9yfoljD+O3ghwQE
N4L2wQ85+Qacp/XCpzlP0cs+j1mhpZ+A5epvsFpqfAxzRPvZL+37u+NfUClV71LI5ZpDOLNbpv1y
5qqve5DMjF2b68Z4jN7PSsz6p7aAaRWJnnfXP4nY8x7hBmvhXkYSPs9TaDG3sPoCTj6v8YqTMo+X
T9eF730ePb7vK8sX3wlH364Wtyufpz7i9qNCoeM8vdgH7U/1WEN8fFizA4Kbx3kKZtFunTLju+j1
76VYMffUX2bZD38O6RvcTQLZeX9BBFAbjzfo3cQW8eoX3y/NuGY2lVsz2v0dzN81R/3CmHXKJKLX
/dCb6NElvLd7sD7XPU9hxJggnxfFaLJsZ2J6udS+XeU89RE3qwqFDvP0ch+4Pz2JNeB5W9eBm8d5
CmMNSrRp4IByqDKL6TNziGU56RuioJbazJdohZtPFp5nAZspx7OEq18f3iWeGGSi+n3UzkSPkx+i
jGmxATw8+6INPz6oyqy2eGAQbmgt8iAJxNOzbt/0MzV5b/7Fpu2oj6f6BvtAOzf0GgcGh1kjOmv0
SO3bNc5TH3GDsQbCeXtB2zvuqRA377GGoOkb3IU/52dmXsO4tTRe48BEQd+fZtTh2Dzhd/1B7xib
+b2Eq9+p9qxnO+M8C60LLeMX+hlbMkc+xlzu+dXADWMtOt9ewbsDqB5Xln2boniI+DGGf6miv1i2
13AfNmOcoh0HfYPr5RJl0DWxC4ft1h97xojuUvt2lfPUR9zQKTDp52KZpSjScH+n67i3WEOg9A3a
t+0aVeVFVVFgnqq2mB9OWZwownkO85Fek8arEu4/Ub4FMz5793dtw4/F5KrRgNHYbNWgo8cazEjD
ETfDu4drDE7phpPPWk0y+tkSyg9xox2wLgEYYx2VNDNwhnXMxj3jPrP+lx9tsJahOu96phiWvvXh
jUH8fF7GvOWNaktS+4ZLoQejkrAiCdK/Qxvh9uUvXtrofMEThdM2wM3iG/kXwdW7axexvXpWw3Px
4+T8NCC4uW0DfTOyN3LD3TPEgEF+LzxTGzAHnxOLYioNpdAH7rLbDzwJesxMjRER4bb4LO/1GgD6
5xBrMHkwcYMn0zv+bQx9a/vKtT8+EBXd7zVx6w1xkYbzdCm+9oHLO/v4ThhHe9Hpp7ES4enbHNYI
dqzPe/ygEu8LsWLuDnzUtwtRDJ59u1rczryGgPO5gO3Vsxom761jHldAcPOob7BSxmMOrXljswLC
8E0b6/aMwLYAv1d6q6PXXMjhR3kRSzEmHWY+Jm7QD1kMqsa5oP6Blb31XTv4995X3BBX+fw8Tz5G
9ArPSnnPHvORGna+z+Hf0do2r5yrTmmnvfpbkPDWhuFp4+rbTCLJ50UvAWUW4otxJ9vMBtmfxslb
jEWGHFEb7Re+feNo50Nu3653XYjtntzfWfRqe/VYg/wwQ55RoHDzQlGPW25XMox8Jk34czl+aN47
IvD+9f0pikui6uCOGU3rfdawuSbyCVLcoP1LzD+Y491hGGvQ4yUo9zb2HTf4C/SCJdabvz8+sBJC
NLq9v+MOa5NqlXOs7xf2a5hdsDfyts5+zmov8s0z6fgriSSMfT1Bhqae7dGrSlAXUjO4B3oy1mPA
KYxEnf7FS/v+7stf9MpUxj4+5PbtOteFMsxrYD0dzniyvYdYg6nhAcHNK0W0r88Nl4+MeSMCfdDO
Pz3F3OF+0zfkhXJP6EZXi0kl1f7pO4uo4le0kX0w5iXYhX+J1hLi1mzBW49fFAdY1B6TZQcCkmXr
B25r/ZaGfvPX1QfFYuE7nu/AxkZXI3i3+AFayPQb2jdBL/XRuNHFJFM47+9aa2+0sWJQpQMnz9py
PdVSGKsfxse3G6OohnAV25sPsH272nUBrtDo5bxLyZT0cxJrMG1NEHDzShFFGtL3d9OfN/QzmcbQ
zC2zPU+w1LfjiQS627R878CahxVFjwzoUcjvJ2RkuKH4Bsz912+0nnzWsxjyg9fMj3Xj1O81PGWC
umXfP/p9Z/RCA3xlU68lqddldHht6Cy1Ey4ABVhDZ/yTCydJ6PfEs+x0jlufl3BsF6IGb+DwRYbo
POF67FsTjfmQcWLZhvpm/w2S9v2dVwqn7cM98dh2sbcXGIFMST9mrOEYZQwEbl7HBK0XuumEbpF8
C/VAX6le/EQ2VyLqwQK3MrJ3SUPWl8AN1sgxb5p/sS1mrOFQ7egcbjOw4829syiW6k5tfKwfIo13
Lf1UzsCNQLZQg3eT+7v3MW4+L9nYLkQN3oNMTtbm3RT3cyL08/TQPtyjvAhF3Q/R58CFZEr6MWMN
g6N/FwzcPI4J+Jy5IawYDm+RWFgfNG+zy+3qOy5/VN/AqFGFL+sK5ygSkGUHM+YQGT2DW9KoEZaM
Z4HX6rLmxOUt0n6Xgfm8iUMmNTFuDUavqQ6oNRkXl6XPj+1yH0Btrb8ub7U+Xr99S8F2U1/B7dtA
3xy+QdI21oWLUET7Bab1MPd+9dSUKelHjzVM39E8HQYEt5Sub16QTzDMY2oy1itWn8MNVaIyfMhY
4o/qG1ihs8vFwvYWGsyEha+toe/3nXCDu8eFWGeY2RA5zmtyD/Fi+eSwshqqg5H0iBvgafD2ALN5
7++Irkk7fC5pe+G6kKuDVd9cHz1qS5jn6dc2XBcuwiVcoff3d9sB7mUb5w+phhixhjfJ0rZcKW7e
9Q2eNW00CUYl9xl73KLRPc9EM9oQ+r17a5x8wQ1lZX2W1zBumX1IQJubtl2hs+n80WOMY+Gm+4gV
Cd4m2KPML8Kscs95NdDmblcyXCdy6Uvghs7kUDavr7Ws3X9gpAFoyOQQiw+tfbvedUGPNHz8QQ1B
pyxGXoOefxkE3LzrG/Duc/VB1HjL2xk3dHak3yZYDrqMuT9A5w0X1Tfdqjdgev9D2XjZPZtC9Ryc
PtHouK/XijHjI5i4odhDtw0rB8lJ89Ytdg0KN9oL7wuibI+NVoU113OZC+rbHlaK51Nux3ZZTi0+
RqThkBcdNPuWRm3kq0tYbUPfCH5h10brgicKSOPh8yzrP6ghY7DVNvMa0NllEHA7tqG+uUUeVXpE
sQZs3OA9N5T3gO4GRFejV+SVwh2ykaVwzIOwWxcOsVbjF4c8CPRyI6qchjztk3u+GDKFean6y+5G
5gQZbuasWsF7bnq2GroPje4z2H6w9E1/+Qe9V997kuFrf2+tIyoX1LdYCt1LWh/iSCjXAt3jQJXe
vbThiYA3ClCguToLX30y7+1eYFaFdZ5at8G64I0CijVs0n187cX+4FJLwq22kclv+G/Xj5t3fYPI
oxAus95/uemELQWY/4tq6aI7/7oV1+8voDsYy353zCzu79CN1EGjZJxnLT5j8F0ermZYbRRBRtlF
zHiwhg/PR9F5l+UdM6exmbGGQ70Ht7ihlQN6oUu2t9arFOs11RUpbr7HMB5ujKwt490Kw7rAMei5
Zc2swDASvE4RhxV+s8v4Br792D3YmtgPm3shfWvpb0roL2lklvd37JpZLefK4S9e2qg+kicKCAWG
Oe7rw2rfrnddQLGG5hvxrMf6YFHLw632IdbABAQ37/oGT6uyjYyVP+dSCsY7Y/B0Ps3oV7eiq2EP
UlPE2Fi/1xZd9bvGTV/dfqFf4NevsR3baayhgeNLYeB29M1hvZoFyvNKbztglzTrAyu/fB9/tW/a
8nGovy4PrTa85xarnq525tm47/P0a12zq6tXc4JC0OxbLo20Abb3ZG2AG+Ev7NoGbq4opPRYw8ms
+3XbO+4dYw2zcUBw+9lG+kaGPNzMr42bAOS4XVYKl6G2VmCsYTFAM3voD27IS9VXaBRROYmw6Pbt
EKU2ohe5VPDnqXfc7NsQt8twSXHDakP93G30x6KiGDPrsvMUfdC9I1V+mxnWKBC4ede3Joo1SOOz
t62CaHvRzh95oQcvlc7T69C3UOEGXy9F56Gt5pq8DXHzRuG0DXBzQwH4BDn1uYemzdp5Zl12nqKP
kdfwAO9QHE6Frx63M21D3zCRz2afkueqZ/2yFC5DDVWyzbKixJj7+svjhtFG8/Qi2hEifaO4XRVu
YOfG1Ev6JZus88y67DzVP3qsQb9Doe8NA4Cbd32De+boljPOhlzgdlkpXIbaWkmgWMPhfj2dp9ei
bxS3q8IN+pi7zQC6XD9vbv7OrDdjDYcIXhBw865vEPm1kmw5VnYJku21iDXQeXod+kZxuy7cUKzh
scOcyVj/hVl/mteAFWu4Cty86xuMNWTyOxhrcCoQHhjba8YaZIYw1kDnKbVvBLhl0V+QfqH7L67b
EDdvFE7bADfsX6TSRi0s/d3F352n+mfc18w7/vCG6pec9lPkrwo357ahb+eRTxkvzUZxkrkCYnv1
WMOSPcaNLo4bWTss85Tidmi3ddyQrXgqoL94aSPcPFE4bQPc8H4Bzwl3mwF8FeB8lSifZz28j5XN
cBKTH2UWDFOK8QyjLt4YvYpKVOiiitSnp53rP44bVvv+zgH5lSKVjZcYXeDm6eMPNeDDM4wGM/WN
9fPyuBG3QzFPKW4hww3aM7tYw/eZdZmPAzVYG3wMi1atl4kxk4gpZSZXF8rQL/5AlfeSgIcXxrBe
x7yaTJD0DY45u4yvDWt1CdwIPz5QQ/dysyy80aDHjeg8dWpT+3aTuEEfEr6oCje7Z2INX2bWxT7E
1KBfjN740jfow3cNVhNPwXk+nUPclqMefFcxVj56xmbE+Br1DWX2Z7ShYa18w+13qUHvHcYajCg2
nadXo28Ut+vCTY81PMF3opwrUl/frIcHU9lUDvzH/V2WLwPTLGQY5jEvoB2vBN8s7DLR+Wv7EK04
Zk58ls/b5F/QN7gurJTHvR4Z/WXc/KGWzdzfXSLWQOcpxc2uvYftnI5bq/X1L17aOm6XoohwO/sN
6BHixBrMz/XO+q+nPEm9Mjes3L1mUsmXMpNTYHWmDHwAUpHEHqxZXTFladwCz5zK1h430jbUt+/I
w1iDprh5oetKpYB8d7ACQq6M89HL4+alHdx5SnELGW7opDCjDltMOpUD1mo83qI5dC3x3ktSgysL
quSC3gtnZtwGVWcbAvuX3qKaiGYdFh2lpnmP8ugZX1DfUDwErQMoC+uinP4paijSkFHu74YtYzWj
85Tat0vj1kHtHmxXUNvA7eQvXtoIN08UTtsQN4dfDLhHwxLEY2wWviPLn7vRepWz3i21qMFlLrea
MVG++ozeXl4zK7Xagv7b8xPLROf9LsIpaUaQ28fcCnxJAH07/gXlNSwTCnGswTWnvlNDOckofnK4
X38RDf6Cm2eKAZ+nFLfQ4dZEu2zo39Xg6+Cj1xazWX3UmWgj+2C803N4Hev6Zv3FqaE7Zck9kOma
Sacb8EWG5RQsSDsO3rWLr+E77E+Mke/2WUb+3TFa4axvZRRrWHp5DfzKcEM5ydnlVmWiZt0VOk+p
faO4EeKmR7WBLZm/tWFu7Tt6DWbCMMoizqB6+Ov+RWY8/FyZDTlPTa/kCGtMwEq3aya+X8Lqum9g
k7D77K+Z5fx1baxdpl98iFV80beCHmtYu4s1WI7N88cjtfU6aUSuZKOuFJ2n1L5dHje0osOs0kr+
tI1wy9t9g6QNcfNG4bQNcHNFYX+0HWNoW/aouhacp+OPFaqrDW1HMvcHZ/0fpZbNRY230aKr2TvD
9FtL+KYXrD/2PBCMutwyynYDaxnUNx5muqLcC/Rqjo9j+z1qZqwhaZ5VutY367YxTy9EMYzzlOIW
btz0qHeTge/LoCr/mYeBUeksnebKWKd0l57110gtmQX/l8jBu3kafE23uYWvvE7WjHp/B1/qyWYb
+oMRhO/rXmJsPlBDtdbQvRAzZ4/OU2rfKG5+4naMbA7gm17oxn48xsKnFpITkre7r8SG+EkNvtMD
ViZIbb/LnETOvXyuglMYF9fvhRjZIHSeXtk8pbiFGbdDhLgGvKAV9wrflP5owVO6yvdTugvOekrt
j1ND+SEr5Z1hjJNGOk+veZ4GE7fF5wy0BzXQnnfPtQFuDt8gaQPcPFI4bSPcPI/JbEPcznwD+cGV
LBNdvnda8G1blCEA/OD1ItGyPlv68zaEUnOTm4diDZn0Gsgeniz+GX1z0abzNFC4RVEb6Vf2bBvg
5vANkraB24UoItw8j8lsQ9ycfgFxg2eTqK3MY0kmV2+k4Pvi38/oQmWRboUaijVEV6MWkDXc8/xx
fcNv03lKcbsd3OD+YQ5jEwuxUmfQbQWmVRJbTAZmzgJq4/FOn9G/bkMoNRfUUKxhDetdZgYwC+ba
9I3OU4obxc2ijWwwiumg2wkZ9f5uCGtD6nfpxihvy0MGQFjs29VSM2IN+R0DYw3M1esbnacUN4rb
97YRH4a4NQrGKd12JfeZKMc84pzSebIhlJobanqsYT2CsrSINVy1vtF5SnGjuFnh1jMjxMv3zhie
0lX1e7zwlG4M5zveTboQ2LerpWbEGpJ15lysIUD6RucpxY3iZoFbRT/tZOApXRae0qXhKd0aVbyB
AYnzN+mCbt+ulpr+4mUmvWHMuFGI9I3O02vBDb5AM++1YCxrz2C3AW6Ev7BrI9w8UThtQ9y8j8ls
A9wuxKUTboZkxrCyY4vJPjeG8JTuk9FP6axu0gXavl0PNVRLaL9Jj5lUUu0xObXUZKKrYW+MN0eC
qm90nlLcKG4WbT1CvM/CNzPRKR3LMInYkjFv0qEzugDZtyuhlk3nx+i9Dy5rvPdRSk5ajCo/DAHS
g4eDX7LH90tCoW90nlLcKG7f22iHAuPDnSKqeN6C77X1mWiDeYQWKRnPolfnQnJv91LUYOV4/Z27
FXxmdNhRxsxa7ffBJiLdRfr21j4gi3YcVN/oPKW4UdzOtfWoUZ6JLvudNaPd3y0fe0z+ZSXY3aXz
zb5dDzVUQ6KvoXqXLSa2y9RhdV3FjByIlbKB2yH+RvWNzlOKG8XNZdu4Rwn/okgVeErXyRxO6Xj7
UzoX9o3w4xu19T7NMPst+I906mUGWH3uMdHE/APVFJZMnIybmtaRA6pvdJ7+IdxghVWUZTrvtVvu
2maeqnsKp21Yp9H7mMz2/d0lxmS2ddwuRdEf3Gq6tVnDU7oevEsHT+nK4hhssLkqdr3L67O96J2L
XHZVBdSijWWUYR4zUxidfVOYzAKwpueHfLGxVN/oPKW4Udz+CG7GWREDT+nqqObh2Dyly07sbtL9
Qdurv+vZAsONKgOGGXbVFrNRkzOweORfAU9v93edr5leVN+uRd8obni4vcK/6NGvTsFLG+LmjcJp
+/7uEmMy2zpul6IYWNyMXQ+0Vm+l4yndEJ3SoTM68IXTM7pfs72wz3F/hRKa4WtEz31Yj1wDYxz1
GOi7w/sML4fzL6pvgdA3ihvFjeJm0TYiT8CeLT86DKMtH1tM/mU3A4Zwqd+kG/pje9f7jFFDPZ0a
KUwu9/7BRBPyoMUs55/r4zph+upXhhvVN4obxY3idjnckE/52h4zivRWhmd08CYde3+3Huuvx7t7
lQ69ZJaDV3GjjX0R2t7HvDBm1MXDHtYSqjJffPE2EzzcqL5R3IjbYx23KvxL0fyLlzbAzSOF07aB
24UoItwuwmXYcdMjU8AeLsXPPsAt+9zh0Cld63CXzrreJYzOjntGStvwTWsxG01KMtnnYh/lv42/
nTsbGhkW3Ki+UdwobhS3i+Fm5tXA84HFQj+lWzOJmAJscDM7ZRhFjqO34iUmu8xvUS024/7zaY7B
zeFG9Y3iRnGjuF0Kt0OE+K3MRHfT9xajSA/lg5U+ZipS3Ki+UdwobhQ3P3A7yZuhuFF9o7hR3Chu
FDeKG8XtCnF7g+031H7V20b9kJO/eGlD3LxROG0D3C4wJrNt4HYhihQ3ihvFjeKG3Ua3S2GGOsyq
19sQt69/8dIGuHmkcNo+1pW6BEWE20W4pLhR3ChuFDeKG8WN4kZxo7hR3ChuFDeKG8WN4kZxo7hR
3ChuFDeKG8WN4kZxo7hR3ChuFDeKG8WN4nZx3N7bsNLeJ7zbOSifawPcHL5B0ga4eaRw2ka4eR6T
2Ya4XYZLihvFjeJGcaO4UdwobhQ3ihvFjeJGcaO4UdwobhQ3ihvFjeJGcaO4UdwobhQ3ihvFjeJG
caO4Udwobt5xg2+2ip892K7gtiFuZL+wa+vvxl6Koo7bpSgi3C7CJcWN4kZxo7hR3ChuFDeKG8Xt
D+H2xJXT/LyP2jH4Cw7+O1Yb4Eb4C7u2gduFKCLcPI/JbEPcLsMlxY3iRnG7cdx0m/vezrcoblTf
KG4UN4rb7+Bm2NzumuJG9Y3iRnGjuP0WbsDmPg0qU4ob1TeKG8WN4vY7uD0NykJU6HfequAvffiN
B/QN+E4FYRvi5o3CaRvg5pHCadvA7UIUkb5dhEuKG8WN4nZ7uAlvALe3pDyvvGgUN6pvFDeKG8Xt
d3B7zd7fpZ8a5QrFjeobxY3iRnH7DdyetBL4w+D+7mXTp7hRfaO4Udwobv7jBmwusLgMw+SKMN7L
VRI8xY3qG8WN4kZx8ws3od9pSMjmgv9gCjzCrdpfzCvwG1P4iw/4C7dthJsnCqdtiJv3MZnt+7tL
cQnbur5R3ChuFDeKm3NbjHXiyOaOwX9sqgux8iEi3B7RN9bwF0PGSxvi5o3CaRvgdoExmW0DtwtR
pLhR3ChuFDe8dufxSbe5ut+bWbwVKG5U3yhuFDeKm3+4MXmmZcR3T/3eeeV9CHBbwF8s4S+W6Bce
2gZuF6KIcPM8JrMNcbsMl4a+UdwobhQ3ituZNrDBg/V3m4va2ae3yjNPcaP6RnGjuFHcLoybKr62
F99trt7OM+NNC3y/n6a4UX2juFHcKG6Xwq2fZpJ5psB8t7nHNvz+iPq9VN8obhQ3itvFcBv98HO/
t0vv3W2V4kb1jeJGcaO4XQI3BtlUG5v71e+VdNwYSGEMKVQRRQ9tA7cLUUS4eR6T2Ya4XYZLhuJG
caO4UdzMb6DIrrPN1e9UsFy32F/OX3XcREhhgCi+Qoru2wA3jxRO2wZuF6KIcLsIlxQ3ihvFjeIG
/jKXXidvWDb31O8dTKvz28aN6hvFjeJGcXOD22Je4YekNhe1uei4tZEAxWH6BnGj+kZxo7hR3Fzi
Nkwn0zmmRGpzT/3etFjt3RxuVN8obhQ3ipurdhri1rPJHcNro/zeBbDhgxvBjeobxY3iRnFzRXH6
GGOQxQTU3NvcY1uvmB5+3Ki+UdwobhQ3txS6vfa2dbCg93debO5JW56/wmqZ4cWN6hvFjeJGcXND
QRh0Yj8q4FzI79VzzVD+Wxpmm81gnzU4hm6Lcd3WcfNC4bSNcPM8JrMN9e0yXOr6dikuKW4UN4rb
1eD2AezhWYt5Mb+XGe9zD6j+W23PhwI3qm8UN4obxc0Nbh+dfAtZRDuLeUG/l1t2AG6F8XJemY0D
jBvVN4obxY3i5ga3j26DYT9fJ1Uci3k5v1d/ry379FArw2qTTCtouFF9o7hR3ChuLnBD9k4FNrdF
YjEv6PeOoSUHf0E34zIDsZqLLlk0xk84xgUcM1Eb4eaJwmkb4uaNwmkb6NsFxmS2DX27EEWKG8WN
4vYbuM0HwOa6ugnsh9+L/sKvRr1JcgHWBfF6caP6RnGjuFHc3OA2H3SbfUWqpBpeLKYPfi/6C7op
x4MxviSvDDeqbxQ3ihvFjbw9h/GQl+RY2ueeLmExffF7jb8sxdcyjD3MrwA3qm8UN4obxc2dze2k
10Ye16W8VD/93pNvLOafXBVw8YS4GkOuJAanbeBG8Au7NtI3TxRO21DfvI/JbAN9uxCXFDeKG8Xt
MrjN2U5s7GzfrtLvPd66QHfpFvNXaUD17br1jeJGcbtp3Gqxbzd/Mezb9fq9JzZ4NejEqL5dnb5R
3Chut40brMPIeLZv1+j3nrT1MzjA9aBP9Y3OU4obxe2P4TZ/I62dG2C/96SdexrUK/yc7T5Vqb7R
eUpxo7j5jhuyNhvxU+34b9+u0e/93s6kt80yzEWrIj84TfWNzlOKG8XtAhTTmQG818bptw3+kH27
Rr/3RzuZZwrR3bArSIv5qzCk+kbnKcWN4oZPAfhvT2t1HpMXyJYwV2bfLNp/2u+1bkeXb+3WCt4T
34wzi+nT4HBLg+obnacUt1vGzbAEFVHMLsSXKpNnWpvfqNMYYr/XGbf0577IC8NeZ7yYxz6zmadF
7ZVfDruDPmgDT3mg1eZR0G6ul/MYlJQGJTdEkovp+vb1L17aQN88UjhtG/p2IYponl6ES4obxe0X
cKtlovMh8FrRPNZxE3mB7T5UjZmuNR6Y6ODFxsZeu30rWHyAfbvgh1Kj1Cg1So1So9QoNUqNUqPU
KDVKjVKj1Cg1So1So9QoNUqNUqPUKDVKjVKj1Cg1So1So9QoNUqNUqPUKDVKjVKj1Cg1So1So9Qo
NYvPv/+XKQoSq+z+ub+LgM//Mi1FXvCKdviD2Y5I7Jz/918vrCC98NKqqynC4i/jS+BrHX7MK7w0
4o3vzcF3VPidynY0ZaUJ/1eEwe5DkIT5at4V9vxf/8TTidTfkXgsnXD8XQP851//PMjKvJnMpAvc
HNABY2A1QZZKvKTxiiOJ7lTe1EayBMiwoso7fr/Hb7W//oHdRVB/kXP9VNbgH4wfwRGWRFkVpMlf
/xRXmiZLZUEFvUr8SPtPSRRGn//LoB9Y/bous5w9l/+BX/lGoTmcAeIRbbeAXO5UjZ//612QOHmj
/gvSUv8FRjxReFUtssrfEatv/B154xUV9PLv1L9i8H/+jpRWorZS+H9L/AqMQPw70loNwfCf+V1P
/uSlfw+zWTY9Smfi+WSKj+Xyfxk8LIy+hqwS/ysymgoiB5Tn33+VZElTZFE9UaxvgBek0VRW/vqn
Jy/+jnSEyVT7gfXPHxXZ0WdJFuHvjB7q8Jd1zJ/X5RFCFyhjMpH9O5LC+I2ui6d8YvzI0PhMEih8
DuP7PXZYkzh+C36T/alyjC5zfA3oCKMpVOiivPVdA2A/Q3nb4VVAQPWgA0UZzJ/535E6P9ZcacT7
VNB+TvSfP4HjAoO2MH4W5m+kf/lgBeNH82dhAC06WykqHFytyLNzjO8/gP7++qe+GgkcGwEjVWWR
/zuSXxCqdwIoXuKnoT2n3l+FiPEzJJ6eDGX11z8NGX9KpLK5vyPpPM7QjpMiifNtaMAj27n43+qC
HSHTxKu8sobcyZFur9Dp/Xfk/u5RjmhypCcDvYz8v8h/TbT/ibQUU+bq/V0F2t0IK+0iI4XngN0V
wPIR2cmryByyHJF4notsBG0a6fJapMFvIiXwPRX8govwEjsU+fu7+7uXh0JE4ZcrAYwhom3kyFzm
ViKv/jf6x25TEgUJfLHSb7Za3S6wK0Bqkf8L5qckAosPehgr8hz2qkQ0QFXS/r9IE+okHIf5LdSl
IKkaK4oRbcqbffxtjCMCBzHcRSYyWJ4OTCOOE+Bf0H+p6N+E7ZoW0dd3wAsY+yTyye8irBapPlc+
/gO0GACk/ecVIMp05bG2YRWe+bFaQu5qYzjK/6PwkSm7hj3ziiIrqo4ZgBrBooKZGilN+dEnGC5k
asRKEU5Q0WgAL/N/RXpT0P9Glv6PFuF4DRq8kQwGMdLEXUSV57wmzHn1XzhT8F1WuHeFXZxzBb4t
y1CRSggJ7vvE+M/Jv31bloltNNBuw0D6b6LZYYud8C8s6EUhs9C6OeryE5mPvNb+juT+lXZhilI4
a+YL4E6A8wKgrqxwDLlhu065w/hVi+U45LBBQ4RjuHgRiJLnDFsUI7R1uQyRqbM0jFjaBEHwXZU0
drgA/ZTk+UIUWGCS9Ilvr1QWC78oypsy+NtZWdupFNhGJKxQPachZwaNReGgLcCVM/4X63cHFQBg
p/EGe1QCKx07t2U5cnVuy2L1W2DI3wR1xYpdbSfyJ07UeXGc2ki0tTkLrNXOB1OPD06Z75p88OiO
o3fSYs/7ESwLa2lfrX75CAb/wioTAUwJYGRj6H+t7IfVj2sA22/MgS/Bv9qaGeBCIPFAOcEv+yem
b0OzcM3ZkSasBW1XEAFf6o+hnTrqBgUG/j3QPGu8qt0GpxyrsXVZVYHLCM0I6O42+OZvg805K4GV
AxjhG1HnFdg5/bRRCSxeMU360UE666Wc85AsFkPM3x/8o5i5Alk7LxYhBB44O8qLzIH+wT+N9V0w
K2L+3HSwMtAbtArkWf3IycU652RZ4GPnbH3dDFr94eo8ejO6r4cmSP15z7751+6v1zO32sieUxqT
pwgBUy788qt0qo+HRYFyqcPgFcN43G2sqTA2DzYBN+L6TxR5tbgRXufCRD8HvQ12F4jCgyxyVk5i
KFlW+IWsaGD9vhV2VXmljPgXVhCH8vY2mFanrMJzN8Uy3ObdBqeAjqTCOdyBh47ueP7Fja3pkPq/
rXU8Gbf6lcfd7M+kEeMXp0F7CD+KzMODzR/A/Ofkny1C9wHc0nah+WnJAtgM/PZ29tj19W5lrU8K
rLeyiJ8FNj9h2cXiaxDdx17ceRA0HuAHz95BVzfiFVtHieOh5BUKuMfPFyKrufUfgsayrExYSdh7
2Nn+osfksIZdS0T+TEQ2iP7KJxgKoF1cqYLEqw65tH54Ld8GcL2+C14Xhu8CuYqMZSVCxFdofBhC
raKejA9h6rEwWd1UQFMGBIRbWdatvbarW89xrPu1rOrWHTmt6uRZ2I/wUOU3rsmg05uhvC3zGiuI
Lu/J6FdksG+RONlb+6TtfAwnc1lXsm/ckaRIp4hTpPN43+5qsl3Kv6X+teQNr3SnvChGSvJ8zkrc
f7vMx/6l21eafj8BS6tsV3Z0eao7B51heUdFWeEAUtA1glFOzOyG72ppfa3JTjGzwAhZXaj7+ZsX
dlvnpYk2/eufBFSzXDKTsg6Tkl9EOOtHf5EG1g87PMs1JXFH0Fd3BOQqFllFRRZhSuRuZ+J/R1JW
1x5IjXjwTC+8rtTllbUw4gnt7yXMaTaBc3Pkqzk9HTG2TU0mc/DWKU5vRwnj3IR1aVPtGHDWEnRJ
7De0ZAQ7ApgfQ92k1vRBZDXDIupj/SWbGI/Ba/V4d0Z0/frJK4ENScQywAiTmhCC0wbrS5wR/88g
vtxwgRDx3OEi4E/I/vP1K9/PzNwEnH5d2b1lff5Jhc/gKeBXfXeRZWroPOySWOcJkkXP6PwvpZDi
KP5X7MKg/F4vMf5J9U+6MfeuLkCaRj/rYgIQ3GM8MwH+zO3GM1Pg5z3H4E8Cr4cOf9TpSbpZBFyd
cnhxfQgOK865PugI4+EXjjCwXKBvAJJNgyveKLZYRZPAtH40tl+/u0lMpoFy5Qh2id+Hix91iycB
SoQ7RMwyRm52iD1U4iRSGI3klWRdfgbDcsrzofyLWmL291sGU5mzGsyX1ku2cK4KJ8SBhiXxdmJf
VMzklcBU5mLQY8bzgLuyohFx5OhhnJqxL/U7DsbsG2f/sfrWJRZ0vSrcL1ThglOopFee0/v0EAx+
ZAVJHcqKdfaqPy7AuSPh89qcS+UJ8xwsUCJZ/WHsNIkXQ3Z3Y9AYGSrWhIbqbZk/Z4W/r/N6MQ8L
cKwLeXhe0H9pTujdGAz15GQmTbagY04IN9Ph4r5DFkaY0/i+w09ssL2H89Pg/CTAoa5Pgf9i54v/
OZkHzfFYAJs/vAESzwSrefATGstKntet9Z2VVFqpmjw3jjF/RfPLAivKE71W2l//1CaSrOA4gX9i
wmRzGTcT5jusvk4arFNxNGnAsCL4I7rgLPmORwBnyrFgr5ecDFcFS699VYknYmk3s+QIqa/zA+vb
aH4QDeiC08OhGDTxxPgD6aNzoKOuFw/bpBLHTM+rTQL8kQA4FkSnsk0/cv+Cwx3PCU5FmgLMnQar
4oaXvSkvLpwuFH1jj2iNOHMz1iEXFVoV/HBlOpY7k3tKtu12yDm1HNQXI/21gZEF+HtaYLBkff/c
5OW7vw6aZXkjfbO8V6rcP61uwV6xv6t1QNhiRYFVCxwHnxvg7S1TUDlcaXKHX4i7MDI3YkVe4lj7
KhBB5Q3FxWEReLUuTwQJWvVQ8ikC992hkEdQWTNqZrV4ZS6giouhNDEjUQAbrcJoBIxol0cHZ+Hk
U+FZjS80+M2rU+WZgHLI8SIPOAwte/qjF5A94/w7jFzywLcWQU8bVuGcan4FlUV0Lh9iGY7lEdhd
cDXJqZhXQPmb8Jp+cQfyOJZBn6E1OiesGtXZIMch5bQuqFpz/Op4Rze4HBoyLIXV8gAWofjCy58o
D1nR2PJDdQ1lXEOYz1caXCNr5TAKUZBaIjviC8poKqxDuSueraTPCnTkwsicyKpaXZ44FOgIKnPC
iJdCGkwUBU2YoMOIqixyYeRwri/vhRUnOBZMDjaL6GXWcK7xBochD7vJK+Bq6yl7oQ3wL1hV3cgK
F0oBLleswkrAzITSg1muZI0NI2MKP9qNRL7o8PJHQLlTeRZ41TAgIyH/09gp4bP681TfMj3B8vDc
8bd6kkIqa5miYJ1ygIIR3757/bkF5x4gCWd2ASfApJDhCnqWj85PrwR0anE78P+FUfkmmF1Jwljg
ufAyqPKjlSJoO1IOMe3jGQOAaSHTJBZS5yBwJhLHaITTXBoH0T8MSRinmXEkfSu8Cmte2XV4yCxG
LX7XfHb5Bdh7aLLyZxhFecBwHKo5DnhfMPjyE9SFyO5uY4H/eYR7E3MUsv2dTx8Py65vomZCIMSp
wPE/pPigyPPHQj2MSjvn50OiI3lMJxXDBcN0WBOJJPBYf5bLOHvH7NBvJLjuK+5i4SQDTDq4osjH
CETxyGuRgihGnEUSsby8hz/8n9f6rl/ITikx9ltA+x/jijOdJxQn7DQijyNWkTNrITqMNKCSw8tQ
cxIhFhXfZGn2HoHdo4dZWCRXXLFijT6I8j1zPBHOgAEQJLDRaHK2w3osYySu+cjf1fniiTD44uoh
pxKJDhoZMZRZT6quoKfMXtwht7ZqvqwuiIHAed04qSHhXANYjntYieIXzgs474UHdLoBfru8xBVO
bt+FnGHA40SCPDelIj9lxfGJrKFZ9ZX3q1sc47kQyJTfwlffTd/txcJ4lbpvtyLQfAgEuhb4DRCn
IUleRRuqKqtC06zfoO2F8m7QOb6/m+gbZN+w1lzoQTBCfT+tmL/X/67OkCViIRCmws/lNV+4IYdS
5/hoqH/Tu/rTnK/Bj36YaldcY25kMfZpvuxqDX4iJx0Hbo9rHwlzilef/yku4DGSozwYpIZdRqzi
CWfD0ucHGcRYNNnW3FaARKQwBZrMkRwIFjguAocQ0a3k6Uwyzh+M4WDJmoifgMqeJEzhJHwCWr5J
H44hUjiVvDvBE/ASSMm7jtfYK4Fbsv7qA1ACfTReDYJb9oKoIi52TDi5IgT0fFEKuOZbOFqkx9Pk
3ARRB9xuO2wVwSVRX7Shg8Zy1mfQ5KOFINUQl2wGU03I92gOKkJM0E/1+OlUeFUNYvaCqBZnq2uG
85DTqPBX0rkOby7BTz5vKH4aD0P8VC9hGHpF/cHmLelpGCqJTXjNkJ67Qo2Y8d5z65QvQV6DocAF
dvFWN6cdoDMJ7EBvluzOBuw5YnSN/DXQOe5Oz3nUQXTPcNdxQpl6yjH3LFWyLTzO0IMoWqwF3lau
OBR8Ear+7LGrmYoz5lBI08U8xaPxWxIlmKV4Aw+iWHG9G6dDUxwivggWhlJNqbq84oMz9iDK1qZ2
XDiDH2D3IUuTlsF2SwaEQlkUEHS4kBVW2ZmshpJJczs5B8MQQPcJr1us8/PBl02WKZzg5c/gzaNw
2hDDIe9+gUANb3zqPL83FKhKhCFQpTupN6O4VuzemtqeXxKDI8eTq9ldi3WH7K0YTE8Aa4HDdAoA
kwROgc5ixOw6ovcdOA+BbJXECd7hkcJ11HJpFyG8b7JR3URo8dgI4m6S1FFwKXRPkYPLiZ08hIvL
SxBlT+RaYIQA/+BkNwKBnuY6CRNhEbenkC8mqV8XOHEIGJORIArdlR/mFBYmpuiLCpgl2tBQvmuC
4YKh4DFuxJiYrSAqhN0zDyGN/eillg3h1qROqB+60LntLviRMBZGv8Ty9e2hs2EQpX4RAGhuGQmV
8/EB0uuTYBjqnCi8Cljhf0WCV8HpCZsXD+/YrFy+nPQYRjMCOgxiJAfLdDht53GI4IKfIk0AQPV3
9Z4JirZijjqIvhuJJ2MvWXxCvkhXl8yJ9y5IkfPT7Yyc8XkIrqwJ/DgMgeNT81Pq5ij0+giuJY/P
TBDFj7OeOqyWjgR8EXJH7/eL4ca8ueY44IAKUl4pI570tmLAN91DWf4UpElz4eNrP3/Y45XluV9l
gpyUBvcQMx4jeC+tY3R6pm7B9U81J50L50xjRVHelGRpDCi88Dx83ts4teh81SI+lNPwlH3N5P9G
YiSpZAgEyPHS7rv8bkh/4TkzVOGRAcH8xlQ4FQIZ6qeIhZUmz1lNGBX1dchSiX+M+DI5itcn1zA8
fDjhtY7h5RXlbYkVeYljFeA+wKIrQMIX9/scPBhcty+TINiwGdoaMToNnNfnbfJhpDm4JI1bNSaf
I097OAwpYkrPSHSJfHfiebygqSdOg7gtx3QbbdUDj4YvelCAXUfMviNm57AcHRvpgv8KlMRhP2et
CHg8BVHi+I6W06EIHhlf5F4GzrIfYsfmKoiSx39X3Fby2GR8eZCyhHoHYv75IiWWhLFHH0QJ47+m
jnMs9ockbByPuJYw9uiDKGGyp41tpUxEyhdJV8EILKQcgYOIgFFgiZuIjSCKfDRlpQmPjvfq8kSQ
oPRITTYOCX9qMaGejVRkNYJ6j8Du8Yw1zriDKFPwHV5SrSJ5IQ3Oc1yhrvPck2/pEmM8DAmYMCdc
n4SmCEMZfzbSpQwmya5mBpFRJNJ3QZvKK60QYtGi58sRd+HNO0WMPR4YVTv8SO7w8HXBW4m0x8Pw
WvLh2a1XSQy7yuq8GgoLHXZ/So+edbV88XfN+Re44wPSZcEpOEhCDFcSyZTra3HGEMBGxBgEYQ41
Fh9B3Ik4L462knb8+S/JllCwjsMOoijxFw9bkWKT8UW0xnsQSLqH/gmuPWCPPogSNkKbbkpS2PzS
l4XwEMXFrzRhM8QgCss4aWjwGxfycvixP7E682gF9IovNoeRBlFytinN4QzQjWRpDbg5Po5T6LjJ
6w4Qwwe1DTmjyNVRteb4hM9wppAaS78reeJeSLCh7UtWGmQmsBcRCI2K/YJIRAt3fcyQXOkq6UM4
eZQMvVBmI6IzKyYRK0FcQDGNK6YH9PuCPnWEyMWLNfAgitXTFQWH7Yl7yr+ZYPbgLb3UC5tBVBhc
38M5xORMxBdLAANNsPOIPP5iCDDljTn0IIqW5ea3UzqLHWnCmu/upFEY/eaRPF+wEirtpsC0dzmc
BcEEJawCnPOqyk74nsKOQnmALysTVhL2SDVLK1WT50YjlMy+F8LI1oJVNCmkJ9kLecMr3SlvvkMe
Rh4VWQxn1Eidsgrww0nfU8IMGFm7SZi+ajpBULaiAHsKXIjI0tqF04k0Kqk33wu6lXgI7eMlBqem
MQQcQ171e1k3lPubDENZCv1G7A0orQWjt6exYahCMeG1G1BXnUvzVU83morpwVit0LixtjhJyBWw
Ezj3hXylsw+Dk5LDflCA6AKm8XSMPgx4yAUGYrwoYVyuJn0+Bp+jIMZCCZcOWxUgo+WL/I3iGlDo
hgq4kz0ZK0EUPK5LjzPpnYj4OtW/yZrwWTCnoQdRtJh+L+lc/i3BWs9hsiegwihWHOfQ6TTyjwgU
nkRCaR5egceVJcaAgytIHP8XQ5wYZH5HqOSLLDYDQRSy3blrqIOEhQPj4d3BWrJ6Q8GWRD4EQjQK
5t2AulpxekPamoyFQIawkMVBgGV+LQCnyF85XhG/po8Qzum5FvjNT159iYjaeCW+BEaPbAUuPko2
4Zw8dXxS2E+6kNzFQLeOD0OIGGMgfWqXiI8gOu0Efh1eMNyRji/SPkbBDxInlDQ+A0EUM74/hBEj
+1NCNutIu5Yx9vCDKGKSNdVWyASEfsNyn4RbsAVNwEIQRY0ddyA32R4ipJcw2IRnGY5jD6J0sfcB
+B6YDZVfncIEYXCswQdRvLhBGOKF+LeEa70Mk51WhXLiGkYJLjOF0UheST/L+WFZZDsC/pR/OeaQ
wE5JLLDdWIMoQ1M93YjP/re+SO4wF/EFZz/KIMrsW9pS63DBw+teFpsedsH1pKfMruNIXO9usVkK
oiI4X+0J+Tkk/gQI57FHSN5vOwoQFtiDhQe6GqutQpwgbdTutGP8lvQ4DNWRD36GZ5uEedLjaP19
Oe85WZP1bgN37ON67jk5Ua6o+uJKwXjEiaDMoUT0sbhwplyxFkSXinwW422R/qhnfdw1eXasiRkK
ohIA2gtZYZVdi1XVjaxwt+JYQ1/MYLnOqlqHV3mtzGp8eB0xO45DnHiDqk43gHEwmT8wfiMuZyIM
15973+1UeOepJas3tEVKhOHyswKNjKMAL/ME0JVxSjIrMfd/zl4KbtFfImfS7C2ClozA7f6wbaYt
9rhUcN35LMkWvMvDMr+HIUQOEiE5lwSyK+ByEUQfnmDBIJe0p63b5WRNsG/DZyOIwj6sl3PQowB6
SoR3g6Y/9jSVVVOSDX7NK5XtQgCLThhdPyue3wVR1Fm+Ff8vDEc9Jz5RT9bFd2bFCYMP+IXbk0nq
K8tXp7i5MJztnFHcsAaI7DTXl6Osn+u3v1sXxA4q0hu4/QuJDbXFnIAQdnmBNKFnexCIJusy4Un3
MLgsBNGrJV5A8OWNQe1XhI7G4Vn0GNwEUf644TJbsWMS8WXziiJErresmCMPhWSJA1A4FH5Lprhz
FmfMQZQmkXfoZk32VvPnQosywcwlYSPwAsfyj12vzH9O9D+WZrcKgMNRELWAPBZnqwXE5HzRApg5
ZjxcDsbBHzXiVB2w35ciYygsSmAXnCRWARtiv6sAcCCG/F2L34aZIAofKLEmK/A9d/1BcZcv2mMR
wb7aSPKCXEfvG70aaPRO9Jo91siDKFn7R6tCe7b0wAoiz73ozIfyMAmYN/Sg5Yi3uu4YCv5M8RV5
bcPzEkzq80mUV3fYkAzDuZEmF0rAqrCCBNRUWAgh1dSxIs9NRru8xBFlgmGeK9iacV+uxxiTL4K6
xFpFbccYxLXT3sTaysv2p7jySqRIK3egKzKwTyyB2Q4yiALDMjgO53fOFHwRXw++cW90HTn0jSVG
nDEHUZoYbpzTJtTh975ORL3viNk57lbTYchBFCTOy8eh3YkAVSgd+Q+j/yOyqlY2nn0W5qF8Ghm+
MA+4NKM/IWe1x4+mkjBixYasCWPwX+CUrcyBYbp4vgyGafDFuzWmZOSk48Al0BBKymmtJKCFK5Jk
hnDdPIwhcjqICBoF7gJKwEcQF1NHa2srZ6df+yZZaD4jRs8R2DWWOJ2GG0QBYq8lThMWi4q/Aj2c
qZCJFXfwARWvk8vnJFiH3/smUrhrOV0YsSt+2o83iFI0KoUAzurCiJdU3oUk8WhgS9PNHtToGF+a
eGMOokRZjisYPPVkN8ktGAR8kWWB4yLsQZKaTJK+gjHmIMpS4efymjcYe4DhdxfyxCTii0w7qO+D
UOEJAllCKdbQgyjalQR8dp57VOTV4mbKQMJpKjU3EpRhAbEexsgC5LK7GqojRRiGn1N9RvrJ49Ud
WqfC8NTeSOFZjS80+M0tiS4dknfn6oKqNcev9otI8DkVAZsv/ByYUbU5Dq8dhWyiZTH0XB7XRZ9Z
vT7LE4ZMJ90hD6+KGvzpJgdtOAhZxTwOsvf+sY/rSa5SG2tFRO8ziIdAWGueYzAZg4hvLw7BziPy
OGIri/OhZIyhB3ErjLXI25/2YFDwTahGx1CurC5RvCMfjDEHUZr2SwRGpOo35WfEp0jkZjvIIArM
eRPvGC62/bkvgtODxbBfPVKMLz/H8QZRho6befvkFIdf+yLBEuoUiA50SyA+p7EGUXo42z/H9c+B
gG/Ln96vm9XPYcRBlSTWFtdRnDhUfJPpSeduBIsz9iBKF+f4wnGtdCDg32op6VPVzXrpMOagyhLn
kMZRnhhEfPSAjr27kSvG2IMoW3XKKoI0acngy7tbOVs9OkZde/aDH6UzXxMMPaPG2z2h53PCa7fA
o/lOeBcwKvIuOcaMMNvbQF/uGhgMRfQ+gxhhdhCJU2zZ/ue4mKdJ342DCZBfsBfwb+HZDzmIiz/m
4mArSzwavgjUfFOZjdhOJ2uB4o07iFLFWwlthYpFwheZGq/5uRIp1qiDKFFsfxUzdPkH5PolhOlC
triDD6J4Sd0dp7WVhJhvKy0chFFZUR+HG6kTMhNE4cvKhJWEPbqRWFqpmjw3GreyGdettgProdjT
fOFRf144pJw28ZU6lAlsyUQI5MgJCrCWHX4hK5qKIp6FlSajhfx2JJkNQ/66sXkFkhQkrSuQvIOL
GULBX8V8Caec2ptISZbGwmRl+QSKtZuBP/ogehhYCyzGdvAyck2TyNXYDX7pmWArGD5Zkq2tThsF
fFK+SBelRHyZucRyJmIioALHchudRI1DxDchf+k8oveOK16cgQdRsGuB3xRE8YUVxKG85VWUaFdl
1YeVKBZGI14FbBKK2RVJTKEnczEXofbDUMwExCmrRuBwIvp4IhpeCQJXnIVJK2AN2YLa4pW5oMKe
LqccOJR/X0fgqCIFNXIyLq+6gsNo2FSmKRX5KStyfikOHv0/pD5gqdFHd2ktwuM6iLqEXWDdVmNw
qfhWatXsPWJ0H0H949Y/xhp7EKWLVZTcVrI4FHyR6oNeDcUshqz3jSVQnCEHUZgKissJ0uRWzgnY
kSaseVgXzghJhjF2zm8ha2DhQcUpCxynAGMEzU+p+xZefqEb333pteryJLSc6jXxDH8CmsBQ6i9Y
Kn8Wmg/DbX4YQl/I8pjnoAh1CxRGAcJiubLGmopaklfhfKBlYn0nPAyqCgvkAktqEQANBXd6hbtw
im6uz7ovG8vwsvmKngYKo3EBm0jA4gsrbliFD+9iAeXYXbDzcHPYU9jxWBiFl0kVrPe8seCTcomZ
H3B+t4oZLsjG/44kUtilKozegnixwnGX4HTU50TAl8dWv4VjI6jriC4IgprhtgMPYpgGbykIZ8TG
inf/3+28Op7HslKThmAjxd0IwxrouLnSbotlRZ6fCS+HlOOeXAj1E65YltvzI65YvfiyYsNuI0a/
hAu184hDu1Q7HJDh0cCVZy5O6IHp77ZGfBVtIE/LSE02sZBtiPkmbQsxR9BBKcHxKCEvYZG9h+wG
YnK/Kn/yjAdifsKiA/YOjAszb0PuV3UAVTciey+amKGQKIHd3oxUA2xo/ar44aVbYyBuZW/DSkgE
b79HJV/+baj9uvDNkbh3AGy4CaL8MaL4oY3AGfP45RYOMgxdNvjUiwTcCrc3FV41eO7Ji1CL1zTC
tzJ59fCFB24xg27O64F/ETejX+uwzPUvpSRScvKicAnhCiNDei/xNFxmK5ezrhMuC0H0moicBydZ
Y1PyTdjGCLxIG5uJgIqbYL1xkjc+Kd8Ebg7Bi8Tx2QioyAk9SJyNMT4530RvIXH3kVF8foKoA8sV
q7CSJkgWmZih3RS3D0zfwIbpyCx6pa+74EcC0Gfr59FDxnFPdskv5k7CZvZgV9PIExi3I2dB3Dng
TjunVQaTji8SgMvLsX93qwrm+IO4nJDaG3xROxP7DXkbF5HNcaCSA+Rid+Yl8LJ3tLz4knci9Rty
78nepe7ERxBlDt9O0O9EDuXtrXiQI1laA246/GQlssqBeVRjMZQZrwbD3a/CNvgPJcN6ufGuvXYH
n0/91sUXNkO7DyrzGuCQ5w4VxW9AuF94DO1l7i+LkN3l2RDwaryp7FJ5CV5EOk8d09/K5wmu7On8
mNfHAre5xVsvbDHHIoHr6mZdPS9sKwRrBxdr1EF0bDFXRqddDAYNX2R6+tjVUaT4IQqMcQdRqoSe
u/2EJaLlz8zVhxAxxnC4favJhuDx5jARIwEWO+7+BUfsmLR8FfvXyQ2lbgyDROyYjARR7DBBQ5bn
kLcicH9ZkZc4VgHQwIrBJKXzjikrRORwC5/m3ZxvgiFEzDFEjoP4+uZSh1fllQKcR5I1nZjPIOqG
4UebjJL7axgEsM+3SbLIOqhfeMMD9EwkV4wRB1GSrCjKG/joB/jyC8/Duh8q3N+Loqn9bv03L5R9
mfsFOKCIMSJY51YfE5rz0Nv7Pt0x/T0vfAZRY4yJIIpfYgUFT3YAl5gvxbANmwBVoPWl1jUwE6Z3
oK8L2CcXhGwFUQ3ww0bhPMZgOe74gMJXMYc+Ngp41x8EMJ+P+A2Wr+51s1QmBKL8HuY+o9Ph0+Hv
jLti101E2K4jXza83za6J/0HLlLs3ujau6puyeL6IwmSB4ALHPflmZ/Fd6fERaTZNYdBdE3Ijyud
Ihdk5HyLSZvD+PI+NLkyEDMUUCXAt+9O8sem5ItBgKK3etPJiwJgcxQG2WM6NURagEfTN304XSB8
0Qk8/oKoHcS7FyffgYiaby6DaSEOjwO69hSI+AmiBqj8aKUI2u7R+h2DkEYs4MVt/U1gIGF7AIK/
vVP0kzi3jOJu7OzJY7/mRTLXTZYieqdYk9phnEGcwwTaHM7pDAx1Qc+ER3FlKyzCOLHRccs3LmGl
NX7NV7Yar0j68zthZN1IF7slaXO8tPvCJLz8o4tbkCamwNF7bzcSdc6kQiDW43sFN+OQ/Ay63NI8
NqoBWLHrY2L99U3eZAhkqR9uI3E2vGgvQb0pPCuB7W6nSetOGf1H7H3v63eaMXdF4XSY9UWn421j
GCh2rXi9KXObCIEcDa/fSpYXt7V49sEXO2tm4QfdxLraljtFmIkp4kaZkyRHkDDKrCfBHZPjziyN
uKFmYsaCGKoi3rfbqgMpNV9U4XDrzasOkHITRPkT73adDiKJqPki/9MXCzG947PHjkTcBFf+mI4n
huzxKGFX4SUt7KLnyuOs1nYix2MiiOImcthwTD0WJV/EfTDz1vImsfBYTARR3K4PJOydPpdU/XH8
0M2Zr7LXL0yiAUXMEaHlAP/SjAv2gqggXiK/TquBW8K+OQU/UxS9eogeuAyitpBGVx3280TEfNEK
43qVVzUgZCWIov+p6WUBBrSGKw3Qv4yFcKaI60jkSe7YnctePh2OJ5vgzFcQNcLT8betZnih7IuZ
KIMBfXcxxrBe6GFQRzcDDQtLUbywGUSFma2kTzJ1CPihzmjKjz677JgvSFxRlEefPKe/vmrcwQ7j
yY49z/6VJr+68514OgTSHIrs6FMEy1cYVXUzFTTekjnPj7+fN3W+lDR+At1ZLjzXvyi4sRf2cSly
gtheJUkqdAmOIwIHEmElLmIMxXjBWyUt2uCCqyC6CDb2JpwuwoHhsgymrxRev8CCUb2S1Q25BLkw
pMceBHkoeY8WngLHKbwaYsfWmW83+ozpT5y3i76sXUWzu8C5E3Y+XThXkAPHYV9BLBi9vRUkDJvK
gyBvbAVx5tvHFcTGMPqyhLyb/QV3CbE3qHho29LAjlW7Aj6i922WkMTaZuKNO4g7S8LVg1S6NrR+
T8qH4sDYYQUyTgItd6LFBk/8JCR91oKTJ8zQYCLGaNzNfhLGwqkU3m2DG9J/Ukk8GA83rAZRbTCD
dXg7+Yt4BgmSGtOHXb0bzwBv3CGRquvZT0br96RMPrnJOAm03C/nGbgi6bMWXMQzcMVYOJXCu23w
0zPwQ0k8GI9b8QwmvAZ5URsA1xarqhtZ4Tq8ymvw/W/yvEgCWtj1XElfokFjiMBBRMxRRNAw0Ivo
uJmQBJwEVO4mY3VW1Q7MuVo9CIn5JvmDuOEoTmROtGIQMhM24bt7GZ2M3J9RAIKkFWKOAqoFQKGR
nWuvZI11dWvS5ue4Uo6RVumFVyV1I486JrgeaTPaIEpQ1Zcpo4isGyHiUPBFjl1joT48oIAvSpwx
B1Sapzy5WonxaPgm0S/CJFp18QYeRLGOZEljR9rNFIQybiY3+A0UaEnnPoyn4vqSUjor3lBw+P1J
ixDL03heLsQcTkR5yJrBjDrR5QjMZI2zxg5zycmkwIqTwk1UNzoLXKIGpom0RxqLBu5K765MEehc
v4FsdE9SucJh4EFc6Z0WBIzt1Nkf+yJIczN1ZiLZ7aTODjSggsNe55yEiEvIN4FaXQgnmZ8EPARR
1k6rvK18HX7si0wPj2uTCNFhoEEUHIbzEs4N1UqaChxviBLetH8s1G8kazyZDYHXfbvSy4VAemA5
BBLraqy2MtIFUBA5lNtDXjPduqrAcbzkq7peDa8NWXPJLuam2Hnl8scZRN0eEiLqQbzSgLf22aKP
RQK7uAFJRPwV9Wz6bXrdHdA5lgOHNeogunGe5fmnpFl1LcuQShJ7ZXTaMmNR8UWmcL8Meo/o3ZsH
VvrhMu5mGWv0AZUvpjvgJGA8Mr5J2Ow+ovdPNnmxhx9wETt7QbhSdqTkv6DBELwK25GLIMqbh8ms
gOiGVThBmtxKBOUk+eeUebNQIaxcuBB4vx7wuT7ee3JNug3Wj+I2Y9k3VHMhHYaHmvRIto3NOl/y
LjhMwpS2hZ1d9hiBcLL7vtT20+9jHHsNXPDBtenEOOglp4p7kSYed51Oe5QVfIfAHFLkMCbSTFsi
/oLoTxGsME46gUnHNy04kf3JwTFJxjwmB0GUM8YiFE7P2ThHFk8WD3+dqGtg19wXIJ5vg2XTPH8R
8w25yrnwuMo/JmuITywt5uvtsG05Z8nZxtxCOC+BvrgmRvZTgHcRREsohgjwKOHu6HIZcmHADcOJ
u0joKZJwEVxfkcCHwJA5PjU/5X54KeYwDHeyx+cmuPIncKgw5I9PzU/5HwIC3yY/ofjxmQmi+B1D
eeHcKI51jo+HKkbaUUHiyrKkddk1X5dHrFiSF7swumQ2/N8O7z+CfDcnfSsEfoH769tPJ8MjVXNL
ZTyL9OPU+ETJC7eg5Rh43CoWt24AMeBwCQVmlMLJ+/IlRoFqmSyCHKPw5r3ZSsQTaUxxpVIkhaIM
OcEjzsOO1kyShw+ewWFF4LgiaGARODKs7Y0nVoO413Hv9LpVmStUlwtrSoi1xOXqiKcr7oj7rTE/
cyguZGLcsRs69fFNda5SbS6uMeHTFvepvsRJW1hkfz1r67BGec/awmIwoErSnbIKv5AFYDEFN4WO
HX6PnVBJWuH02G8EdowrW4fhBlGIpNkObo5WvV5Gu9DpKtmdNEJegit7wrwP0nPWP6oFX89avakC
GVfB1QfChBi3565/RB/Onb260QcyroKoD5eLVOPsILx34+t+4ugp6jcyLJ3E4/6CdbnD8I5CuDUN
54zoQtqG0dWVaNwxEOKj2mHAER7V8ylK4rmX31a4y4dQPEMQbiW7UCT3Ij1dibJ5DfNeBAs3Wldr
/utBEHm99c5qoyl/SC25pHKBPlREdKP3cfYaVUVihyLfYQUVeKuIE/Wvf3rKyiIA8l3SO2k0VWRJ
2INf6ryeZNd9P8eG06eZzKQL3FyQBBVwowFOSzxE/ng2HbjzXbMsd4tX5oIKad7McwQsx5282XYC
QFM6KWP8IItcSC+LAABKP8X/cFulEOJhuN9lvkpnIc5bEWMY0gqN+CwUJawtdBtW6BvTXXnOyxLv
TZUJ36Sw68OXAhiHclS6XCMnAwicB0G6ithKhJAY7hlqOkYgnALHHeuFnYyC9EoTIS9B3AMSrTtO
B6fYlHyR+vF9WCvZE70Ni8NDEKXtxVLjnLG6IeyLLhweVkDvEMIhRcwxudcOD0yGQFlwfBkSHcGg
9wuqgUpInr6TYyzorjQCg6UgKoLHbbaTu+CBtm/ew5fX5b+4ELLkXl28MRtE1eG3C1k5ZJ8Zr4B+
MZSl7huhyrijiasqORJVqaChnESNzUdSTzVGkyNgQFgK4o61ICoGfIVb3vBKd8qLIjTJGpgXp7W2
yb1PQnq428I8aaXi4zgi5kC+FSHH9UUJOQqkHji+nxHW8mvmXqM3ZbWCwh8LUvemfHgfZjll+UsZ
bj+5vrpYZzoMsU749MXB9Q2v0uqvtbhm9GLvCOHW4CKLY4bhISEs+diij0MB14GMpUgfnjmNUmhT
nujtGadRB9InIF0ZseKSuNR8kfMxNgmHEQHjMN+wIJY6KT8h0AAsR4FECXAI/pYenLxn4lUXcNgK
ojpgLsG2GoBHwxehG2/FuTXzeCMPolzZkSaseZjF1eFh4ONmEpdObmQWDhiU+bUw4i9/Ru6MMq5n
mcqShFEP3UYMziJG/4FzMMnE5bQQ4ZPCvnSUJpHLIVj5Q0KGgEgilkT8BNFGafztvEYu8ZuqLHIl
eb4QBRb8vSUDWpev5GSJKaayxxMwQJ/CTtMxWYkgXgQ+eNYHZlLfigZygjqSJQnI4EYigWHIXV0o
QjgfmVPZNZh5D5bzL5TaGIawNL8VCJQRc8WytMG4m0XoNcdwLyKBjgK3QvGcFeThXKFGK6sjyuBP
m5HV/bIwMLZgVYuqOGHgTOVFYAqsMgEuw93VLU+pEAhtJPKs0h0pPC/9GNF5ZxD3LVArQ4y7TOUJ
lqkK6Chwy9SUFxc3k17CDmWLlSqcdiEMxnw0ZaUJL8oEDwQHhzl1tYCBxTCyNpryo0/Q0+uCYzUf
ovfWRgu7CAKBTa+CngJn0613e/aLpNVPcKOPSZJs0P9i54v/qWx/LJXWoXTLcQUxZH5m6TkDVW3O
TviT9bUoSKyy+0d4KzY7m9jz40QugE+j+zqtvE7AfyvCZqFdKnzA/z/OMfkp/C/FR67Ye60UCvXH
VonZTott+Fdx030Q9/d34L/Wy+A/SptNsRUrCDv4j0PtqVN5eG1Wog+vivZciFVe+2/FdinWzxVG
D2zldaVwxfpozu9X84dpRajF36MTLnp/N6m9sUKN/VRbhfpDqboYV7pMu/OUaAi9SX07iT0oS76Z
VPergrScjFa7dC6Vz0c/X9oJ5vNNqInLTGXN8d1sNdFh7+92neLoqb0fDfqphLDgcmNBfk4W1Nys
WI0Jy5Ly/FSqDsrLdpyZJdrCO9Ot77LSQPpUC50ntbp5Ho/5XkFcppPlbvb+rt7qvHMTVujs9t1u
TWwPps1crccPRtPUbt6v5JLF3Op9p3UGTw/PbaGd36Z7g0ptX3vIrCvTmDJ6eXwvip/p2rY2m93f
vQ7eMlUhla1Pe4/yZ1nV2o3kZ3deV1bjhryqJbdPH9x89tGYVWPvpUZmWpLak/pCfK69PQsP6/lu
+va8XS6ruxL7sLu/e9iXhmV1mR905YfshzZ7as6Y589yYZJjmYLU/tQex/NXZjpsN4bTYf55VhIU
OTbIDgaph0brURGT68f1tt+IDtsZIFM+x+X20y1bZBOVmdzLF+dT7SH6vFVHBe3lPVbILjpCYpFJ
NkqlpfAxkR8ntU073hMmz7tZfMUPFssXZTR62i+UYv/+Tiq9VR5VtljLVPJqblXaTdOfZSm+VbKt
Qan/IX4UH3rdfu1T/mR7vc/9+5LniulFdSJlSoP28/Slk3paS5n4UyH7kr+/e9/Pmo14mq1pw9x6
ySB1K1TEh95nd9Wel0r/yxhqTnaSazmxsE1XgtR0FWB/eDdbLEcWRONl44fZyub873yRT8nsDks8
5wcXTBE5uFzndnSCuhDZXVfbiQBviKMj2AHfBDohFdI4UToE+wqJX/NKye3mIjh88qj61+V3T3/O
rfx4MtxKpvE5y9c2scLrdt2qPijdzHMnMdo2+sXda6y9rbyz/cIomynJr8UyV72/2+ZSXPGh2nve
zJZvT7uH8rL/+Tptx7fdt/LDpj8sllaldiK+K46ZisjUJuKTUmyPC9UZU8xzeWa27rZKyWg9+6Hk
gZPaGT+I7WU9UV+0xViezfaeEvyiLPUr0ntiOqi9bePrstBoR8XMXGs3p8X4at+rcItRpjDe7d+q
G3FVzrWXz9rqszy8v+t+bF4qcm+SWnIjtcVXPjOjSkJ43JQ+d71JTlwVXxIvckct1RLZ2lxrFrLx
hBotd6t5odzuNLqjpdjZNLTKU220B9Teku3oZF/rrvhC+7Mnv4mlh0o6E12w81F30OtW9+/iR74j
vnUbxcms/z5/rXz0Go0iO3xrT0ur5ku8ulSen1/S/GL3AHHbzUqfn8NWRX3RtvV4Kl1kuXRWlpb9
ZVZKsDyvydNEp9HaDJRksf442ufi712ReXrrlZvxwks+9hJPPjZjxfjj6v4uuXh+3rwm3lbvb7L2
tFtEVy+L2DY3a7xHO4/1bYWrjzpKQZQG28ngad5K53q92ftOmYnZYvchtSivKqmX4Y6Tp9oYSKH8
Ud+U+/XlptWP9jfSx2UcQSe77ovLYXSG6XDYDzCIbgd2dlQ4fQlc9sMQjJ3wmgWvQjhXYKOIRYfX
wFyEFTH9Tv/D1STc9NcEyYW3A5uRMOQG4k/Ki0gE+w5ilmRhafCbyHmx4FXVxeYgiCsPgTmyFTM+
HV/kDC8/kUw/a0njMxFEUZMbY1uJE5PzRfCHkkteZzkxO0FUAbscaFth2/zQv+Ot8qFTLAnajDGI
srLLEL66wERrYQQm8rPH8r4weGG1aXfYG66z9fd+ds6kxfobkxq3pM/HWSOfixZm1fmr1rq/Y/Y8
P1bU4nLy+jYpd4f7+ixfTfQKCyWZZT7z3Gqye4m1Y4Xl6GFZqkxK00JTqjIik9eUOJNegy9FmXR+
ul01B/37u+yeyeXT8czj8+Zx+lxlAQ9zmdPS2Xpu/Fqq1hrz9ktsuR9yH7tNYdQRluWPyub5o1ZN
DZbtTelj2lqXeCZa1/bJzP1dP7vhHjqj4pbbFUaTdmPVqseqr0qtFm2AUeY6jUnpM9dacjzDtPrD
5fNkyYzX7eh7LS8XXh+fSluhsF0XPj562c/H+7vGpjAuLj+3c6n2FtuUOFGJKVxDbTLiKhbNd5hx
UfjsLBuL/fZZ1iaVarmwKSxmq/U6Wc+tizUkqu7rW7PznC7d333Uav92t8G30Sv/pjJ6zaCAtwrb
DDCI8/jMFYYLTWGkF6WCPoXL5da8Wnc3hYtPHTSF+YeslnzR1m+Prx9b5nFR+Wy+CN3My+P2pfcQ
G0YLtVZn9p55GY3eY82JGr+/UwfFWjNWrD90NW2RaLa2g0GWZR/f3uYzNia2Y+JHXSsLOfmx/CbX
5HZh3XkscfxDKfkhxGKbVU5azJuFRbLKyR/p+7t0bjOSorl1tLupTRPD+XjILBpPhfZHbbPdTqez
Wbn6+PjYfHkZDbuJl5K43OQas9ekNpXHj0+7VW+bZrLlj2TlbbJr3N/1tmKKrfZ241Y9NdrnSrtC
pfRaSxXE0ksh3QbGpP3Unk3AnzZlsVQppME/NAvgT4Xma61d/kwWksJeHien6nqRv7+b59bLRF55
1lbbdT+2/Ez3S9VoqT6dr9P7cWr7xO0qiyTzFM0wi2Qiz76/N9j8rrt6f9sqXI6bDBOb1Es820/M
h8vE/V05//Ke4F6ytWy8tnoer/MvvVZMjKkLZSnmk4t0O7oqDN6k+qfIRUeJtTJPR9Xhajn4HGcn
r5NZgU+OupsywyfW2eL9XadefVsD7vMfD4V1TVgmB3Gm245Kk00pJ8ZiwNqpw0Q2/9KXchP1+THK
fTCx17pc21TXg+K0zMUTHD9OMH059VkAxmoVy80br32Ay3rQ0Qr91q7KVNqFeZKL9z7l1qKmFtZN
rlJovjei4KuF5XSZWSzfq5+TfqE/awntwlKTBrnepgDjxe3yc+WjuCs+F0aF7rRaeFHEt3b5jU9q
89kmyzx+NJJlKZ5MfyxiD2lxUy+UU5VNRe5svv9O7tzfTarP0fJzSVC5RG4FDOow9sbyar8vfeRz
j6PSY1Qc9B5q2bkyUObtaF3Zf44qqUKtNCp+Fpu1UaEPp4UA5M9MgBQmxXE/zr9qBbm4rtS+9jWp
1pmiWByt+Ga/8faaLffbC0Xbv4ttYaKW2rvaOiEW11mpO18lK6ni/P7u669rFbm4KT5XRoXd9BEs
Id1JtXDKVWn0unnMvWmvudH7PpZYMpu9yknjfW6WfH0DS4ZUWEx6r8n6gJcYVW5kizK7nn1qyc9O
pZQD/2OnyckNu8nH9y+tal7Yz/bZ+7vme3a/HWyepIEcZ9jWbtVNfoJl8HHYzvGrRKXEtIfMB9fv
q9H6oM736oVaptkbzLOtRXXcbH7kuf622aqvHqqF2OT+7rGWjT6XM+3F5yZakJ8SKa42nO6r9dl2
1ss1mjH+MVVvdhoFrfTRmbQS9dmiN95XSvPWps1X5cxAkVept+FY6z4tx8ANSD40iw/Fj6ia3gvt
UmkxeHyLTVqL3axdGJSYYaGglGOjdQvMqF2nUN4mBrlqMfNajcUqhaSq7ibFdXHU7D6kG33gVNS3
3V1W+Fwux/EaX50+FZulfHOTLKzX00U022C4cZ19jQ/aWinFlp+G75IwWQoj9rO+KwAg82L1s/yp
5Z42wzFXv79L8bPZbqjx4+eHdqaZbne5fn65W6rF9LAb5d7Fp0y7XxqPXmbiLltrJB6e6j1+pUaj
Mbmeniffpu1dc/vAPdenNQ3I9CmXk2Z7JglEN6oVyiJTXBT2ufeP93FSU6pS+uExu9+z+wFfVR7H
ZXkuxdXn9Wa42RXLzGO9+/EW3bQX1QYwZyMwT4urXWbR4xvz+Ae/3mX4fhv4IBMuFVVe0rmPZHle
qA8Te+ZFaPLvm2WuWG4o4+JAafYW68eX7OztTVsVS/vqdl/pwBOFdqEJzJ6VJTzq2ri2KLx8fHyk
Tu1xK72KlSfDTbXLT+PZ9EdDX2UucB5hvXz656m0YH9Yfor1yALpopDGfAJ+3jBUZJYbsar2wvOw
9GWYQ/AjET75FWYOeePtxsJoxKtqmDmdyqBP7k0WRrz+tFv4WFxD5shliLuYeAxKp0nu2wb25MfJ
ZIRzUdDLzZRcmkvc7Ap78rgh8nicJJ8T9Rncg0g8wTidTjmTwPUpc6QHU6iov60Qzh5HOY86iP7m
yvLF+FDblaYkChLv39OJ18WjWpJXJHVbMK2ntd7gXlgjWbsREwG1lHaqhmElbX6OvTy5sZB6vxEr
5O3Mo81wg2ga8bemobWWRc+7c0xzgo21L27Zgc2I0X1wPTSHTVtoNfXN182qPaq+6CRiKLh66CwS
p/XP/ue4O4QM6bs+trifXf3sBxvE1Y/I+jvJEpsS7lQiutIAxYpt4s+KGJuHIEobN3Ab2vWj4jFy
jVu6Ca8bX1YUk8WI3nmg1xZccTkZJkw62PIgXW0wZXLWKGGOP4gmiRUFVjVeLLodU8RyXAUeKBmM
P5x9nj34kSojzVu6FX5hkASFVE4Z9mGNcZg4vjwwVoB9Rg6d4lUTsR9nIG0W7uy1FyAmFeyHI0ie
sUHvIsPXj6FA0TAOz8aNZcV43gZPvphsBFHQZLbLVtpEpHwRuXlx5yJSJ2IniKLHNuOOAX4cKr4I
HHqerPE8zBdhE5yG4gw+oOIt8xpgi+eMl7lr0lgmly4OEV+WYihcs/PDS+Wwe9KZjMlEEIWMCld0
2TGwU1xRlEefPNflJQ6Qf3DzLDkxOVzBE71KjsoIReAwgCnnIsZAIsZIiF4lJ2bIuxKUZEkDbECC
iLL/OqB3OAcdqrDD+F+R0VQQgS2TAA7gHxVZVM/JPaC7S6tnDUKws7J81SAEfFk/ahDSam5hKPtv
fQ8hDLVy4E3Qgk+Z3Neni2EoLXj+3ZAQMGf3vsb56YabGfzdM8A9bE4BNuNZi8S2UxerueAlQZpY
dPMf458C5ktbLr7n/KY/dqdaLh7uVEtv8fVj7PV1Kjcrq+ZTtVaqVLSP9auwq3UFTliumo+txjz2
WSnmi/d3rFTvJJ7l2ojfzaPjQobdjfqjp8dS53G/TYxqD2pzP6iWR71R4rnFJcfvfJQd1fbJ5+xo
k52lE9x80GpU5PFSGsTf7u+iqVZRZOJRJtbPvUTrL2quOcs01lxrMM4lop+5Fpdjmmv5IxVtcJNc
ddKb7kfZdKM4Wn4USuwz917r5ZlRo/VSYaP3dw/t8fu8sG8XU8u23EgOmO3DLP0gFiv17bYiD5nX
QjXTLla6H0/t3PN2OOl15ZSULIDd+/BJ3bVrhbrwWnhufb7//+x9W5OiTLPufUf0fzDWxb4xVogC
irFjX3BSURGPeLhDQEQRkIOov34Xas/0zNtKlbY9Az2xLtZ8/UpWZj1ZmU/WURb4uN8IdTBl+pS5
b9IGHTZF2tFnU4yeslRTjf894wEQb/8enf5++s1sffr7+d/x7/3XF37Djrq8XwuloUE0GXXC+NHA
LVu0dejLRktcb3SX7mhNIarVD/OOz3CrUNt2xxM3VAtsezafj4e+XFsd/RZ1kSYGdaMz05fknqj3
6OaWq9mzPtEU+a0+G4h0R18f+MW8QrbN49T0mb6/OS4Ylq7bHb3Em/RoIfi1MV16ffGp81funGIr
TWNz6o9Cb4k1y/OzFUqHFjVmTfc7w0m53+zsaL1+HG1qRebcQ9GcVue0XCqSry+OqE2ZpnjqZWVP
MBYbiOyQadnbEevWVf8kvTig5wLN1+vjUrjTCLmFFZfF/K6z1gpFN1yZXAfvVMrd15d5gBXU9cyq
DM3tYl+rlwuhTbaEETcgl/md5xzmzGBO7POu2l4fDF1q9titUsWdaC4eVaveYprqfqHyth1t+68v
EiYLfndL5jHJGOv0wd0WytXQsGoK3Q2bisEH4iog7JnTV+a0C76UG0x+2vfYWcUPV5u1sSwL84Be
1aoY8BDrWKuOlAa5XPvNCb2mI44nAt3YhMLRNSNP7Bf3TaIm0JuKX5+Ic6w/nVitA7Ee0fXpeq7y
LYPhKHdIV4YS/frChqy4Y/tRS2X08Z5i7VmrwbQI3mBK9NwQ20LL56MBV5Aivsqy22k7/o91WlcZ
e1jbj4V+p9kSAK5TdWO8vuxds9OpLZq4EUa7xlqX+1XsoK5363DLCTVvtuDLktTbHQchW6U7k6LR
BF40WRZ2I12SBuDvEvh7c1LZ54fA0gNGW4WNYu7dqBEsWyAs+XxotxxR12ur3lDbueFYG2/3rQk9
w/ZqUe13wZhhj80GU+Trw8ryoBMradPeeIPm60uxRjHNQFyrDX8yElqrqbDuGv0+QJxY7fPMwKi1
VWZLULpLUth21Wzv29ONSe7IOdWx6allLFR21VoXD8aoCCw1W1OLZ0VadGTX6Id2VBsZHeFg+axF
N3aBmx+YmzzA2qxuVcfRBIH3aNkLhsshFjB5o9o8CmGvOGrVegAFQjV6Rses53vlGU00cNrc76yd
aBy4SbOndTfSbNM0Qfsykx9XD6tpZ0KLw41sEh5Gz+aEqBq4aKse36cn0etLnfEZw6Z79nRYxduN
gFUZa1grjFx+P6K57UTU8oRkmGw16mBBv2o48nC88pfisBY16fYQuEKfypfqXY5X2dcXsaFu+b00
od2h2bEZkq16LKlj/JQJiWlQ2xFtjJaLTMGWeJBLe7alNgr8YED3wgZWH3EVWt12B1EdaxA0iORS
uShR1lhrUrZZLviMznKrjsWSfF+mJVbgjXqx7w34dlmoG7674vWoPm6QpXaF1mlpJO6Y5vjUE6ZE
NF5fTEmTZuO2uesx5Tq2ssX1FKBsgEg6rTkNceaToor7LLmYk+rOXA7yET82d1NuXzcKdBNv16Xq
js7X5HldBvFtONt7c1+t0M3dBJOsot9gRrTEE4vevLdwuANRFOhKTzOMZhBMud2MCb0K3V8ZhVG9
Jy4xuccZBwb8hAqx9uvLSD6UTKYzG8Y+za8LUXNLESXOYQrLHh5RdJ9qKNyR7lSiSa+E0WXryG8N
UXdojt/GuoGA2KZoNZwWtubrS3MzMscG2144bI0NuN2CmLc37bIzmG2EiqFH+QbFs/u+oTfccn41
PX0FvmG1fCviCWZHm7ZqGo29XJmBnCVw4p4dVdgdVmAJx5gslv0CFSxYsRG1rSMzH806A3JL93dT
Ms5Eh5HjVFsOE8k0t9zSHDvq1XknEoR+NOq9vqxCio24vGQ1pj1GZD0i5K2N3NsUC4xGS1jDaXTI
pQ5+09IZdq2ysUetS6FDd8sm7Q8cutELvSLNFMTx5vWlQXGFJcUUF8MCLTeiCS1VeKG3IppLhiuI
G7zSW0QTg7EYc0urYPQQikFHFs8sWyLL8mqNF4iWwBxL9OYAIvnEFYajknIoLY/5oN+veaX6qNsK
893FobVxo8Om6B5Dgd9T22KZyLeqRX1ea1d7vDUDqbewI/FQamvHWh03RgOAQofiVxrfVrxWK1rM
nQB8Xa1vgrwmVuq1fFMp2W4Xb1bIwdSrDpzFJ91B/BG7gz7yjzJvzYKW4CYnP1IpjbPQV6Z3/jrq
rMs/ryNSi91J7XQdUbNVoLpyoXWgeazdX/MrbmnO91ZpODCD0rTSD19fWo36sl6Rm+VKtV/bD6LR
2OLY5apN1ZoLfqmPZdKeSORmEq0YcYYt1eKy0q3rSqlWcISIOlTFgq6Sx0VzRmHV15djwdanMikp
A7rcYA7CqjCwCLPDED1t3GEP/qzddAk3XxgUyUkUYQ2VWHuLBcZ4+2q+BHIkPTTE3V7y5s0O/vrC
FYRGZ8+zOjstNboH21/jelcxFjjHbEu1vNpV2VZfNTvKbEhYeWqxa003zKYW0p2qzjt2xadah3ZD
GC7YMaBZfGc+mPTrhapZr9YMagaSj5l32Uhwd5jfxfwdyw/kI2UU8z1ZiKSINOcurQfGzN2r6+JC
5Fpcc5fver5XA2nP89fezJjRnDydUEusFQyUnUCzhV6PKwqR7rFRv9fFW1EY0orRmBR3HZPsHuTW
eL8Bti77k9ls0tiYnXHQAeTDaitHYVeYB6DLQ2wllfz1hJZXC5tZ1Ia1tm+NtqHe5iirMm/Rfcbb
OuPyZtaeLClzVsJBU/XKnvM29HhbArS+7Xa54rRe1jZuJ1C9gj7Nq6GKTej+cFiz7X0wcm0xlJmG
TW6rw6B4nFnYxtoPvdG2IuWH4nxOCFM2vxAOlP76gjd5gvD9DSMCR9vQEj1kG3RzydFitKSlaY9u
iILBrfmIidgpTTCioNIbXqSP8b0oS5pWI5OWekMafAQoIGfw0RL8sBdxotDjNjzNHFmRWS21orYe
be3+INJr+Vo0rh/Lxxa1sPvNtrEvrfe9UBsevDnZKXElu2dPeqIDiqupb4K+6fcK+rDZt2kncP0o
aNWGVmPWDCm92JpWyn2TLu0OPKiMuOre5wm6UbR4qpMvVV1hf9xbU7mNj9sg7RHbEHNkyeyUBtVy
S6F5tjoK7EqhNy6V1yWCqTDT1rGEU3jDVRddr2LZy8rCWmDHJQgZ/lZbNpak1rHkud71AJUhi8PD
Qhc5lqmWJaLrqTJfIJr5er6w7vd6gUMFXWlDNhgiaguAg1SGPkiSh2570nLCHW8au9l8U7RXtLEE
VEYwVLZcCw2m7KyCQ6d3jNp1BqM7o40W9gP6EJpCzxDmIInTjCIeOiwoqshw2wH5Zeo0CYEX6KXi
YDTdN9fA3wxAKOs1qW4AjtphmsKappdbp0QbfcOvO2aPZksjvoF1mCXZGBCVtgEENOTODBu2S7RD
Cmy+uGrhLZvEQEr2KKvTx8Y03RqOzaF8kISSIWzZ8DDGC7WIZ9c1N+zsKqGWdwOMXVutkzS+2ePW
Kt1r9SR6bEgsULXWiuNbfulG65osReBX7XHHO+bx1hQfSN6sPrHE1ZaOyXCvuD6UCvWtWjrwwZaq
yvORtFXqW/koOs7RUPOOm2/XX18UcT7shpNifoY3WIHdd/LzIyvQR+DN6i/ezEy2c9nqHjhG3nVk
nu603fJkOOxGlVIvBH/ReEDr1UKvMewtaWVZ3OH2mvYqcsdrdrzA5OmDOqjgZUVnFKNY2rP0kmaF
4URj6a7LgrHCSVIFeHyrt7HXgLXugtcXnakRC5rTsKp90ArdEd0Yb/CgiB2PxBqIuDnC5pJXoSob
aqQNlEN7VAYeQrNuuVyekVFjhB/3vQbe7CuV6ZIWbZ+KmEahKh4ZlluWMMbESKxntAmQVwTj1BLT
lug9O69s+mVa8sA4bXIjiq/0qzusHpamU7rZkLHQmugtfdttzgyejOqgZvugH9/p3OO2QdcwFECz
DmJh2KnPxlZ30hYJbk0HeAT6bxpI2pCmaDyaDjb5Mk93B7X4ns1wPAWlLhM1HG6qsYshfeTILs9V
GPDt60v8ddmtNOu7dWkkTKqb5Q5UYNtZk7Oc3dF16eZero2YcDoT1KBGLQ3JlWtTrlgcWv0huxCm
C79Pb5e63ONBDCkGIMiwFcw4mBti28Ls/tjC+e7C9AFxdBvRqDpkp3JBpvXlWpkzwzZNlrr8KGh0
p+/RGdOLIciA/noUNnyHsYSoS0jdneuvakZhuxgZW5wO6n2CmxYHNUzjQq5xKC1qUf0waNCMTYWV
xUIP9LIi0wXei4b1iHh92QglqcphpUjnaatJhfa+vsDbRpC3q5J51Dh9jGNLe56X53l7Is8GGk6S
VCSBjst3MGXYFYhua3NimQzIMv0RyXvrpmEY/+/O2zA/pkNP4ZrduCm4m6U+VCqNbPPDtd+/jWvy
Ne0H15z0gqhZG8mTkUwHXY4rAjY1YlS/1mRYvzYwHIaJSjNLck0V+J/Pt5itQC9a9EgetYJpi+aZ
8XzI1/o1ZlKXZ75vUaLbFduHWqjZbpnxhAU574pN0WfHB8AtC9G4tl/tbG0/AxHKK+L5gDriMzEv
K+p2sxhUKhWM9PLVKvjHxJ5sgj7nVLsrajDQ9uKu4PZ6zVbLPPSbksvkK8PDGiuLk2qvygOWg2Gb
NbEY9I+E4JvH3YZcrGuF5qE8OZa3Xal3mEabioXNtkpZ3HOLYfw7Zr4eMfK0vdSAUVp/tmkeVJzb
yK8vB69cpyN6tjroY6xZ2HQ7IPpQgwUx2snKbsxVWwupN1CGUn9K9fgi1RQUdswei/rCO9r8RKsO
VdGob/MytwXRsxBEpNFdFma6CNIloZpctbkgy8eDCLy31qDqxq52yK+6dk+c0q1ui56y6qFco4mF
M2fWjLthKy5X5yim0FgAlkPP6QmN1WwJsIwjWXCV7oYeiKtw3Okt6gQtSJrZqjPaIuosDWbPWLiz
CLvkpB5xwoDdk3wR16kZs86P9tLrS5WflWSOMNbUOsD2Dq0eRqNt28731+6Bmky3hF1ci8GmEQC/
U8OJMRL1Bm3ik8lBIwxOHu07O6eSL4ACYtKKJ1bFI91ktQbtYWGXKE97LFXq88NoHJV0fKktOIxz
ah3OGPSb+fxyX5iWeLXBR7WFGoLM3D+A5KFtBMfgJgWQEVn9UN9MyEIgOWFDZXiKaa96BD1jB+M8
W5pR3EEEltUH/sRcUSavkTWJxCsLiWZNv9fzwiagwY7SWEbU8vVFJIlaaJPNtVuwmY5iNptaKHBd
nZku81pepA3gze1VpW5uK+spOywxTXvfFg9EIcR8SyLWYpWstdxJu0MT9OsLyRvbKPIkse92cd7c
dGldIMZ6FIXbdZPRG4dmH6d7ouHtI/rQqi95eRY155jCbi8SxblgA5voMifEVxEy6ybn8ea2vK5h
ImOH+2V/KPN6fzyjDiRd7oZyFOhNimjk6Ql+NMarkVRu0Nsw3IkAJwqUhGHELvfkBNQ2HbxJSCLW
8rb9Sc/hA88rSD3T4mYe1mbpGmd32c6KxqyxVpcbwp6f9KlWpdGo7vmm25zZxfaaMyRywLaIDei3
KRgJR2cbus2AM+RSuDj67b0ir0teILiYVthPN+GM3crMtL6SIjN0a+B3Sim0D4ZsHqkVBfqtswpL
JiOpQNqhNZuu5QlvTWsrskMWKWZcLFZtZzAY6DplWpSvRY6trZr16W63picNtSprtZJRY20/airN
hiFXjtRG3hbHry9dkmuStYq5lxSnU5z4lkVH4rxWmlcCbUFgNb0XyMQk9uC108Snx5WzX4/qzDjP
K2WhPzSGTUzGWKftTkInniynuK7IknaH2TZ4R/TLgldSyR7RHHrevuaPjhO9f9xq+La7HzeXenm9
lqeHpdBkhKB73HCeRxk1srraz7tgZAWFNlmQyJE8Vg1bregRsfH3Vq9FRmK5t65jVaVBi5ratVpD
Ey+bynHNl7uLWXG46QVNe7wxLX8GEC0W1CXAlBiY260tRv7eEwbuURg7x1qgq5zXc2qcF+Qdbt8C
YVwvO3mhfhiFXE9dlba2WVgqPuvuscLEai621KoRFXevL4xgzIjRcOwE5EgdDvQ8XZRnw4AucKQk
dXbTwSgszJaG1tCwxb5xmPHFTfugDEutgSCCkpZYcKQ824eqtitNX1+GYrvKtLahH9V0gtlLUw4f
qWWXmDYYhy/KVh0UDYut7GjLJs5vN9ujoUlsne8VBHE4bu7KI18uLY12YzKvAg8JHWm7WYW0q5Kh
IE3X7YpQXuLjtRliLWZa6eYN39LHg7VvBnKnoveGW7VL83W8RU/GvWPJBr8TmAE7mJYJEEPa5KhE
FrpkQTG3Yc+a1pfl2WE8LBwAGv1hyQUujpW57TZ++Gzq1Sc8RUjEJjCakp2PyuCbaXHUsvXDZo4B
FIbMxGN74/5BXNlb1tPUzrxYqyxavh2Zsj7i6GlL9/r9KVcYqy2LIHlOVdk17fSLUaFp7zZF4bhg
QWWCqT4JePB87JDFwX4tc4YrhRNSa1mygHWb+grD2JJ6qDkqxkdyOfJra1Ia6kfbyptjkmxT7qS3
qxYWWGUzWk+mZRegoBzLRnPfF9RdTR+uDl7sV+zyaMQSO2MWBMUZUeElSwmAD6+MwaBItot6RLvF
Q6HZnNTJ/F7BD8eoxtRBRArXvOsvleKIkqlWE0RqRbYtvTlzC5FR6hKErHc5ttlu+r0OIwtSUwjB
T1XOwOqd0X4yJUDu2mOy6NdW1c7ri7wwIvoIfmVHzFKbUQLjdid8Rybau4q+MhhPY7rVjiGIxMYM
68pW6nphxHMHnyoTi1WhPz0GtCxKTWddj6Vx9TrtHjTq0FIcsuCofabOYxM36HoDsUlMZ+sx1gNf
EQdObApbxR54dSI/J0GobCnNWd7ZqjVAShzTl/ETpnY/rK76w367WwXlobts1rhx3mBber1eq3V4
v4BpYh00MSrK3doGdKXZdzyXs8vmrFyKxqbJ1rq1ksbvAUdf949VRqy2Hbbf79Sq1XLRXA77HJC8
EkIguT4+Totjd1QfAslEAdPFsiGaW1NpNdnpuo+tVtW+kG9jg33/9WXWWnjVPZBmKJOW1FQXeE3e
cc5sV2HLmj92I3oSUZQs6wOBLO+30mLbbtBFemO6g3BXMbZjq1g5YrasqWE3vtAbk5uUaAzEQzlw
a3nH17gtq7ekjg68s62vQmHYLHXtCk5XsTVQjeFWRL57jBbybnMobTheWOyIbqQppPb6sjCbqngM
VLI1YTseU+SbdpHoTwy/oHR6fqVXogHfoORte6XWQXTHV+KxTNFNetGolyipehR3ribbx/VMOoKR
VdEWyz1Xn9SrVH7T67VmnXJjU+S31mIuDsqyXV/Lu1mDN5lVtzDPR0YhcGT3OPAZwZP9eW1GGNJx
mO+CQDZZvb5EZYymZyrO+kR/Vgg8ol5pGFOOHVLT3dbfeviRUg232yjp7Ul5qrIyGCJVfWfluwYv
FCI/v23QK405FCYeqOK84tiT1LqMN5uityPWsr7j2j2a6cilQt3SOiS32W8KjZ3cAmIwdmCaNUlu
l9RxDaNHYGDtCU9bNQhHpSUfjKxdmZJbq6B2pFmlyneZMUGb9ZVSVTvKAvPDTmHqC2VSz2/rhj3n
zHzo2/r2QDnEylkSzZJTo51KvaFXVSr/+oKNuxtsLtbjXzfUVZsKSlQoub62FRpLblhcmS2zEbkK
OwjDSb7Ir6oWXmMbw7J86B27y4hfgcCDlxW+qLdfX8amVj5y+3JxTRdq7R47s0oFfClWZ0G1v+QP
Vj+kTACj2muT04o054tKu88fixu8WOeXorU2xCPhM93NZJ4H8a1fWYi7rSjsRGa4MJcR3WyqBVbd
qQ1g6WTYxrmwVagxRj2Y1MxjXgAuiUfE0fMOWvkg9N0NGHGqUjdKgQ7GKV/VC9J0seexCjFiR6Nu
vdaqtcrbpTBc+ktz2nL0WofgdsPpuKas1iO90Wlx3H7MGdqwjoflRREXVuqWWIQ6qBfIjb1zigEY
1HJUmYRkNDMwXAuK8+F67daDajQkl3iF7To7uryolWesoQ6sCROp87WtcpEEUkaoFkABWaBBLZNn
mmHbUbljvjWZTgddeycFteqC0sfr/O64LWz6WnXpY4OuPGWijWOb6+lhhQVta3vUfckUrco6v2X4
+r7TiV5fRtUjNm6Yy2qhugoZYc6Ma4uyNNCieqljD+ccB5iDlA92uxq/rXVXeH7okeWacuzXauVm
dzGii9qiPWrM8XACqo+5YC6JLrWd6o3SIMyzO8VS5iWp3D+aOGCQ+ciej+klRe70hTy194KyHC7K
Ix0P+WE/325aW8q1l7XKqrQxawAF1tW3jsn45eW2kq8vdx6pOWyHKFZELRB2nhXsR3S3jgcgD3rT
GY9pfnfSGMv79qQ53Ar4pn00DLfk6puqASojbWMvmN5Gqm3CHlaJiJG/0xUG20/kymg3lqYF3Nwv
Qj8smGZH3s9tlpGWLtViVlW2OPfnUs2dtxaVClfvz19fVEUbAUea1kZt4F8R+LUogVK4Ohp2Vba4
Amlu4vV4X9Bk8digu2LR1ffaXKdrwxpRP044W1lhbF07cmPKen2xZxEhT7blnd+VS6PtWCf6tSKz
x0FcCaRG16oHxcHS6U0aEVavlpub0nTWWfT8AijZW16lWQzcAVPbE82l7JRAfVrlO5sWnl+Oq9EY
N7yO6peMblg1yxt7Iu9bx4nQcL1thaNAGRJ0e9UVPdLbvtn2uKAwKU2jwaFBh/lIm48bYJxSYdVY
gF7U8YbFmJQx3qzbFnDSSZ6rFlaM3KKiXYWc+dt6JX9gW8FhYlXnjst6cxBfzVaL3S/LVYZhBR9g
SrTV/X4KfJ60KY1bRmLDHDWots3hTavKcK1NodzdtqesFMn78mATrvueavrNCUkVh0OtYliRRhmH
ze5gCyBaUq3BeD4ExU9vU7LDxnZUHzkU40qmvxbNqos3I2fiUJo5V1Y9b0fOmCDSJvmRsuVn04GH
Fds9x173rM5Q0IFuUwoTDadoUoxxmPadeY9qrKROuK0Jk4kw6OdXI1C0bsrGnHSazmSOHY8tw68U
1vXtog6iArUWPI9xBrMKXgcoFGmTo3BhO19uZbXLtI7eVImGpUWfkovTg6PumoOjO5pW8ht1hnUZ
xrP57aS+qGtjftZuhZGr1ozufoSvJrGldUkLOiXe8ZtKq2606nVrxc43TNDZTooFa10/CsSCWO4a
fPVIMvJwJDY4c9+x/L63rBSwTm04jiPUsVUaV+qvLwNzRSwG7rbeYQuDozk/jpeNwiHi+ENVJcjt
njecWcFahNqsz7FRwZq3vEiPf79Wht19wLn7ItvvFVeht6uAsSCWN6yJ46A/xOOGDeadlbFaLu0R
Ic+3ytKt1/ACcZwSQAlxIxdH+IYYjkGQnPVNbac3w/pyVFyBQDKZB0dQUbr+gDFVudPDprQwk/Ky
MaOFaSOk8aofHTlBYfFyFIyKHNeahkzbFvEN197T/RHOKfSKXjJTuTM9uI2wDrKMJ5Y2QYcAHJxp
Yn6HIvDlOLKwgrtt1WldLmy9gd33D9hIboCQMaiJG73SGkkMVd44U20w6LnHTtMbrBbklHl9mRRZ
Xinuh9H2qByZhlNatZuEEKm7gGZaG0KZ1iUh0Eo81cDVITbq0HOJ7VvaSNsNu+KW7u+XHYbQuS5w
ihBwJH47WgqdyajRGAKOKBhOrcwtJxNuMRA9FpNLAV84HNkha8xCo2JxHdLu9blg6CrFNtPfLTic
qbWCFTsL4k1wVYbcktVjr2McIptckWqwzdd7A45uqNihd2iPrRWnT0vNSMYkdpQnpitRoPUKqW/L
/fzSVPfusaSxq4gc4YBx4YC62u2JMd0HlSXb2UYg4/VxhZosCwHOlmuBu9I5Y2bmd4BODmtRvTvt
5I+GxTgFVuRWR51Zzvtu1yhs8yC+kd5ooXdX7LGGbwVQjopCw+YpdkMqujKXhmNOLmr5YuOI0zWn
2Cq1+p4yDJb5meFYWh4jKq1oiRf2eQcERoBCwxrye3o4IZj5MT/VysPKpLpbVIaOZ3S99k5TpVUx
HKgsPdHzRr2pVLjtcD7pt+uToW8ft2Wys6y0j5OGPWXAWAhMamSKfGE0FNXeMeDo0d6fl0GSYHTC
E6SKKFrFqLaur8tFQqNdXCzw+/ac6ByX9bGz4o91bVAiRFvHgyLIMl2XM6RQ4KkBtvIme4IPgy05
YGhqqGs61WpsJ+6Olgr1gbUihKoaO2O428v4bglYvEpbOKWUDvK0vsjrs3hdsMBZnZW8PHYmO1sa
59uHIX8sV6P6omiDcmfane3HxkGQhRJuqP7YFhl6X5lupdJ2KkYb2x0RflU9mIHRA5YOS/2GuAUk
/thyN8dFqdq38kG54RnaxjPNpWrglj9TtaLKdVVKW8zzqjnBVbY07TlK9VCfVrf+sVk/qLwz9kDs
nRRbsxZ5NGb+FDsWtT4lqsRQ6AV9asER4o6Wo7IurJRJv0848yneNhyO6qx3hKTvCHHaq03Uqt8q
FQuODTg5OR7tVbaATYelcrXjce2htDMbvrJwy3xTlw91jp1YbX/SWFu1MbEnqQLR7VKcvl7J3Lhl
fNobXh9Nqz9nf0wI9xbGRwqlcr3i5hb/25jc+vQ54MQt5s5NwqF0S8U0wnXjuMlNrK5/9xSgBqfm
oA/CXtcujRh9FBquDqV/a4D/1gD/rQH+WwP8twb4bw3w3xrgvzXAf2uA/9YA/60B/lsD/LcG+G8N
8N8a4L81wH9rgP/WAP+tAf5bA/y3BvhvDfDfGuBXrTM9sAiYymWlDw/7/31rFv+ul/p3vdS/66X+
XS/173qpf9dL/bte6t/1Uv+ul3rgeqnnUOf/o2zc//vYJVOpZNAf32DwF1Lof9dM/btm6t81U/+u
mfp3zdS/a6b+XTP175qpL71m6omc89HLplLJOq9vnE84u3Hjw2ceCDgh9fipgFRidessSun+kzbJ
CPzxkzalNMJ17ZGhv66ga/Z/FnRisJPrp4LO5deSaA7KYn0vDmvYPE8L3f5qXBZVdYxJhg8oij9j
BAlj2rVBELglqbufzSqKUpflzUrBrB5mTdsBZ1JOnZMdwenRu36d1fQai09NDItCynY3Eu3iDc2Z
kq8vIJuodp7a5QeRsCzNN4t5we006d5UiPb75XK14hr1el0SRXU+KImstY2ozmqEB0tnUW8ewuGe
LFS4Kc7LxqHz+jLcW4TSAKy42ybUI8WCupQdCQRtsSJNAlol9Zq9lQH+FHFWXD2A/yDR4E+0NAJk
Yo3TuHl0FvjS37nVeMfjbluqeq0g3O8m2HZNTthGnm0vNztQkBL7pnbgXbzQzJcLLl6qKuNxR6ke
BuFY3nsapRnzUkSIxcqktJlvS6AwqYrjkiZWhEpRCFuLXVUcdjEL811va1Vxl+zlQ3om2+21peXV
0s7bkHl/Hm5n60XFGBkrWsfVQcQV9NKuwoBU227IO2B9dVqjd4K5xWfFwqCXt42IpSwMo9W+Py9V
quLEpgy/Vc9r0wI2aoOSurGbMUtOK5Y0fVEqTBxiTb++dEKM2nRGE9Avuxlg+5PuoVHge/QG14rD
tdN1BZ/eSRpPS+NOHvwUkJtt2d2OG2tjQk9WXcDnt4E9o4YRDcqcfo9r8VPmwLQAdRssG7ToWXKP
k3U82KyiSqE+7eCcXcTJqYvVSCtq0xzBR7zTj37/zgFltdFo5bkWa/paiQq36/0ckxXdn0zsaZWq
q2w9b82GNaGy8Wbeppdve8e1CkowgVWZNSMBIjuJh4UJ8C8YAAWDWUyK+iigHWbHC7+2ZTTaBcZi
1FCXJh15VOEmPdcLjmOrZxo+2zsIu5LF7Cr2YBPiPMGAwuTXrwXeYSKmxav0YVmnVWNgNOj3VrHq
KKpTcjCi1PERK20L0dHX7MWRWuEjGZQSNu0awxHenul2wXc6FcZRdqt1gK/7PEuB/7vlyXikRNXi
Uew2quZxdayA8nBcOe5nUdOeOcWC0j2EA3x9iOj6vEfpYYlnC715YapNJn6+PWvrgHUKZWk421S6
bmMhSdOqNtlL3XZYa9AYoOt1oZJvceWeu47ytNMsEZowXx4b7dV+NaQ6EqbXibbU79ABO+0b3VJ7
5Q4XR57ddKOe3nDKM88JCXm+CAbN7eL1pYDXJKbGTPM+eTR7LOvO6jJmdN3DqkfP2MKcpj0OU3dd
MKIOfZrbl2ZUgymPGhjG07jvHwxmx6jSoEZ2Jt3Xl/Z+cKiY6+12URT0xrLJSGxVinB6t1u6+Uqn
oC3ayqg46wUsoXDN+dg2ja2pKuv2AdRQUtVqrLl1QDWj+UJrgyJdX60O80BftGq9skT2Btqkuj1s
fYacD/La2GqWexN2oYor61AROqVasz3UQz+fx5w2ucHlZe8g7Wtaq70UAoBpk6Ls1bGAA+hUgeas
AuPSR2o8HS/wwGvYZK1eOR6V40xvePUF52zsot/aRfPowHCFenswlfNRz210QDhTwThlwkPZHeqd
TXGq7w5lfdLbFhaGRuQ9kaSmOLeh2/PSsSCakj6OthTDdbwFM/Okoburi5WVLAchwx4b+yPfz8fn
hmgJhL2PIuFPX1sILi1Op1PifTzukiHGGfOoMdCXxQo57ZyzzCfMOV/Jn8+5aDZuC477f6xVGgnK
tbcCP4mgMCc36J0JCr2gCtXlfQSF7rongiLx1VWdO9IzUQmWg/lwvqu0x5PKpkBabblALLr2ur7q
VKk8vWpsRgEIB4Wjri88n9kaI9ngBvNje1VtlIa06+GVwrqqhcZBxHoYvVVrW5Y3WBAD7EbBKlQD
r1ggd+BH+QJZXe5DaTZ5fakcC1SVLJbrrai+bDUUYMPG0QKy0qYWI7YhdDY9Edse59oUBFe1b265
KR+1pkKDmG17ETtddnesXsi3gyNefn2ZVCKt1leZvXYACaLXCbttrDHyBCHfAVpS/Y7BrqnuVtML
he5kvm0ZYHzvevmxUHXoUb3J7k16v6On02FlDYJLJ6IXDEiJG1uQsYjVLA/ztI4vFawQy1f7hQVj
rvvbjnvct5zA4BscHdHuKtzt8Da1Y4RP22J1xaeeUxKCtnI03FPoV/RK47C1FD9oO4bz3zLp2sjl
wP/knMhO6WvI8TP2lnV6yL593fb0P5YZ23mvlZDD87rvPOWN+9iQ3Km93z74+0cZnNPd7GwoEbCR
sUoh9HtdP12dkTu1nbuKwsehEkrtNAZOmPGVCOifglO5H8xMQ2mquu3Dv871O5BXPoeNhjhxL4zn
hhExvKLt4wjWHEvTPcYDf9E9zlQsx3g6hotTm/Nzm9qpzR9PQv+VTrdRTGvu7Lu6tzH9WOR/+eTV
2d1MUDDxgw5gB/KnsxSYjoYdoUQFYYReDMy9azmlxAUaKggGAysLmkKW7qAyH0CTC5wc0AOB1MBa
ksaUeJ3aZzso/cZuzI3uB8rGfU5kutHJTwlIWSugEtBBL6duC4TFpIp/QnGV+6EMemBCsiqN0elk
IOi5C4X1+7rq9HXX8RBWyM9ugCLpaTT+0nju3DAK3ijqpxFo62LXd8pCJyxVPYbSVk3LVALQ3BVQ
H85AV/v3OQno0lwa0w8SLEmpB0UYLBIYChKPhR1EC9IYeQzPCd3vE3c00wdKzMMYxfo10x8MNte6
9Cmh5mxE6gINFA7ZdMEzdz0bTdtaXGDrmzlo8jnFF0xPw86/V1A8k3vXcC6lboqKFUQpBi0MNlxU
yDvKsLMWOcXWzvNEZ0XQSzBoa9KYG30z0FnHirfDfzidmukANUgyPhtbByyL0y090LXvYe+bsUvF
07uOaQex2U8ydqC7iqcEjvdnrA2AHnEGcv03PQgqAyDaevQreln0VE/fODv9O9jpKqb3Hez0wfjT
P4w+WbQXxNTgXith94wm5CtI+njaUoPB7h0FbebeNZpSPp+Y6iFofJIM6El01NmsmK4n4HCLsCfp
nUaejsbjIMCFFPVUjC86PII1pBlphNwJA2khLRZmPDXrWv+9zSijtZnq6UqgSz+tp8PAOfUAaP60
3y2L6VQzfWVuvTf7TpMhc2uidz1l3zcwLyctcud2c6eGU5dg7/HPm1DcIRAWnDJKWGZPeuRijJxf
McotHO+yQxXuyD66RWmM0MhjNmkWG0naU3yAOyvxGU6Aak8aPUBVLN3WFHioU56b3Rs7bzOQhN/g
7J/mLD495171lqfkWvbSWuoS7E0ny+a4UjSNHpi2YelxaHy3DVmyQZHzhmQmxxww/c2+d3Y/l+r/
ddP2lQwACQry0x7GD9D8JiiWM4DieVniNPZqnrPJevT5zdyBs9F94LDsVV73IAW4ldtgt6iQZZQL
TFJ8YunurHgTgnulQsKDF1E2q9CaBmqqszqn0uqXc0yOfZon/aETVN11r31prL9QyUOSY6AIe5o/
vCnxiysgFt+ItqQReyS+kbQiAi3pKajHCyLnU0MfYQ+7HAJtQxrRRuIlN9FGkfQUtPsnBS6jObcA
OtwR5VGsyADeycQMBfNEaV+Ae6xHLlbEsfWf4/4e7N+EXLUmjfgnTcVlcx7oMmfO/mJ8nLUvJ0Gz
WIJdtfkbzf9kYdembn87171m8jfy3GoGYHx31H5sBstf8bysiGpZ9N+bhvN2lu3+1VbBXjhP22qT
QGWeMu33o448N5q6qT+0yHqz+5FEwRJ/DEMA4zyScr9hgjqlg2RHGik/IhGE2UzzJ1F/20rzIOxo
lqQRd2TieNdwvybty0f82w1BDw36a9akEX/0ove+of+lHnBz9CO5ALI9afSB+5ho0qw+usin+MKv
F4PFyvzHLS76oN4MBm9Y5pziel12v1dclfmn3OJNocf94qppKXUMlPotySEQZD3NEX5HPtYClSqi
mZJG4C8rH+drOE7rXqfbOe5bDUqUAn2bEcq9tT9Wgc7Nn9eBlPNtJSirP4napxFfTQmUtuP7XU+P
tTa/z1smb5azzsa1TAX8hyxOvP0X364DhJk6wvIA7KVQya4EO/NWimfeCFjiD9rNxQ3nfracuuk3
FJyyOR7ji2Q+wVnTY7CtR1cM/uDkcfrNPWfRxy2+Oxpd9SVY1lFCYR0fRaXcmwqpC0+o4EGwQWhh
0Ge1UJZrLqTwOkq/H5O+RQ2hTUkjQ0QKUzdxR5H0FNA7evQw4ihGpBFuxDScVOkjyHoK5HGljxKK
r9b5CIakEXaYaijzvPOn8f3Qyjzp/NXaLBr7a3a+115EwnljBD2ZaP5sOXfy39SxTJShCJt4kgRB
Zx3U4yXQuCSmnCQT0phvEOIQLKdMkPMUoH9llL8BjconEwxII8xoERihavwTYP+nZrwHbyQz0gj5
tyGOquLrDcfSsjxHqf7wT1b56G3f9Fuoc6avghHpHWILaW1jfv5b73fHpwqOsA7y05LUEb/koZTN
EHLaP5D9KAI4zi9mfv5sf6IDwa48VotIe/59PRc3m96JfSgPTN7O80m9T1HIm3gSELixbydB5zRy
r6R0ndkoyumBYlq6xv7SAfFuLG+jfLyrJf1hNfbiX+z9Ltd+EVm4vS1Oipln1+dq9147YZP/bfHP
Sf0/S/+40dTlfQjvS5p3S/gedgqmijLZHc+33e76q7NsCeqmMd1D8OpEEG9//xTidgLxV+IGvfae
oG8aUYSLkRBzo39iQF7mRO8Zk1BKpxFQGF6WWFIlCHgKmKeK6lck4eupBIVTCuQdhUXiyiSyyKeB
/abK76jn3mkDvVqJbFYaXQJqujibZXZ8zSn/yGx5ekwF7vyBpZ9/ZALGm55Svvxs+DzeT02nroiB
9sibIMBKgd69QyBfRwwDx8eBF1b5NMZa6FGYlHGhpDwF3jjJfgguNK+C0j2N6Pq64qnL+LCszW8A
cwAjwdN9VHRhpTzlwZfBqfHzoWE7d2o/d1EACl5Y5dMIr753HS8+Hv/esrguYAcyIsZIoqCPEKM8
0sWfNDjdHfALyrqfC5wcUAPuahkUO9KI+eWg9OmRYk0ENs6d/V0zGQkiYDGu3HVM/Nx27tI4ygnx
21qnEVFNt8w49/T1eAUG8fXbtNc7qqq7AcATjFLFyObODE+PfS7bNvq6rekeHQbL+NyOirgcDLv7
H2agQM/jIN17dWk5977p9JVyiYMtm0EmnjgzY9zmYQzc6WIRnz51xltXxDeOxNNoWRybyq+WAiZ8
6oHY5PN1K760uHbjzIMjNtHjYCdeKkj1/qXV3FuzqRupD3ls4tz4vZJhr4mqIB8efafR+c4gP/c/
Z6V+YJiTbOtwulfof04z59BT5vdam0YqmUw1vlGE75864ztEeO8/lg5cXTUXpjo48TKgxHPie6K/
PSW+9y+tZiy+w/orenyHlAwb30mUaZ2r8f2s1M/4/hmhHdLQNIZ2uAorm+FdsSwnoi3rv4APnb6u
6qA24/eB7tnKedovizH+1Af/6YCvtP/v26JczACumm4fPnTtOHqdwTVtI/PuHXfDf/rgq7vg7/Pw
UgagjRdY32M3CJQgPM1DfBDOsufZ183/OKF9MkWH4g1PoelvVp+X81LH0R8nHbenxh4VDz0bg/RS
c6zVaQ32I84eOLmLarmb4F7ZRvOoxWmk7Y/RtmQPulf0E73nv57zGY5zr6FpdJpP4YQJS2mPt/AU
F+KAYlfjz+lV6R/a3eNKn2F3Wj3qIXqd6E2PSH+eJ30Qiz7HiR4xN40O9BCJT5qxvFvyUxwnnrH8
1StyZ50uL5f816eg95nea2e2PAau7rnTaaCE/wG/uZLTHnQdKGvT6D2b886EbzPDrWk/X777HvMi
scnnJ5y+yt6/bnoPz8o74/8NQuK18ZsNg09x9/T03HnMLpWA9vRBYFrWjz1Vp05x3mLyh1vys9IZ
l401dhzEfiD/kcWfs2Lz1w1kAssAlJcN9rFDPxKRIeelryX4p+zfvfhk6uagkUdXEmlGkgYJBYGj
nIp9ex/0MqWj2Nrpf140QTnqg2pOGmkwYnJNhB9e1tPAf0PaWTxUSyOYklbgP4lkQMSEz2jnqdHi
TcHLs8KxijmgY+6k5HuXOuv5bsEKLZp8Rkek0d0Qc3/CplAUWU9xmx/nDGMlzjO+d8caNHPSCD7y
5MPtZUlEaU9xgPjKh5+vkIMwcDf8qOak1QHgp2IS0YcW9TToLwP/UdyhDUkj6PcfGkiI/neKfcru
8983mZ9XcN4tBP7CRlGSwp1WptFTHjlAeDtY3C/4KWfRfj9y9lne8oCdafSX0P+oCrs6OZHypRvf
DPTRhxY/OkV2pR9hs2YcJzFIzz8ZkLrpsRtdn01fOxepJ5PjKDIA9n/+huGrnQq7Sxjp9q7Yhlw6
3Q8KDYjZl9sSoK+HRj2Vp/yoj855Lm4dYarkttZpzFuqYy9MI/S+1dm6ueMpmqr4gJ7ogWkbWVyk
dEN/2XGCmJ6fsGVvA/3wUwm3pEMO59M1w7DZ+xd7UhdGEdHJ5jAEMbX7pV6K1uvQB4RQVmVjg3Pv
dUid66KjlkQH0MTBLpaXUWCJucF/oMndijFXaQKaNWnkDMnpM7PxivGck+n6xfTnxqvEjn5KiHqz
MZ4UOjWbxhCFCFRSiEITBx2iUMuX/0BzX4hCsyaNIWrpAPGa7JiqjnS2J/0RqvGr5U96FzWpf2FH
QBFlletsWu5Hq2mMS5DwJMUjODHQKKAe+fgdCZTHtqC1T2PcCXQ/ON3W3HVMO7hjdgxCACyqOEp2
GYJ2cz8bhp8Yg1A4jUB6uquY3kNQQol4Cpj9U8t3wQmldDoBjbc0PQgohIgnAXra23UfoBBKpxHQ
09Nglg4Sya/G3bFFGFLOU6A9P5d2av93fKEPSkLqn0aUPZBeHE//0ELk4Ysg6knD+KTBNbwhxzOC
FWlE3Najh2BO/v4p2MaPz96DZ7K6aQRxo9iKoW+Awt+o9I5P4/ywu+9YH6WiR0+QXe9XSK8+LZkT
sGfIfjSXxlobBg+IrQpJMqCrbNQFidMZsR+N506tI2xWSNI7jXFFXerqGggduZryEcVJOA2Y+Dn0
hDrKvBUbt3racHJpFwrERF3TiJ+t73SPTbAsKb9DiHgKjpeDUkgoQmmbRiR1O+6L+yC8/e1TsONt
ZOhua5lGzEy7aymqTnvq0tzB8+r0M7PTvr2xGSyFhB5I/76v99Y6YfAVBv91V1MUiQwAeQ4/v+IX
bz09H9DKnuNq5+z6qMGQhVRCKITl9EjP+gp27tRo7tJqGmsq6EiaVFjBCoJGAuVN1ri6Om8DjzXI
Cfb/3gLmapEFa0MauQJiHoGGO1nWFyAOlHgc9GRL0og7WtqBoPmQop6C+oX1/w715fBHrAdCJQBp
SBpBR8y9N1FHk/UU2N8K9UdxRzMljcD7oRu/Hf9dSkE/nG/MgBZ8P8xk8Xexr6Yrscy+vg11/wNw
02+odzZtcM19Hz0PekUu7NQUjhKtLkakrhq4PZgS+vfGp7CdXEWpvc53Uyt27tQmVPS/qWQ6gz1U
dIBBLkHGMyHMXdrOXRpHwTJB7TSC6p5+VnMs7dvdCdC9bXr6s9xpa1cAvF7X3tva18/JKaPXK/uB
Eph+YKpPwvSvm64mqQygFgfnc7mtZdEpQfDcmH7cwEebDjJg3/tYGmfnTAbUbegESibxAwRngZoI
oU/N30qzsHc7FBG2nZ07IndpMnWFERQ7SZowT5QAO3NG4XdsO7uJwNWp8USdP5Fgf0EWv76+nHCG
678fQF8jBQqi8mc5/J/sohJqFyV76NvcCpaRLsJRuwj/dl1EoHZRcoZ566JyRrqIRO0iEraLylRG
uqiM2kW/W32ti/BiKSNdVEHtosq36yIKtYsoWIZWrWSki6qoXVT9dl1UxJC5Y/KNeJdOwoisdBI6
wYZl2BnqJGSKXYTl2DiRmeGGTLKLsCw7Q52ETLOLsDy7RGSloC0iE+0iLNM+veuXjU5CptpFWK5d
ih9EyUYnIZPtIizbzlAnIdPtIizfxiuZCdzIhLsIy7iz00klZMYNcQd15joJmXGXoBk3lZUZgBL6
pDYs485QJyEz7hIs4y5VyKx0EjLjhlg7zVwnITPuEjTjzs5wQ2bcJWjGjWWlLCkhM+4SNOMmsjKf
VEJm3CXoGe7sdBIy4y5Bz3HjWZkqwZEZNw49x52dTkJm3Dg04y5lZRYAR2bcODTjJrPCk3D0jSTw
jDsrBS6OzLhxeMadmU5CZtz495vjxpEZNw7NuLPTSciMG4dm3GRmOgmZcePQjDs7nYTMuHFYxk2U
srLDjUBm3AQs485QJyEzbgKWceOVrMwnEciMm4DeVZKdTkJm3AT0rpJqVsoSAn3zNizjzlAnITNu
ApZxZ6iTkBk3Ab2Du5QVnkQgM24CmnFTWZl0I5AZNwHNuPGszHETyIyb+H5z3CQy4ya/3xw3icy4
Seg57ux0EjLjJqEZN5aV2o1EZtwkNOPGsrJaQiIzbvIbnpdEPzAJfWLyUzvp664Fu3Hfzs2uuvHh
0y4n+OVigtzghwZwt4BdVziNV3/dvHLnSk+m/+KvX2+YWCoB7eliti8fumJ1xwnuMhzy3pdb7vWU
8R0bk7u0mLooeo9n3uz+OwSiMJ77o66fC4AqOcXTczcQ+zgC32FUGiPznQP2Hn9IkPnlLmE7wae5
RYJtafQMmHvWspm6FctdKnMdsC/Fsg7PSdNfUFjcMvGD2qGcAfqh+Kpua6ZtZJFbaTq6dZAECmKs
P4VH/VYjxQ2njk7d8LmbfX79O9ginigjdDX91hxUmruuXBpT2a2RcxOjGx8+BSROR0LphnpphCkp
794eTrc/fs6Y+qVNuIF1W82MXDtJIq+Dk7Dr4EUCT+XU5Y1bb7PJoj+4ZTV+i2xwx/W/qTfaCYN7
7IZkbzd86yms7acpqRuGdzhl0lQHojxoREjEaQ7lP5ch56L4yciraF2d4EC0KI1U475xeo8r3Bb5
1d4QPyf5OQ5x2640+sS1K/e/S3rufWh/Rme7KtkgG6cnv8aKZ4Ma8In4/XE7RWUftx9HwyybCULM
0pybQdfxA0Q7IbnilSD3FJ54siADFPEKEohs4GMpsB1ffPhtjNxHcMCm/I+VT2OWhwomSdAmSnga
rKDl3CmexQLQIE1UOiuTT8jnC0jo8wXFzzyE8ZU+D0EUkpw+WcTTvP7UdO7SNprXJ2ud0igGwRUS
d2kkingaom9N5+K20RBN1jqliCK/oJmEL6rAp+2FfVPkN0Zy1iUXODmgDSz8qEZlJashHwgjoQ+E
UWnNavGeq6GnLBamOnTcNy9AZ3MQUmD7Mn6LCJHRmVbu0nwOtH8ZFfCsDkL5NAZEP1Cs03bLubNH
RDb9U3MDCOMzMePx3tBzZEc1F3aRLLlHoe+IrKAslsXt5i4Nfzy2//6xCOmRSYEWQgb0oUrUBREI
HK7GWAi90xhhkYYfCrY3JX0RwmcdHgD6phFphDs+JTNwlc33Sqb6PrY2xvStcHjfBx+WVZ9wGulG
Pz8ly5xIZNxoWjPMHTDdBAFdHnSxRCDgwp/UOHP8H0XwO5xQal90k9IapUD0HfmKoX+XGPVuVkN8
Z36mif/3MPQ8Zm+B+6wMdHUMPS3/xKzr1GRKkw8yShAJCFUmynUpqEnoR/75Bay3RDRETUSopqUx
GUHGKZgJxgQZTwH+bXrxd7BR5hYT9E4pqijpFnaV5U+ifHNso66sZBf2d5PlXQd8c/iEJYObgr5m
1eCswv0LBzdNSCPUge7/15CkK94+/OYpbOl9XG47qhIAo3OCvQC9cPo3FIQf65tGtIAzDp1AsS5d
wjqhfceQTBbxNCxPTf9A9NQ47ChM1jqNiC4cNfR1TbCBVd+oiKdHPmii9s74+NqvMJMn3XamHtGW
9Y0sjkerbit28FXm/n2nJqoZgFEz/fiSnvcggnZPQzeLXqvbX2vtX+e0ZSwDKF5x2kv8/T5++1SD
/z7XLWYAyI9dl3U2rmI/6XKtv9Bzke2FnOq/ybRhCx6yilDwXAzLnZpM3VQ/Km292fmIwp4Cx9tZ
r5MSuV/AyZ31gCpFEU1JY1GKxN8TZxtgJT0N9EtEuR9yFCvSiDdaHL69mIci6imIn28W/Q3sheO9
uQHcwh2KGWmEHJFr3MQcTdZTQOfOKjyIOpohWTkug/w0EAn9NBCZlRcmyshPA5Whnwb61E76wwHk
ynTJHeHjY0lfHDyUE1l8IHZ8bEUaEwbK7Bg6Q/hCtK/yAwSwEWxII9aoc2j3DO9rwr54hP8oCB8Z
5NdsyQhDKCM/+VaG3g2QzuSHOOV6Rzz80uFxNSSijQ40S9IYGJFWrpMmRqAlPW1iRHl0LgzFipTi
HZt35z6b658+DdG4SbRtNdeVTClgj+2N+pRtUciw3bUhKnN7oeJjpUvF+7Gt9k4IIWTAAlkpoZ6s
PbV9H54QeqcUVUC/QZPzMN6xWfec0L0TWUg5sOhWMdS94+/az50UQEMYUv+UotzXjdBSvIGuhp4Z
HB4BGl4U9E5V1JB8USH3psM9eMObkZVKEfnd6zLsu9clIpWV4iVPX567+4yxgSYO9hwNjprp3r8H
+NAgQbMnKwMF+e3zMvTb56VqVhZdkN8+L8O+fZ6hTkJ++7wM+/Z5iapkpZOQX1kqw76y9Lmd9HVT
/Afw/031P4z0mz26xMF3Q/q3W747uBofoYsnZ6/Zn1Xzr5h7hYplwmZR38xBG9Lii8H++/aIZ+El
E9XTlUC/CmXGjzpAWS8qtmJ8o6MPVAaA9fSNs7sO7KcfBoCnP7A0sIRy0/fFzg8mFNP6UCACkUpc
F0WRBlvvkcU7TgrAw3R9eRTFmJRO/CKyqsRZfiRxT3OA6+AjTvojmZNGF3iEk9x0hgcEP8Ut2JM+
OeWWb6Bvm3nAyqzMhiK/Q1SGfYcIJ6g0Ts88SHQfH1VXZf/xgfWm2eeNrau2pjEYPzTJk5ia75X8
vCz9dp1brNJlG/d1J0K93w3ZzjR6DHLtddNLUKU9xTP6JyUedwVUY7KSj5FfUCrDvqCU0nx8ruQk
2zJt/UTF7qxtYITAzjgUUZfs4+x5bv2y7xepjoFRPY3hD/zY9uP7HPuhpX+b5a/LSRZ6+N76LE4Z
nw8lfIWdf93McCULl+Jc5tDO7qoNEwZrVuy9bIj6LuZ+Czt/LyoyH3rja1Pe20irMXP+DpZ2PV0z
VSX4NpmmlAEQ1aViG78xha5nOvGO1Cw6ra1H2Y+7lwr+zlgLuZqcUEJAFnTV+IhC8gbWcz33w6Dc
qc2UFtRJ/gdRTieIgH5WAPUm87iYvg3CrUo6Qes01tFIxBUCWDhJT8X37XjD/TjDGZFeuGHrMpg9
H3Cingr4mw4PIA5pRkohR6xhUNeTbot7GvQfLSL96gH3LhzdNiilTjBwHWdxPql89xvIiSKe9gTJ
penzATbER48TtU4porDFaxKskHKeNpB/HbS5HxpA3/IKp38WUL42GYME8RUhX4Xvufm7wL2ieRqR
hVvhuIkrlIinoHq5euqufAuldRoRhVycuwkpnIynYPp2295doMLpnZGNFhXkm/Uq0DfrlYk0brSA
m6+D2YH0Bxz/x7ajO/weSuusuD3yNSEV6GtC0un2EHPx2dyHMrccdc3HFZWo+/Ezuj6jB5Gu28PI
+R6nsk890FV8P3I8DYAbAOfUNToIFHW5AcM8k0ZvQzCu7cC09TfYx2aw5Pe6Ggan9J9t838f7qDR
gW5rusc5G8UEZQlzcIFHsFYYBNl8bM93ddVcmOrZ7DvNhVyeSw6uT2EDHT1KmEdOX15CdVQkXBCF
w+44LpcRQDsrkDtrkAuc3FmH3EUJKCr3oF1prFgfTeM3/eRB4U/xEybWKcf/72kW+U2t3EWvHFDs
7kPDD1qbRu9BSgY3XQVF0nPix0WB3CWQ3BdBUMxII+BoW61uIo4k6il5nj1p8J+qP/emBdxBRRQz
0gj5HWVOclJAkveU8d77Ucjk3pTJ/dAm904d+NiPZFQaXeGh4u+mUzwi+dnu8YMkRECl3E+dcqxj
BzrkOaxHDEyjq4D+2Jh+LOu/9lydO0/5lJiiafT5+5pjgfTf/dEHWZwIiHdNPWot5DzATWeCvu4T
5Z6nn8akr/RHccOb3Y4gCBYEpNuqaU0D5OysQe6sQu6nDlBhF8GENEZZlDGYtD/kj0J9ftToIagR
TEgj1J6+DXU/GITuHRv3Ej6GhLRYRXmLoX9uM3dpFHIt9aaeacRt8/YszIkrfpfVQU239EA/XdHz
3vza1ZdHM8GHHjUWkg4luNRTHrv6+TDSRzXP3z8MkR3y9h4tRGnQ01ckym6tkxKXq7V+QQf5CWRE
c9IYhxGGZxJT+pOg//ro3F1ow1uQRpyVMHD6umvBT0enPNVebsqz6TfDYzgvAGcxz77tM33IXMhM
e92ZnpJkY5typ/bSl19RULmdWxEkQaOAdMf3ZRf0TzQuEfaiBdJuaBgr0hhm0aLO7YVAFFFPQfzt
FlP7McyRDEkj6JfCgw41MzBt47tk2MtYFn+1Psu17McWS/Zznyj5+27HwTOA5fmw1Tdy3g8NPvnu
5W8fbdLPpv8SGYDzZ7n6HZz3Y2uRwy7aTOLVhP7UqcS3VlNX69wVYG7icI/EZ57q/R2inGPnFKS3
Me6xKI2UGJ0pwRS/8OKeeg74cTdAtieNPoAYsyGnl2FkPe2+hv8gf6qGkaBHsyQ7uD+0ppAo6IsR
v2dVIdGGNGKNWEWhZ/uvRfxankcEHc2SNOKOOvdzR3b/WuSv5nbUNWM0W7JyAQKOfAEC/kcuQPij
nUQgd1Ly7bmpviXiZPF3mS53vbc/fLT1/9Ebmz/sSUjvIeITIBjsRc1xS6nztNudn02Hu1wnZlld
T493kJq+GejsUlfXmbyD4m1p+Vd7/Wca/PfNbJczAKSn+3rQBU04thJjeXXgZhRDMgMYLugshhjF
U5dmfIYVSMyifaqna6AOMZWPWFn6zdP351Pp52f/3meJbFobH6IF8rsOkJHJF1/8peLpXce0g6yD
6a+BiqAlJvSB6/r+ffbCniu9RZZhD0XhKNu332X51JUWN4NmNiuL892erKIudY3Nds4AVLSjR19k
6l/HRYtYFp7cvFSG38Jfz0X/A6ZC5ohbUQ/6KDSFthn5rcHUpQjoeHmzy2GlwHZ/CSVDX66CPree
e9f8Bw5z9TboZN1TvBb2KLzQYp6C79v6138BRln2yibAiZVUNlneOZXwvxp/mk7NYuK8ePBj5kIm
zySHekoC/WFZ7txq6rIoij9CbDSBEvQcJM67TH4HJHdSAWGDCZQFaQy4SGMRJqn+Oazf8uoDYKPY
kEa04dd7EugxpJin4NyPW8+9NZ+7PqF1jR9DKp9GgBFXZmEGNKSspw7p+IaR90qchzQSX4Y0Iyu7
xEjkDVAkNIJkGjdAIW3RgOA0cJKeSWoeGRQoNmRlSJSRh8TvXp6xIXF7jT2blfZbNnhnetYXNC9j
/WGLYW+sueVVT4mH701L3SBEdkgozgYrDRYP4p4Jzvda/JKpkHgbrClppOuoQxOGl/xR6N+oyUPI
IxqSSuAR9kdlOhHzVzsis9PfbzOKn2Q49EQ4tMc9aU783H7urMCtqPD3D997nRduAhVNKOzjI9g9
KfwWavfMq6KZlsrIft/ohlpF+Qsc48eCyqf4xX2GpdEt0HaVZjrlD250RcaT/ieaDpn2kfzuKYn/
ZHMOqJB70yETuf8OKGGyP7pY2DBfvCf/J4CHTgHQ7UtjtL97tEPQgL/EQy5E4PMc5F7r0ugfmukB
nfp6/MaMf3qNN76x93QJMMrLSSnnA4YecDc7YhAoQZjJveOXaHjb/Cwafh7l38/u+G0wyzo/vH2+
7FtjDp/VDZBcEDHqQF+9ibajI9Yhd1Hi/Lj5+c7zNz0ycf9MFXmtuQrd3alca7471t/sx3ulwjKi
KoF4h12ye+fOKsHeaHeXeWmkRPclBgi+jCjyKa5xIcvIwe8WU0a0K40+cSdLgqmz/waveCuyP8kt
7rMsjX7xKWQqKbE83MLTkky88e+sWu6iW25++Cwv+gzL0+hT+j42rhZa1kAcdtuOMXTYgYyaceCE
QG+9QLpQ9dR2Lm48F7eeA83nYvQHMlxWgdM9jdhuTMP7VjMrPwyOCaLpB6aayVmU+KDz5ZHnTy+W
r/sM5OitAGtLybeKXl6keGstdYUdlKtlc5TFF45/1UD76+4robAMBJD3CMaXRmc7XH5kLcr0Omrk
vNGbsFdbVVAeUfxhXO5ny6mLp7BBJal8gRECfb0FhvqUQzISV6sPGMXTSEJRYg00uAmCvgDgWINH
UE6wII1I36Sl2aVCP62uZfh5vPP1St/GWD/cfBdj/dB3dVt7yFpYinQjQjyHGsU3il1aTCUlggEl
MWtCCIGemkNZ9D5lzHcI3POyFYTuacyVsDUJMiO6f9X3U9gQ/AovjOYZOYJPYajbIqjkt1IuoBUr
adwWgZBgb/YcvJynBLj+qfmHYhy8BWkMcwisMQFnWDlPwvl0NeljOMNakEacUTjkTaARBD0F6cG5
/YegRrAhjVjHuVvfzIE4aUFzB/BHU+XMOH/NT5fHndbJ72Ay6DJhdxqQRVRic9Yl5ywA7hd1cu/1
OW8zgKY66Kal0THMzSYM4q04AveN5n/eHlYWblmf/lmC2NKvsfPvW/LLwgsF/pfh92ftVC1d8R4a
k5BzWbeiHfSe9ipCYnpnTOrqPdg4mUQSYIRAV8737D88tZ67DsVVDgCjeRqTPlxeSMT1z6GqPIBp
JhGFyxS3q7g/hujgAUShtM7KlOTVJ4mvTknCvstWKhYz8pw6VULupGQ/vXQShWelk3DkTsIhO4kg
PvPM3x/tJAK5k5K30F5mN0qZ6STky7sp2Mu7cRzLSichX+dMQV/nTJXSuJYUxin7P81eDd2ZmHE6
n1PKYv1+tq+vq6ZrAob1+dt0r7gLbEqqIJxuOJHJ1I2n2x4GUaFf+RR2g0/5/nOByCf9MlGwJQ8Z
CNBufP5U4H62iwDeDWXTCODpUjp941pKoH+nU0QAycFt0x+9BfCmdEi/rgJWVErej3OZfwAt5n40
mdLYnwAKRDS5LQE2oFD3BJSbCNwKKrd1TmNccTxDsc3jtzoCDLAcLBVP7zqmHZxv1m07Rlap8u+m
XrA0nxBLbzoT5IimKgihVHrXYBoDKQo2SSEVQRb0tijU4PpTh5+3X79pARtmEexIY8CFDj6oeH8o
5QuRjtu/F+MPdU8juooamDszONAW6IRvxtPpBNvTn01tPfrFyE9PoAnug5JCYSeg3gzKndtMYxaF
8D2IeiRBBPTZM5T9Om8FyW0QblUkCVqnMYYmj7KbaCZ+/hQkO3r0G4pQICYqm0YAVSued6NVVff9
gR4Epo3Ab9KfCtkPzI939192d2UxMd6wOqtHouMLaPVAMS1de2+6YC9A66eC9LnW/31boCsZQPXn
i+jfcBT/ePn6j9j+1zl0NQvXeCU7dFYDdKI3f6fYTGUA0FNxrA8OtvofhbJw+sYU6W4Wx6ETBpbj
rGn7MF7qH7x7ngXsLjaO9fk5zGQRR1dCcE/I+S6oSvEpJ6XOSSF3bjr31nbqZr+SB1dmy2zpV9PP
18N8s7xezULwvFDU3/DMPjX9UoP/OteNY1jqgbzuupmfJvgMm2G3lSQlOehjMCir3BcDc2/Npo4b
oMbVmxggCoM+ToJy7crbo0C/I4N6+Q6iLWlcgkGekE9aIEWS9pTxGK+Vfsza77gzEsmcrJznrSAf
C6tAI/mZ53n/hlFyNZfdO1CuCfwjY+XtlopHh8s1o9IYMhFJ+U0/QJP1lGR5eVfx0VyJZkkacb+D
w9/JlB4MAZ9JlpACALpFafQD9LLmvhDwpV5wMwogOQGyPWn0gXtXS2ECAqrQpxCDt6gQbzr8HDJ9
p3VZ4dQUMqemss2p71x2h4ilf8UAugTUzxs/99mWxuD6yI65pKrrXsFPq77eFPrNS97pdMesxb1W
ptFbHtiJ92A2/tJKHTYh30PY77AxjZ5y/7bFx5LOl/oJZN65g9L/WS/5o+StikzeqrBVWoXKyGVi
VeSHaaqwD9OklOGi7z1JYi9o4p4yURBzlv/MEvgnRe4gKmgGZSScVJHvS61C35f6qeHka09DX9ux
m9mNafQPq7/nnrRSBva4vDHoH1BeBTELO/AuRPCrjP37XBbPAIgfumzmt6E9aC7KvQxXEtlTyr2f
ZqUu6Sefhchs5pd+M/175v9yBoLLr0vePwD9NpvSv8jiv895M3SI/SMoM88HPsVotH3p1zPdU/el
g2Yvc8CpowgfHiXMLCvoSt3vSQQydMIHYJj93P90I/8+F83CvQi/umjmM/y9dkIm9Y9y01PyOLAj
dYn74zsqMpu5BWDu90zdRAbCxSUuxiBmP3c/38q/z0nJDKD3m5NmPnvfbSjsk9sfZain5O/YktQl
cKTl6aRtK9CSYHc54CTq3ck/NLh/rwq0FVnZpoL8Ym0V+sVaPJWvQ6Is9t/sOgRBTxkSPzYT/xwW
iOMBwYIUbxV+GGh4OU/B+W0z8N0ww+uflaCH/AJ1FfYF6iwFvceOVECJ+tLAd9epCSgzshL9Hjob
8ecAvxIB7zn+kFm4ISewklg+hAxYiDHUt1HitnODe5k9hOZpxBVqXgsmYN+U8BRM3+L0Cdf7qOlN
pbPCVghktpL83NMbXuU0shWYSU6IjPX1Hn9JVPc4PITKGQhfD1HOJCFfFMTuoZlJqmcllJHIoYz8
TqHsEf79R7z/PwHtDs79hb7/B06FQm//TmLeiPKgz4WisvD/7ji8n5Mj2pRGT0DeOw6T6aClPcUL
fr9M7p0n3Mfioc3JShosI6fB3zPbdSRTnAY/aZAgCnvKGPntqr37hwiiMRkLkZ9x6SaUwD8SKB+4
dxPKqKyES+SrqquwV1VnLlx+wvWkf268JATN+28o/erR8pV1BsSBkqTSIlkEdPGIejMeaPr+8iFZ
7zRiCnH8AmIw3/r+KWheBm8M6F0U55bCaYQR5qwQDIv5ciDfWMsdSEKonH4oH+Kk/7+8q+1t2wbC
f0U/IcmGuv4ywHCytUDbGPOA7qtm07UQWUolZdnPHylRsVpY4nO0KfvO3wwDvBc9x7vjkTw6aIwD
qE/e6RCcI6zYDSLc144K6s/utgdTngk/uY/2FO2jfXdzyi6DZ/1I5H6VU7hf5Uk/0mjzeZWq+G0W
ftztXqp6e+GeOKdhMujXvKXM67nhvp/OUUcAyF3D0nP02JsZfjaX/4XDFsW732fNMkfiRaCOnl+T
aqt1tenK+jq0beJ4IGUv7pbe7c2NABRtSqzR61/a8deyyW29lASv5x1y52hQJb3vrpVgl80QXIWr
vgfSgc9mU4t8s7ds5lVLEGkRIisDfC0P04BjTkMJgESgewmNiXQrhCfUvToI2dwyEZG4jtNDYABZ
LuSayDOPV1u1nhdqrQFO4tSvNuOmgn7LO48rKQ33qMOeUBF3iy5mDpCb5eshMG5Mb+QVBzsMC13u
2pT63mqtJ0BWfU3WSm5iPZKqF7gElPAkgHl/rQFQdGlmEZfla16sQyt6gVYqoemVRvBTXLaW+ley
E+lPrZZdWz2oqtD3Km5vJDxY0XGoqvg3WanZapW/ZJVQg7W6PhRFHqDvVV/yCO9YvScdLyhYPk2B
p5zIwQ43GXi9QnmprT3bYdlHDf/ICEA53eGWnmNpDU60gTrCmfC1dQRfeFHZOaKLJDeugqmLQBBM
TaHUMN6jqlmj5VGXxEyRBGO/C0+MTDBUW0At/8gKgGKLSS+m6EduPaiHUDIYfkU/fCWDODY3mbDu
reUfeTk5t/RiJgK5HZ0eIn4iIKUn1ywAaASbAj9af8Mdvtjilpt5nPcEdHh4+LhOQnFYWDHei9ye
Sg8R770c9R3QznuGB7fzhi/RznuE5eiotKFWGeU2CPPd1zrk1Cp/zDaaYVxpXievSvZ+1SBlSasQ
v/fwQDDcuY+TBvjdb6fvyLlPzTvqMMdTH6fYHD1Kqaov6vXYI00olSBHmpYaWM3d90wTKjtHdIs8
VdcULGZpOs93z2kS679n612SJTrFM7md1IMQWuOH/1bbOPum2vLclaj9R5r/E6e1toK1/KDS57Uq
n64F1eU2LtQiT7LqyszZnC23lfUxVL7A0yISHkprsLxXxnLDPB12OKQHWan8aVhxXKY4o4NrjeIi
AHeZuiMuUMz96oZz9KMXINxSGZScYxZLTewAdGFiQZHeS+GPNqwJX+SJCS4AP41iUBtoRdnvzfta
Ak0pvuaApsSAHYCkghpAK4M/8KAWfBEfzKcAmIfGB8W2YUxoauWWV8z2HPnJBT0EBWsyZbo957MC
BiYAlWbQSbEX5viYR1WMrw8k1AcAg8CpBTUFI0Z7GNHfCHBlOMKPNHUZRBwgEKTvQnsFwDRb2Hj1
6xwSmSOUWO8scPoOkBihjYYBlXbqyC02R0iBZkSDeLrHBwHTXt/wmJpugTnCmCZV8q3e1f+Qp3iD
GxE7pvWsfNxsPjm+gZTqfKNvNoa6F7jL8k4AjlX8pK7KcJ/TeKWu3nQnYpA0OF6R4dbqelstuDHq
COFB+jfuVYoMU3YVJwo8gx+fQAgF4ldKPrsw/G0aG2k0hoE5nNkSdOCY4pKSH3QNeh60u+Wj0hdu
ihYc8SbmDMD0PivmdoYfizpNE464E5Pj4U0YEq1xcN9svICnqSJml438oqseAuPIsokrregBB8Lz
zI6fIqHn3CDpwdEnklZdaKJ7Vn9oM11PwClaiHGF5Nda9RDZrvCtlu+7aeFt8lOP51fNZgVti0KE
79rvhXrv+44DU2e/l7jJK9XnTMguZwJ7nCnLB6LrV8A04p/z9UuqFnG1JRo1QCCIcTfPnxkX1HCO
DGvIzAGJObqlUlXH4OgcHgRFc1XYB0OntFIcFvmBywn8wCVPh6WJZmker9/gpwZh5/gwsdiyjR7+
flwslktVms/R2n195gMO004NOLqvVqvPy8csTTLVqKa5eORZFFJh0W5FaIH2wRlSgyPkB151E3qu
Z2Bdx39LeWg9JPLgw0TCuQck8eevpTsplmmh7wVgB2R6cpTE0p7TP6MKH2am9Cng+IqqjWL7+0uL
QgP1/SUpk0rNt2r15FftoxCEb9P94lEF7Nzy6koS1aJQ6oMUjTimpU2ydjpDoNMLYge2aH+8GdD1
4WgF5UH9rmXB4uMN+Qdjj5l/ZEQGrSxIlO7xBP2Ru/1Z/vY/WcgQOP78DwA=</Form>
  <Code><![CDATA[#region Control Helper Functions
function Load-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.

	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.

	.PARAMETER  ComboBox
		The ComboBox control you want to add items to.

	.PARAMETER  Items
		The object or objects you wish to load into the ComboBox's Items collection.

	.PARAMETER  DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER  Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Load-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Load-ComboBox $combobox1 "Red" -Append
		Load-ComboBox $combobox1 "White" -Append
		Load-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Load-ComboBox $combobox1 (Get-Process) "ProcessName"
#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		[System.Windows.Forms.ComboBox]$ComboBox,
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
}
#endregion

###GLOBAL Static VARIABLES###

#Version information
$Version = "4.1.3.0"
$UpdateDate = "11/09/2021"

$TempDir = $env:temp
$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter")


###FORM ITEMS###

	#Form

$FormO365AdministrationCenter_Load = {
	$FormO365AdministrationCenter.Cursor = 'Default'
	
	$TenantConnectButton.Enabled = $False
	$PartnerComboBox.Enabled = $False
	
	$ArchPreReqPrompt = (Get-ItemProperty 'HKCU:\Software\O365 Admin Center' -Name DisableArchPrompt).DisableArchPrompt
	#Arch Type
	$Archtype = ((Get-WmiObject Win32_OperatingSystem).OSArchitecture)
	
	
	If (($Archtype -eq '32-bit') -and ($ArchPreReqPrompt -ne 1))
	{
		Show-PreReq_ArchType_psf
		$FormO365AdministrationCenter.close()
	}
	Else
	{
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableArchPrompt -Value 1 -Force | Out-Null
	}
	
	#Sets the text for the button
	$ButtonConnectTo365.Text = "Connect to Office 365"
	
	#Sets the text for the button
	$ButtonDisconnect.Text = "Disconnect"
	
	#Sets the text for the form
	$FormO365AdministrationCenter.Text = "O365 Admin Center"
	
	#Allows copy/paste in the texbpx
	$TextboxResults.ShortcutsEnabled = $True
	
	#Sets the dialog result
	$ButtonRunCustomCommand.DialogResult = 'None'
	
	#Sets the default button
	$FormO365AdministrationCenter.acceptbutton = $ButtonRunCustomCommand
	
	#Disabled disconnect from partner button
	$ButtonDisconnect.Enabled = $False
	
	#Alphabitcally sorts combobox
	$PartnerComboBox.Sorted = $True
	
	#Disables word wrap on the text box
	$TextboxResults.WordWrap = $False
	
	#Disables the disconnect button
	$ButtonDisconnect.Enabled = $False
	
	#$ButtonConnectTo365.Enabled = $false 
	
	#Place objects on the bottom
	$ButtonConnectTo365.Anchor = 'Bottom'
	$Partner_Groupbox.Anchor = 'Bottom'
	$ButtonDisconnect.Anchor = 'Bottom'
	$ButtonRunCustomCommand.Anchor = 'Bottom'
	$groupboxO365Services.Anchor = 'Bottom'
	$TabPageMaster.Anchor = 'Bottom, Top, Left, Right'
	
	#$menustripCompliance.Size = "991, 24"
	
	#Make form sizable
	$FormO365AdministrationCenter.FormBorderStyle = 'Sizable'
	
	#Hide the progrss bar
	$progressbar1.Visible = $false
	
	
}

$PartnerComboBox_SelectedIndexChanged = {
	$checkboxComplianceCenter.Checked = $false
	$checkboxExchangeOnline.Checked = $true
	$checkboxSharepoint.Checked = $false
	$checkboxSkypeForBusiness.Checked = $false
	
	
}

$saveToFileToolStripMenuItem_Click = {
	$savedialog = New-Object windows.forms.savefiledialog
	$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
	$savedialog.title = "Export to File"
	$savedialog.filter = ".doc|*.doc|.txt|*.txt|.xls|*.xls"
	$savedialog.ShowHelp = $True
	$result = $savedialog.ShowDialog(); $result
	if ($result -eq "OK")
	{
		$TextboxResults.Text | out-file -Encoding Default $savedialog.filename
		
	}
	
}

$printToolStripMenuItem_Click = {
	$Printdialog = New-Object System.Windows.Forms.PrintDialog
	$Printdialog.ShowHelp = $False
	$Printdialog.AllowSelection = $true
	$Printdialog.AllowPrintToFile = $true
	$Printdialog.AllowSomePages = $false
	$Printdialog.ShowNetwork = $true
	$result = $Printdialog.ShowDialog(); $result
	If ($result -eq 'OK')
	{
		$TextboxResults.Text | Out-Printer $Printdialog.PrinterSettings.PrinterName
	}
	
}

$disconnectToolStripMenuItem_Click = {
	$FormO365AdministrationCenter.Cursor = 'WaitCursor'
	$TextboxResults.Text = ""
	$textboxDetails.Text = ""
	
	#Disconnects O365 Session
	Get-PSSession | Remove-PSSession
	
	#Enables the connect to partner Button
	#$PartnerConnectButton.Enabled = $True
	#Disabled the disconnect from partner button
	#$ButtonDisconnect.Enabled = $False
	#Sets custom button text
	$TenantConnectButton.Text = "Connect to Partner"
	#Sets the form name
	$FormO365AdministrationCenter.Text = "O365 Admin Center"
	#Enables the partner combobox
	$PartnerComboBox.Enabled = $True
	#Enables the connect to o365 button
	$ButtonConnectTo365.Enabled = $True
	#Clears the combobox
	#$PartnerComboBox.Items.clear()
		<# Creates a pop up box telling the user they are disconnected from the o365 session. This is commented out as it will show True every time as the command will never error out even if there 
		is no session to disconnect from #>
	#[void][System.Windows.Forms.MessageBox]::Show("You are disconnected from O365", "Message")
	
	$checkboxComplianceCenter.Checked = $false
	$checkboxExchangeOnline.Checked = $false
	$checkboxSharepoint.Checked = $false
	$checkboxSkypeForBusiness.Checked = $false
	$checkboxComplianceCenter.Enabled = $true
	$checkboxExchangeOnline.Enabled = $true
	$checkboxSharepoint.Enabled = $true
	$checkboxSkypeForBusiness.Enabled = $true
	$TenantConnectButton.Enabled = $True
	$FormO365AdministrationCenter.Cursor = 'Default'
	
}

$exitToolStripMenuItem_Click = {
	#Remove session
	Get-PSSession | Remove-PSSession
	
	#Deletes the old cached files
	$CachedFiles = ("$TempDir" + "\O365AdminCenter")
	Remove-Item $CachedFiles\* -recurse
	
	$FormO365AdministrationCenter.Close()
}

	#Buttons

$ButtonDisconnect_Click = {
	$TenantStatus = Get-ItemProperty 'HKCU:\Software\O365 Admin Center' -Name TenantStatus | Select-Object -ExpandProperty TenantStatus
	If ($Tenantstatus -eq 1)
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		#Clear textboxes 
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		
		#Show progress bar
		$progressbar1.Visible = $true
		
		#Disconnects O365 Session
		$progressbar1.Value = 90
		Get-PSSession | Remove-PSSession
		$progressbar1.Value = 95
		
		#Sets custom button text
		$TenantConnectButton.Text = "Connect to Partner"
		$TenantConnectButton.Enabled = $True
		
		#Sets the form name
		$FormO365AdministrationCenter.Text = "O365 Admin Center"
		
		$PartnerComboBox.Enabled = $true
		
		#Enable the connect to tenant button
		#$TenantConnectButton.Enabled = $true
		
		$checkboxExchangeOnline.Checked = $true
		$checkboxComplianceCenter.Enabled = $false
		$checkboxExchangeOnline.Enabled = $false
		$checkboxSharepoint.Enabled = $false
		$checkboxSkypeForBusiness.Enabled = $false
		$progressbar1.Value = 100
		#Hide the progress bar
		$progressbar1.Visible = $false
		
		Get-Item 'HKCU:\Software\O365 Admin Center' -Force | New-ItemProperty -Name TenantStatus -Value 0 -Force | Out-Null
		
		$ButtonDisconnect.Text = "Disconnect"
		
		$CachedPF = ("$TempDir" + "\O365AdminCenter" + "\pf.txt")
		If ((Test-Path $CachedPF) -eq $true)
		{
			Remove-Item $CachedPF -Force -Confirm:$false
		}
		Get-MSOLUser -All | Select-Object -ExpandProperty UserPrincipalName | Out-File "$O365AdminTempFolder\upn.txt"
		Get-MSOLUser -All | Select-Object -ExpandProperty DisplayName | Out-File "$O365AdminTempFolder\names.txt"
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Else
	{
		#Clears the combobox
		#$PartnerComboBox.Text = ""
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		#Clear textboxes 
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		
		#Show progress bar
		$progressbar1.Visible = $true
		
		#Disconnects O365 Session
		$progressbar1.Value = 90
		Get-PSSession | Remove-PSSession
		$progressbar1.Value = 95
		
		#Sets custom button text
		$TenantConnectButton.Text = "Connect to Partner"
		$TenantConnectButton.Enabled = $False
		$PartnerComboBox.Enabled = $False
		
		#Sets the form name
		$FormO365AdministrationCenter.Text = "O365 Admin Center"
		
		#Enables the partner combobox
		$PartnerComboBox.Enabled = $True
		$PartnerComboBox.Text = ""
		
		#Enable the connect to tenant button
		#$TenantConnectButton.Enabled = $true
		
		#Enables the connect to o365 button
		$ButtonConnectTo365.Enabled = $True
		$ButtonConnectTo365.Text = "Connect to O365"
		
		$ButtonDisconnect.Enabled = $False
		
		
		#Disables tenant combobox
		$PartnerComboBox.Enabled = $False
		
		$checkboxComplianceCenter.Checked = $false
		$checkboxExchangeOnline.Checked = $false
		$checkboxSharepoint.Checked = $false
		$checkboxSkypeForBusiness.Checked = $false
		$checkboxComplianceCenter.Enabled = $true
		$checkboxExchangeOnline.Enabled = $true
		$checkboxSharepoint.Enabled = $true
		$checkboxSkypeForBusiness.Enabled = $true
		#$TenantConnectButton.Enabled = $True
		$progressbar1.Value = 100
		
		#Hide the progress bar
		$progressbar1.Visible = $false
		
		Get-Item 'HKCU:\Software\O365 Admin Center' -Force | New-ItemProperty -Name TenantStatus -Value 0 -Force | Out-Null
		
		$ButtonDisconnect.Text = "Disconnect"
		
		$CachedPF = ("$TempDir" + "\O365AdminCenter" + "\pf.txt")
		If ((Test-Path $CachedPF) -eq $true)
		{
			Remove-Item $CachedPF -Force -Confirm:$false
		}
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
}

$ButtonConnectTo365_Click = {
	$AzurePreReqPrompt = (Get-ItemProperty 'HKCU:\Software\O365 Admin Center' -Name DisableAzurePrompt).DisableAzurePrompt
	$MSOnlinePreReqPrompt = (Get-ItemProperty 'HKCU:\Software\O365 Admin Center' -Name DisableMSOnlinePrompt).DisableMSOnlinePrompt
	$SkypeOnlineConnectorPreReqPrompt = (Get-ItemProperty 'HKCU:\Software\O365 Admin Center' -Name DisableSkypeOnlineConnectorPrompt).DisableSkypeOnlineConnectorPrompt
	$SharePointPreReqPrompt = (Get-ItemProperty 'HKCU:\Software\O365 Admin Center' -Name DisableSharePointOnlinePrompt).DisableSharePointOnlinePrompt
	$ExecutionPolicy = Get-ExecutionPolicy
	$ExecutionPolicyPreReq = (Get-ItemProperty 'HKCU:\Software\O365 Admin Center' -Name ExecutionPolicy).ExecutionPolicy
	$SignOnAss = Get-ItemProperty HKLM:\SOFTWARE\Classes\Installer\Products\0B39BA8DFBF60A4479F10C66B9A56EDD -Name ProductName | Select-Object -ExpandProperty ProductName
	$2FA = (Get-ItemProperty 'HKCU:\Software\O365 Admin Center' -Name TFA).TFA
	$2FAPath = (Get-ItemProperty 'HKCU:\Software\O365 Admin Center' -Name TFAPath).TFAPath
	$TFAMSONLINE = (Get-ItemProperty 'HKCU:\Software\O365 Admin Center' -Name DisableMSOnlineTFA).DisableMSOnlineTFA
	try
	{
		If ($checkboxComplianceCenter.Checked -eq $False -and $checkboxExchangeOnline.Checked -eq $False -and $checkboxSharepoint.Checked -eq $False -and $checkboxSkypeForBusiness.Checked -eq $False)
		{
			[System.Windows.Forms.MessageBox]::Show("Please select a service to connect to", "Error")
		}
		ElseIf ($2FA -eq 1)
		{
			If ((((Get-Module -ListAvailable -Name MSOnline).Version.Build) -ge 166 ) -or ($TFAMSONLINE -eq 1) )
			{
				$Path = (Get-ChildItem -Recurse -Force "$env:LOCALAPPDATA\Apps\2.0" -ErrorAction SilentlyContinue | Where-Object { ($_.PSIsContainer -eq $false) -and ($_.Name -contains "Microsoft.Online.CSE.PSModule.Client.cdf-ms") }).Fullname
				$CleanPath = ($Path.TrimEnd("\Microsoft.Online.CSE.PSModule.Client.cdf-ms")) + "\"
				If ($2FAPath -notcontains "Apps")
				{
					
					#Show progress bar
					$progressbar1.Visible = $true
					
					#Disable the connect to o365 button
					$ButtonConnectTo365.Enabled = $False
					
					#Enable the disconnect button
					$ButtonDisconnect.Enabled = $True
					
					#Disable the checkboxes
					$checkboxExchangeOnline.Enabled = $False
					$checkboxSkypeForBusiness.Checked = $false
					$checkboxSkypeForBusiness.Enabled = $False
					$checkboxSharepoint.Checked = $False
					$checkboxSharepoint.Enabled = $False
					$checkboxComplianceCenter.Checked = $False
					$checkboxComplianceCenter.Enabled = $False
					
					$progressbar1.Value = 10
					$TextboxResults.Text = "Saving Module Path..."
					Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name 2FAPath -Value $CleanPath -Force | Out-Null
					$TextboxResults.Text = "Changing folder to 2FA Module..."
					Set-Location $CleanPath
					$progressbar1.Value = 20
					$TextboxResults.Text = "Importing 2FA Module..."
					Import-Module .\CreateExoPSSession.ps1
					$progressbar1.Value = 30
					$TextboxResults.Text = "Connecting to Office 365..."
					Connect-EXOPSSession
					$progressbar1.Value = 40
					Connect-MsolService
					#Change button text
					$ButtonConnectTo365.Text = "Connected to O365"
					$progressbar1.Value = 42
					#The first checked check box for services will load the appropriate tab as default. 
					
					$TabPageMaster.SelectedTab = $tabpageExchangeOnline
					
					$progressbar1.Value = 50
					#Set Tenant Status to 0 as we have not connected to any tenants yet
					Get-Item 'HKCU:\Software\O365 Admin Center' -Force | New-ItemProperty -Name TenantStatus -Value 0 -Force | Out-Null
					$progressbar1.Value = 60
					
					$partnerTIDs = Get-MsolPartnerContract -All | Select-Object TenantID
					$progressbar1.Value = 70
					
					#If tenant domains are available then load combobox with all tenants
					<#
					If ($partnerTIDs -ne $Null)
					{
						#Enables the Tenant button
						$TenantConnectButton.Enabled = $True
						$PartnerComboBox.Enabled = $True
						
						$domains = @()
						foreach ($TID in $partnerTIDs)
						{
							$domainName = Get-MsolDomain -TenantId $TID.TenantId | Where-Object { $_.IsDefault -eq 'True' }
							#$domainName = Get-MsolDomain -TenantId $TID.TenantId | Where-Object { $_.Name -notlike '*.onmicrosoft*' -and $_.Name -notlike '*.microsoftonline*' -and $_.Status -eq "Verified" }
							#$domainName = Get-MsolDomain -TenantId $TID.TenantId
							$domain = New-Object -TypeName PSObject
							$domain | Add-Member -Name 'Name' -MemberType NoteProperty -Value ($domainName.Name | Select-Object -First 1) #Deals with Tenants with multiple domain names asociated
							#$domain | Add-Member -Name 'Name' -MemberType NoteProperty -Value $domainName.Name
							$domain | Add-Member -Name TenantID -MemberType NoteProperty -Value $TID.TenantId
							$domains += $domain
						}
						$progressbar1.Value = 60
						#Loads Combobox with Tenants
						Load-ComboBox $PartnerComboBox $domains -DisplayMember Name
						
						#Enable the connect to tenant button
						$TenantConnectButton.Enabled = $true
					}
					
					#If no tenant domains are available then do the following
					Else
					{
						#Clear the combobox of items
						$PartnerComboBox.Text = ""
						
						#Disable combobox
						$PartnerComboBox.Enabled = $False
						
						#Disable the connect to tenant button
						$TenantConnectButton.Enabled = $false
					}
					#>
					#Clear the combobox of items
					$PartnerComboBox.Text = ""
					
					#Disable combobox
					$PartnerComboBox.Enabled = $False
					
					#Disable the connect to tenant button
					$TenantConnectButton.Enabled = $false
					
					$progressbar1.Value = 80
					
					
					
					$TextboxResults.Text = "Caching Users..."
					$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter")
					$UserListcombo = Get-MSOLUser -All | Select-Object -ExpandProperty UserPrincipalName | Out-File "$O365AdminTempFolder\upn.txt"
					Get-MSOLUser -All | Select-Object -ExpandProperty DisplayName | Out-File "$O365AdminTempFolder\names.txt"
					$progressbar1.Value = 100
					$progressbar1.Enabled = $false
					
					$TextboxResults.Text = ""
				}
				Else
				{
					
					#Show progress bar
					$progressbar1.Visible = $true
					
					#Disable the connect to o365 button
					$ButtonConnectTo365.Enabled = $False
					
					#Enable the disconnect button
					$ButtonDisconnect.Enabled = $True
					
					#Disable the checkboxes
					#Disable the checkboxes
					$checkboxExchangeOnline.Enabled = $False
					$checkboxSkypeForBusiness.Checked = $false
					$checkboxSkypeForBusiness.Enabled = $False
					$checkboxSharepoint.Checked = $False
					$checkboxSharepoint.Enabled = $False
					$checkboxComplianceCenter.Checked = $False
					$checkboxComplianceCenter.Enabled = $False
					$progressbar1.Value = 10
					
					$TextboxResults.Text = "Changing folder to 2FA Module..."
					Set-Location $CleanPath
					$progressbar1.Value = 20
					$TextboxResults.Text = "Importing 2FA Module..."
					Import-Module .\CreateExoPSSession.ps1
					$progressbar1.Value = 30
					$TextboxResults.Text = "Connecting to Office 365"
					Connect-EXOPSSession
					$progressbar1.Value = 40
					Connect-MsolService
					#Change button text
					$ButtonConnectTo365.Text = "Connected to O365"
					$progressbar1.Value = 42
					#The first checked check box for services will load the appropriate tab as default. 
					
					$TabPageMaster.SelectedTab = $tabpageExchangeOnline
					
					$progressbar1.Value = 50
					#Set Tenant Status to 0 as we have not connected to any tenants yet
					Get-Item 'HKCU:\Software\O365 Admin Center' -Force | New-ItemProperty -Name TenantStatus -Value 0 -Force | Out-Null
					$progressbar1.Value = 60
					
					$partnerTIDs = Get-MsolPartnerContract -All | Select-Object TenantID
					$progressbar1.Value = 70
					
					<#
					#If tenant domains are available then load combobox with all tenants
					If ($partnerTIDs -ne $Null)
					{
						#Enables the Tenant button
						$TenantConnectButton.Enabled = $True
						$PartnerComboBox.Enabled = $True
						
						$domains = @()
						foreach ($TID in $partnerTIDs)
						{
							$domainName = Get-MsolDomain -TenantId $TID.TenantId | Where-Object { $_.IsDefault -eq 'True' }
							#$domainName = Get-MsolDomain -TenantId $TID.TenantId | Where-Object { $_.Name -notlike '*.onmicrosoft*' -and $_.Name -notlike '*.microsoftonline*' -and $_.Status -eq "Verified" }
							#$domainName = Get-MsolDomain -TenantId $TID.TenantId
							$domain = New-Object -TypeName PSObject
							$domain | Add-Member -Name 'Name' -MemberType NoteProperty -Value ($domainName.Name | Select-Object -First 1) #Deals with Tenants with multiple domain names asociated
							#$domain | Add-Member -Name 'Name' -MemberType NoteProperty -Value $domainName.Name
							$domain | Add-Member -Name TenantID -MemberType NoteProperty -Value $TID.TenantId
							$domains += $domain
						}
						$progressbar1.Value = 60
						#Loads Combobox with Tenants
						Load-ComboBox $PartnerComboBox $domains -DisplayMember Name
						
						#Enable the connect to tenant button
						$TenantConnectButton.Enabled = $true
					}
					
					#If no tenant domains are available then do the following
					Else
					{
						#Clear the combobox of items
						$PartnerComboBox.Text = ""
						
						#Disable combobox
						$PartnerComboBox.Enabled = $False
						
						#Disable the connect to tenant button
						$TenantConnectButton.Enabled = $false
					}
					#>
					
					#Clear the combobox of items
					$PartnerComboBox.Text = ""
					
					#Disable combobox
					$PartnerComboBox.Enabled = $False
					
					#Disable the connect to tenant button
					$TenantConnectButton.Enabled = $false
					
					$progressbar1.Value = 80
					
					
					
					$TextboxResults.Text = "Caching Users..."
					$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter")
					$UserListcombo = Get-MSOLUser -All | Select-Object -ExpandProperty UserPrincipalName | Out-File "$O365AdminTempFolder\upn.txt"
					Get-MSOLUser -All | Select-Object -ExpandProperty DisplayName | Out-File "$O365AdminTempFolder\names.txt"
					$progressbar1.Value = 100
					$progressbar1.Enabled = $false
					
					$TextboxResults.Text = ""
				}
			}
			Else
			{
			Show-PreReqTFA_MSONLINE_psf
			}
		}
		Else
		{
			If (($ExecutionPolicy -eq "RemoteSigned") -or ($ExecutionPolicy -eq "Unrestricted") -or ($ExecutionPolicyPreReq -eq 1))
			{
				$CredMem = (Get-ItemProperty 'HKCU:\Software\O365 Admin Center' -Name CredMem).CredMem
				If (!$CredMem)
				{
					$global:o365credentials = (Get-Credential -Message "Please enter your Office 365 credentials")
					Show-CachedCreds_psf
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Connecting to Office 365..."
					
					If (($SignOnAss -ne $Null) -or ($MSOnlinePreReqPrompt -eq 1))
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableMSOnlinePrompt -Value 1 -Force | Out-Null
						
						#$TextboxResults.Text = "Checking for the Azure module..."
						If ((Get-Module -ListAvailable -Name MSOnline) -or ($AzurePreReqPrompt -eq 1))
						{
							$FormO365AdministrationCenter.Cursor = 'WaitCursor'
							Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableAzurePrompt -Value 1 -Force | Out-Null
							
							#Show progress bar
							$progressbar1.Visible = $true
							
							#$TextboxResults.Text = "Connecting to O365..."
							$Ranges = 1 .. 50
							foreach ($range in $ranges)
							{
								$progressbar1.Value = $Range
							}
							
							Connect-MsolService -Credential $global:o365credentials
							$progressbar1.Value = 50
							
							
							#Disable the connect to o365 button
							$ButtonConnectTo365.Enabled = $False
							
							#Enable the disconnect button
							$ButtonDisconnect.Enabled = $True
							
							#Disable the checkboxes
							$checkboxExchangeOnline.Enabled = $false
							$checkboxSkypeForBusiness.Enabled = $false
							$checkboxSharepoint.Enabled = $false
							$checkboxComplianceCenter.Enabled = $False
							$progressbar1.Value = 51
							#Change button text
							$ButtonConnectTo365.Text = "Connected to O365"
							$progressbar1.Value = 52
							#The first checked check box for services will load the appropriate tab as default. 
							If ($checkboxComplianceCenter.checked)
							{
								$TabPageMaster.SelectedTab = $tabpageComplianceCenter
							}
							elseif ($checkboxExchangeOnline.Checked)
							{
								$TabPageMaster.SelectedTab = $tabpageExchangeOnline
							}
							elseif ($checkboxSharepoint.checked)
							{
								$TabPageMaster.SelectedTab = $tabpageSharePoint
							}
							elseif ($checkboxSkypeForBusiness.checked)
							{
								$TabPageMaster.SelectedTab = $tabpageSkypeForBusiness
							}
							$progressbar1.Value = 53
							#Set Tenant Status to 0 as we have not connected to any tenants yet
							Get-Item 'HKCU:\Software\O365 Admin Center' -Force | New-ItemProperty -Name TenantStatus -Value 0 -Force | Out-Null
							$progressbar1.Value = 54
							
							$partnerTIDs = Get-MsolPartnerContract -All | Select-Object TenantID
							$progressbar1.Value = 55
							
							#If tenant domains are available then load combobox with all tenants
							If ($partnerTIDs -ne $Null)
							{
								#Enables the Tenant button
								$TenantConnectButton.Enabled = $True
								$PartnerComboBox.Enabled = $True
								
								$domains = @()
								foreach ($TID in $partnerTIDs)
								{
									$domainName = Get-MsolDomain -TenantId $TID.TenantId | Where-Object { $_.IsDefault -eq 'True' }
									#$domainName = Get-MsolDomain -TenantId $TID.TenantId | Where-Object { $_.Name -notlike '*.onmicrosoft*' -and $_.Name -notlike '*.microsoftonline*' -and $_.Status -eq "Verified" }
									#$domainName = Get-MsolDomain -TenantId $TID.TenantId
									$domain = New-Object -TypeName PSObject
									$domain | Add-Member -Name 'Name' -MemberType NoteProperty -Value ($domainName.Name | Select-Object -First 1) #Deals with Tenants with multiple domain names asociated
									#$domain | Add-Member -Name 'Name' -MemberType NoteProperty -Value $domainName.Name
									$domain | Add-Member -Name TenantID -MemberType NoteProperty -Value $TID.TenantId
									$domains += $domain
								}
								$progressbar1.Value = 60
								#Loads Combobox with Tenants
								Load-ComboBox $PartnerComboBox $domains -DisplayMember Name
								
								#Enable the connect to tenant button
								$TenantConnectButton.Enabled = $true
							}
							
							#If no tenant domains are available then do the following
							Else
							{
								#Clear the combobox of items
								$PartnerComboBox.Text = ""
								
								#Disable combobox
								$PartnerComboBox.Enabled = $False
								
								#Disable the connect to tenant button
								$TenantConnectButton.Enabled = $false
							}
							
							$progressbar1.Value = 65
							
							#If compliance center checkbox is checked
							If ($checkboxComplianceCenter.Checked)
							{
								$TextboxResults.Text = "Connecting to Compliance Center..."
								$ccSession = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri https://ps.compliance.protection.outlook.com/powershell-liveid/ -Credential $global:o365credentials -Authentication Basic -AllowRedirection
								Import-PSSession $ccSession
								$TextboxResults.Text = ""
							}
							
							$progressbar1.Value = 70
							
							#If exchange online checkbox is checked
							If ($checkboxExchangeOnline.Checked)
							{
								
								$TextboxResults.Text = "Connecting to Exchange Online..."
								$exchangeSession = New-PSSession -Name MainAccount -ConfigurationName Microsoft.Exchange -ConnectionUri https://outlook.office365.com/powershell-liveid/ -Credential $global:o365credentials -Authentication Basic -AllowRedirection
								Import-PSSession $exchangeSession -AllowClobber
								
								
								$TextboxResults.Text = "Caching Users..."
								$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter")
								$UserListcombo = Get-MSOLUser -All | Select-Object -ExpandProperty UserPrincipalName | Out-File "$O365AdminTempFolder\upn.txt"
								Get-MSOLUser -All | Select-Object -ExpandProperty DisplayName | Out-File "$O365AdminTempFolder\names.txt"
								
								
								$TextboxResults.Text = ""
							}
							
							$progressbar1.Value = 80
							
							If ($checkboxSharepoint.Checked -and $checkboxExchangeOnline.Checked)
							{
								$TextboxResults.Text = "Checking for the SharePoint Online module..."
								if ((Get-Module -ListAvailable -Name Microsoft.Online.SharePoint.PowerShell) -or ($SharePointPreReqPrompt -eq 1))
								{
									Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableSharePointOnlinePrompt -Value 1 -Force | Out-Null
									
									$TextboxResults.Text = "Connecting to SharePoint Online..."
									#Grabs the Sharepoint URL attribtue with Absoluteuri header
									$SPOheaders = Get-OrganizationConfig | Select-Object -ExpandProperty SharepointUrl
									#Clears the header so we have a clean variable
									$SPOSite = $SPOheaders | Select-Object -ExpandProperty AbsoluteUri
									#Splits the URl into two parts so we can inject -admin
									$firsthalf = $SPOSite -split ('.sharepoint.com') | Select-Object -First 1
									$secondhalf = $SPOSite -split '(.sharepoint.com/)' | Select-Object -Last 2
									#Wrap it all up into a single URL with the -admin
									$SPOadminSite = "$Firsthalf" + "-admin" + "$secondhalf"
									$TextboxResults.Text = "Connecting to Sharepoint Online..."
									Import-Module Microsoft.Online.SharePoint.PowerShell -DisableNameChecking
									Connect-SPOService -Url $SPOadminSite -credential $global:o365credentials
									$TextboxResults.Text = ""
								}
								Else
								{
									$TextboxResults.Text = ""
									$textboxDetails.Text = ""
									$PartnerComboBox.Enabled = $True
									$ButtonConnectTo365.Enabled = $True
									$ButtonDisconnect.Enabled = $False
									#$TenantConnectButton.Enabled = $True
									$checkboxComplianceCenter.Enabled = $true
									$checkboxExchangeOnline.Enabled = $true
									$checkboxSharepoint.Enabled = $true
									$checkboxComplianceCenter.Checked = $False
									$checkboxSharepoint.Checked = $False
									$checkboxSkypeForBusiness.Checked = $False
									$checkboxExchangeOnline.Checked = $False
									$checkboxSkypeForBusiness.Enabled = $True
									$FormO365AdministrationCenter.Cursor = 'Default'
									$ButtonConnectTo365.Text = "Connect to O365"
									Show-PreRep_SharePoint_psf
								}
							}
							
							#If sharepoint checkbox is checked
							If ($checkboxSharepoint.Checked)
							{
								$TextboxResults.Text = "Checking for the SharePoint Online module..."
								if ((Get-Module -ListAvailable -Name Microsoft.Online.SharePoint.PowerShell) -or ($SharePointPreReqPrompt -eq 1))
								{
									#$Sharepointdomain = Read-Host "Enter the domain name. EX: contoso, yahoo"
									#Connect to Exchange online so we can grab the Sharepoint URL attribute 
									$TextboxResults.Text = "Connecting to SharePoint Online..."
									$exchangeSession = New-PSSession -Name MainAccount -ConfigurationName Microsoft.Exchange -ConnectionUri https://outlook.office365.com/powershell-liveid/ -Credential $global:o365credentials -Authentication Basic -AllowRedirection
									Import-PSSession $exchangeSession -AllowClobber
									$progressbar1.Value = 83
									#Grabs the Sharepoint URL attribtue with Absoluteuri header
									$SPOheaders = Get-OrganizationConfig | Select-Object -ExpandProperty SharepointUrl
									#Clears the header so we have a clean variable
									$SPOSite = $SPOheaders | Select-Object -ExpandProperty AbsoluteUri
									#Splits the URl into two parts so we can inject -admin
									$firsthalf = $SPOSite -split ('.sharepoint.com') | Select-Object -First 1
									$secondhalf = $SPOSite -split '(.sharepoint.com/)' | Select-Object -Last 2
									#Wrap it all up into a single URL with the -admin
									$SPOadminSite = "$Firsthalf" + "-admin" + "$secondhalf"
									$TextboxResults.Text = "Connecting to Sharepoint Online..."
									Import-Module Microsoft.Online.SharePoint.PowerShell -DisableNameChecking
									Connect-SPOService -Url $SPOadminSite -credential $global:o365credentials
									$TextboxResults.Text = ""
								}
								Else
								{
									$TextboxResults.Text = ""
									$textboxDetails.Text = ""
									$PartnerComboBox.Enabled = $True
									$ButtonConnectTo365.Enabled = $True
									$ButtonDisconnect.Enabled = $False
									#$TenantConnectButton.Enabled = $True
									$checkboxComplianceCenter.Enabled = $true
									$checkboxExchangeOnline.Enabled = $true
									$checkboxSharepoint.Enabled = $true
									$checkboxComplianceCenter.Checked = $False
									$checkboxSharepoint.Checked = $False
									$checkboxSkypeForBusiness.Checked = $False
									$checkboxExchangeOnline.Checked = $False
									$checkboxSkypeForBusiness.Enabled = $True
									$FormO365AdministrationCenter.Cursor = 'Default'
									$ButtonConnectTo365.Text = "Connect to O365"
									Show-PreRep_SharePoint_psf
								}
							}
							
							$progressbar1.Value = 90
							
							#If skype for business checkbox is checked
							If ($checkboxSkypeForBusiness.Checked)
							{
								$TextboxResults.Text = "Checking for the SkypeOnlineConnector module..."
								if ((Get-Module -ListAvailable -Name SkypeOnlineConnector) -or ($SkypeOnlineConnectorPreReqPrompt -eq 1))
								{
									$TextboxResults.Text = "Connecting to Skype for Business.."
									Import-Module SkypeOnlineConnector
									#Skype for business session
									$sfboSession = New-CsOnlineSession -Credential $global:o365credentials
									#Import Skype For Business Session
									Import-PSSession $sfboSession
									$TextboxResults.Text = ""
								}
								Else
								{
									$TextboxResults.Text = ""
									$textboxDetails.Text = ""
									$PartnerComboBox.Enabled = $True
									$ButtonConnectTo365.Enabled = $True
									$ButtonDisconnect.Enabled = $False
									#$TenantConnectButton.Enabled = $True
									$checkboxComplianceCenter.Enabled = $true
									$checkboxExchangeOnline.Enabled = $true
									$checkboxSharepoint.Enabled = $true
									$checkboxComplianceCenter.Checked = $False
									$checkboxSharepoint.Checked = $False
									$checkboxSkypeForBusiness.Checked = $False
									$checkboxExchangeOnline.Checked = $False
									$checkboxSkypeForBusiness.Enabled = $True
									$FormO365AdministrationCenter.Cursor = 'Default'
									$ButtonConnectTo365.Text = "Connect to O365"
									Show-PreReq_SkypeForBusiness_psf
								}
								
								
							}
							
							$progressbar1.Value = 100
							$FormO365AdministrationCenter.Cursor = 'Default'
						}
						Else
						{
							$TextboxResults.Text = ""
							$textboxDetails.Text = ""
							$PartnerComboBox.Enabled = $True
							$ButtonConnectTo365.Enabled = $True
							$ButtonDisconnect.Enabled = $False
							#$TenantConnectButton.Enabled = $True
							$checkboxComplianceCenter.Enabled = $true
							$checkboxExchangeOnline.Enabled = $true
							$checkboxSharepoint.Enabled = $true
							$checkboxComplianceCenter.Checked = $False
							$checkboxSharepoint.Checked = $False
							$checkboxSkypeForBusiness.Checked = $False
							$checkboxExchangeOnline.Checked = $False
							$checkboxSkypeForBusiness.Enabled = $True
							$FormO365AdministrationCenter.Cursor = 'Default'
							$ButtonConnectTo365.Text = "Connect to O365"
							Show-PreReq_Azure_psf
						}
					}
					Else
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						$PartnerComboBox.Enabled = $True
						$ButtonConnectTo365.Enabled = $True
						$ButtonDisconnect.Enabled = $False
						#$TenantConnectButton.Enabled = $True
						$checkboxComplianceCenter.Enabled = $true
						$checkboxExchangeOnline.Enabled = $true
						$checkboxSharepoint.Enabled = $true
						$checkboxComplianceCenter.Checked = $False
						$checkboxSharepoint.Checked = $False
						$checkboxSkypeForBusiness.Checked = $False
						$checkboxExchangeOnline.Checked = $False
						$checkboxSkypeForBusiness.Enabled = $True
						$FormO365AdministrationCenter.Cursor = 'Default'
						$ButtonConnectTo365.Text = "Connect to O365"
						
						Show-PreReq_MSOnline_psf
					}
					
				}
				ElseIf ($CredMem -eq 1)
				{
					$TempDir = $env:temp
					$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter_Creds")
					$CachedCredXML = "$O365AdminTempFolder\Creds.xml"
					$global:o365credentials = Import-Clixml -Path $CachedCredXML
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Connecting to Office 365..."
					
					If (($SignOnAss -ne $Null) -or ($MSOnlinePreReqPrompt -eq 1))
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableMSOnlinePrompt -Value 1 -Force | Out-Null
						
						#$TextboxResults.Text = "Checking for the Azure module..."
						If ((Get-Module -ListAvailable -Name MSOnline) -or ($AzurePreReqPrompt -eq 1))
						{
							$FormO365AdministrationCenter.Cursor = 'WaitCursor'
							Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableAzurePrompt -Value 1 -Force | Out-Null
							
							#Show progress bar
							$progressbar1.Visible = $true
							
							#$TextboxResults.Text = "Connecting to O365..."
							$Ranges = 1 .. 50
							foreach ($range in $ranges)
							{
								$progressbar1.Value = $Range
							}
							
							Connect-MsolService -Credential $global:o365credentials
							$progressbar1.Value = 50
							
							#Disable the connect to o365 button
							$ButtonConnectTo365.Enabled = $False
							
							#Enable the disconnect button
							$ButtonDisconnect.Enabled = $True
							
							#Disable the checkboxes
							$checkboxExchangeOnline.Enabled = $false
							$checkboxSkypeForBusiness.Enabled = $false
							$checkboxSharepoint.Enabled = $false
							$checkboxComplianceCenter.Enabled = $False
							$progressbar1.Value = 51
							#Change button text
							$ButtonConnectTo365.Text = "Connected to O365"
							$progressbar1.Value = 52
							#The first checked check box for services will load the appropriate tab as default. 
							If ($checkboxComplianceCenter.checked)
							{
								$TabPageMaster.SelectedTab = $tabpageComplianceCenter
							}
							elseif ($checkboxExchangeOnline.Checked)
							{
								$TabPageMaster.SelectedTab = $tabpageExchangeOnline
							}
							elseif ($checkboxSharepoint.checked)
							{
								$TabPageMaster.SelectedTab = $tabpageSharePoint
							}
							elseif ($checkboxSkypeForBusiness.checked)
							{
								$TabPageMaster.SelectedTab = $tabpageSkypeForBusiness
							}
							$progressbar1.Value = 53
							#Set Tenant Status to 0 as we have not connected to any tenants yet
							Get-Item 'HKCU:\Software\O365 Admin Center' -Force | New-ItemProperty -Name TenantStatus -Value 0 -Force | Out-Null
							$progressbar1.Value = 54
							
							$partnerTIDs = Get-MsolPartnerContract -All | Select-Object TenantID
							$progressbar1.Value = 55
							
							#If tenant domains are available then load combobox with all tenants
							If ($partnerTIDs -ne $Null)
							{
								#Enables the Tenant button
								$TenantConnectButton.Enabled = $True
								$PartnerComboBox.Enabled = $True
								
								$domains = @()
								foreach ($TID in $partnerTIDs)
								{
									$domainName = Get-MsolDomain -TenantId $TID.TenantId | Where-Object { $_.IsDefault -eq 'True' }
									#$domainName = Get-MsolDomain -TenantId $TID.TenantId | Where-Object { $_.Name -notlike '*.onmicrosoft*' -and $_.Name -notlike '*.microsoftonline*' -and $_.Status -eq "Verified" }
									#$domainName = Get-MsolDomain -TenantId $TID.TenantId
									$domain = New-Object -TypeName PSObject
									$domain | Add-Member -Name 'Name' -MemberType NoteProperty -Value ($domainName.Name | Select-Object -First 1) #Deals with Tenants with multiple domain names asociated
									#$domain | Add-Member -Name 'Name' -MemberType NoteProperty -Value $domainName.Name
									$domain | Add-Member -Name TenantID -MemberType NoteProperty -Value $TID.TenantId
									$domains += $domain
								}
								$progressbar1.Value = 60
								#Loads Combobox with Tenants
								Load-ComboBox $PartnerComboBox $domains -DisplayMember Name
								
								#Enable the connect to tenant button
								$TenantConnectButton.Enabled = $true
							}
							
							#If no tenant domains are available then do the following
							Else
							{
								#Clear the combobox of items
								$PartnerComboBox.Text = ""
								
								#Disable combobox
								$PartnerComboBox.Enabled = $False
								
								#Disable the connect to tenant button
								$TenantConnectButton.Enabled = $false
							}
							
							$progressbar1.Value = 65
							
							#If compliance center checkbox is checked
							If ($checkboxComplianceCenter.Checked)
							{
								$TextboxResults.Text = "Connecting to Compliance Center..."
								$ccSession = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri https://ps.compliance.protection.outlook.com/powershell-liveid/ -Credential $global:o365credentials -Authentication Basic -AllowRedirection
								Import-PSSession $ccSession
								$TextboxResults.Text = ""
							}
							
							$progressbar1.Value = 70
							
							#If exchange online checkbox is checked
							If ($checkboxExchangeOnline.Checked)
							{
								
								$TextboxResults.Text = "Connecting to Exchange Online..."
								$exchangeSession = New-PSSession -Name MainAccount -ConfigurationName Microsoft.Exchange -ConnectionUri https://outlook.office365.com/powershell-liveid/ -Credential $global:o365credentials -Authentication Basic -AllowRedirection
								Import-PSSession $exchangeSession -AllowClobber
								
								
								$TextboxResults.Text = "Caching Users..."
								$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter")
								$UserListcombo = Get-MSOLUser -All | Select-Object -ExpandProperty UserPrincipalName | Out-File "$O365AdminTempFolder\upn.txt"
								Get-MSOLUser -All | Select-Object -ExpandProperty DisplayName | Out-File "$O365AdminTempFolder\names.txt"
								
								
								$TextboxResults.Text = ""
							}
							
							$progressbar1.Value = 80
							
							If ($checkboxSharepoint.Checked -and $checkboxExchangeOnline.Checked)
							{
								$TextboxResults.Text = "Checking for the SharePoint Online module..."
								if ((Get-Module -ListAvailable -Name Microsoft.Online.SharePoint.PowerShell) -or ($SharePointPreReqPrompt -eq 1))
								{
									Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableSharePointOnlinePrompt -Value 1 -Force | Out-Null
									
									$TextboxResults.Text = "Connecting to SharePoint Online..."
									#Grabs the Sharepoint URL attribtue with Absoluteuri header
									$SPOheaders = Get-OrganizationConfig | Select-Object -ExpandProperty SharepointUrl
									#Clears the header so we have a clean variable
									$SPOSite = $SPOheaders | Select-Object -ExpandProperty AbsoluteUri
									#Splits the URl into two parts so we can inject -admin
									$firsthalf = $SPOSite -split ('.sharepoint.com') | Select-Object -First 1
									$secondhalf = $SPOSite -split '(.sharepoint.com/)' | Select-Object -Last 2
									#Wrap it all up into a single URL with the -admin
									$SPOadminSite = "$Firsthalf" + "-admin" + "$secondhalf"
									$TextboxResults.Text = "Connecting to Sharepoint Online..."
									Import-Module Microsoft.Online.SharePoint.PowerShell -DisableNameChecking
									Connect-SPOService -Url $SPOadminSite -credential $global:o365credentials
									$TextboxResults.Text = ""
								}
								Else
								{
									$TextboxResults.Text = ""
									$textboxDetails.Text = ""
									$PartnerComboBox.Enabled = $True
									$ButtonConnectTo365.Enabled = $True
									$ButtonDisconnect.Enabled = $False
									#$TenantConnectButton.Enabled = $True
									$checkboxComplianceCenter.Enabled = $true
									$checkboxExchangeOnline.Enabled = $true
									$checkboxSharepoint.Enabled = $true
									$checkboxComplianceCenter.Checked = $False
									$checkboxSharepoint.Checked = $False
									$checkboxSkypeForBusiness.Checked = $False
									$checkboxExchangeOnline.Checked = $False
									$checkboxSkypeForBusiness.Enabled = $True
									$FormO365AdministrationCenter.Cursor = 'Default'
									$ButtonConnectTo365.Text = "Connect to O365"
									Show-PreRep_SharePoint_psf
								}
							}
							
							#If sharepoint checkbox is checked
							If ($checkboxSharepoint.Checked)
							{
								$TextboxResults.Text = "Checking for the SharePoint Online module..."
								if ((Get-Module -ListAvailable -Name Microsoft.Online.SharePoint.PowerShell) -or ($SharePointPreReqPrompt -eq 1))
								{
									#$Sharepointdomain = Read-Host "Enter the domain name. EX: contoso, yahoo"
									#Connect to Exchange online so we can grab the Sharepoint URL attribute 
									$TextboxResults.Text = "Connecting to SharePoint Online..."
									$exchangeSession = New-PSSession -Name MainAccount -ConfigurationName Microsoft.Exchange -ConnectionUri https://outlook.office365.com/powershell-liveid/ -Credential $global:o365credentials -Authentication Basic -AllowRedirection
									Import-PSSession $exchangeSession -AllowClobber
									$progressbar1.Value = 83
									#Grabs the Sharepoint URL attribtue with Absoluteuri header
									$SPOheaders = Get-OrganizationConfig | Select-Object -ExpandProperty SharepointUrl
									#Clears the header so we have a clean variable
									$SPOSite = $SPOheaders | Select-Object -ExpandProperty AbsoluteUri
									#Splits the URl into two parts so we can inject -admin
									$firsthalf = $SPOSite -split ('.sharepoint.com') | Select-Object -First 1
									$secondhalf = $SPOSite -split '(.sharepoint.com/)' | Select-Object -Last 2
									#Wrap it all up into a single URL with the -admin
									$SPOadminSite = "$Firsthalf" + "-admin" + "$secondhalf"
									$TextboxResults.Text = "Connecting to Sharepoint Online..."
									Import-Module Microsoft.Online.SharePoint.PowerShell -DisableNameChecking
									Connect-SPOService -Url $SPOadminSite -credential $global:o365credentials
									$TextboxResults.Text = ""
								}
								Else
								{
									$TextboxResults.Text = ""
									$textboxDetails.Text = ""
									$PartnerComboBox.Enabled = $True
									$ButtonConnectTo365.Enabled = $True
									$ButtonDisconnect.Enabled = $False
									#$TenantConnectButton.Enabled = $True
									$checkboxComplianceCenter.Enabled = $true
									$checkboxExchangeOnline.Enabled = $true
									$checkboxSharepoint.Enabled = $true
									$checkboxComplianceCenter.Checked = $False
									$checkboxSharepoint.Checked = $False
									$checkboxSkypeForBusiness.Checked = $False
									$checkboxExchangeOnline.Checked = $False
									$checkboxSkypeForBusiness.Enabled = $True
									$FormO365AdministrationCenter.Cursor = 'Default'
									$ButtonConnectTo365.Text = "Connect to O365"
									Show-PreRep_SharePoint_psf
								}
							}
							
							$progressbar1.Value = 90
							
							#If skype for business checkbox is checked
							If ($checkboxSkypeForBusiness.Checked)
							{
								$TextboxResults.Text = "Checking for the SkypeOnlineConnector module..."
								if ((Get-Module -ListAvailable -Name SkypeOnlineConnector) -or ($SkypeOnlineConnectorPreReqPrompt -eq 1))
								{
									$TextboxResults.Text = "Connecting to Skype for Business.."
									Import-Module SkypeOnlineConnector
									#Skype for business session
									$sfboSession = New-CsOnlineSession -Credential $global:o365credentials
									#Import Skype For Business Session
									Import-PSSession $sfboSession
									$TextboxResults.Text = ""
								}
								Else
								{
									$TextboxResults.Text = ""
									$textboxDetails.Text = ""
									$PartnerComboBox.Enabled = $True
									$ButtonConnectTo365.Enabled = $True
									$ButtonDisconnect.Enabled = $False
									#$TenantConnectButton.Enabled = $True
									$checkboxComplianceCenter.Enabled = $true
									$checkboxExchangeOnline.Enabled = $true
									$checkboxSharepoint.Enabled = $true
									$checkboxComplianceCenter.Checked = $False
									$checkboxSharepoint.Checked = $False
									$checkboxSkypeForBusiness.Checked = $False
									$checkboxExchangeOnline.Checked = $False
									$checkboxSkypeForBusiness.Enabled = $True
									$FormO365AdministrationCenter.Cursor = 'Default'
									$ButtonConnectTo365.Text = "Connect to O365"
									Show-PreReq_SkypeForBusiness_psf
								}
								
								
							}
							
							$progressbar1.Value = 100
							$FormO365AdministrationCenter.Cursor = 'Default'
						}
						Else
						{
							$TextboxResults.Text = ""
							$textboxDetails.Text = ""
							$PartnerComboBox.Enabled = $True
							$ButtonConnectTo365.Enabled = $True
							$ButtonDisconnect.Enabled = $False
							#$TenantConnectButton.Enabled = $True
							$checkboxComplianceCenter.Enabled = $true
							$checkboxExchangeOnline.Enabled = $true
							$checkboxSharepoint.Enabled = $true
							$checkboxComplianceCenter.Checked = $False
							$checkboxSharepoint.Checked = $False
							$checkboxSkypeForBusiness.Checked = $False
							$checkboxExchangeOnline.Checked = $False
							$checkboxSkypeForBusiness.Enabled = $True
							$FormO365AdministrationCenter.Cursor = 'Default'
							$ButtonConnectTo365.Text = "Connect to O365"
							Show-PreReq_Azure_psf
						}
					}
					Else
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						$PartnerComboBox.Enabled = $True
						$ButtonConnectTo365.Enabled = $True
						$ButtonDisconnect.Enabled = $False
						#$TenantConnectButton.Enabled = $True
						$checkboxComplianceCenter.Enabled = $true
						$checkboxExchangeOnline.Enabled = $true
						$checkboxSharepoint.Enabled = $true
						$checkboxComplianceCenter.Checked = $False
						$checkboxSharepoint.Checked = $False
						$checkboxSkypeForBusiness.Checked = $False
						$checkboxExchangeOnline.Checked = $False
						$checkboxSkypeForBusiness.Enabled = $True
						$FormO365AdministrationCenter.Cursor = 'Default'
						$ButtonConnectTo365.Text = "Connect to O365"
						
						Show-PreReq_MSOnline_psf
					}
				}
				Elseif ($CredMem -eq 2)
				{
					$global:o365credentials = (Get-Credential -Message "Please enter your Office 365 credentials")
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Connecting to Office 365..."
					
					If (($SignOnAss -ne $Null) -or ($MSOnlinePreReqPrompt -eq 1))
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableMSOnlinePrompt -Value 1 -Force | Out-Null
						
						#$TextboxResults.Text = "Checking for the Azure module..."
						If ((Get-Module -ListAvailable -Name MSOnline) -or ($AzurePreReqPrompt -eq 1))
						{
							$FormO365AdministrationCenter.Cursor = 'WaitCursor'
							Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableAzurePrompt -Value 1 -Force | Out-Null
							
							#Show progress bar
							$progressbar1.Visible = $true
							
							#$TextboxResults.Text = "Connecting to O365..."
							$Ranges = 1 .. 50
							foreach ($range in $ranges)
							{
								$progressbar1.Value = $Range
							}
							
							Connect-MsolService -Credential $global:o365credentials
							$progressbar1.Value = 50
							
							#Disable the connect to o365 button
							$ButtonConnectTo365.Enabled = $False
							
							#Enable the disconnect button
							$ButtonDisconnect.Enabled = $True
							
							#Disable the checkboxes
							$checkboxExchangeOnline.Enabled = $false
							$checkboxSkypeForBusiness.Enabled = $false
							$checkboxSharepoint.Enabled = $false
							$checkboxComplianceCenter.Enabled = $False
							$progressbar1.Value = 51
							#Change button text
							$ButtonConnectTo365.Text = "Connected to O365"
							$progressbar1.Value = 52
							#The first checked check box for services will load the appropriate tab as default. 
							If ($checkboxComplianceCenter.checked)
							{
								$TabPageMaster.SelectedTab = $tabpageComplianceCenter
							}
							elseif ($checkboxExchangeOnline.Checked)
							{
								$TabPageMaster.SelectedTab = $tabpageExchangeOnline
							}
							elseif ($checkboxSharepoint.checked)
							{
								$TabPageMaster.SelectedTab = $tabpageSharePoint
							}
							elseif ($checkboxSkypeForBusiness.checked)
							{
								$TabPageMaster.SelectedTab = $tabpageSkypeForBusiness
							}
							$progressbar1.Value = 53
							#Set Tenant Status to 0 as we have not connected to any tenants yet
							Get-Item 'HKCU:\Software\O365 Admin Center' -Force | New-ItemProperty -Name TenantStatus -Value 0 -Force | Out-Null
							$progressbar1.Value = 54
							
							$partnerTIDs = Get-MsolPartnerContract -All | Select-Object TenantID
							$progressbar1.Value = 55
							
							#If tenant domains are available then load combobox with all tenants
							If ($partnerTIDs -ne $Null)
							{
								#Enables the Tenant button
								$TenantConnectButton.Enabled = $True
								$PartnerComboBox.Enabled = $True
								
								$domains = @()
								foreach ($TID in $partnerTIDs)
								{
									$domainName = Get-MsolDomain -TenantId $TID.TenantId | Where-Object { $_.IsDefault -eq 'True' }
									#$domainName = Get-MsolDomain -TenantId $TID.TenantId | Where-Object { $_.Name -notlike '*.onmicrosoft*' -and $_.Name -notlike '*.microsoftonline*' -and $_.Status -eq "Verified" }
									#$domainName = Get-MsolDomain -TenantId $TID.TenantId
									$domain = New-Object -TypeName PSObject
									$domain | Add-Member -Name 'Name' -MemberType NoteProperty -Value ($domainName.Name | Select-Object -First 1) #Deals with Tenants with multiple domain names asociated
									#$domain | Add-Member -Name 'Name' -MemberType NoteProperty -Value $domainName.Name
									$domain | Add-Member -Name TenantID -MemberType NoteProperty -Value $TID.TenantId
									$domains += $domain
								}
								$progressbar1.Value = 60
								#Loads Combobox with Tenants
								Load-ComboBox $PartnerComboBox $domains -DisplayMember Name
								
								#Enable the connect to tenant button
								$TenantConnectButton.Enabled = $true
							}
							
							#If no tenant domains are available then do the following
							Else
							{
								#Clear the combobox of items
								$PartnerComboBox.Text = ""
								
								#Disable combobox
								$PartnerComboBox.Enabled = $False
								
								#Disable the connect to tenant button
								$TenantConnectButton.Enabled = $false
							}
							
							$progressbar1.Value = 65
							
							#If compliance center checkbox is checked
							If ($checkboxComplianceCenter.Checked)
							{
								$TextboxResults.Text = "Connecting to Compliance Center..."
								$ccSession = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri https://ps.compliance.protection.outlook.com/powershell-liveid/ -Credential $global:o365credentials -Authentication Basic -AllowRedirection
								Import-PSSession $ccSession
								$TextboxResults.Text = ""
							}
							
							$progressbar1.Value = 70
							
							#If exchange online checkbox is checked
							If ($checkboxExchangeOnline.Checked)
							{
								
								$TextboxResults.Text = "Connecting to Exchange Online..."
								$exchangeSession = New-PSSession -Name MainAccount -ConfigurationName Microsoft.Exchange -ConnectionUri https://outlook.office365.com/powershell-liveid/ -Credential $global:o365credentials -Authentication Basic -AllowRedirection
								Import-PSSession $exchangeSession -AllowClobber
								
								
								$TextboxResults.Text = "Caching Users..."
								$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter")
								$UserListcombo = Get-MSOLUser -All | Select-Object -ExpandProperty UserPrincipalName | Out-File "$O365AdminTempFolder\upn.txt"
								Get-MSOLUser -All | Select-Object -ExpandProperty DisplayName | Out-File "$O365AdminTempFolder\names.txt"
								
								
								$TextboxResults.Text = ""
							}
							
							$progressbar1.Value = 80
							
							If ($checkboxSharepoint.Checked -and $checkboxExchangeOnline.Checked)
							{
								$TextboxResults.Text = "Checking for the SharePoint Online module..."
								if ((Get-Module -ListAvailable -Name Microsoft.Online.SharePoint.PowerShell) -or ($SharePointPreReqPrompt -eq 1))
								{
									Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableSharePointOnlinePrompt -Value 1 -Force | Out-Null
									
									$TextboxResults.Text = "Connecting to SharePoint Online..."
									#Grabs the Sharepoint URL attribtue with Absoluteuri header
									$SPOheaders = Get-OrganizationConfig | Select-Object -ExpandProperty SharepointUrl
									#Clears the header so we have a clean variable
									$SPOSite = $SPOheaders | Select-Object -ExpandProperty AbsoluteUri
									#Splits the URl into two parts so we can inject -admin
									$firsthalf = $SPOSite -split ('.sharepoint.com') | Select-Object -First 1
									$secondhalf = $SPOSite -split '(.sharepoint.com/)' | Select-Object -Last 2
									#Wrap it all up into a single URL with the -admin
									$SPOadminSite = "$Firsthalf" + "-admin" + "$secondhalf"
									$TextboxResults.Text = "Connecting to Sharepoint Online..."
									Import-Module Microsoft.Online.SharePoint.PowerShell -DisableNameChecking
									Connect-SPOService -Url $SPOadminSite -credential $global:o365credentials
									$TextboxResults.Text = ""
								}
								Else
								{
									$TextboxResults.Text = ""
									$textboxDetails.Text = ""
									$PartnerComboBox.Enabled = $True
									$ButtonConnectTo365.Enabled = $True
									$ButtonDisconnect.Enabled = $False
									#$TenantConnectButton.Enabled = $True
									$checkboxComplianceCenter.Enabled = $true
									$checkboxExchangeOnline.Enabled = $true
									$checkboxSharepoint.Enabled = $true
									$checkboxComplianceCenter.Checked = $False
									$checkboxSharepoint.Checked = $False
									$checkboxSkypeForBusiness.Checked = $False
									$checkboxExchangeOnline.Checked = $False
									$checkboxSkypeForBusiness.Enabled = $True
									$FormO365AdministrationCenter.Cursor = 'Default'
									$ButtonConnectTo365.Text = "Connect to O365"
									Show-PreRep_SharePoint_psf
								}
							}
							
							#If sharepoint checkbox is checked
							If ($checkboxSharepoint.Checked)
							{
								$TextboxResults.Text = "Checking for the SharePoint Online module..."
								if ((Get-Module -ListAvailable -Name Microsoft.Online.SharePoint.PowerShell) -or ($SharePointPreReqPrompt -eq 1))
								{
									#$Sharepointdomain = Read-Host "Enter the domain name. EX: contoso, yahoo"
									#Connect to Exchange online so we can grab the Sharepoint URL attribute 
									$TextboxResults.Text = "Connecting to SharePoint Online..."
									$exchangeSession = New-PSSession -Name MainAccount -ConfigurationName Microsoft.Exchange -ConnectionUri https://outlook.office365.com/powershell-liveid/ -Credential $global:o365credentials -Authentication Basic -AllowRedirection
									Import-PSSession $exchangeSession -AllowClobber
									$progressbar1.Value = 83
									#Grabs the Sharepoint URL attribtue with Absoluteuri header
									$SPOheaders = Get-OrganizationConfig | Select-Object -ExpandProperty SharepointUrl
									#Clears the header so we have a clean variable
									$SPOSite = $SPOheaders | Select-Object -ExpandProperty AbsoluteUri
									#Splits the URl into two parts so we can inject -admin
									$firsthalf = $SPOSite -split ('.sharepoint.com') | Select-Object -First 1
									$secondhalf = $SPOSite -split '(.sharepoint.com/)' | Select-Object -Last 2
									#Wrap it all up into a single URL with the -admin
									$SPOadminSite = "$Firsthalf" + "-admin" + "$secondhalf"
									$TextboxResults.Text = "Connecting to Sharepoint Online..."
									Import-Module Microsoft.Online.SharePoint.PowerShell -DisableNameChecking
									Connect-SPOService -Url $SPOadminSite -credential $global:o365credentials
									$TextboxResults.Text = ""
								}
								Else
								{
									$TextboxResults.Text = ""
									$textboxDetails.Text = ""
									$PartnerComboBox.Enabled = $True
									$ButtonConnectTo365.Enabled = $True
									$ButtonDisconnect.Enabled = $False
									#$TenantConnectButton.Enabled = $True
									$checkboxComplianceCenter.Enabled = $true
									$checkboxExchangeOnline.Enabled = $true
									$checkboxSharepoint.Enabled = $true
									$checkboxComplianceCenter.Checked = $False
									$checkboxSharepoint.Checked = $False
									$checkboxSkypeForBusiness.Checked = $False
									$checkboxExchangeOnline.Checked = $False
									$checkboxSkypeForBusiness.Enabled = $True
									$FormO365AdministrationCenter.Cursor = 'Default'
									$ButtonConnectTo365.Text = "Connect to O365"
									Show-PreRep_SharePoint_psf
								}
							}
							
							$progressbar1.Value = 90
							
							#If skype for business checkbox is checked
							If ($checkboxSkypeForBusiness.Checked)
							{
								$TextboxResults.Text = "Checking for the SkypeOnlineConnector module..."
								if ((Get-Module -ListAvailable -Name SkypeOnlineConnector) -or ($SkypeOnlineConnectorPreReqPrompt -eq 1))
								{
									$TextboxResults.Text = "Connecting to Skype for Business.."
									Import-Module SkypeOnlineConnector
									#Skype for business session
									$sfboSession = New-CsOnlineSession -Credential $global:o365credentials
									#Import Skype For Business Session
									Import-PSSession $sfboSession
									$TextboxResults.Text = ""
								}
								Else
								{
									$TextboxResults.Text = ""
									$textboxDetails.Text = ""
									$PartnerComboBox.Enabled = $True
									$ButtonConnectTo365.Enabled = $True
									$ButtonDisconnect.Enabled = $False
									#$TenantConnectButton.Enabled = $True
									$checkboxComplianceCenter.Enabled = $true
									$checkboxExchangeOnline.Enabled = $true
									$checkboxSharepoint.Enabled = $true
									$checkboxComplianceCenter.Checked = $False
									$checkboxSharepoint.Checked = $False
									$checkboxSkypeForBusiness.Checked = $False
									$checkboxExchangeOnline.Checked = $False
									$checkboxSkypeForBusiness.Enabled = $True
									$FormO365AdministrationCenter.Cursor = 'Default'
									$ButtonConnectTo365.Text = "Connect to O365"
									Show-PreReq_SkypeForBusiness_psf
								}
								
								
							}
							
							$progressbar1.Value = 100
							$FormO365AdministrationCenter.Cursor = 'Default'
						}
						Else
						{
							$TextboxResults.Text = ""
							$textboxDetails.Text = ""
							$PartnerComboBox.Enabled = $True
							$ButtonConnectTo365.Enabled = $True
							$ButtonDisconnect.Enabled = $False
							#$TenantConnectButton.Enabled = $True
							$checkboxComplianceCenter.Enabled = $true
							$checkboxExchangeOnline.Enabled = $true
							$checkboxSharepoint.Enabled = $true
							$checkboxComplianceCenter.Checked = $False
							$checkboxSharepoint.Checked = $False
							$checkboxSkypeForBusiness.Checked = $False
							$checkboxExchangeOnline.Checked = $False
							$checkboxSkypeForBusiness.Enabled = $True
							$FormO365AdministrationCenter.Cursor = 'Default'
							$ButtonConnectTo365.Text = "Connect to O365"
							Show-PreReq_Azure_psf
						}
					}
					Else
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						$PartnerComboBox.Enabled = $True
						$ButtonConnectTo365.Enabled = $True
						$ButtonDisconnect.Enabled = $False
						#$TenantConnectButton.Enabled = $True
						$checkboxComplianceCenter.Enabled = $true
						$checkboxExchangeOnline.Enabled = $true
						$checkboxSharepoint.Enabled = $true
						$checkboxComplianceCenter.Checked = $False
						$checkboxSharepoint.Checked = $False
						$checkboxSkypeForBusiness.Checked = $False
						$checkboxExchangeOnline.Checked = $False
						$checkboxSkypeForBusiness.Enabled = $True
						$FormO365AdministrationCenter.Cursor = 'Default'
						$ButtonConnectTo365.Text = "Connect to O365"
						
						Show-PreReq_MSOnline_psf
					}
				}
				Else
				{
					$global:o365credentials = (Get-Credential -Message "Please enter your Office 365 credentials")
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Connecting to Office 365..."
					
					If (($SignOnAss -ne $Null) -or ($MSOnlinePreReqPrompt -eq 1))
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableMSOnlinePrompt -Value 1 -Force | Out-Null
						
						#$TextboxResults.Text = "Checking for the Azure module..."
						If ((Get-Module -ListAvailable -Name MSOnline) -or ($AzurePreReqPrompt -eq 1))
						{
							$FormO365AdministrationCenter.Cursor = 'WaitCursor'
							Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableAzurePrompt -Value 1 -Force | Out-Null
							
							#Show progress bar
							$progressbar1.Visible = $true
							
							#$TextboxResults.Text = "Connecting to O365..."
							$Ranges = 1 .. 50
							foreach ($range in $ranges)
							{
								$progressbar1.Value = $Range
							}
							
							Connect-MsolService -Credential $global:o365credentials
							$progressbar1.Value = 50
							
							#Disable the connect to o365 button
							$ButtonConnectTo365.Enabled = $False
							
							#Enable the disconnect button
							$ButtonDisconnect.Enabled = $True
							
							#Disable the checkboxes
							$checkboxExchangeOnline.Enabled = $false
							$checkboxSkypeForBusiness.Enabled = $false
							$checkboxSharepoint.Enabled = $false
							$checkboxComplianceCenter.Enabled = $False
							$progressbar1.Value = 51
							#Change button text
							$ButtonConnectTo365.Text = "Connected to O365"
							$progressbar1.Value = 52
							#The first checked check box for services will load the appropriate tab as default. 
							If ($checkboxComplianceCenter.checked)
							{
								$TabPageMaster.SelectedTab = $tabpageComplianceCenter
							}
							elseif ($checkboxExchangeOnline.Checked)
							{
								$TabPageMaster.SelectedTab = $tabpageExchangeOnline
							}
							elseif ($checkboxSharepoint.checked)
							{
								$TabPageMaster.SelectedTab = $tabpageSharePoint
							}
							elseif ($checkboxSkypeForBusiness.checked)
							{
								$TabPageMaster.SelectedTab = $tabpageSkypeForBusiness
							}
							$progressbar1.Value = 53
							#Set Tenant Status to 0 as we have not connected to any tenants yet
							Get-Item 'HKCU:\Software\O365 Admin Center' -Force | New-ItemProperty -Name TenantStatus -Value 0 -Force | Out-Null
							$progressbar1.Value = 54
							
							$partnerTIDs = Get-MsolPartnerContract -All | Select-Object TenantID
							$progressbar1.Value = 55
							
							#If tenant domains are available then load combobox with all tenants
							If ($partnerTIDs -ne $Null)
							{
								#Enables the Tenant button
								$TenantConnectButton.Enabled = $True
								$PartnerComboBox.Enabled = $True
								
								$domains = @()
								foreach ($TID in $partnerTIDs)
								{
									$domainName = Get-MsolDomain -TenantId $TID.TenantId | Where-Object { $_.IsDefault -eq 'True' }
									#$domainName = Get-MsolDomain -TenantId $TID.TenantId | Where-Object { $_.Name -notlike '*.onmicrosoft*' -and $_.Name -notlike '*.microsoftonline*' -and $_.Status -eq "Verified" }
									#$domainName = Get-MsolDomain -TenantId $TID.TenantId
									$domain = New-Object -TypeName PSObject
									$domain | Add-Member -Name 'Name' -MemberType NoteProperty -Value ($domainName.Name | Select-Object -First 1) #Deals with Tenants with multiple domain names asociated
									#$domain | Add-Member -Name 'Name' -MemberType NoteProperty -Value $domainName.Name
									$domain | Add-Member -Name TenantID -MemberType NoteProperty -Value $TID.TenantId
									$domains += $domain
								}
								$progressbar1.Value = 60
								#Loads Combobox with Tenants
								Load-ComboBox $PartnerComboBox $domains -DisplayMember Name
								
								#Enable the connect to tenant button
								$TenantConnectButton.Enabled = $true
							}
							
							#If no tenant domains are available then do the following
							Else
							{
								#Clear the combobox of items
								$PartnerComboBox.Text = ""
								
								#Disable combobox
								$PartnerComboBox.Enabled = $False
								
								#Disable the connect to tenant button
								$TenantConnectButton.Enabled = $false
							}
							
							$progressbar1.Value = 65
							
							#If compliance center checkbox is checked
							If ($checkboxComplianceCenter.Checked)
							{
								$TextboxResults.Text = "Connecting to Compliance Center..."
								$ccSession = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri https://ps.compliance.protection.outlook.com/powershell-liveid/ -Credential $global:o365credentials -Authentication Basic -AllowRedirection
								Import-PSSession $ccSession
								$TextboxResults.Text = ""
							}
							
							$progressbar1.Value = 70
							
							#If exchange online checkbox is checked
							If ($checkboxExchangeOnline.Checked)
							{
								
								$TextboxResults.Text = "Connecting to Exchange Online..."
								$exchangeSession = New-PSSession -Name MainAccount -ConfigurationName Microsoft.Exchange -ConnectionUri https://outlook.office365.com/powershell-liveid/ -Credential $global:o365credentials -Authentication Basic -AllowRedirection
								Import-PSSession $exchangeSession -AllowClobber
								
								
								$TextboxResults.Text = "Caching Users..."
								$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter")
								$UserListcombo = Get-MSOLUser -All | Select-Object -ExpandProperty UserPrincipalName | Out-File "$O365AdminTempFolder\upn.txt"
								Get-MSOLUser -All | Select-Object -ExpandProperty DisplayName | Out-File "$O365AdminTempFolder\names.txt"
								
								
								$TextboxResults.Text = ""
							}
							
							$progressbar1.Value = 80
							
							If ($checkboxSharepoint.Checked -and $checkboxExchangeOnline.Checked)
							{
								$TextboxResults.Text = "Checking for the SharePoint Online module..."
								if ((Get-Module -ListAvailable -Name Microsoft.Online.SharePoint.PowerShell) -or ($SharePointPreReqPrompt -eq 1))
								{
									Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableSharePointOnlinePrompt -Value 1 -Force | Out-Null
									
									$TextboxResults.Text = "Connecting to SharePoint Online..."
									#Grabs the Sharepoint URL attribtue with Absoluteuri header
									$SPOheaders = Get-OrganizationConfig | Select-Object -ExpandProperty SharepointUrl
									#Clears the header so we have a clean variable
									$SPOSite = $SPOheaders | Select-Object -ExpandProperty AbsoluteUri
									#Splits the URl into two parts so we can inject -admin
									$firsthalf = $SPOSite -split ('.sharepoint.com') | Select-Object -First 1
									$secondhalf = $SPOSite -split '(.sharepoint.com/)' | Select-Object -Last 2
									#Wrap it all up into a single URL with the -admin
									$SPOadminSite = "$Firsthalf" + "-admin" + "$secondhalf"
									$TextboxResults.Text = "Connecting to Sharepoint Online..."
									Import-Module Microsoft.Online.SharePoint.PowerShell -DisableNameChecking
									Connect-SPOService -Url $SPOadminSite -credential $global:o365credentials
									$TextboxResults.Text = ""
								}
								Else
								{
									$TextboxResults.Text = ""
									$textboxDetails.Text = ""
									$PartnerComboBox.Enabled = $True
									$ButtonConnectTo365.Enabled = $True
									$ButtonDisconnect.Enabled = $False
									#$TenantConnectButton.Enabled = $True
									$checkboxComplianceCenter.Enabled = $true
									$checkboxExchangeOnline.Enabled = $true
									$checkboxSharepoint.Enabled = $true
									$checkboxComplianceCenter.Checked = $False
									$checkboxSharepoint.Checked = $False
									$checkboxSkypeForBusiness.Checked = $False
									$checkboxExchangeOnline.Checked = $False
									$checkboxSkypeForBusiness.Enabled = $True
									$FormO365AdministrationCenter.Cursor = 'Default'
									$ButtonConnectTo365.Text = "Connect to O365"
									Show-PreRep_SharePoint_psf
								}
							}
							
							#If sharepoint checkbox is checked
							If ($checkboxSharepoint.Checked)
							{
								$TextboxResults.Text = "Checking for the SharePoint Online module..."
								if ((Get-Module -ListAvailable -Name Microsoft.Online.SharePoint.PowerShell) -or ($SharePointPreReqPrompt -eq 1))
								{
									#$Sharepointdomain = Read-Host "Enter the domain name. EX: contoso, yahoo"
									#Connect to Exchange online so we can grab the Sharepoint URL attribute 
									$TextboxResults.Text = "Connecting to SharePoint Online..."
									$exchangeSession = New-PSSession -Name MainAccount -ConfigurationName Microsoft.Exchange -ConnectionUri https://outlook.office365.com/powershell-liveid/ -Credential $global:o365credentials -Authentication Basic -AllowRedirection
									Import-PSSession $exchangeSession -AllowClobber
									$progressbar1.Value = 83
									#Grabs the Sharepoint URL attribtue with Absoluteuri header
									$SPOheaders = Get-OrganizationConfig | Select-Object -ExpandProperty SharepointUrl
									#Clears the header so we have a clean variable
									$SPOSite = $SPOheaders | Select-Object -ExpandProperty AbsoluteUri
									#Splits the URl into two parts so we can inject -admin
									$firsthalf = $SPOSite -split ('.sharepoint.com') | Select-Object -First 1
									$secondhalf = $SPOSite -split '(.sharepoint.com/)' | Select-Object -Last 2
									#Wrap it all up into a single URL with the -admin
									$SPOadminSite = "$Firsthalf" + "-admin" + "$secondhalf"
									$TextboxResults.Text = "Connecting to Sharepoint Online..."
									Import-Module Microsoft.Online.SharePoint.PowerShell -DisableNameChecking
									Connect-SPOService -Url $SPOadminSite -credential $global:o365credentials
									$TextboxResults.Text = ""
								}
								Else
								{
									$TextboxResults.Text = ""
									$textboxDetails.Text = ""
									$PartnerComboBox.Enabled = $True
									$ButtonConnectTo365.Enabled = $True
									$ButtonDisconnect.Enabled = $False
									#$TenantConnectButton.Enabled = $True
									$checkboxComplianceCenter.Enabled = $true
									$checkboxExchangeOnline.Enabled = $true
									$checkboxSharepoint.Enabled = $true
									$checkboxComplianceCenter.Checked = $False
									$checkboxSharepoint.Checked = $False
									$checkboxSkypeForBusiness.Checked = $False
									$checkboxExchangeOnline.Checked = $False
									$checkboxSkypeForBusiness.Enabled = $True
									$FormO365AdministrationCenter.Cursor = 'Default'
									$ButtonConnectTo365.Text = "Connect to O365"
									Show-PreRep_SharePoint_psf
								}
							}
							
							$progressbar1.Value = 90
							
							#If skype for business checkbox is checked
							If ($checkboxSkypeForBusiness.Checked)
							{
								$TextboxResults.Text = "Checking for the SkypeOnlineConnector module..."
								if ((Get-Module -ListAvailable -Name SkypeOnlineConnector) -or ($SkypeOnlineConnectorPreReqPrompt -eq 1))
								{
									$TextboxResults.Text = "Connecting to Skype for Business.."
									Import-Module SkypeOnlineConnector
									#Skype for business session
									$sfboSession = New-CsOnlineSession -Credential $global:o365credentials
									#Import Skype For Business Session
									Import-PSSession $sfboSession
									$TextboxResults.Text = ""
								}
								Else
								{
									$TextboxResults.Text = ""
									$textboxDetails.Text = ""
									$PartnerComboBox.Enabled = $True
									$ButtonConnectTo365.Enabled = $True
									$ButtonDisconnect.Enabled = $False
									#$TenantConnectButton.Enabled = $True
									$checkboxComplianceCenter.Enabled = $true
									$checkboxExchangeOnline.Enabled = $true
									$checkboxSharepoint.Enabled = $true
									$checkboxComplianceCenter.Checked = $False
									$checkboxSharepoint.Checked = $False
									$checkboxSkypeForBusiness.Checked = $False
									$checkboxExchangeOnline.Checked = $False
									$checkboxSkypeForBusiness.Enabled = $True
									$FormO365AdministrationCenter.Cursor = 'Default'
									$ButtonConnectTo365.Text = "Connect to O365"
									Show-PreReq_SkypeForBusiness_psf
								}
								
								
							}
							
							$progressbar1.Value = 100
							$FormO365AdministrationCenter.Cursor = 'Default'
						}
						Else
						{
							$TextboxResults.Text = ""
							$textboxDetails.Text = ""
							$PartnerComboBox.Enabled = $True
							$ButtonConnectTo365.Enabled = $True
							$ButtonDisconnect.Enabled = $False
							#$TenantConnectButton.Enabled = $True
							$checkboxComplianceCenter.Enabled = $true
							$checkboxExchangeOnline.Enabled = $true
							$checkboxSharepoint.Enabled = $true
							$checkboxComplianceCenter.Checked = $False
							$checkboxSharepoint.Checked = $False
							$checkboxSkypeForBusiness.Checked = $False
							$checkboxExchangeOnline.Checked = $False
							$checkboxSkypeForBusiness.Enabled = $True
							$FormO365AdministrationCenter.Cursor = 'Default'
							$ButtonConnectTo365.Text = "Connect to O365"
							Show-PreReq_Azure_psf
						}
					}
					Else
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						$PartnerComboBox.Enabled = $True
						$ButtonConnectTo365.Enabled = $True
						$ButtonDisconnect.Enabled = $False
						#$TenantConnectButton.Enabled = $True
						$checkboxComplianceCenter.Enabled = $true
						$checkboxExchangeOnline.Enabled = $true
						$checkboxSharepoint.Enabled = $true
						$checkboxComplianceCenter.Checked = $False
						$checkboxSharepoint.Checked = $False
						$checkboxSkypeForBusiness.Checked = $False
						$checkboxExchangeOnline.Checked = $False
						$checkboxSkypeForBusiness.Enabled = $True
						$FormO365AdministrationCenter.Cursor = 'Default'
						$ButtonConnectTo365.Text = "Connect to O365"
						
						Show-PreReq_MSOnline_psf
					}
				}
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'Default'
				Show-SelecPreReqExecutionPolicy_psf
			}
		}
	}
	Catch
	{
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		$PartnerComboBox.Enabled = $True
		$ButtonConnectTo365.Enabled = $True
		$ButtonDisconnect.Enabled = $False
		#$TenantConnectButton.Enabled = $True
		$checkboxComplianceCenter.Enabled = $true
		$checkboxExchangeOnline.Enabled = $true
		$checkboxSharepoint.Enabled = $true
		$checkboxComplianceCenter.Checked = $False
		$checkboxSharepoint.Checked = $False
		$checkboxSkypeForBusiness.Checked = $False
		$checkboxExchangeOnline.Checked = $False
		$checkboxSkypeForBusiness.Enabled = $True
		$FormO365AdministrationCenter.Cursor = 'Default'
		$ButtonConnectTo365.Text = "Connect to O365"
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	#Hide the progress bar
	$progressbar1.Visible = $false
	
}

$TenantConnectButton_Click = {
	try
	{
		
		#Show the proress bar
		$progressbar1.Visible = $true
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$URI = "https://outlook.office365.com/powershell-liveid?DelegatedOrg=" + $PartnerComboBox.SelectedItem.Name
		
		#Remove all sessions
		Get-PSSession | Remove-PSSession
		$progressbar1.Value = 65
		
		#CONNECT TO EXCHANGE ONLINE
		$TextboxResults.Text = "Connecting to partner account..."
		$progressbar1.Value = 70
		$PartnerSession = New-PSSession -Name PartnerAccount -ConfigurationName Microsoft.Exchange -ConnectionUri $URI -Credential $global:o365credentials -Authentication Basic -AllowRedirection
		$progressbar1.Value = 75
		Import-PSSession $PartnerSession -AllowClobber
		$progressbar1.Value = 80
		
		Connect-MsolService -Credential $global:o365credentials
		
		$TextboxResults.Text = "Caching User Principal Names..."
		$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter")
		$UserListcombo = Get-MSOLUser -TenantId $PartnerComboBox.SelectedItem.TenantID -All | Select-Object -ExpandProperty UserPrincipalName | Out-File "$O365AdminTempFolder\upn.txt"
		Get-MSOLUser -TenantId $PartnerComboBox.SelectedItem.TenantID -All | Select-Object -ExpandProperty DisplayName | Out-File "$O365AdminTempFolder\names.txt"
		
		$progressbar1.Value = 90
		
		#Disable the connect to tenant button
		$TenantConnectButton.Enabled = $false
		
		#Sets custom form text
		$FormO365AdministrationCenter.Text = "-Connected to " + $PartnerComboBox.SelectedItem.Name + "-"
		
		#Clear textboxes
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		
		#Disable the partner combobox
		$PartnerComboBox.Enabled = $false
		
		#Enable the disconnect button
		$ButtonDisconnect.Enabled = $True
		
		#Sets custom button text
		$TenantConnectButton.Text = "Connected to Partner"
		$progressbar1.Value = 100
		
		If ($checkboxComplianceCenter.checked)
		{
			$TabPageMaster.SelectedTab = $tabpageComplianceCenter
		}
		elseif ($checkboxExchangeOnline.Checked)
		{
			$TabPageMaster.SelectedTab = $tabpageExchangeOnline
		}
		elseif ($checkboxSharepoint.checked)
		{
			$TabPageMaster.SelectedTab = $tabpageSharePoint
		}
		elseif ($checkboxSkypeForBusiness.checked)
		{
			$TabPageMaster.SelectedTab = $tabpageSkypeForBusiness
		}
		
		Get-Item 'HKCU:\Software\O365 Admin Center' -Force | New-ItemProperty -Name TenantStatus -Value 1 -Force | Out-Null
		
		#Disable the checkboxes
		$checkboxExchangeOnline.Enabled = $false
		$checkboxSkypeForBusiness.Enabled = $false
		$checkboxSharepoint.Enabled = $false
		$checkboxComplianceCenter.Enabled = $False
		
		$ButtonConnectTo365.Enabled = $false
		
		$ButtonDisconnect.Text = "Disconnect from Tenant"
		
		#Deletes the old pf  files
		$TempDir = $env:temp
		$CachedFiles = ("$TempDir" + "\O365AdminCenter\pf.txt")
		Remove-Item $CachedFiles
		$FormO365AdministrationCenter.Cursor = 'Default'
		
	}
	catch
	{
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	#Hide the progress bar
	$progressbar1.Visible = $false
}

$ButtonExportToFile_Click = {
<#	$SavedFile = Read-Host "Enter the Path for file (Eg. C:\DG.csv, C:\Users.txt, C:\output\info.doc)"
	try
	{
		$TextboxResults.Text | out-file $SavedFile
		[System.Windows.Forms.MessageBox]::Show("Saved $SavedFile", "Info")
	}
	Catch
	{
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}

	$savedialog = New-Object windows.forms.savefiledialog
	$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
	$savedialog.title = "Export to File"
	$savedialog.filter = ".doc|*.doc|.csv|*.csv|.txt|*.txt"
	$savedialog.ShowHelp = $True
	$result = $savedialog.ShowDialog(); $result
	if ($result -eq "OK")
	{
		$TextboxResults.Text | Out-File -Encoding Default $savedialog.filename 
	}
	else
	{
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("Could not save the file", "Error")
	}
	#>
}

$ButtonRunCustomCommand_Click = {
	$userinput = $TextboxResults.text
	try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		#Takes the user input to a variable and passes it to the shell
		$TextboxResults.text = Invoke-Expression $userinput | Out-String
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		$FormO365AdministrationCenter.Cursor = 'Default'
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}



###USERS###

	#User General Items

$createOutOfOfficeAutoReplyForAUserToolStripMenuItem_Click = {
	Do
	{
		#$OOOautoreplyUser = Read-Host "What user is the Out Of Office auto reply for?"
		$SelectUsersFormText = "Select the User you want to create an Out of Office Reply for"
		#Call-SelectUsersForm_psf
		Show-SelectCachedDisplayNames_psf
		#$GlobalUPNooouser = $SelectUsersForm_comboboxUsers
		$GlobalUPNooouser = $SelectCachedDisplayNames_comboboxNames
		
		Try
		{
			If (!$GlobalUPNooouser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("Please select a user you want to create an Out of Office Reply for", "Error")
			}
			Else
			{
				$OOOInternal = Read-Host "What is the Internal Message"
				If (!$OOOInternal)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("Please enter an Internal out of office message", "Error")
				}
				Else
				{
					$OOOExternal = Read-Host "What is the External Message"
					If (!$OOOExternal)
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						[System.Windows.Forms.MessageBox]::Show("Please enter an External Out of Office Reply", "Error")
					}
					Else
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Creating an Out of Office reply for $GlobalUPNooouser..."
						$textboxDetails.Text = "Set-MailboxAutoReplyConfiguration -Identity $GlobalUPNooouser -AutoReplyState Enabled -ExternalMessage $OOOExternal -InternalMessage $OOOInternal"
						Set-MailboxAutoReplyConfiguration -Identity $GlobalUPNooouser -AutoReplyState Enabled -ExternalMessage $OOOExternal -InternalMessage $OOOInternal
						$TextboxResults.Text = Get-MailboxAutoReplyConfiguration -Identity $GlobalUPNooouser | Format-List | Out-String -Width 2147483647
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
				}
				
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to create an Out of Office Message for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$disableOutOfOfficeReplyForAUserToolStripMenuItem_Click = {
	Do
	{
		#$OOOautoreplyUser = Read-Host "What user is the Out Of Office auto reply for?"
		$SelectUsersFormText = "Select the user you want to disable an Out of Office reply for"
		#Call-SelectUsersForm_psf
		Show-SelectCachedDisplayNames_psf
		#$GlobalUPNooouser = $SelectUsersForm_comboboxUsers
		$GlobalUPNooouser = $SelectCachedDisplayNames_comboboxNames
		
		Try
		{
			If (!$GlobalUPNooouser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User selected, please select a User.", "Error")
				
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Disabling an Out of Office reply for $GlobalUPNooouser..."
				$textboxDetails.Text = "Set-MailboxAutoReplyConfiguration -Identity $GlobalUPNooouser -AutoReplyState Disabled"
				Set-MailboxAutoReplyConfiguration -Identity $GlobalUPNooouser -AutoReplyState Disabled
				$TextboxResults.Text = Get-MailboxAutoReplyConfiguration -Identity $GlobalUPNooouser | Format-List | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to disable an Out of Office reply for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getListOfUsersToolStripMenuItem_Click = {
	Try
	{
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting list of users..."
			$textboxDetails.Text = "Get-MSOLUser -All | Sort-Object DisplayName |  Format-Table DisplayName, UserPrincipalName -AutoSize"
			$TextboxResults.text = Get-MSOLUser -All | Sort-Object DisplayName | Format-Table DisplayName, UserPrincipalName -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting list of users..."
			$textboxDetails.Text = "Get-MSOLUser -TenantId $TenantText -All | Sort-Object DisplayName |  Format-Table DisplayName, UserPrincipalName -AutoSize "
			$TextboxResults.text = Get-MSOLUser -TenantId $PartnerComboBox.SelectedItem.TenantID -All | Sort-Object DisplayName | Format-Table DisplayName, UserPrincipalName -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting list of users..."
			$textboxDetails.Text = "Get-MSOLUser -All | Sort-Object DisplayName |  Format-Table DisplayName, UserPrincipalName -AutoSize"
			$TextboxResults.text = Get-MSOLUser -All | Sort-Object DisplayName | Format-Table DisplayName, UserPrincipalName -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getDetailedInfoForAUserToolStripMenuItem_Click = {
	Do
	{
		$SelectUsersFormText = "Select the User you want to view detailed information for"
		#Call-SelectUsersForm_psf
		Show-SelectCachedUserPrincipalName_psf
		#$GlobalUPN = $SelectUsersForm_comboboxUsers
		$GlobalUPN = $SelectCachedUserPrincipalName_comboboxUPN
		Try
		{
			If (!$GlobalUPN)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User selected, please select a User.", "Error")
			}
			ElseIf (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting detailed info for $GlobalUPN..."
				$textboxDetails.Text = "Get-MsolUser -UserPrincipalName $GlobalUPN | Format-List"
				$TextboxResults.text = Get-MsolUser -UserPrincipalName $GlobalUPN | Format-List | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
			{
				$TenantText = $PartnerComboBox.text
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting detailed info for $GlobalUPN..."
				$textboxDetails.Text = "Get-MsolUser -UserPrincipalName $GlobalUPN -TenantId $TenantText | Format-List"
				$TextboxResults.text = Get-MsolUser -UserPrincipalName $GlobalUPN -TenantId $PartnerComboBox.SelectedItem.TenantID | Format-List | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting detailed info for $GlobalUPN..."
				$textboxDetails.Text = "Get-MsolUser -UserPrincipalName $GlobalUPN | Format-List"
				$TextboxResults.text = Get-MsolUser -UserPrincipalName $GlobalUPN | Format-List | Out-String -Width 2147483647
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get detailed information for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$changeUsersLoginNameToolStripMenuItem_Click = {
	Do
	{
		$SelectUsersFormText = "Select the User you want to change the User Principal Name for"
		#Call-SelectUsersForm_psf
		Show-SelectCachedUserPrincipalName_psf
		#$GlobalUPN = $SelectUsersForm_comboboxUsers
		$GlobalUPN = $SelectCachedUserPrincipalName_comboboxUPN
		$NewUserUPN = Read-Host "What would you like the new username to be?"
		Try
		{
			If ((!$GlobalUPN) -or (!$NewUserUPN))
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("One of the values appears to be empty. Please select a user that you want to change the UPN for and enter a valid new UPN.", "Error")
			}
			ElseIf (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Changing $GlobalUPN UPN to $NewUserUPN..."
				$textboxDetails.Text = "Set-MsolUserPrincipalname -UserPrincipalName $GlobalUPN -NewUserPrincipalName $NewUserUPN"
				Set-MsolUserPrincipalname -UserPrincipalName $GlobalUPN -NewUserPrincipalName $NewUserUPN
				$TextboxResults.text = Get-MSOLUser -UserPrincipalName $NewUserUPN | Format-List UserPrincipalName | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TenantText = $PartnerComboBox.text
				$TextboxResults.Text = "Changing $GlobalUPN UPN to $NewUserUPN..."
				$textboxDetails.Text = "Set-MsolUserPrincipalname -UserPrincipalName $GlobalUPN -TenantId $TenantText -NewUserPrincipalName $NewUserUPN"
				Set-MsolUserPrincipalname -UserPrincipalName $GlobalUPN -TenantId $PartnerComboBox.SelectedItem.TenantID -NewUserPrincipalName $NewUserUPN
				$TextboxResults.text = Get-MSOLUser -UserPrincipalName $NewUserUPN -TenantId $PartnerComboBox.SelectedItem.TenantID | Format-List UserPrincipalName | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Changing $GlobalUPN UPN to $NewUserUPN..."
				$textboxDetails.Text = "Set-MsolUserPrincipalname -UserPrincipalName $GlobalUPN -NewUserPrincipalName $NewUserUPN"
				Set-MsolUserPrincipalname -UserPrincipalName $GlobalUPN -NewUserPrincipalName $NewUserUPN
				$TextboxResults.text = Get-MSOLUser -UserPrincipalName $NewUserUPN | Format-List UserPrincipalName | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
			
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to change the UPN for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$deleteAUserToolStripMenuItem_Click = {
	Do
	{
		#$DeleteUser = Read-Host "Enter the UPN of the user you want to delete"
		$SelectUsersFormText = "Select the User you want to delete"
		#Call-SelectUsersForm_psf
		Show-SelectCachedUserPrincipalName_psf
		#$GlobalUPNdelete = $SelectUsersForm_comboboxUsers
		$GlobalUPNdelete = $SelectCachedUserPrincipalName_comboboxUPN
		Try
		{
			If (!$GlobalUPNdelete)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User selected, please select a User.", "Error")
			}
			Else
			{
				$OUTPUT = [System.Windows.Forms.MessageBox]::Show("Are you sure you want to delete $GlobalUPNdelete ?", "Warning!", 4)
				If ($OUTPUT -eq "YES")
				{
					#What to do if connected to main o365 account
					If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Deleting $GlobalUPNdelete..."
						$textboxDetails.Text = "Remove-MsolUser –UserPrincipalName $GlobalUPNdelete"
						$TextboxResults.text = Remove-MsolUser –UserPrincipalName $GlobalUPNdelete | Format-List UserPrincipalName | Out-String -Width 2147483647
						$TempDir = $env:temp
						$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter")
						$FullFile = "$O365AdminTempFolder\upn.txt"
						Remove-Item $FullFile -Force
						#$TextboxResults.Text = "re-caching Users..."
						$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter")
						$UserListcombo = Get-MSOLUser -All | Select-Object -ExpandProperty UserPrincipalName | Out-File "$O365AdminTempFolder\upn.txt"
						Get-MSOLUser -All | Select-Object -ExpandProperty DisplayName | Out-File "$O365AdminTempFolder\names.txt"
						$FormO365AdministrationCenter.Cursor = 'Default'
						$TextboxResults.Text = "$GlobalUPNdelete was deleted"
					}
					#What to do if connected to partner account
					ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
					{
						$TenantText = $PartnerComboBox.text
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Deleting $GlobalUPNdelete..."
						$textboxDetails.Text = "Remove-MsolUser –UserPrincipalName $GlobalUPNdelete -TenantId $TenantText"
						$TextboxResults.text = Remove-MsolUser –UserPrincipalName $GlobalUPNdelete -TenantId $PartnerComboBox.SelectedItem.TenantID | Format-List UserPrincipalName | Out-String -Width 2147483647
						$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter")
						$FullFile = "$O365AdminTempFolder\upn.txt"
						Remove-Item $FullFile -Force
						#$TextboxResults.Text = "re-caching Users..."
						$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter")
						$UserListcombo = Get-MSOLUser -TenantId $PartnerComboBox.SelectedItem.TenantID -All | Select-Object -ExpandProperty UserPrincipalName | Out-File "$O365AdminTempFolder\upn.txt"
						Get-MSOLUser -TenantId $PartnerComboBox.SelectedItem.TenantID -All | Select-Object -ExpandProperty DisplayName | Out-File "$O365AdminTempFolder\names.txt"
						$FormO365AdministrationCenter.Cursor = 'Default'
						$TextboxResults.Text = "$GlobalUPNdelete was deleted"
					}
					Else
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Deleting $GlobalUPNdelete..."
						$textboxDetails.Text = "Remove-MsolUser –UserPrincipalName $GlobalUPNdelete"
						$TextboxResults.text = Remove-MsolUser –UserPrincipalName $GlobalUPNdelete | Format-List UserPrincipalName | Out-String -Width 2147483647
						$TempDir = $env:temp
						$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter")
						$FullFile = "$O365AdminTempFolder\upn.txt"
						Remove-Item $FullFile -Force
						#$TextboxResults.Text = "re-caching Users..."
						$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter")
						$UserListcombo = Get-MSOLUser -All | Select-Object -ExpandProperty UserPrincipalName | Out-File "$O365AdminTempFolder\upn.txt"
						Get-MSOLUser -All | Select-Object -ExpandProperty DisplayName | Out-File "$O365AdminTempFolder\names.txt"
						$FormO365AdministrationCenter.Cursor = 'Default'
						$TextboxResults.Text = "$GlobalUPNdelete was deleted"
					}
				}
				Else
				{
					[System.Windows.Forms.MessageBox]::Show("$GlobalUPNdelete was not deleted", "Info")
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to delete another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$createANewUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$Firstname = Read-Host "Enter the First Name for the new User"
			If (!$Firstname)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No first name was entered for the new User. Please enter a valid first name", "Error")
				
			}
			Else
			{
				$LastName = Read-Host "Enter the Last Name for the new User"
				If (!$LastName)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No last name was entered for the new User. Please enter a valid last name", "Error")
				}
				Else
				{
					$DisplayName = Read-Host "Enter the Display Name for the new User"
					If (!$DisplayName)
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						[System.Windows.Forms.MessageBox]::Show("No Display Name was entered for the new User. Please enter a valid Display Name", "Error")
					}
					Else
					{
						$NewUser = Read-Host "Enter the UPN for the new user"
						If (!$NewUser)
						{
							$TextboxResults.Text = ""
							$textboxDetails.Text = ""
							[System.Windows.Forms.MessageBox]::Show("No UPN was entered for the new User. Please enter a valid UPN", "Error")
						}
						Else
						{
							#What to do if connected to main o365 account
							If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
							{
								$FormO365AdministrationCenter.Cursor = 'WaitCursor'
								$TextboxResults.Text = "Creating user $NewUser..."
								$textboxDetails.Text = "New-MsolUser -UserPrincipalName $NewUser -FirstName $Firstname -LastName $LastName -DisplayName $DisplayName"
								$TextboxResults.text = New-MsolUser -UserPrincipalName $NewUser -FirstName $Firstname -LastName $LastName -DisplayName $DisplayName | Format-List | Out-String -Width 2147483647
								$TempDir = $env:temp
								$upns = ("$TempDir" + "\O365AdminCenter\upn.txt")
								$names = ("$TempDir" + "\O365AdminCenter\names.txt")
								Remove-Item $upns -Force
								Remove-Item $names -Force
								#$TextboxResults.Text = "re-caching Users..."
								$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter")
								$UserListcombo = Get-MSOLUser -All | Select-Object -ExpandProperty UserPrincipalName | Out-File "$O365AdminTempFolder\upn.txt"
								Get-MSOLUser -All | Select-Object -ExpandProperty DisplayName | Out-File "$O365AdminTempFolder\names.txt"
								$FormO365AdministrationCenter.Cursor = 'Default'
							}
							#What to do if connected to partner account
							ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
							{
								$TenantText = $PartnerComboBox.text
								$FormO365AdministrationCenter.Cursor = 'WaitCursor'
								$TextboxResults.Text = "Creating user $NewUser..."
								$textboxDetails.Text = "New-MsolUser -TenantId $TenantText -UserPrincipalName $NewUser -FirstName $Firstname -LastName $LastName -DisplayName $DisplayName"
								$TextboxResults.text = New-MsolUser -TenantId $PartnerComboBox.SelectedItem.TenantID -UserPrincipalName $NewUser -FirstName $Firstname -LastName $LastName -DisplayName $DisplayName | Format-List | Out-String -Width 2147483647
								$TempDir = $env:temp
								$upns = ("$TempDir" + "\O365AdminCenter\upn.txt")
								$names = ("$TempDir" + "\O365AdminCenter\names.txt")
								Remove-Item $upns -Force
								Remove-Item $names -Force
								#$TextboxResults.Text = "re-caching User Principal Names..."
								$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter")
								$UserListcombo = Get-MSOLUser -TenantId $PartnerComboBox.SelectedItem.TenantID -All | Select-Object -ExpandProperty UserPrincipalName | Out-File "$O365AdminTempFolder\upn.txt"
								Get-MSOLUser -TenantId $PartnerComboBox.SelectedItem.TenantID -All | Select-Object -ExpandProperty DisplayName | Out-File "$O365AdminTempFolder\names.txt"
								$FormO365AdministrationCenter.Cursor = 'Default'
							}
							Else
							{
								$FormO365AdministrationCenter.Cursor = 'WaitCursor'
								$TextboxResults.Text = "Creating user $NewUser..."
								$textboxDetails.Text = "New-MsolUser -UserPrincipalName $NewUser -FirstName $Firstname -LastName $LastName -DisplayName $DisplayName"
								$TextboxResults.text = New-MsolUser -UserPrincipalName $NewUser -FirstName $Firstname -LastName $LastName -DisplayName $DisplayName | Format-List | Out-String -Width 2147483647
								$TempDir = $env:temp
								$upns = ("$TempDir" + "\O365AdminCenter\upn.txt")
								$names = ("$TempDir" + "\O365AdminCenter\names.txt")
								Remove-Item $upns -Force
								Remove-Item $names -Force
								#$TextboxResults.Text = "re-caching Users..."
								$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter")
								$UserListcombo = Get-MSOLUser -All | Select-Object -ExpandProperty UserPrincipalName | Out-File "$O365AdminTempFolder\upn.txt"
								Get-MSOLUser -All | Select-Object -ExpandProperty DisplayName | Out-File "$O365AdminTempFolder\names.txt"
								$FormO365AdministrationCenter.Cursor = 'Default'
							}
						}
					}
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to create another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$disableUserAccountToolStripMenuItem_Click = {
	Do
	{
		#$BlockUser = Read-Host "Enter the UPN of the user you want to disable"
		$SelectUsersFormText = "Select the User you want to disable"
		#Call-SelectUsersForm_psf
		Show-SelectCachedUserPrincipalName_psf
		#$GlobalUPNdisable = $SelectUsersForm_comboboxUsers
		$GlobalUPNdisable = $SelectCachedUserPrincipalName_comboboxUPN
		#What to do if connected to main o365 account
		Try
		{
			If (!$GlobalUPNdisable)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User selected, please select a User.", "Error")
			}
			Else
			{
				If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Disabling $GlobalUPNdisable..."
					$textboxDetails.Text = "Set-MsolUser -UserPrincipalName $GlobalUPNdisable -blockcredential `$True"
					Set-MsolUser -UserPrincipalName $GlobalUPNdisable -blockcredential $True
					$TextboxResults.text = Get-MsolUser -UserPrincipalName $GlobalUPNdisable | Format-List DisplayName, BlockCredential | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
				#What to do if connected to partner account
				ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
				{
					$TenantText = $PartnerComboBox.text
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Disabling $GlobalUPNdisable..."
					$textboxDetails.Text = "Set-MsolUser -UserPrincipalName $GlobalUPNdisable -blockcredential `$True -TenantId $TenantText"
					Set-MsolUser -UserPrincipalName $GlobalUPNdisable -blockcredential $True -TenantId $PartnerComboBox.SelectedItem.TenantID
					$TextboxResults.text = Get-MsolUser -UserPrincipalName $GlobalUPNdisable -TenantId $PartnerComboBox.SelectedItem.TenantID | Format-List DisplayName, BlockCredential | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Disabling $GlobalUPNdisable..."
					$textboxDetails.Text = "Set-MsolUser -UserPrincipalName $GlobalUPNdisable -blockcredential `$True"
					Set-MsolUser -UserPrincipalName $GlobalUPNdisable -blockcredential $True
					$TextboxResults.text = Get-MsolUser -UserPrincipalName $GlobalUPNdisable | Format-List DisplayName, BlockCredential | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to disable another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$enableAccountToolStripMenuItem_Click = {
	Do
	{
		#$EnableUser = Read-Host "Enter the UPN of the user you want to enable"
		$SelectUsersFormText = "Select the User you want to enable"
		#Call-SelectUsersForm_psf
		Show-SelectCachedUserPrincipalName_psf
		#$GlobalUPNenable = $SelectUsersForm_comboboxUsers
		$GlobalUPNenable = $SelectCachedUserPrincipalName_comboboxUPN
		Try
		{
			If (!$GlobalUPNenable)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User selected, please select a User.", "Error")
			}
			Else
			{
				#What to do if connected to main o365 account
				If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Enabling $GlobalUPNenable..."
					$textboxDetails.Text = "Set-MsolUser -UserPrincipalName $GlobalUPNenable -blockcredential `$False"
					Set-MsolUser -UserPrincipalName $GlobalUPNenable -blockcredential $False
					$TextboxResults.text = Get-MsolUser -UserPrincipalName $GlobalUPNenable | Format-List DisplayName, BlockCredential | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
				#What to do if connected to partner account
				ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
				{
					$TenantText = $PartnerComboBox.text
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Enabling $GlobalUPNenable..."
					$textboxDetails.Text = "Set-MsolUser -UserPrincipalName $GlobalUPNenable -blockcredential `$False -TenantId $TenantText"
					Set-MsolUser -UserPrincipalName $GlobalUPNenable -blockcredential $False -TenantId $PartnerComboBox.SelectedItem.TenantID
					$TextboxResults.text = Get-MsolUser -UserPrincipalName $GlobalUPNenable -TenantId $PartnerComboBox.SelectedItem.TenantID | Format-List DisplayName, BlockCredential | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Enabling $GlobalUPNenable..."
					$textboxDetails.Text = "Set-MsolUser -UserPrincipalName $GlobalUPNenable -blockcredential `$False"
					Set-MsolUser -UserPrincipalName $GlobalUPNenable -blockcredential $False
					$TextboxResults.text = Get-MsolUser -UserPrincipalName $GlobalUPNenable | Format-List DisplayName, BlockCredential | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to enable another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getDetailedMailboxInfoToolStripMenuItem_Click = {
	Do
	{
		#$GetDetailedMailboxInfoUser = Read-Host "Enter the UPN of the user you want to view detailed info for"
		$SelectUsersFormText = "Select the User you want to get detailed Mailbox information for"
		#Call-SelectUsersForm_psf
		Show-SelectCachedDisplayNames_psf
		#$GlobalUPNdetailedmailbox = $SelectUsersForm_comboboxUsers
		$GlobalUPNdetailedmailbox = $SelectCachedDisplayNames_comboboxNames
		Try
		{
			If (!$GlobalUPNdetailedmailbox)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User selected, please select a User.", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting detailed Mailbox info for $GlobalUPNdetailedmailbox..."
				$textboxDetails.Text = "Get-mailbox -identity $GlobalUPNdetailedmailbox | Format-List"
				$TextboxResults.Text = Get-mailbox -identity $GlobalUPNdetailedmailbox | Format-List | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get detailed Mailbox information for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$searchForAnEmailAddressToolStripMenuItem_Click = {
	Do
	{
		$SpecificEmail = Read-Host "Enter the E-mail Address you're looking for. Accepts wildcards (d*@bwya77.com, d*@*.com)"
		Try
		{
			If (!$SpecificEmail)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No E-mail was entered, please enter a valid E-mail Address.", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Finding an E-mail Address like $SpecificEmail..."
				$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited -Identity * | Where-Object { `$_.EmailAddresses -like 'smtp:$SpecificEmail'' } | Sort-Object Identity | Format-List Identity, EmailAddresses, PrimarySmtpAddress, RecipientType"
				$TextboxResults.Text = Get-Mailbox -ResultSize unlimited -Identity * | Where-Object { $_.EmailAddresses -like "smtp:$SpecificEmail" } | Sort-Object Identity | Format-List Identity, EmailAddresses, PrimarySmtpAddress, RecipientType | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to search for another E-mail Address?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

#Last Logon

$getAllUsersLastLogonToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting all users last logon timestamp..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | ForEach-Object { Get-MailboxStatistics `$_.Identity | Select-Object DisplayName, LastLogonTime } | Format-Table -AutoSize "
		$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | ForEach-Object { Get-MailboxStatistics $_.Identity | Select-Object DisplayName, LastLogonTime } | Sort-Object DisplayName | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getAUsersLastLogonToolStripMenuItem_Click = {
	Do
	{
		$SelectUsersFormText = "Select the User you want to get get last logon timestamp for"
		#Call-SelectUsersForm_psf
		Show-SelectCachedDisplayNames_psf
		#$LastLogonUser = $SelectUsersForm_comboboxUsers
		$LastLogonUser = $SelectCachedDisplayNames_comboboxNames
		Try
		{
			If (!$LastLogonUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User selected, please select a User.", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting last logon timestamp for $LastLogonUser..."
				$textboxDetails.Text = "Get-MailboxStatistics -identity $LastLogonUser | Select-Object DisplayName, LastLogonTime | Format-Table -AutoSize "
				$TextboxResults.Text = Get-MailboxStatistics -identity $LastLogonUser | Select-Object DisplayName, LastLogonTime | Format-Table -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get the Last Logon for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

#GAL

$hideAUserFromTheGALToolStripMenuItem_Click = {
	Do
	{
		#$HidefromGALUser = Read-Host "Enter the UPN of the user you want to hide from the GAL"
		$SelectUsersFormText = "Select the User you want to hide from the Global Address List"
		#Call-SelectUsersForm_psf
		Show-SelectCachedDisplayNames_psf
		#$GlobalUPNhideGAL = $SelectUsersForm_comboboxUsers
		$GlobalUPNhideGAL = $SelectCachedDisplayNames_comboboxNames
		Try
		{
			If (!$GlobalUPNhideGAL)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User selected, please select a user.", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Hiding $GlobalUPNhideGAL from the GAL..."
				$textboxDetails.Text = "set-Mailbox -Identity $GlobalUPNhideGAL -HiddenFromAddressListsEnabled `$True"
				set-Mailbox -Identity $GlobalUPNhideGAL -HiddenFromAddressListsEnabled $True
				$TextboxResults.Text = Get-Mailbox -Identity $GlobalUPNhideGAL | Format-List DisplayName, HiddenFromAddressListsEnabled | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to hide another User from the Global Address List?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getUsersThatAreHiddenFromTheGALToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting all mailboxes hidden from the GAL..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Where-Object { `$_.HiddenFromAddressListsEnabled -eq `$True } | Format-Table -AutoSize"
		$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Where-Object { $_.HiddenFromAddressListsEnabled -eq $True } | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getUsersThatAreNotHiddenFromTheGALToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting all mailboxes not hidden from the GAL..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Where-Object { `$_.HiddenFromAddressListsEnabled -eq `$False } | Format-Table -AutoSize"
		$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Where-Object { $_.HiddenFromAddressListsEnabled -eq $False } | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$unhideAUserFromTheGALToolStripMenuItem_Click = {
	Do
	{
		#$unHidefromGALUser = Read-Host "Enter the UPN of the user you want to unhide from the GAL"
		$SelectUsersFormText = "Select the User you want to unhide from the Global Address List"
		Show-SelectCachedDisplayNames_psf
		#Call-SelectUsersForm_psf
		#$GlobalUPNunhideGAL = $SelectUsersForm_comboboxUsers
		$GlobalUPNunhideGAL = $SelectCachedDisplayNames_comboboxNames
		Try
		{
			If (!$GlobalUPNunhideGAL)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User selected, please select a User.", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Unhiding $GlobalUPNunhideGAL from the Global Address List..."
				$textboxDetails.Text = "Set-Mailbox -Identity $GlobalUPNunhideGAL -HiddenFromAddressListsEnabled `$False"
				set-Mailbox -Identity $GlobalUPNunhideGAL -HiddenFromAddressListsEnabled $False
				$TextboxResults.Text = Get-Mailbox -Identity $GlobalUPNunhideGAL | Format-List DisplayName, HiddenFromAddressListsEnabled | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to unhide another User from the Global Address List?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

#Quota

$getUserQuotaToolStripMenuItem_Click = {
	Do
	{
		#$QuotaUser = Read-Host "Enter the Email of the user you want to view Quota information for"
		$SelectUsersFormText = "Select the User you want to view Quota information for"
		Show-SelectCachedDisplayNames_psf
		#Call-SelectUsersForm_psf
		#$GlobalUPNviewQuota = $SelectUsersForm_comboboxUsers
		$GlobalUPNviewQuota = $SelectCachedDisplayNames_comboboxNames
		try
		{
			If (!$GlobalUPNviewQuota)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User selected, please select a User.", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting user Quota for $GlobalUPNviewQuota..."
				$textboxDetails.Text = "Get-Mailbox -identity $GlobalUPNviewQuota | Format-List DisplayName, UserPrincipalName, *Quota"
				$TextboxResults.text = Get-Mailbox -identity $GlobalUPNviewQuota | Format-List DisplayName, UserPrincipalName, *Quota | Format-List | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to view Quota information for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getAllUsersQuotaToolStripMenuItem_Click = {
	try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting quota for all users..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Format-List DisplayName, UserPrincipalName, *Quota -AutoSize"
		$TextboxResults.text = Get-Mailbox -ResultSize unlimited | Sort-Object DisplayName | Format-Table DisplayName, UserPrincipalName, *Quota -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$setUserMailboxQuotaToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$MailboxSetQuota = Read-Host "Enter the UPN of the user you want to edit quota for"
			$SelectUsersFormText = "Select the User you want to edit the Quota for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedDisplayNames_psf
			#$GlobalUPNeditQuota = $SelectUsersForm_comboboxUsers
			$GlobalUPNeditQuota = $SelectCachedDisplayNames_comboboxNames
			If (!$GlobalUPNeditQuota)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User selected, please select a User.", "Error")
			}
			Else
			{
				$ProhibitSendReceiveQuota = Read-Host "Enter the ProhibitSendReceiveQuota value (EX: '50GB') Max:50GB"
				If (!$ProhibitSendReceiveQuota)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Prohibit Send and Receive Quota value was entered. Please enter a valid number.", "Error")
				}
				Else
				{
					$ProhibitSendQuota = Read-Host "Enter the ProhibitSendQuota value (EX: '48GB') Max:50GB"
					If (!$ProhibitSendQuota)
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						[System.Windows.Forms.MessageBox]::Show("No Prohibit Send Quota value was entered. Please enter a valid number.", "Error")
					}
					Else
					{
						$IssueWarningQuota = Read-Host "Enter theIssueWarningQuota value (EX: '45GB') Max:50GB"
						If (!$IssueWarningQuota)
						{
							$TextboxResults.Text = ""
							$textboxDetails.Text = ""
							[System.Windows.Forms.MessageBox]::Show("No Issue Warning Quota value was entered. Please enter a valid number.", "Error")
						}
						Else
						{
							$FormO365AdministrationCenter.Cursor = 'WaitCursor'
							$TextboxResults.Text = "Setting quota for $GlobalUPNeditQuota... "
							$textboxDetails.Text = "Set-Mailbox -identity $GlobalUPNeditQuota -ProhibitSendReceiveQuota $ProhibitSendReceiveQuota -ProhibitSendQuota $ProhibitSendQuota -IssueWarningQuota $IssueWarningQuota"
							Set-Mailbox -identity $GlobalUPNeditQuota -ProhibitSendReceiveQuota $ProhibitSendReceiveQuota -ProhibitSendQuota $ProhibitSendQuota -IssueWarningQuota $IssueWarningQuota
							$TextboxResults.text = Get-Mailbox $GlobalUPNeditQuota | Format-List DisplayName, UserPrincipalName, *Quota | Out-String -Width 2147483647
							$FormO365AdministrationCenter.Cursor = 'Default'
						}
					}
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to modify the Quota for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$setMailboxQuotaForAllToolStripMenuItem_Click = {
	Try
	{
		$ProhibitSendReceiveQuota2 = Read-Host "Enter (GB) the ProhibitSendReceiveQuota value (EX: '50GB') Max:50GB"
		If (!$ProhibitSendReceiveQuota2)
		{
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("No Prohibit Send and Receive Quota value was entered. Please enter a valid number.", "Error")
		}
		Else
		{
			$ProhibitSendQuota2 = Read-Host "Enter (GB) the ProhibitSendQuota value (EX: '48GB') Max:50GB"
			If (!$ProhibitSendQuota2)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Prohibit Send Quota value was entered. Please enter a valid number.", "Error")
			}
			Else
			{
				$IssueWarningQuota2 = Read-Host "Enter (GB) theIssueWarningQuota value (EX: '45GB') Max:50GB"
				If (!$IssueWarningQuota2)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Issue Warning Quota value was entered. Please enter a valid number.", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Setting quota for all... "
					$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Set-Mailbox -ProhibitSendReceiveQuota $ProhibitSendReceiveQuota2 -ProhibitSendQuota $ProhibitSendQuota2 -IssueWarningQuota $IssueWarningQuota2"
					Get-Mailbox -ResultSize unlimited | Set-Mailbox -ProhibitSendReceiveQuota $ProhibitSendReceiveQuota2 -ProhibitSendQuota $ProhibitSendQuota2 -IssueWarningQuota $IssueWarningQuota2
					$TextboxResults.text = Get-Mailbox -ResultSize unlimited | Format-List DisplayName, UserPrincipalName, *Quota | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

#Licenses

$getLicensedUsersToolStripMenuItem_Click = {
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all users with a license..."
			$textboxDetails.Text = "Get-MsolUser -All | Where-Object { `$_.isLicensed -eq `$TRUE } | Sort-Object DisplayName | Format-Table DisplayName, Licenses -AutoSize"
			$TextboxResults.text = Get-MsolUser -All | Where-Object { $_.isLicensed -eq $True } | Sort-Object DisplayName | Format-Table DisplayName, Licenses -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TenantText = $PartnerComboBox.text
			$TextboxResults.Text = "Getting all users with a license..."
			$textboxDetails.Text = "Get-MsolUser -All -TenantID $TenantText | Where-Object { `$_.isLicensed -eq `$TRUE } | Sort-Object DisplayName | Format-Table DisplayName, Licenses -AutoSize"
			$TextboxResults.text = Get-MsolUser -All -TenantId $PartnerComboBox.SelectedItem.TenantID | Where-Object { $_.isLicensed -eq $True } | Sort-Object DisplayName | Format-Table DisplayName, Licenses -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all users with a license..."
			$textboxDetails.Text = "Get-MsolUser -All | Where-Object { `$_.isLicensed -eq `$TRUE } | Sort-Object DisplayName | Format-Table DisplayName, Licenses -AutoSize"
			$TextboxResults.text = Get-MsolUser -All | Where-Object { $_.isLicensed -eq $True } | Sort-Object DisplayName | Format-Table DisplayName, Licenses -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$displayAllUsersWithoutALicenseToolStripMenuItem_Click = {
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all users without a license..."
			$textboxDetails.Text = "Get-MsolUser -All | Where-Object { `$_.isLicensed -like `$False } | Sort-Object UserPrincipalName | Format-Table UserPrincipalName -AutoSize"
			$TextboxResults.text = Get-MsolUser -All | Where-Object { $_.isLicensed -like "False" } | Sort-Object UserPrincipalName | Format-Table UserPrincipalName -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all users without a license..."
			$textboxDetails.Text = "Get-MsolUser -TenantId $TenantText -All | Where-Object { `$_.isLicensed -like `$False } | Sort-Object UserPrincipalName | Format-Table UserPrincipalName -AutoSize"
			$TextboxResults.text = Get-MsolUser -TenantId $PartnerComboBox.SelectedItem.TenantID -All | Where-Object { $_.isLicensed -like $False } | Sort-Object UserPrincipalName | Format-Table UserPrincipalName -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all users without a license..."
			$textboxDetails.Text = "Get-MsolUser -All | Where-Object { `$_.isLicensed -like `$False } | Sort-Object UserPrincipalName | Format-Table UserPrincipalName -AutoSize"
			$TextboxResults.text = Get-MsolUser -All | Where-Object { $_.isLicensed -like "False" } | Sort-Object UserPrincipalName | Format-Table UserPrincipalName -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$removeAllUnlicensedUsersToolStripMenuItem_Click = {
	Try
	{
		$OUTPUT = [System.Windows.Forms.MessageBox]::Show("Are you sure you want to remove all unlicensed users?", "Warning!", 4)
		If ($OUTPUT -eq "YES")
		{
			#What to do if connected to main o365 account
			If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Removing all users without a license..."
				$textboxDetails.Text = "Get-MsolUser -All | Where-Object { `$_.isLicensed -ne `$True } | Remove-MsolUser -Force"
				Get-MsolUser -All | Where-Object { $_.isLicensed -ne $True } | Remove-MsolUser -Force
				$TextboxResults.text = Get-MsolUser -All | Where-Object { $_.isLicensed -like $True } | Format-List UserPrincipalName | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			#What to do if connected to partner account
			ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
			{
				$TenantText = $PartnerComboBox.text
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Removing all users without a license..."
				$textboxDetails.Text = "Get-MsolUser -TenantId $TenantText -All | Where-Object { `$_.isLicensed -ne `$True } | Remove-MsolUser -Force"
				Get-MsolUser -all -TenantId $PartnerComboBox.SelectedItem.TenantID -All | Where-Object { $_.isLicensed -ne $True } | Remove-MsolUser -Force -TenantId $PartnerComboBox.SelectedItem.TenantID
				$TextboxResults.text = Get-MsolUser -TenantId $PartnerComboBox.SelectedItem.TenantID -All | Where-Object { $_.isLicensed -like $True } | Format-List UserPrincipalName | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Removing all users without a license..."
				$textboxDetails.Text = "Get-MsolUser -All | Where-Object { `$_.isLicensed -ne `$True } | Remove-MsolUser -Force"
				Get-MsolUser -All | Where-Object { $_.isLicensed -ne $True } | Remove-MsolUser -Force
				$TextboxResults.text = Get-MsolUser -All | Where-Object { $_.isLicensed -like $True } | Format-List UserPrincipalName | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Else
		{
			[System.Windows.Forms.MessageBox]::Show("No users were removed", "Info")
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$displayAllLicenseInfoToolStripMenuItem_Click = {
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all license information..."
			$textboxDetails.Text = "Get-MsolAccountSku | Format-Table"
			$TextboxResults.text = Get-MsolAccountSku | Select-Object -Property AccountSkuId, ActiveUnits, WarningUnits, ConsumedUnits, @{
				Name = 'Unused'
				Expression = {
					$_.ActiveUnits - $_.ConsumedUnits
				}
			} | Sort-Object Unused | Format-Table AccountSkuId, ActiveUnits, WarningUnits, ConsumedUnits, Unused -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all license information..."
			$textboxDetails.Text = "Get-MsolAccountSku -TenantId $TenantText | Format-Table"
			$TextboxResults.text = Get-MsolAccountSku -TenantId $PartnerComboBox.SelectedItem.TenantID | Select-Object -Property AccountSkuId, ActiveUnits, WarningUnits, ConsumedUnits, @{
				Name = 'Unused'
				Expression = {
					$_.ActiveUnits - $_.ConsumedUnits
				}
			} | Sort-Object Unused | Format-Table AccountSkuId, ActiveUnits, WarningUnits, ConsumedUnits, Unused -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all license information..."
			$textboxDetails.Text = "Get-MsolAccountSku | Format-Table"
			$TextboxResults.text = Get-MsolAccountSku | Select-Object -Property AccountSkuId, ActiveUnits, WarningUnits, ConsumedUnits, @{
				Name = 'Unused'
				Expression = {
					$_.ActiveUnits - $_.ConsumedUnits
				}
			} | Sort-Object Unused | Format-Table AccountSkuId, ActiveUnits, WarningUnits, ConsumedUnits, Unused -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$addALicenseToAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#What to do if connected to main o365 account
			If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
			{
				#$LicenseUserAdd = Read-Host "Enter the User Principal Name of the User you want to license"
				$SelectUsersFormText = "Select the User you want to add a license to"
				Show-SelectUnlicensedUsers_psf
				$LicenseUserAdd = $SelectUnlicensedUsers_comboboxSelectUnlicensedUsers
				If (!$LicenseUserAdd)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No User selected, please select a User.", "Error")
				}
				Else
				{
					#$LicenseUserAddLocation = Read-Host "Enter the 2 digit location code for the user. Example: US"
					$locationCodeText = "Select the 2 digit location code"
					Show-SelectLocationCode_psf
					$LicenseUserAddLocation = $SelectLocationCode_comboboxSelectLocationCode_SelectedItem
					If (!$LicenseUserAddLocation)
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						[System.Windows.Forms.MessageBox]::Show("No location was selected. Please enter a valid location code.", "Error")
					}
					Else
					{
						#$TextboxResults.text = Get-MsolAccountSku | Format-Table | Out-String
						#$LicenseType = Read-Host "Enter the AccountSku of the License you want to assign to this user"
						$LicensesText = "Select a license for $LicenseUserAdd"
						Show-SelectLicenses_psf
						$LicenseType = $SelectLicenses_comboboxSelectAvailableLicenses
						If (!$LicenseType)
						{
							$TextboxResults.Text = ""
							$textboxDetails.Text = ""
							[System.Windows.Forms.MessageBox]::Show("No license was selected. Please select a valid license", "Error")
						}
						Else
						{
							$FormO365AdministrationCenter.Cursor = 'WaitCursor'
							$TextboxResults.Text = "Adding $LicenseType license to $LicenseUserAdd..."
							
							$textboxDetails.Text = "Set-MsolUser -UserPrincipalName $LicenseUserAdd –UsageLocation $LicenseUserAddLocation
Set-MsolUserLicense -UserPrincipalName $LicenseUserAdd -AddLicenses $LicenseType"
							Set-MsolUser -UserPrincipalName $LicenseUserAdd –UsageLocation $LicenseUserAddLocation
							Set-MsolUserLicense -UserPrincipalName $LicenseUserAdd -AddLicenses $LicenseType
							$TextboxResults.Text = Get-MsolUser -UserPrincipalName $LicenseUserAdd | Format-List DisplayName, Licenses | Out-String -Width 2147483647
							$FormO365AdministrationCenter.Cursor = 'Default'
						}
					}
				}
			}
			#What to do if connected to partner account
			ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
			{
				$TenantText = $PartnerComboBox.text
				
				#$LicenseUserAdd = Read-Host "Enter the User Principal Name of the User you want to license"
				$SelectUsersFormText = "Select the user you want to add a license to"
				Show-SelectUnlicensedUsers_psf
				$LicenseUserAdd = $SelectUnlicensedUsers_comboboxSelectUnlicensedUsers
				If (!$LicenseUserAdd)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No User selected, please select a User.", "Error")
				}
				Else
				{
					#$LicenseUserAddLocation = Read-Host "Enter the 2 digit location code for the user. Example: US"
					$locationCodeText = "Select the 2 digit location code"
					Show-SelectLocationCode_psf
					$LicenseUserAddLocation = $SelectLocationCode_comboboxSelectLocationCode_SelectedItem
					If (!$LicenseUserAddLocation)
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						[System.Windows.Forms.MessageBox]::Show("No location was selected. Please enter a valid location code.", "Error")
					}
					Else
					{
						#$TextboxResults.text = Get-MsolAccountSku -TenantId $PartnerComboBox.SelectedItem.TenantID | Format-Table | Out-String
						#$LicenseType = Read-Host "Enter the AccountSku of the License you want to assign to this user"
						$LicensesText = "Select a license for $LicenseUserAdd"
						Show-SelectLicenses_psf
						$LicenseType = $SelectLicenses_comboboxSelectAvailableLicenses
						If (!$LicenseType)
						{
							$TextboxResults.Text = ""
							$textboxDetails.Text = ""
							[System.Windows.Forms.MessageBox]::Show("No license was selected. Please select a valid license", "Error")
						}
						Else
						{
							$FormO365AdministrationCenter.Cursor = 'WaitCursor'
							$TextboxResults.Text = "Adding $LicenseType license to $LicenseUserAdd..."
							$textboxDetails.Text = "Set-MsolUser -TenantId $TenantText -UserPrincipalName $LicenseUserAdd –UsageLocation $LicenseUserAddLocation
Set-MsolUserLicense -TenantId $PartnerComboBox.SelectedItem.TenantID -UserPrincipalName $LicenseUserAdd -AddLicenses $LicenseType"
							Set-MsolUser -TenantId $PartnerComboBox.SelectedItem.TenantID -UserPrincipalName $LicenseUserAdd –UsageLocation $LicenseUserAddLocation
							Set-MsolUserLicense -TenantId $PartnerComboBox.SelectedItem.TenantID -UserPrincipalName $LicenseUserAdd -AddLicenses $LicenseType
							$TextboxResults.Text = Get-MsolUser -TenantId $PartnerComboBox.SelectedItem.TenantID -UserPrincipalName $LicenseUserAdd | Format-List DisplayName, Licenses | Out-String -Width 2147483647
							$FormO365AdministrationCenter.Cursor = 'Default'
						}
					}
				}
			}
			Else
			{
				#$LicenseUserAdd = Read-Host "Enter the User Principal Name of the User you want to license"
				$SelectUsersFormText = "Select the user you want to add a license to"
				Show-SelectUnlicensedUsers_psf
				$LicenseUserAdd = $SelectUnlicensedUsers_comboboxSelectUnlicensedUsers
				If (!$LicenseUserAdd)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No User selected, please select a User.", "Error")
				}
				Else
				{
					#$LicenseUserAddLocation = Read-Host "Enter the 2 digit location code for the user. Example: US"
					$locationCodeText = "Select the 2 digit location code"
					Show-SelectLocationCode_psf
					$LicenseUserAddLocation = $SelectLocationCode_comboboxSelectLocationCode_SelectedItem
					If (!$LicenseUserAddLocation)
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						[System.Windows.Forms.MessageBox]::Show("No location was selected. Please enter a valid location code.", "Error")
					}
					Else
					{
						#$TextboxResults.text = Get-MsolAccountSku | Format-Table | Out-String
						#$LicenseType = Read-Host "Enter the AccountSku of the License you want to assign to this user"
						$LicensesText = "Select a license for $LicenseUserAdd"
						Show-SelectLicenses_psf
						$LicenseType = $SelectLicenses_comboboxSelectAvailableLicenses
						If (!$LicenseType)
						{
							$TextboxResults.Text = ""
							$textboxDetails.Text = ""
							[System.Windows.Forms.MessageBox]::Show("No license was selected. Please select a valid license", "Error")
						}
						Else
						{
							$FormO365AdministrationCenter.Cursor = 'WaitCursor'
							$TextboxResults.Text = "Adding $LicenseType license to $LicenseUserAdd..."
							
							$textboxDetails.Text = "Set-MsolUser -UserPrincipalName $LicenseUserAdd –UsageLocation $LicenseUserAddLocation
Set-MsolUserLicense -UserPrincipalName $LicenseUserAdd -AddLicenses $LicenseType"
							Set-MsolUser -UserPrincipalName $LicenseUserAdd –UsageLocation $LicenseUserAddLocation
							Set-MsolUserLicense -UserPrincipalName $LicenseUserAdd -AddLicenses $LicenseType
							$TextboxResults.Text = Get-MsolUser -UserPrincipalName $LicenseUserAdd | Format-List DisplayName, Licenses | Out-String -Width 2147483647
							$FormO365AdministrationCenter.Cursor = 'Default'
						}
					}
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to add a License to another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$removeLicenseFromAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#What to do if connected to main o365 account
			If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
			{
				#$RemoveLicenseFromUser = Read-Host "Enter the User Principal Name of the user you want to remove a license from"
				$SelectUsersFormText = "Select the User you want to remove a License from"
				#Call-SelectUsersForm_psf
				Show-SelectCachedUserPrincipalName_psf
				#$RemoveLicenseFromUser = $SelectUsersForm_comboboxUsers
				$RemoveLicenseFromUser = $SelectCachedUserPrincipalName_comboboxUPN
				If (!$RemoveLicenseFromUser)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid User", "Error")
				}
				Else
				{
					#$TextboxResults.Text = Get-MsolUser -UserPrincipalName $RemoveLicenseFromUser | Format-List DisplayName, Licenses | Out-String
					#$RemoveLicenseType = Read-Host "Enter the AccountSku of the license you want to remove"
					$UserLicenseText = "Select a license to remove from $RemoveLicenseFromUser"
					Show-SelectUserLicenses_psf
					$RemoveLicenseType = $SelectUserLicenses_comboboxSelectCurrentLicense
					If (!$RemoveLicenseType)
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						[System.Windows.Forms.MessageBox]::Show("No License was selected. Please select a valid License", "Error")
					}
					Else
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Removing the $RemoveLicenseType license from $RemoveLicenseFromUser..."
						
						$textboxDetails.Text = "Set-MsolUserLicense -UserPrincipalName $RemoveLicenseFromUser -RemoveLicenses $RemoveLicenseType"
						Set-MsolUserLicense -UserPrincipalName $RemoveLicenseFromUser -RemoveLicenses $RemoveLicenseType
						$TextboxResults.Text = Get-MsolUser -UserPrincipalName $RemoveLicenseFromUser | Format-List DisplayName, Licenses | Out-String -Width 2147483647
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
				}
			}
			#What to do if connected to partner account
			ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
			{
				$TenantText = $PartnerComboBox.text
				
				#$RemoveLicenseFromUser = Read-Host "Enter the User Principal Name of the user you want to remove a license from"
				$SelectUsersFormText = "Select the User you want to remove a License from"
				#Call-SelectUsersForm_psf
				Show-SelectCachedUserPrincipalName_psf
				#$RemoveLicenseFromUser = $SelectUsersForm_comboboxUsers
				$RemoveLicenseFromUser = $SelectCachedUserPrincipalName_comboboxUPN
				#$TextboxResults.Text = Get-MsolUser -TenantId $PartnerComboBox.SelectedItem.TenantID -UserPrincipalName $RemoveLicenseFromUser | Format-List DisplayName, Licenses | Out-String
				If (!$RemoveLicenseFromUser)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
				}
				Else
				{
					#$RemoveLicenseType = Read-Host "Enter the AccountSku of the license you want to remove"
					$UserLicenseText = "Select a license to remove from $RemoveLicenseFromUser"
					Show-SelectUserLicenses_psf
					$RemoveLicenseType = $SelectUserLicenses_comboboxSelectCurrentLicense
					If (!$RemoveLicenseType)
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						[System.Windows.Forms.MessageBox]::Show("No License was selected. Please select a valid License", "Error")
					}
					Else
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Removing the $RemoveLicenseType license from $RemoveLicenseFromUser..."
						
						$textboxDetails.Text = "Set-MsolUserLicense -TenantId $TenantText -UserPrincipalName $RemoveLicenseFromUser -RemoveLicenses $RemoveLicenseType"
						Set-MsolUserLicense -TenantId $PartnerComboBox.SelectedItem.TenantID -UserPrincipalName $RemoveLicenseFromUser -RemoveLicenses $RemoveLicenseType
						$TextboxResults.Text = Get-MsolUser -TenantId $PartnerComboBox.SelectedItem.TenantID -UserPrincipalName $RemoveLicenseFromUser | Format-List DisplayName, Licenses | Out-String -Width 2147483647
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
				}
			}
			Else
			{
				#$RemoveLicenseFromUser = Read-Host "Enter the User Principal Name of the user you want to remove a license from"
				$SelectUsersFormText = "Select the User you want to remove a License from"
				#Call-SelectUsersForm_psf
				Show-SelectCachedUserPrincipalName_psf
				#$RemoveLicenseFromUser = $SelectUsersForm_comboboxUsers
				$RemoveLicenseFromUser = $SelectCachedUserPrincipalName_comboboxUPN
				If (!$RemoveLicenseFromUser)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid User", "Error")
				}
				Else
				{
					#$TextboxResults.Text = Get-MsolUser -UserPrincipalName $RemoveLicenseFromUser | Format-List DisplayName, Licenses | Out-String
					#$RemoveLicenseType = Read-Host "Enter the AccountSku of the license you want to remove"
					$UserLicenseText = "Select a license to remove from $RemoveLicenseFromUser"
					Show-SelectUserLicenses_psf
					$RemoveLicenseType = $SelectUserLicenses_comboboxSelectCurrentLicense
					If (!$RemoveLicenseType)
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						[System.Windows.Forms.MessageBox]::Show("No License was selected. Please select a valid License", "Error")
					}
					Else
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Removing the $RemoveLicenseType license from $RemoveLicenseFromUser..."
						
						$textboxDetails.Text = "Set-MsolUserLicense -UserPrincipalName $RemoveLicenseFromUser -RemoveLicenses $RemoveLicenseType"
						Set-MsolUserLicense -UserPrincipalName $RemoveLicenseFromUser -RemoveLicenses $RemoveLicenseType
						$TextboxResults.Text = Get-MsolUser -UserPrincipalName $RemoveLicenseFromUser | Format-List DisplayName, Licenses | Out-String -Width 2147483647
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to remove a License for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getAUsersLicenseToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$licensedUsersText = "Select the User you want to view Licenses for"
			#Show-SelectLicensedUsers_psf
			Show-SelectCachedUserPrincipalName_psf
			#$UserLicInfo = $SelectLicensedUsers_comboboxSelectlicensedUsers
			$UserLicInfo = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$UserLicInfo)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			Else
			{
				#What to do if connected to main o365 account
				If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$textboxDetails.Text = "Get-MsolUser -UserPrincipalName $UserLicInfo | Select-Object Licenses"
					$TextboxResults.Text = Get-MsolUser -UserPrincipalName $UserLicInfo | Select-Object Licenses | Format-Table -AutoSize | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
					
				}
				#What to do if connected to partner account
				ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
				{
					$TenantText = $PartnerComboBox.text
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$textboxDetails.Text = "Get-MsolUser -UserPrincipalName $UserLicInfo -TenantId $TenantText | Select-Object Licenses"
					$TextboxResults.Text = Get-MsolUser -UserPrincipalName $UserLicInfo -TenantId $PartnerComboBox.SelectedItem.TenantID | Select-Object Licenses | Format-Table -AutoSize | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$textboxDetails.Text = "Get-MsolUser -UserPrincipalName $UserLicInfo | Select-Object Licenses"
					$TextboxResults.Text = Get-MsolUser -UserPrincipalName $UserLicInfo | Select-Object Licenses | Format-Table -AutoSize | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
					
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to view Licenses for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

#Calendar Items

$AddCalendarPermissionsForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$Calendaruser = Read-Host "Enter the UPN of the user whose Calendar you want to give access to"
			$SelectUsersFormText = "Select the user you want to modify calendar permissions for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedDisplayNames_psf
			#$Calendaruserchangepermission = $SelectUsersForm_comboboxUsers
			$Calendaruserchangepermission = $SelectCachedDisplayNames_comboboxNames
			If (!$Calendaruserchangepermission)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a user", "Error")
			}
			Else
			{
				#$Calendaruser2 = Read-Host "Enter the UPN of the user who you want to give access to"
				$SelectUsersFormText = "Select the user you want to give permission to $Calendaruserchangepermission calendar"
				#Call-SelectUsersForm_psf
				Show-SelectCachedDisplayNames_psf
				#$Calendarusergrantpermission = $SelectUsersForm_comboboxUsers
				$Calendarusergrantpermission = $SelectCachedDisplayNames_comboboxNames
				If (!$Calendarusergrantpermission)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a user", "Error")
				}
				Else
				{
					$LabelPermissionsText = "Select the level of access you want $Calendarusergrantpermission to have on $Calendaruserchangepermission  calendar"
					Show-AccessPermissions_psf
					$level = $AccessPermissions_comboboxPermissions_SelectedItem
					If (!$level)
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						[System.Windows.Forms.MessageBox]::Show("No level of access was selected, please select a valid level of access", "Error")
					}
					Else
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Adding $Calendarusergrantpermission to $Calendaruserchangepermission calender with $level permissions..."
						$textboxDetails.Text = "Add-MailboxFolderPermission -Identity ${Calendaruserchangepermission}:\calendar -user $Calendarusergrantpermission -AccessRights $level"
						Remove-MailboxFolderPermission -identity ${Calendaruserchangepermission}:\calendar -user $Calendarusergrantpermission -Confirm:$False
						Add-MailboxFolderPermission -Identity ${Calendaruserchangepermission}:\calendar -user $Calendarusergrantpermission -AccessRights $level
						$TextboxResults.Text = Get-MailboxFolderPermission -Identity ${Calendaruserchangepermission}:\calendar | Sort-Object User, AccessRights | Format-Table User, AccessRights, Identity, FolderName, IsValid -AutoSize | Out-String -Width 2147483647
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to modify Calendar Permissions for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$GetUsersCalendarPermissionsToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$CalUserPermissions = Read-Host "What user would you like calendar permissions for?"
			$SelectUsersFormText = "Select the user you want to view calendar permissions for"
			Show-SelectCachedDisplayNames_psf
			$CalUserPermissions = $SelectCachedDisplayNames_comboboxNames
			If (!$CalUserPermissions)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a user", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting $CalUserPermissions calendar permissions..."
				$textboxDetails.Text = "Get-MailboxFolderPermission -Identity ${CalUserPermissions}:\calendar | Sort-Object User, AccessRights | Format-Table User, AccessRights, Identity, FolderName, IsValid -AutoSize"
				$TextboxResults.Text = Get-MailboxFolderPermission -Identity ${CalUserPermissions}:\calendar | Sort-Object User, AccessRights | Format-Table User, AccessRights, Identity, FolderName, IsValid -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to view Calendar Permissions for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$AddASingleUserPermissionsOnAllCalendarsToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$MasterUser = Read-Host "Enter the UPN of the user you want permission on all users calendars"
			$SelectUsersFormText = "Select the user you want permission on all users calendars"
			#Call-SelectUsersForm_psf
			Show-SelectCachedDisplayNames_psf
			#$MasterUser = $SelectUsersForm_comboboxUsers
			$MasterUser = $SelectCachedDisplayNames_comboboxNames
			If (!$MasterUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a user", "Error")
			}
			Else
			{
				$LabelPermissionsText = "Select the level of access you want $MasterUser to have on all calendars"
				Show-AccessPermissions_psf
				$level2 = $AccessPermissions_comboboxPermissions_SelectedItem
				If (!$level2)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No level of access was selected, please select a valid level of access", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Adding $MasterUser to everyones calendars with $level2 permissions..."
					$textboxDetails.Text = "(Get-Mailbox) | Foreach-Object { Set-MailboxFolderPermission `$_':\Calendar' -User $MasterUser -AccessRights $level2 }"
					(Get-Mailbox) | Foreach-Object { Set-MailboxFolderPermission $_":\Calendar" -User $MasterUser -AccessRights $level2 }
					
						#(Get-Mailbox) | Foreach-Object Set-MailboxFolderPermission "$($_):\Calendar" -user $MasterUser -AccessRights $level2
					
					$TextboxResults.Text = "Successfully added $MasterUser to everyones calendars with $level2 permissions"
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to add another User on everyones calendar?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$removeAUserFromAllCalendarsToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$RemoveUserFromAll = Read-Host "Enter the UPN of the user you want to remove from all calendars"
			$SelectUsersFormText = "Select the user you want to remove from all calendars"
			#Call-SelectUsersForm_psf
			Show-SelectCachedDisplayNames_psf
			#$RemoveUserFromAll = $SelectUsersForm_comboboxUsers
			$RemoveUserFromAll = $SelectCachedDisplayNames_comboboxNames
			If (!$RemoveUserFromAll)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a user", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Removing $RemoveUserFromAll from all users calendar..."
				$textboxDetails.Text = "`$users = Get-Mailbox -ResultSize unlimited | Select-Object -ExpandProperty Alias
Foreach (`$user in `$users) { Remove-MailboxFolderPermission `${user}:\Calendar -user $RemoveUserFromAll -Confirm:`$false}﻿"
				$users = Get-Mailbox -ResultSize unlimited | Select-Object -ExpandProperty Alias
				Foreach ($user in $users)
				{
					Remove-MailboxFolderPermission "$($user):\Calendar" -user $RemoveUserFromAll -Confirm:$false
				}
				$TextboxResults.Text = "Successfully removed $RemoveUserFromAll from all users calendar..."
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		#Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to remove another User from everyones Calendar?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$removeAUserFromSomeonesCalendarToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$Calendaruserremove = Read-Host "Enter the UPN of the user whose calendar you want to remove access to"
			$SelectUsersFormText = "Select the user you want to modify calendar permissions for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedDisplayNames_psf
			#$GlobalCalUser = $SelectUsersForm_comboboxUsers
			$GlobalCalUser = $SelectCachedDisplayNames_comboboxNames
			If (!$GlobalCalUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a user", "Error")
			}
			Else
			{
				#$Calendaruser2remove = Read-Host "Enter the UPN of the user who you want to remove access"
				$CalendarPermissionsText = "Select the user you want to remove from $GlobalCalUser calendar"
				Show-SelectUserCalendarPermissions_psf
				$Calendaruser2remove = $SelectUserCalendarPermissions_comboboxSelectCalendarPermissions
				If (!$Calendaruser2remove)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a user", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Removing $Calendaruser2remove from $GlobalCalUser calendar..."
					$textboxDetails.Text = "Remove-MailboxFolderPermission -Identity ${GlobalCalUser}:\calendar -user $Calendaruser2remove"
					Remove-MailboxFolderPermission -Identity ${GlobalCalUser}:\calendar -user $Calendaruser2remove
					$TextboxResults.Text = Get-MailboxFolderPermission -Identity ${GlobalCalUser}:\calendar | Sort-Object User, AccessRights | Format-Table User, AccessRights, Identity, FolderName, IsValid -AutoSize | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to remove another User from someones Calendar?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

#Calendar Repair

$disableCalendarRepairForAllUsersToolStripMenuItem_Click = {
	$OUTPUT = [System.Windows.Forms.MessageBox]::Show("Are you sure you want to disable Calendar Repair for all users?", "Warning!", 4)
	If ($OUTPUT -eq "YES")
	{
		Try
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Disabling Calendar Repair for all mailboxes..."
			$TextboxDetails.Text = "Get-mailbox -ResultSize unlimited | Set-Mailbox -CalendarRepairDisabled `$true"
			Get-mailbox -ResultSize unlimited | Set-Mailbox -CalendarRepairDisabled $true
			$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Select-Object DisplayName, CalendarRepairDisabled | Sort-Object DisplayName | Format-Table -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$TextboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
	}
	Else
	{
		[System.Windows.Forms.MessageBox]::Show("Calendar Repair has not been modified", "Info")
	}
	
	
}

$enableCalendarRepairForAllUsersToolStripMenuItem_Click = {
	$OUTPUT = [System.Windows.Forms.MessageBox]::Show("Are you sure you want to enable Calendar Repair for all users?", "Warning!", 4)
	If ($OUTPUT -eq "YES")
	{
		Try
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Enabling Calendar Repair for all mailboxes..."
			$TextboxDetails.Text = "Get-mailbox -ResultSize unlimited | Set-Mailbox -CalendarRepairDisabled `$false"
			Get-mailbox -ResultSize unlimited | Set-Mailbox -CalendarRepairDisabled $false
			$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Select-Object DisplayName, CalendarRepairDisabled | Sort-Object DisplayName | Format-Table -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$TextboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
	}
	Else
	{
		[System.Windows.Forms.MessageBox]::Show("Calendar Repair has not been modified", "Info")
	}
	
}

$disableCalendarRepairForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$SelectUsersFormText = "Select the user you want disable Calendar Repair for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedDisplayNames_psf
			#$DisableCalRepairUser = $SelectUsersForm_comboboxUsers
			$DisableCalRepairUser = $SelectCachedDisplayNames_comboboxNames
			If (!$DisableCalRepairUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Disabling Calendar Repair for $DisableCalRepairUser..."
				$TextboxDetails.Text = "Set-Mailbox -identity $DisableCalRepairUser -CalendarRepairDisabled `$true"
				Set-Mailbox -identity $DisableCalRepairUser -CalendarRepairDisabled $true
				$TextboxResults.Text = Get-Mailbox -identity $DisableCalRepairUser | Select-Object DisplayName, CalendarRepairDisabled | Format-Table -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$TextboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to disable Calendar Repair for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$enableCalendarRepairForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$SelectUsersFormText = "Select the user you want disable Calendar Repair for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedDisplayNames_psf
			#$EnableCalRepairUser = $SelectUsersForm_comboboxUsers
			$EnableCalRepairUser = $SelectCachedDisplayNames_comboboxNames
			If (!$EnableCalRepairUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a user", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Disabling Calendar Repair for $EnableCalRepairUser..."
				$TextboxDetails.Text = "Set-Mailbox -identity $EnableCalRepairUser -CalendarRepairDisabled `$false"
				Set-Mailbox -identity $EnableCalRepairUser -CalendarRepairDisabled $false
				$TextboxResults.Text = Get-Mailbox -identity $EnableCalRepairUser | Select-Object DisplayName, CalendarRepairDisabled | Format-Table -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$TextboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to enable Calendar Repair for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getAllUsersWithCalendarRepairEnabledToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting all users that have Calendar Repair enabled..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Where-Object { `$_.CalendarRepairDisabled -eq `$false | Select-Object DisplayName, CalendarRepairDisabled | Sort-Object DisplayName | Format-Table -AutoSize"
		$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Where-Object { $_.CalendarRepairDisabled -eq $false } | Select-Object DisplayName, CalendarRepairDisabled | Sort-Object DisplayName | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$TextboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getAllUsersWithCalendarRepairDisabledToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting all users that have Calendar Repair enabled..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Where-Object { `$_.CalendarRepairDisabled -eq `$true | Select-Object DisplayName, CalendarRepairDisabled | Sort-Object DisplayName | Format-Table -AutoSize"
		$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Where-Object { $_.CalendarRepairDisabled -eq $true } | Select-Object DisplayName, CalendarRepairDisabled | Sort-Object DisplayName | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$TextboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getCalendarRepairInfoForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$SelectUsersFormText = "Select the User you want get Calendar Repair info for"
			Show-SelectCachedDisplayNames_psf
			#$CalRepairUserinfo = $SelectUsersForm_comboboxUsers
			$CalRepairUserinfo = $SelectCachedDisplayNames_comboboxNames
			If (!$CalRepairUserinfo)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting Calendar Repair info for $CalRepairUserinfo..."
				$TextboxDetails.Text = "Get-Mailbox -identity $CalRepairUserinfo | Select-Object DisplayName, CalendarRepairDisabled"
				$TextboxResults.Text = Get-Mailbox -identity $CalRepairUserinfo | Select-Object DisplayName, CalendarRepairDisabled | Format-Table -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$TextboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get Calendar Repair status for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

#Clutter

$disableClutterForAllToolStripMenuItem_Click = {
	$TenantStatus = Get-ItemProperty 'HKCU:\Software\O365 Admin Center' -Name TenantStatus | Select-Object -ExpandProperty TenantStatus
	If ($TenantStatus -eq 0)
	{
		try
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Disabling Clutter for all users..."
			$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Set-Clutter -Enable `$false"
			$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Get-Clutter | Sort-Object MailboxIdentity | Format-Table IsEnabled, MailboxIdentity -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
	}
	elseif ($TenantStatus -eq 1)
	{
		[System.Windows.Forms.MessageBox]::Show("Microsoft currently does not support configuring Clutter when connected to a tenant", "Info")
	}
}

$enableClutterForAllToolStripMenuItem_Click = {
	$TenantStatus = Get-ItemProperty 'HKCU:\Software\O365 Admin Center' -Name TenantStatus | Select-Object -ExpandProperty TenantStatus
	If ($TenantStatus -eq 0)
	{
		try
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Enabling Clutter for all users..."
			$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Set-Clutter -Enable `$True | Format-List MailboxIdentity, IsEnabled -AutoSize"
			$TextboxResults.text = Get-Mailbox -ResultSize unlimited | Set-Clutter -Enable $True | Format-Table MailboxIdentity, IsEnabled -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
	}
	elseif ($TenantStatus -eq 1)
	{
		[System.Windows.Forms.MessageBox]::Show("Microsoft currently does not support configuring Clutter when connected to a tenant", "Info")
	}
}

$enableClutterForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$TenantStatus = Get-ItemProperty 'HKCU:\Software\O365 Admin Center' -Name TenantStatus | Select-Object -ExpandProperty TenantStatus
			If ($TenantStatus -eq 0)
			{
				
				#$UserEnableClutter = Read-Host "Which user would you like to enable Clutter for?"
				$SelectUsersFormText = "Select the User you want to enable Clutter for"
				#Call-SelectUsersForm_psf
				Show-SelectCachedDisplayNames_psf
				#$GlobalUPNenableClutter = $SelectUsersForm_comboboxUsers
				$GlobalUPNenableClutter = $SelectCachedDisplayNames_comboboxNames
				If (!$GlobalUPNenableClutter)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Enabling Clutter for $GlobalUPNenableClutter..."
					$textboxDetails.Text = "Get-Mailbox $GlobalUPNenableClutter | Set-Clutter -Enable `$True"
					$TextboxResults.text = Get-Mailbox $GlobalUPNenableClutter | Set-Clutter -Enable $True | Format-Table -AutoSize | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
				
			}
			elseif ($TenantStatus -eq 1)
			{
				[System.Windows.Forms.MessageBox]::Show("Microsoft currently does not support configuring Clutter when connected to a tenant", "Info")
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to enable Clutter for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$disableClutterForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$TenantStatus = Get-ItemProperty 'HKCU:\Software\O365 Admin Center' -Name TenantStatus | Select-Object -ExpandProperty TenantStatus
			If ($TenantStatus -eq 0)
			{
				
				#$UserDisableClutter = Read-Host "Which user would you like to disable Clutter for?"
				$SelectUsersFormText = "Select the User you want to disable Clutter for"
				#Call-SelectUsersForm_psf
				Show-SelectCachedDisplayNames_psf
				#$GlobalUPNdisableClutter = $SelectUsersForm_comboboxUsers
				$GlobalUPNdisableClutter = $SelectCachedDisplayNames_comboboxNames
				If (!$GlobalUPNdisableClutter)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Disabling Clutter for $GlobalUPNdisableClutter..."
					$textboxDetails.Text = "Set-Clutter -Identity $GlobalUPNdisableClutter -Enable `$False"
					$TextboxResults.text = Set-Clutter -Identity $GlobalUPNdisableClutter -Enable $False | Format-Table MailboxIdentity, IsEnabled -AutoSize | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
			elseif ($TenantStatus -eq 1)
			{
				[System.Windows.Forms.MessageBox]::Show("Microsoft currently does not support configuring Clutter when connected to a tenant", "Info")
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to Disable Clutter for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getClutterInfoForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$TenantStatus = Get-ItemProperty 'HKCU:\Software\O365 Admin Center' -Name TenantStatus | Select-Object -ExpandProperty TenantStatus
			If ($TenantStatus -eq 0)
			{
				#$GetCluterInfoUser = Read-Host "What user would you like to view Clutter information about?"
				$SelectUsersFormText = "Select the User you want to get Clutter information for"
				#Call-SelectUsersForm_psf
				Show-SelectCachedDisplayNames_psf
				#$GlobalUPNinfoClutter = $SelectUsersForm_comboboxUsers
				$GlobalUPNinfoClutter = $SelectCachedDisplayNames_comboboxNames
				If (!$GlobalUPNinfoClutter)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Getting Clutter information for $GlobalUPNinfoClutter..."
					$textboxDetails.Text = "Get-Clutter -Identity $GlobalUPNinfoClutter"
					$TextboxResults.Text = Get-Clutter -Identity $GlobalUPNinfoClutter | Format-Table MailboxIdentity, IsEnabled -AutoSize | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
			elseif ($TenantStatus -eq 1)
			{
				[System.Windows.Forms.MessageBox]::Show("Microsoft currently does not support configuring/viewing Clutter when connected to a tenant", "Info")
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get Clutter status for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

#Recycle Bin

$displayAllDeletedUsersToolStripMenuItem_Click = {
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all deleted users..."
			$textboxDetails.Text = "Get-MsolUser -All -ReturnDeletedUsers |  Sort-Object UserprincipalName | Format-Table UserPrincipalName, ObjectID -Autosize "
			$TextboxResults.Text = Get-MsolUser -All -ReturnDeletedUsers | Sort-Object UserprincipalName | Format-Table UserPrincipalName, ObjectID -Autosize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all deleted users..."
			$textboxDetails.Text = "Get-MsolUser -All -TenantId $TenantText -ReturnDeletedUsers |  Sort-Object UserprincipalName | Format-Table UserPrincipalName, ObjectID -Autosize "
			$TextboxResults.Text = Get-MsolUser -All -TenantId $PartnerComboBox.SelectedItem.TenantID -ReturnDeletedUsers | Sort-Object UserPrincipalName | Format-Table UserPrincipalName, ObjectID -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all deleted users..."
			$textboxDetails.Text = "Get-MsolUser -All -ReturnDeletedUsers |  Sort-Object UserprincipalName | Format-Table UserPrincipalName, ObjectID -Autosize "
			$TextboxResults.Text = Get-MsolUser -All -ReturnDeletedUsers | Sort-Object UserprincipalName | Format-Table UserPrincipalName, ObjectID -Autosize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$deleteAllUsersInRecycleBinToolStripMenuItem_Click = {
	Try
	{
		$OUTPUT = [System.Windows.Forms.MessageBox]::Show("Are you sure you want to delete all users in the recycle bin?.", "Warning!", 4)
		If ($OUTPUT -eq "YES")
		{
			#What to do if connected to main o365 account
			If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Deleting all users in the recycle bin..."
				$textboxDetails.Text = "Get-MsolUser -ReturnDeletedUsers -All | Remove-MsolUser -RemoveFromRecycleBin –Force"
				$TextboxResults.Text = Get-MsolUser -ReturnDeletedUsers -All | Remove-MsolUser -RemoveFromRecycleBin –Force | Format-List | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			#What to do if connected to partner account
			ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
			{
				$TenantText = $PartnerComboBox.text
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Deleting all users in the recycle bin..."
				$textboxDetails.Text = "Get-MsolUser -TenantId $TenantText -ReturnDeletedUsers -All | Remove-MsolUser -RemoveFromRecycleBin –Force"
				$TextboxResults.Text = Get-MsolUser -TenantId $PartnerComboBox.SelectedItem.TenantID -ReturnDeletedUsers -All | Remove-MsolUser -RemoveFromRecycleBin –Force | Format-List | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Deleting all users in the recycle bin..."
				$textboxDetails.Text = "Get-MsolUser -ReturnDeletedUsers -All | Remove-MsolUser -RemoveFromRecycleBin –Force"
				$TextboxResults.Text = Get-MsolUser -ReturnDeletedUsers -All | Remove-MsolUser -RemoveFromRecycleBin –Force | Format-List | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Else
		{
			[System.Windows.Forms.MessageBox]::Show("All users in the recycle bin have not been deleted", "Info")
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
	
}

$deleteSpecificUsersInRecycleBinToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$DeletedUserRecycleBin = Read-Host "Please enter the User Principal Name of the user you want to permanently delete"
			$AliasRecycleBinText = "Select the User you want to delete from the Recycle Bin"
			Show-SelectUserRecycleBin_psf
			$GlobalUPNdeleteRecycle = $SelectUserRecycleBin_comboboxSelectRecycleBin
			$OUTPUT = [System.Windows.Forms.MessageBox]::Show("Are you sure you want to delete $GlobalUPNdeleteRecycle ?", "Warning!", 4)
			If ($OUTPUT -eq "YES")
			{
				#What to do if connected to main o365 account
				If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Deleting  $GlobalUPNdeleteRecycle from the Recycle Bin..."
					$textboxDetails.Text = "Remove-MsolUser -UserPrincipalName $GlobalUPNdeleteRecycle -RemoveFromRecycleBin -Force"
					Remove-MsolUser -UserPrincipalName $GlobalUPNdeleteRecycle -RemoveFromRecycleBin -Force
					$TextboxResults.Text = "Getting users in the recycle bin..."
					$TextboxResults.Text = Get-MsolUser -ReturnDeletedUsers | Sort-Object UserprincipalName | Format-Table UserPrincipalName, ObjectID -Autosize | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
				#What to do if connected to partner account
				ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
				{
					$TenantText = $PartnerComboBox.text
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Deleting  $GlobalUPNdeleteRecycle from the Recycle Bin..."
					$textboxDetails.Text = "Remove-MsolUser -TenantId $TenantText -UserPrincipalName $GlobalUPNdeleteRecycle -RemoveFromRecycleBin -Force"
					Remove-MsolUser -TenantId $PartnerComboBox.SelectedItem.TenantID -UserPrincipalName $GlobalUPNdeleteRecycle -RemoveFromRecycleBin -Force
					$TextboxResults.Text = "Getting users in the recycle bin..."
					$TextboxResults.Text = Get-MsolUser -TenantId $PartnerComboBox.SelectedItem.TenantID -ReturnDeletedUsers | Sort-Object UserprincipalName | Format-Table UserPrincipalName, ObjectID -Autosize | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Deleting  $GlobalUPNdeleteRecycle from the Recycle Bin..."
					$textboxDetails.Text = "Remove-MsolUser -UserPrincipalName $GlobalUPNdeleteRecycle -RemoveFromRecycleBin -Force"
					Remove-MsolUser -UserPrincipalName $GlobalUPNdeleteRecycle -RemoveFromRecycleBin -Force
					$TextboxResults.Text = "Getting users in the recycle bin..."
					$TextboxResults.Text = Get-MsolUser -ReturnDeletedUsers | Sort-Object UserprincipalName | Format-Table UserPrincipalName, ObjectID -Autosize | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
			Else
			{
				[System.Windows.Forms.MessageBox]::Show("$GlobalUPNdeleteRecycle was not deleted", "Info")
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to delete another User from the Recycle Bin?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$restoreDeletedUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$RestoredUserFromRecycleBin = Read-Host "Enter the User Principal Name of the user you want to restore"
			$SelectUsersFormText = "Select the User you want to restore from the Recycle Bin"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPNrestoreuser = $SelectUsersForm_comboboxUsers
			$GlobalUPNrestoreuser = $SelectCachedUserPrincipalName_comboboxUPN
			#What to do if connected to main o365 account
			If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Restoring $GlobalUPNrestoreuser from the Recycle Bin..."
				$textboxDetails.Text = "Restore-MsolUser –UserPrincipalName $GlobalUPNrestoreuser -AutoReconcileProxyConflicts"
				Restore-MsolUser –UserPrincipalName $GlobalUPNrestoreuser -AutoReconcileProxyConflicts
				$TextboxResults.Text = "Getting list of deleted users"
				$TextboxResults.Text = Get-MsolUser -ReturnDeletedUsers | Sort-Object UserprincipalName | Format-Table UserPrincipalName, ObjectID -Autosize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			#What to do if connected to partner account
			ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
			{
				$TenantText = $PartnerComboBox.text
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Restoring $GlobalUPNrestoreuser from the Recycle Bin..."
				$textboxDetails.Text = "Restore-MsolUser -TenantId $TenantText –UserPrincipalName $GlobalUPNrestoreuser -AutoReconcileProxyConflicts"
				Restore-MsolUser -TenantId $PartnerComboBox.SelectedItem.TenantID –UserPrincipalName $GlobalUPNrestoreuser -AutoReconcileProxyConflicts
				$TextboxResults.Text = "Getting list of deleted users"
				$TextboxResults.Text = Get-MsolUser -TenantId $PartnerComboBox.SelectedItem.TenantID -ReturnDeletedUsers | Sort-Object UserprincipalName | Format-Table UserPrincipalName, ObjectID -Autosize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Restoring $GlobalUPNrestoreuser from the Recycle Bin..."
				$textboxDetails.Text = "Restore-MsolUser –UserPrincipalName $GlobalUPNrestoreuser -AutoReconcileProxyConflicts"
				Restore-MsolUser –UserPrincipalName $GlobalUPNrestoreuser -AutoReconcileProxyConflicts
				$TextboxResults.Text = "Getting list of deleted users"
				$TextboxResults.Text = Get-MsolUser -ReturnDeletedUsers | Sort-Object UserprincipalName | Format-Table UserPrincipalName, ObjectID -Autosize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to restore another User from the Recycle Bin?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$restoreAllDeletedUsersToolStripMenuItem_Click = {
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Restoring all deleted users..."
			$textboxDetails.Text = "Get-MsolUser -All -ReturnDeletedUsers | Restore-MsolUser"
			Get-MsolUser -ReturnDeletedUsers -All | Restore-MsolUser
			$TextboxResults.Text = "Users that were deleted have now been restored"
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Restoring all deleted users..."
			$textboxDetails.Text = "Get-MsolUser -ReturnDeletedUsers -TenantID $TenantText -All | Restore-MsolUser"
			Get-MsolUser -ReturnDeletedUsers -TenantId $PartnerComboBox.SelectedItem.TenantID -All | Restore-MsolUser -TenantId $PartnerComboBox.SelectedItem.TenantID
			$TextboxResults.Text = "Users that were deleted have now been restored"
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Restoring all deleted users..."
			$textboxDetails.Text = "Get-MsolUser -All -ReturnDeletedUsers | Restore-MsolUser"
			Get-MsolUser -ReturnDeletedUsers -All | Restore-MsolUser
			$TextboxResults.Text = "Users that were deleted have now been restored"
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

#Quarentine

$getQuarantineBetweenDatesToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$StartDateQuarentine = Read-Host "Enter the beginning date. (Format MM/DD/YYYY)"
			$StartDateText = "Select the beginning date to view quarantine"
			$StartDateFormText = "Start Date"
			Show-SelectDatePicker_psf
			$startdate = $SelectDatePicker_monthcalendar1
			$StartDateQuarentine = "$startdate".trimend('00:00:00')
			If (!$startdate)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No beginning date was selected, please enter a beginning date", "Error")
			}
			Else
			{
				#$EndDateQuarentine = Read-Host "Enter the end date. (Format MM/DD/YYYY)"
				$StartDateText = "Select the ending date to view quarantine"
				$StartDateFormText = "End Date"
				Show-SelectDatePicker_psf
				$enddate = $SelectDatePicker_monthcalendar1
				$EndDateQuarentine = "$enddate".trimend('00:00:00')
				If (!$enddate)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No ending date was selected, please enter a ending date", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Getting quarantine between $StartDateQuarentine and $EndDateQuarentine..."
					$textboxDetails.Text = "Get-QuarantineMessage -StartReceivedDate $StartDateQuarentine -EndReceivedDate $EndDateQuarentine | Format-List ReceivedTime, SenderAddress, RecipientAddress, Subject, Size, Type, Expires, QuarantinedUser, ReleasedUser, Direction "
					$TextboxResults.Text = Get-QuarantineMessage -StartReceivedDate $StartDateQuarentine -EndReceivedDate $EndDateQuarentine | Format-List ReceivedTime, SenderAddress, RecipientAddress, Subject, Size, Type, Expires, QuarantinedUser, ReleasedUser, Direction | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get the Quarentine for another time?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getQuarantineFromASpecificUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$QuarentineFromUser = Read-Host "Enter the E-mail Address you want to see quarentine from"
			If (!$QuarentineFromUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No E-mail Address was entered, please enter a valid E-mail Address", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting Quarantine sent from $QuarentineFromUser ..."
				$textboxDetails.Text = "Get-QuarantineMessage -SenderAddress $QuarentineFromUser | Format-List ReceivedTime, SenderAddress, RecipientAddress, Subject, Size, Type, Expires, QuarantinedUser, ReleasedUser, Direction"
				$TextboxResults.Text = Get-QuarantineMessage -SenderAddress $QuarentineFromUser | Format-List ReceivedTime, SenderAddress, RecipientAddress, Subject, Size, Type, Expires, QuarantinedUser, ReleasedUser, Direction | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to view the Quarantine from a different E-mail Address?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getQuarantineToASpecificUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$QuarentineInfoForUser = Read-Host "Enter the email of the user you want to view quarantine for"
			$AllUsersEmailsText = "Select the E-mail Address or enter in one you want to view Quarantine for"
			Show-SelectAllEmailPrimaryAddresses_psf
			$QuarentineInfoForUser = $SelectAllEmailPrimaryAddresses_comboboxSelectAllEmailAddresses
			If (!$QuarentineInfoForUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No E-mail Address was selected, please select a valid E-mail Address", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting Auarantine sent to $QuarentineInfoForUser..."
				$textboxDetails.Text = " Get-QuarantineMessage -RecipientAddress $QuarentineInfoForUser | Format-List ReceivedTime, SenderAddress, Subject, Size, Type, Expires, QuarantinedUser, ReleasedUser, Direction"
				$TextboxResults.Text = Get-QuarantineMessage -RecipientAddress $QuarentineInfoForUser | Format-List ReceivedTime, SenderAddress, Subject, Size, Type, Expires, QuarantinedUser, ReleasedUser, Direction | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to view the Quarantine sent to another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

#Passwords

$enableStrongPasswordForAUserToolStripMenuItem_Click = {
	Do
	{
		#$UserEnableStrongPasswords = Read-Host "Enter the User Principal Name of the user you want to enable strong password policy for"
		$SelectUsersFormText = "Select the User you want to enable Strong Password Policy for"
		#Call-SelectUsersForm_psf
		Show-SelectCachedUserPrincipalName_psf
		#$GlobalUPNespp = $SelectUsersForm_comboboxUsers
		$GlobalUPNespp = $SelectCachedUserPrincipalName_comboboxUPN
		If (!$GlobalUPNespp)
		{
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
		}
		Else
		{
			#What to do if connected to main o365 account
			If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Enabling Strong Password Policy for $GlobalUPNespp..."
				$textboxDetails.Text = "Set-MsolUser -UserPrincipalName $GlobalUPNespp -StrongPasswordRequired `$True"
				Set-MsolUser -UserPrincipalName $GlobalUPNespp -StrongPasswordRequired $True
				$TextboxResults.text = Get-MsolUser -UserPrincipalName $GlobalUPNespp | Format-List UserPrincipalName, StrongPasswordRequired | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			#What to do if connected to partner account
			ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
			{
				$TenantText = $PartnerComboBox.text
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Enabling Strong Password Policy for $GlobalUPNespp..."
				$textboxDetails.Text = "Set-MsolUser -UserPrincipalName $GlobalUPNespp -StrongPasswordRequired `$True -TenantId $TenantText"
				Set-MsolUser -UserPrincipalName $GlobalUPNespp -StrongPasswordRequired $True -TenantId $PartnerComboBox.SelectedItem.TenantID
				$TextboxResults.text = Get-MsolUser -UserPrincipalName $GlobalUPNespp -TenantId $PartnerComboBox.SelectedItem.TenantID | Format-List UserPrincipalName, StrongPasswordRequired | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Enabling Strong Password Policy for $GlobalUPNespp..."
				$textboxDetails.Text = "Set-MsolUser -UserPrincipalName $GlobalUPNespp -StrongPasswordRequired `$True"
				Set-MsolUser -UserPrincipalName $GlobalUPNespp -StrongPasswordRequired $True
				$TextboxResults.text = Get-MsolUser -UserPrincipalName $GlobalUPNespp | Format-List UserPrincipalName, StrongPasswordRequired | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to enable Strong Password Policy for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getAllUsersStrongPasswordPolicyInfoToolStripMenuItem_Click = {
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting strong password policy for all users..."
			$textboxDetails.Text = "Get-MsolUser -All | Sort-Object DisplayName | Format-Table DisplayName, strongpasswordrequired -AutoSize"
			$TextboxResults.text = Get-MsolUser -All | Sort-Object DisplayName | Format-Table  DisplayName, strongpasswordrequired -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting strong password policy for all users..."
			$textboxDetails.Text = "Get-MsolUser -All -TenantId $TenantText  | Sort-Object DisplayName | Format-Table  DisplayName, strongpasswordrequired -AutoSize"
			$TextboxResults.text = Get-MsolUser -All -TenantId $PartnerComboBox.SelectedItem.TenantID | Sort-Object DisplayName | Format-Table DisplayName, strongpasswordrequired -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting strong password policy for all users..."
			$textboxDetails.Text = "Get-MsolUser -All | Sort-Object DisplayName | Format-Table DisplayName, strongpasswordrequired -AutoSize"
			$TextboxResults.text = Get-MsolUser -All | Sort-Object DisplayName | Format-Table  DisplayName, strongpasswordrequired -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$disableStrongPasswordsForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$UserdisableStrongPasswords = Read-Host "Enter the User Principal Name of the user you want to disable strong password policy for"
			$SelectUsersFormText = "Select the User you want to disable Strong Password Policy for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPNdspp = $SelectUsersForm_comboboxUsers
			$GlobalUPNdspp = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$GlobalUPNdspp)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			Else
			{
				#What to do if connected to main o365 account
				If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Disabling Strong Password Policy for $GlobalUPNdspp..."
					$textboxDetails.Text = "Set-MsolUser -UserPrincipalName $GlobalUPNdspp -StrongPasswordRequired `$False"
					Set-MsolUser -UserPrincipalName $GlobalUPNdspp -StrongPasswordRequired $False
					$TextboxResults.text = Get-MsolUser -UserPrincipalName $GlobalUPNdspp | Format-List UserPrincipalName, StrongPasswordRequired | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
				#What to do if connected to partner account
				ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
				{
					$TenantText = $PartnerComboBox.text
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Disabling Strong Password Policy for $GlobalUPNdspp..."
					$textboxDetails.Text = "Set-MsolUser -UserPrincipalName $GlobalUPNdspp -StrongPasswordRequired `$False -TenantID $TenantText"
					Set-MsolUser -UserPrincipalName $GlobalUPNdspp -StrongPasswordRequired $False -TenantId $PartnerComboBox.SelectedItem.TenantID
					$TextboxResults.text = Get-MsolUser -UserPrincipalName $GlobalUPNdspp -TenantId $PartnerComboBox.SelectedItem.TenantID | Format-List UserPrincipalName, StrongPasswordRequired | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Disabling Strong Password Policy for $GlobalUPNdspp..."
					$textboxDetails.Text = "Set-MsolUser -UserPrincipalName $GlobalUPNdspp -StrongPasswordRequired `$False"
					Set-MsolUser -UserPrincipalName $GlobalUPNdspp -StrongPasswordRequired $False
					$TextboxResults.text = Get-MsolUser -UserPrincipalName $GlobalUPNdspp | Format-List UserPrincipalName, StrongPasswordRequired | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to disable Strong Password Policy for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$enableStrongPasswordsForAllToolStripMenuItem_Click = {
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Enabling strong password policy for all users..."
			$textboxDetails.Text = "Get-MsolUser -All | Set-MsolUser -StrongPasswordRequired `$True"
			Get-MsolUser -All | Set-MsolUser -StrongPasswordRequired $True
			$TextboxResults.text = Get-MsolUser -All | Sort-Object DisplayName | Format-Table  DisplayName, strongpasswordrequired -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Enabling strong password policy for all users..."
			$textboxDetails.Text = "Get-MsolUser -All -TenantId $TenantText | Set-MsolUser -StrongPasswordRequired -TenantId $TenantText `$True"
			Get-MsolUser -All -TenantId $PartnerComboBox.SelectedItem.TenantID | Set-MsolUser -StrongPasswordRequired $True -TenantId $PartnerComboBox.SelectedItem.TenantID
			$TextboxResults.text = Get-MsolUser -All -TenantId $PartnerComboBox.SelectedItem.TenantID | Sort-Object DisplayName | Format-Table  DisplayName, strongpasswordrequired -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Enabling strong password policy for all users..."
			$textboxDetails.Text = "Get-MsolUser -All | Set-MsolUser -StrongPasswordRequired `$True"
			Get-MsolUser -All | Set-MsolUser -StrongPasswordRequired $True
			$TextboxResults.text = Get-MsolUser -All | Sort-Object DisplayName | Format-Table  DisplayName, strongpasswordrequired -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$disableStrongPasswordsForAllToolStripMenuItem_Click = {
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Disabling strong password policy for all users..."
			$textboxDetails.Text = "Get-MsolUser -All | Set-MsolUser -StrongPasswordRequired `$False"
			Get-MsolUser -All | Set-MsolUser -StrongPasswordRequired $False
			$TextboxResults.text = Get-MsolUser -All | Sort-Object DisplayName | Format-Table  DisplayName, strongpasswordrequired -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Disabling strong password policy for all users..."
			$textboxDetails.Text = "Get-MsolUser -All -TenantId $TenantText | Set-MsolUser -StrongPasswordRequired `$False -TenantId $TenantText"
			Get-MsolUser -All -TenantId $PartnerComboBox.SelectedItem.TenantID | Set-MsolUser -StrongPasswordRequired $False -TenantId $PartnerComboBox.SelectedItem.TenantID
			$TextboxResults.text = Get-MsolUser -All -TenantId $PartnerComboBox.SelectedItem.TenantID | Sort-Object DisplayName | Format-Table  DisplayName, strongpasswordrequired -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Disabling strong password policy for all users..."
			$textboxDetails.Text = "Get-MsolUser -All | Set-MsolUser -StrongPasswordRequired `$False"
			Get-MsolUser -All | Set-MsolUser -StrongPasswordRequired $False
			$TextboxResults.text = Get-MsolUser -All | Sort-Object DisplayName | Format-Table  DisplayName, strongpasswordrequired -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$resetPasswordForAUserToolStripMenuItem1_Click = {
	Do
	{
		Try
		{
			#$ResetPasswordUser = Read-Host "Enter the UPN of the user you want to reset the password for"
			$SelectUsersFormText = "Select the User you want to reset the password for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPNrpp = $SelectUsersForm_comboboxUsers
			$GlobalUPNrpp = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$GlobalUPNrpp)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			Else
			{
				$NewPassword = Read-Host "What would you like the new password to be?"
				If (!$NewPassword)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No password was entered for $GlobalUPNrpp, please enter a password", "Error")
				}
				Else
				{
					#What to do if connected to main o365 account
					If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Resetting $GlobalUPNrpp password to $NewPassword..."
						$textboxDetails.Text = "Set-MsolUserPassword –UserPrincipalName $GlobalUPNrpp –NewPassword $NewPassword -ForceChangePassword `$False"
						Set-MsolUserPassword –UserPrincipalName $GlobalUPNrpp –NewPassword $NewPassword -ForceChangePassword $False
						$TextboxResults.Text = "The password for $GlobalUPNrpp has been set to $NewPassword"
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
					#What to do if connected to partner account
					ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
					{
						$TenantText = $PartnerComboBox.text
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Resetting $GlobalUPNrpp password to $NewPassword..."
						$textboxDetails.Text = "Set-MsolUserPassword –UserPrincipalName $GlobalUPNrpp –NewPassword $NewPassword -ForceChangePassword `$False -TenantId $TenantText"
						Set-MsolUserPassword –UserPrincipalName $GlobalUPNrpp –NewPassword $NewPassword -ForceChangePassword $False -TenantId $PartnerComboBox.SelectedItem.TenantID
						$TextboxResults.Text = "The password for $GlobalUPNrpp has been set to $NewPassword"
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
					Else
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Resetting $GlobalUPNrpp password to $NewPassword..."
						$textboxDetails.Text = "Set-MsolUserPassword –UserPrincipalName $GlobalUPNrpp –NewPassword $NewPassword -ForceChangePassword `$False"
						Set-MsolUserPassword –UserPrincipalName $GlobalUPNrpp –NewPassword $NewPassword -ForceChangePassword $False
						$TextboxResults.Text = "The password for $GlobalUPNrpp has been set to $NewPassword"
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to reset another Users password?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$setPasswordToNeverExpireForAllToolStripMenuItem1_Click = {
	Try
	{
		$OUTPUT = [System.Windows.Forms.MessageBox]::Show("Are you sure you want to set everyones password to never expire?", "Warning!", 4)
		If ($OUTPUT -eq "YES")
		{
			#What to do if connected to main o365 account
			If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Setting password to never expire for all..."
				$textboxDetails.Text = "Get-MsolUser -All | Set-MsolUser –PasswordNeverExpires `$True"
				Get-MsolUser -All | Set-MsolUser –PasswordNeverExpires $True
				$TextboxResults.text = Get-MSOLUser -All | Sort-Object UserPrincipalName | Format-Table UserPrincipalName, PasswordNeverExpires -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			#What to do if connected to partner account
			ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
			{
				$TenantText = $PartnerComboBox.text
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Setting password to never expire for all..."
				$textboxDetails.Text = "Get-MsolUser -All -TenantId $TenantText | Set-MsolUser –PasswordNeverExpires `$True -TenantId $TenantText"
				Get-MsolUser -All -TenantId $PartnerComboBox.SelectedItem.TenantID | Set-MsolUser –PasswordNeverExpires $True -TenantId $PartnerComboBox.SelectedItem.TenantID
				$TextboxResults.text = Get-MSOLUser -All -TenantId $PartnerComboBox.SelectedItem.TenantID | Sort-Object UserPrincipalName | Format-Table UserPrincipalName, PasswordNeverExpires -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Setting password to never expire for all..."
				$textboxDetails.Text = "Get-MsolUser -All | Set-MsolUser –PasswordNeverExpires `$True"
				Get-MsolUser -All | Set-MsolUser –PasswordNeverExpires $True
				$TextboxResults.text = Get-MSOLUser -All | Sort-Object UserPrincipalName | Format-Table UserPrincipalName, PasswordNeverExpires -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Else
		{
			[System.Windows.Forms.MessageBox]::Show("No changes have been made", "Info")
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$setPasswordToExpireForAllToolStripMenuItem1_Click = {
	Try
	{
		$OUTPUT = [System.Windows.Forms.MessageBox]::Show("Are you sure you want to set everyones password to expire?", "Warning!", 4)
		If ($OUTPUT -eq "YES")
		{
			#What to do if connected to main o365 account
			If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Setting password to expire for all..."
				$textboxDetails.Text = "Get-MsolUser -All | Set-MsolUser –PasswordNeverExpires `$False"
				Get-MsolUser -All | Set-MsolUser –PasswordNeverExpires $False
				$TextboxResults.text = Get-MSOLUser -All | Sort-Object UserPrincipalName | Format-Table UserPrincipalName, PasswordNeverExpires -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			#What to do if connected to partner account
			ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
			{
				$TenantText = $PartnerComboBox.text
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Setting password to expire for all..."
				$textboxDetails.Text = "Get-MsolUser -All -Tenant $TenantText | Set-MsolUser –PasswordNeverExpires `$False -TenantId $TenantText"
				Get-MsolUser -All -TenantId $PartnerComboBox.SelectedItem.TenantID | Set-MsolUser –PasswordNeverExpires $False -TenantId $PartnerComboBox.SelectedItem.TenantID
				$TextboxResults.text = Get-MSOLUser -All -TenantId $PartnerComboBox.SelectedItem.TenantID | Sort-Object UserPrincipalName | Format-Table UserPrincipalName, PasswordNeverExpires -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Setting password to expire for all..."
				$textboxDetails.Text = "Get-MsolUser -All | Set-MsolUser –PasswordNeverExpires `$False"
				Get-MsolUser -All | Set-MsolUser –PasswordNeverExpires $False
				$TextboxResults.text = Get-MSOLUser -All | Sort-Object UserPrincipalName | Format-Table UserPrincipalName, PasswordNeverExpires -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Else
		{
			[System.Windows.Forms.MessageBox]::Show("No changes have been made", "Info")
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$resetPasswordForAllToolStripMenuItem_Click = {
	Try
	{
		$SetPasswordforAll = Read-Host "What password would you like to set for all users?"
		If (!$SetPasswordforAll)
		{
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("No password was entered, please enter a valid password", "Error")
		}
		Else
		{
			$OUTPUT = [System.Windows.Forms.MessageBox]::Show("Are you sure you want to change all users password to $SetPasswordforAll", "Warning!", 4)
			If ($OUTPUT -eq "YES")
			{
				#What to do if connected to main o365 account
				If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Resetting all users passwords to $SetPasswordforAll..."
					$textboxDetails.Text = "Get-MsolUser -All | ForEach-Object{ 
Set-MsolUserPassword -userPrincipalName `$_.UserPrincipalName –NewPassword $SetPasswordforAll -ForceChangePassword `$False }"
					Get-MsolUser -All | ForEach-Object{ Set-MsolUserPassword -UserPrincipalName $_.UserPrincipalName –NewPassword $SetPasswordforAll -ForceChangePassword $False }
					$TextboxResults.Text = "Password for all users has been set to $SetPasswordforAll"
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
				#What to do if connected to partner account
				ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
				{
					$TenantText = $PartnerComboBox.text
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Resetting all users passwords to $SetPasswordforAll..."
					$textboxDetails.Text = "Get-MsolUser -All -TenantId $TenantText | ForEach-Object{ 
Set-MsolUserPassword -TenantId $TenantText -userPrincipalName `$_.UserPrincipalName –NewPassword $SetPasswordforAll -ForceChangePassword `$False }"
					Get-MsolUser -All -TenantId $PartnerComboBox.SelectedItem.TenantID | ForEach-Object { Set-MsolUserPassword -TenantId $PartnerComboBox.SelectedItem.TenantID -UserPrincipalName $_.UserPrincipalName –NewPassword $SetPasswordforAll -ForceChangePassword $False }
					$TextboxResults.Text = "Password for all users has been set to $SetPasswordforAll"
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Resetting all users passwords to $SetPasswordforAll..."
					$textboxDetails.Text = "Get-MsolUser -All | ForEach-Object{ 
Set-MsolUserPassword -userPrincipalName `$_.UserPrincipalName –NewPassword $SetPasswordforAll -ForceChangePassword `$False }"
					Get-MsolUser -All | ForEach-Object{ Set-MsolUserPassword -UserPrincipalName $_.UserPrincipalName –NewPassword $SetPasswordforAll -ForceChangePassword $False }
					$TextboxResults.Text = "Password for all users has been set to $SetPasswordforAll"
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
			Else
			{
				[System.Windows.Forms.MessageBox]::Show("No user passwords have not been changed", "Info")
			}
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$setATemporaryPasswordForAllToolStripMenuItem_Click = {
	Try
	{
		$SetTempPasswordforAll = Read-Host "What password would you like to set for all users?"
		If (!$SetTempPasswordforAll)
		{
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("No password was entered, please enter a valid password", "Error")
		}
		Else
		{
			$OUTPUT = [System.Windows.Forms.MessageBox]::Show("Are you sure you want change all users passwords to $SetTempPasswordforAll", "Warning!", 4)
			If ($OUTPUT -eq "YES")
			{
				#What to do if connected to main o365 account
				If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Setting $SetTempPasswordforAll as the temporary password for all users..."
					$textboxDetails.Text = "Get-MsolUser -All | Set-MsolUserPassword –NewPassword $SetTempPasswordforAll -ForceChangePassword `$True"
					Get-MsolUser -All | Set-MsolUserPassword –NewPassword $SetTempPasswordforAll -ForceChangePassword $True
					$TextboxResults.Text = "Temporary password has been set to $SetTempPasswordforAll Please note that users will be prompted to change it upon logon"
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
				#What to do if connected to partner account
				ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
				{
					$TenantText = $PartnerComboBox.text
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Setting $SetTempPasswordforAll as the temporary password for all users..."
					$textboxDetails.Text = "Get-MsolUser -TenantId $PartnerComboBox.SelectedItem.TenantID -All | Set-MsolUserPassword -TenantId $TenantText –NewPassword $SetTempPasswordforAll -ForceChangePassword `$True"
					Get-MsolUser -TenantId $PartnerComboBox.SelectedItem.TenantID -All | Set-MsolUserPassword -TenantId $PartnerComboBox.SelectedItem.TenantID –NewPassword $SetTempPasswordforAll -ForceChangePassword $True
					$TextboxResults.Text = "Temporary password has been set to $SetTempPasswordforAll Please note that users will be prompted to change it upon logon"
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Setting $SetTempPasswordforAll as the temporary password for all users..."
					$textboxDetails.Text = "Get-MsolUser -All | Set-MsolUserPassword –NewPassword $SetTempPasswordforAll -ForceChangePassword `$True"
					Get-MsolUser -All | Set-MsolUserPassword –NewPassword $SetTempPasswordforAll -ForceChangePassword $True
					$TextboxResults.Text = "Temporary password has been set to $SetTempPasswordforAll Please note that users will be prompted to change it upon logon"
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
			Else
			{
				[System.Windows.Forms.MessageBox]::Show("No user passwords have not been changed", "Info")
			}
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
	
}

$TemporaryPasswordForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$ResetPasswordUser2 = Read-Host "Enter the UPN of the user you want to reset the password for"
			$SelectUsersFormText = "Select the User you want to reset the password for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPNrtp = $SelectUsersForm_comboboxUsers
			$GlobalUPNrtp = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$GlobalUPNrtp)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			Else
			{
				$NewPassword2 = Read-Host "What would you like the new password to be?"
				If (!$NewPassword2)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No password was entered, please enter a valid password", "Error")
				}
				Else
				{
					#What to do if connected to main o365 account
					If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Setting $NewPassword2 as the temporary password for $GlobalUPNrtp..."
						$textboxDetails.Text = "Set-MsolUserPassword –UserPrincipalName $GlobalUPNrtp –NewPassword $NewPassword2 -ForceChangePassword `$True"
						Set-MsolUserPassword –UserPrincipalName $GlobalUPNrtp –NewPassword $NewPassword2 -ForceChangePassword $True
						$TextboxResults.Text = "Temporary password has been set to $NewPassword2 Please note that $GlobalUPNrtp will be prompted to change it upon logon"
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
					#What to do if connected to partner account
					ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
					{
						$TenantText = $PartnerComboBox.text
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Setting $NewPassword2 as the temporary password for $GlobalUPNrtp..."
						$textboxDetails.Text = "Set-MsolUserPassword -TenantId $TenantText –UserPrincipalName $GlobalUPNrtp –NewPassword $NewPassword2 -ForceChangePassword `$True"
						Set-MsolUserPassword -TenantId $PartnerComboBox.SelectedItem.TenantID –UserPrincipalName $GlobalUPNrtp –NewPassword $NewPassword2 -ForceChangePassword $True
						$TextboxResults.Text = "Temporary password has been set to $NewPassword2 Please note that $GlobalUPNrtp will be prompted to change it upon logon"
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
					Else
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Setting $NewPassword2 as the temporary password for $GlobalUPNrtp..."
						$textboxDetails.Text = "Set-MsolUserPassword –UserPrincipalName $GlobalUPNrtp –NewPassword $NewPassword2 -ForceChangePassword `$True"
						Set-MsolUserPassword –UserPrincipalName $GlobalUPNrtp –NewPassword $NewPassword2 -ForceChangePassword $True
						$TextboxResults.Text = "Temporary password has been set to $NewPassword2 Please note that $GlobalUPNrtp will be prompted to change it upon logon"
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to set a temporary password for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getPasswordResetDateForAUserToolStripMenuItem_Click = {
	Try
	{
		#$GetPasswordInfoUser = Read-Host "Enter the UPN of the user you want to view the password last changed date for"
		$SelectUsersFormText = "Select the user you want to view last password changed date for"
		#Call-SelectUsersForm_psf
		Show-SelectCachedUserPrincipalName_psf
		#$GlobalUPNgpifu = $SelectUsersForm_comboboxUsers
		$GlobalUPNgpifu = $SelectCachedUserPrincipalName_comboboxUPN
		If (!$GlobalUPNgpifu)
		{
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a user", "Error")
		}
		Else
		{
			#What to do if connected to main o365 account
			If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting last password reset date for $GlobalUPNgpifu..."
				$textboxDetails.Text = "Get-MsolUser -userprincipalname $GlobalUPNgpifu | Format-List UserPrincipalName, lastpasswordchangetimestamp"
				$TextboxResults.Text = Get-MsolUser -userprincipalname $GlobalUPNgpifu | Format-List UserPrincipalName, lastpasswordchangetimestamp | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			#What to do if connected to partner account
			ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
			{
				$TenantText = $PartnerComboBox.text
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting last password reset date for $GlobalUPNgpifu..."
				$textboxDetails.Text = "Get-MsolUser -TenantId $TenantText -userprincipalname $GlobalUPNgpifu | Format-List UserPrincipalName, lastpasswordchangetimestamp"
				$TextboxResults.Text = Get-MsolUser -TenantId $PartnerComboBox.SelectedItem.TenantID -userprincipalname $GlobalUPNgpifu | Format-List UserPrincipalName, lastpasswordchangetimestamp | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting last password reset date for $GlobalUPNgpifu..."
				$textboxDetails.Text = "Get-MsolUser -userprincipalname $GlobalUPNgpifu | Format-List UserPrincipalName, lastpasswordchangetimestamp"
				$TextboxResults.Text = Get-MsolUser -userprincipalname $GlobalUPNgpifu | Format-List UserPrincipalName, lastpasswordchangetimestamp | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
	
}

$getPasswordLastResetDateForAllToolStripMenuItem_Click = {
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting last password reset date for all users..."
			$textboxDetails.Text = "Get-MsolUser -All | Sort-Object UserPrincipalName | Format-Table UserPrincipalName, lastpasswordchangetimestamp -AutoSize "
			$TextboxResults.Text = Get-MsolUser -All | Sort-Object UserPrincipalName | Format-Table UserPrincipalName, lastpasswordchangetimestamp -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting last password reset date for all users..."
			$textboxDetails.Text = "Get-MsolUser -All -TenantId $TenantText | Sort-Object UserPrincipalName | Format-Table UserPrincipalName, lastpasswordchangetimestamp -AutoSize "
			$TextboxResults.Text = Get-MsolUser -All -TenantId $PartnerComboBox.SelectedItem.TenantID | Sort-Object UserPrincipalName | Format-Table UserPrincipalName, lastpasswordchangetimestamp -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting last password reset date for all users..."
			$textboxDetails.Text = "Get-MsolUser -All | Sort-Object UserPrincipalName | Format-Table UserPrincipalName, lastpasswordchangetimestamp -AutoSize "
			$TextboxResults.Text = Get-MsolUser -All | Sort-Object UserPrincipalName | Format-Table UserPrincipalName, lastpasswordchangetimestamp -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$setPasswordToExpireForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$PasswordtoExpireforUser = Read-Host "Enter the UPN of the user you want the password to expire for"
			$SelectUsersFormText = "Select the User you want to set password to expire for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPNspte = $SelectUsersForm_comboboxUsers
			$GlobalUPNspte = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$GlobalUPNspte)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			Else
			{
				#What to do if connected to main o365 account
				If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Setting password to expire for $GlobalUPNspte..."
					$textboxDetails.Text = "Set-MsolUser -UserPrincipalName $GlobalUPNspte –PasswordNeverExpires `$False"
					Set-MsolUser -UserPrincipalName $GlobalUPNspte –PasswordNeverExpires $False
					$TextboxResults.text = Get-MSOLUser -UserPrincipalName $GlobalUPNspte | Format-List UserPrincipalName, PasswordNeverExpires | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
				#What to do if connected to partner account
				ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
				{
					$TenantText = $PartnerComboBox.text
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Setting password to expire for $GlobalUPNspte..."
					$textboxDetails.Text = "Set-MsolUser -TenantId $TenantText -UserPrincipalName $GlobalUPNspte –PasswordNeverExpires `$False"
					Set-MsolUser -TenantId $PartnerComboBox.SelectedItem.TenantID -UserPrincipalName $GlobalUPNspte –PasswordNeverExpires $False
					$TextboxResults.text = Get-MSOLUser -TenantId $PartnerComboBox.SelectedItem.TenantID -UserPrincipalName $GlobalUPNspte | Format-List UserPrincipalName, PasswordNeverExpires | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Setting password to expire for $GlobalUPNspte..."
					$textboxDetails.Text = "Set-MsolUser -UserPrincipalName $GlobalUPNspte –PasswordNeverExpires `$False"
					Set-MsolUser -UserPrincipalName $GlobalUPNspte –PasswordNeverExpires $False
					$TextboxResults.text = Get-MSOLUser -UserPrincipalName $GlobalUPNspte | Format-List UserPrincipalName, PasswordNeverExpires | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to set the password to expire for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$setPasswordToNeverExpireForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$PasswordtoNeverExpireforUser = Read-Host "Enter the UPN of the user you want the password to never expire for"
			$SelectUsersFormText = "Select the User you want to set the password to never expire"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$PasswordtoNeverExpireforUser = $SelectUsersForm_comboboxUsers
			$PasswordtoNeverExpireforUser = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$PasswordtoNeverExpireforUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			Else
			{
				#What to do if connected to main o365 account
				If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Setting password to never expire for $PasswordtoNeverExpireforUser..."
					$textboxDetails.Text = "Set-MsolUser -UserPrincipalName $PasswordtoNeverExpireforUser –PasswordNeverExpires `$True"
					Set-MsolUser -UserPrincipalName $PasswordtoNeverExpireforUser –PasswordNeverExpires $True
					$TextboxResults.text = Get-MSOLUser -UserPrincipalName $PasswordtoNeverExpireforUser | Format-List UserPrincipalName, PasswordNeverExpires | Out-String -Width 2147483647
					
				}
				#What to do if connected to partner account
				ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
				{
					$TenantText = $PartnerComboBox.text
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Setting password to never expire for $PasswordtoNeverExpireforUser..."
					$textboxDetails.Text = "Set-MsolUser -TenantId $TenantText -UserPrincipalName $PasswordtoNeverExpireforUser –PasswordNeverExpires `$True"
					Set-MsolUser -TenantId $PartnerComboBox.SelectedItem.TenantID -UserPrincipalName $PasswordtoNeverExpireforUser –PasswordNeverExpires $True
					$TextboxResults.text = Get-MSOLUser -TenantId $PartnerComboBox.SelectedItem.TenantID -UserPrincipalName $PasswordtoNeverExpireforUser | Format-List UserPrincipalName, PasswordNeverExpires | Out-String -Width 2147483647
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Setting password to never expire for $PasswordtoNeverExpireforUser..."
					$textboxDetails.Text = "Set-MsolUser -UserPrincipalName $PasswordtoNeverExpireforUser –PasswordNeverExpires `$True"
					Set-MsolUser -UserPrincipalName $PasswordtoNeverExpireforUser –PasswordNeverExpires $True
					$TextboxResults.text = Get-MSOLUser -UserPrincipalName $PasswordtoNeverExpireforUser | Format-List UserPrincipalName, PasswordNeverExpires | Out-String -Width 2147483647
					
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to set the password to never expire for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getUsersWhosPasswordNeverExpiresToolStripMenuItem_Click = {
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting users where the password is set to never expire..."
			$textboxDetails.Text = "Get-MsolUser -All | Where-Object { `$_.PasswordNeverExpires -eq `$True } | Sort-Object UserPrincipalName | Format-Table UserPrincipalName, PasswordNeverExpires"
			$TextboxResults.text = Get-MsolUser -All | Where-Object { $_.PasswordNeverExpires -eq $True } | Sort-Object UserPrincipalName | Format-Table UserPrincipalName, PasswordNeverExpires | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting users where the password is set to never expire..."
			$textboxDetails.Text = "Get-MsolUser -All -TenantId $TenantText | Where-Object { `$_.PasswordNeverExpires -eq `$True } | Sort-Object UserPrincipalName | Format-Table UserPrincipalName, PasswordNeverExpires"
			$TextboxResults.text = Get-MsolUser -All -TenantId $PartnerComboBox.SelectedItem.TenantID | Where-Object { $_.PasswordNeverExpires -eq $True } | Sort-Object UserPrincipalName | Format-Table UserPrincipalName, PasswordNeverExpires | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting users where the password is set to never expire..."
			$textboxDetails.Text = "Get-MsolUser -All | Where-Object { `$_.PasswordNeverExpires -eq `$True } | Sort-Object UserPrincipalName | Format-Table UserPrincipalName, PasswordNeverExpires"
			$TextboxResults.text = Get-MsolUser -All | Where-Object { $_.PasswordNeverExpires -eq $True } | Sort-Object UserPrincipalName | Format-Table UserPrincipalName, PasswordNeverExpires | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getUsersWhosPasswordWillExpireToolStripMenuItem_Click = {
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting users where the password is set to expire..."
			$textboxDetails.Text = "Get-MsolUser -All | Where-Object { `$_.PasswordNeverExpires -eq `$False } | Sort-Object UserPrincipalName | Format-Table UserPrincipalName, PasswordNeverExpires"
			$TextboxResults.text = Get-MsolUser -All | Where-Object { $_.PasswordNeverExpires -eq $False } | Sort-Object UserPrincipalName | Format-Table UserPrincipalName, PasswordNeverExpires | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting users where the password is set to expire..."
			$textboxDetails.Text = "Get-MsolUser -All -TenantId $TenantText | Where-Object { `$_.PasswordNeverExpires -eq `$False } | Sort-Object UserPrincipalName | Format-Table UserPrincipalName, PasswordNeverExpires"
			$TextboxResults.text = Get-MsolUser -All -TenantId $PartnerComboBox.SelectedItem.TenantID | Where-Object { $_.PasswordNeverExpires -eq $False } | Sort-Object UserPrincipalName | Format-Table UserPrincipalName, PasswordNeverExpires | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
			}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting users where the password is set to expire..."
			$textboxDetails.Text = "Get-MsolUser -All | Where-Object { `$_.PasswordNeverExpires -eq `$False } | Sort-Object UserPrincipalName | Format-Table UserPrincipalName, PasswordNeverExpires"
			$TextboxResults.text = Get-MsolUser -All | Where-Object { $_.PasswordNeverExpires -eq $False } | Sort-Object UserPrincipalName | Format-Table UserPrincipalName, PasswordNeverExpires | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getPasswordLastResetDateForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$GetPasswordInfoUser = Read-Host "Enter the UPN of the user you want to view the password last changed date for"
			$SelectUsersFormText = "Select the User you want to view the password last changed date for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GetPasswordInfoUser = $SelectUsersForm_comboboxUsers
			$GetPasswordInfoUser = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$GetPasswordInfoUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			Else
			{
				#What to do if connected to main o365 account
				If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Getting last password reset date for $GetPasswordInfoUser..."
					$textboxDetails.Text = "Get-MsolUser -userprincipalname $GetPasswordInfoUser | Format-List UserPrincipalName, lastpasswordchangetimestamp"
					$TextboxResults.Text = Get-MsolUser -userprincipalname $GetPasswordInfoUser | Format-List UserPrincipalName, lastpasswordchangetimestamp | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
				#What to do if connected to partner account
				ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
				{
					$TenantText = $PartnerComboBox.text
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Getting last password reset date for $GetPasswordInfoUser..."
					$textboxDetails.Text = "Get-MsolUser -TenantId $TenantText -UserPrincipalName $GetPasswordInfoUser | Format-List UserPrincipalName, lastpasswordchangetimestamp"
					$TextboxResults.Text = Get-MsolUser -TenantId $PartnerComboBox.SelectedItem.TenantID -userprincipalname $GetPasswordInfoUser | Format-List UserPrincipalName, lastpasswordchangetimestamp | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Getting last password reset date for $GetPasswordInfoUser..."
					$textboxDetails.Text = "Get-MsolUser -userprincipalname $GetPasswordInfoUser | Format-List UserPrincipalName, lastpasswordchangetimestamp"
					$TextboxResults.Text = Get-MsolUser -userprincipalname $GetPasswordInfoUser | Format-List UserPrincipalName, lastpasswordchangetimestamp | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get the last password reset date for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getUsersNextPasswordResetDateToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$NextUserResetDateUser = Read-Host "Enter the UPN of the user"
			$SelectUsersFormText = "Select the User you want to view the next password reset date for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$NextUserResetDateUser = $SelectUsersForm_comboboxUsers
			$NextUserResetDateUser = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$NextUserResetDateUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			Else
			{
				$VarDate = Read-Host "Enter days before passwords expires. EX: 90"
				If (!$VarDate)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No number was entered, please enter a valid number", "Error")
				}
				Else
				{
					#What to do if connected to main o365 account
					If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Getting $NextUserResetDateUser next password reset date..."
						$textboxDetails.Text = "(Get-MSOLUser -All -userprincipalname $NextUserResetDateUser).lastpasswordchangetimestamp.adddays($VarDate) | Format-List DateTime"
						$TextboxResults.Text = (Get-MSOLUser -All -userprincipalname $NextUserResetDateUser).lastpasswordchangetimestamp.adddays($VarDate) | Format-List DateTime | Out-String -Width 2147483647
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
					#What to do if connected to partner account
					ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
					{
						$TenantText = $PartnerComboBox.text
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Getting $NextUserResetDateUser next password reset date..."
						$textboxDetails.Text = "(Get-MSOLUser -All -TenantId $TenantText -userprincipalname $NextUserResetDateUser).lastpasswordchangetimestamp.adddays($VarDate) | Format-List DateTime"
						$TextboxResults.Text = (Get-MsolUser -All -TenantId $PartnerComboBox.SelectedItem.TenantID -userprincipalname $NextUserResetDateUser).lastpasswordchangetimestamp.adddays($VarDate) | Format-List DateTime | Out-String -Width 2147483647
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
					Else
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Getting $NextUserResetDateUser next password reset date..."
						$textboxDetails.Text = "(Get-MSOLUser -All -userprincipalname $NextUserResetDateUser).lastpasswordchangetimestamp.adddays($VarDate) | Format-List DateTime"
						$TextboxResults.Text = (Get-MSOLUser -All -userprincipalname $NextUserResetDateUser).lastpasswordchangetimestamp.adddays($VarDate) | Format-List DateTime | Out-String -Width 2147483647
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get the next password reset date for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
}

#Mailbox Permissions

$addFullPermissionsToAMailboxToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$SelectUsersFormText = "Select the User you are changing permissions for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedDisplayNames_psf
			#$mailboxAccess = $SelectUsersForm_comboboxUsers
			$mailboxAccess = $SelectCachedDisplayNames_comboboxNames
			#$mailboxAccess = read-host "Mailbox you want to give full-access to"
			If (!$mailboxAccess)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			Else
			{
				$SelectUsersFormText = "Select the User you want to give full access to $mailboxAccess"
				#Call-SelectUsersForm_psf
				Show-SelectCachedDisplayNames_psf
				#$mailboxUser = $SelectUsersForm_comboboxUsers
				$mailboxUser = $SelectCachedDisplayNames_comboboxNames
				#$mailboxUser = read-host "Enter the UPN of the user that will have full access"
				If (!$mailboxUser)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Assigning full access permissions to $mailboxUser for the account $mailboxAccess..."
					$textboxDetails.Text = "Add-MailboxPermission -identity $mailboxAccess -User $mailboxUser -AccessRights FullAccess -InheritanceType All"
					$TextboxResults.text = Add-MailboxPermission -identity $mailboxAccess -User $mailboxUser -AccessRights FullAccess -InheritanceType All | Format-List | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to modify permissions for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$addSendAsPermissionToAMailboxToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$SendAsAccess = read-host "Mailbox you want to give Send As access to"
			$SelectUsersFormText = "Select the User you want to modify Send As access permissions for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedDisplayNames_psf
			#$SendAsAccess = $SelectUsersForm_comboboxUsers
			$SendAsAccess = $SelectCachedDisplayNames_comboboxNames
			If (!$SendAsAccess)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			Else
			{
				#$mailboxUserAccess = read-host "Enter the UPN of the user that will have Send As access"
				$SelectUsersFormText = "Select the User you want to give Send As access to $SendAsAccess"
				#Call-SelectUsersForm_psf
				Show-SelectCachedDisplayNames_psf
				#$mailboxUserAccess = $SelectUsersForm_comboboxUsers
				$mailboxUserAccess = $SelectCachedDisplayNames_comboboxNames
				If (!$mailboxUserAccess)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Assigning Send-As access to $mailboxUserAccess for the account $SendAsAccess..."
					$textboxDetails.Text = "Add-RecipientPermission $SendAsAccess -Trustee $mailboxUserAccess -AccessRights SendAs"
					$TextboxResults.text = Add-RecipientPermission $SendAsAccess -Trustee $mailboxUserAccess -AccessRights SendAs | Format-List | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to modify permissions for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$assignSendOnBehalfPermissionsForAMailboxToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$SendonBehalfof = read-host "Mailbox you want to give Send on Behalf access to"
			$SelectUsersFormText = "Select the User you want to modify Send on Behalf permissions for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedDisplayNames_psf
			#$SendonBehalfof = $SelectUsersForm_comboboxUsers
			$SendonBehalfof = $SelectCachedDisplayNames_comboboxNames
			If (!$SendonBehalfof)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			Else
			{
				#$mailboxUserSendonBehalfAccess = read-host "Enter the UPN of the user that will have Send As access"
				$SelectUsersFormText = "Select the User you want to give Send on Behalf permissions for $SendonBehalfof"
				#Call-SelectUsersForm_psf
				Show-SelectCachedDisplayNames_psf
				#$mailboxUserSendonBehalfAccess = $SelectUsersForm_comboboxUsers
				$mailboxUserSendonBehalfAccess = $SelectCachedDisplayNames_comboboxNames
				If (!$mailboxUserSendonBehalfAccess)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a user", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Assigning Send On Behalf of permissions to $mailboxUserSendonBehalfAccess for the account $SendonBehalfof..."
					$textboxDetails.Text = "Set-Mailbox -Identity $SendonBehalfof -GrantSendOnBehalfTo $mailboxUserSendonBehalfAccess"
					Set-Mailbox -Identity $SendonBehalfof -GrantSendOnBehalfTo $mailboxUserSendonBehalfAccess
					$TextboxResults.text = Get-Mailbox -Identity $SendonBehalfof | Format-List Identity, GrantSendOnBehalfTo | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to modify permissions for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$displayMailboxPermissionsForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$MailboxUserFullAccessPermission = Read-Host "Enter the UPN of the user want to view Full Access permissions for"
			$SelectUsersFormText = "Select the user you want to view Full Access permissions for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedDisplayNames_psf
			#$MailboxUserFullAccessPermission = $SelectUsersForm_comboboxUsers
			$MailboxUserFullAccessPermission = $SelectCachedDisplayNames_comboboxNames
			If (!$MailboxUserFullAccessPermission)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a user", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting Full Access permissions for $MailboxUserFullAccessPermission..."
				$textboxDetails.Text = "Get-MailboxPermission $MailboxUserFullAccessPermission | Where-Object { (`$_.IsInherited -eq `$False) -and (`$_.User -notcontains 'NT AUTHORITY\SELF') } | Sort-Object User | Format-Table -AutoSize"
				$TextboxResults.text = Get-MailboxPermission $MailboxUserFullAccessPermission | Where-Object { ($_.IsInherited -eq $False) -and ($_.User -notcontains 'NT AUTHORITY\SELF') } | Sort-Object User | Format-Table -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to view Mailboxes permission for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

<# $displaySendAsPermissionForAMailboxToolStripMenuItem_Click = {
	#$MailboxUserSendAsPermission = Read-Host "Enter the UPN of the user you want to view Send As permissions for"
	$SelectUsersFormText = "Select the user you want to view Send As permissions for"
	Call-SelectUsersForm_psf
	$MailboxUserSendAsPermission = $SelectUsersForm_comboboxUsers
	try
	{
		$TextboxResults.Text = "Getting Send As Permissions for $MailboxUserSendAsPermission..."
		$textboxDetails.Text = "Get-RecipientPermission $MailboxUserSendAsPermission | Where-Object { (`$_.IsInherited -eq `$False) -and -not (`$_.Trustee -like 'NT AUTHORITY\SELF') } | Sort-Object User | Format-Table -AutoSize"
		$TextboxResults.text = Get-RecipientPermission $MailboxUserSendAsPermission | Where-Object { ($_.IsInherited -eq $False) -and -not ($_.Trustee -like "NT AUTHORITY\SELF") } | Sort-Object User | Format-Table -AutoSize | Out-String
	}
	Catch
	{
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}

}
#>

<#
$displaySendOnBehalfPermissionsForMailboxToolStripMenuItem_Click = {
	#$MailboxUserSendonPermission = Read-Host "Enter the UPN of the user you want to view Send On Behalf Of permission for"
	$SelectUsersFormText = "Select the user you want to view Send on Behalf permissions for"
	Call-SelectUsersForm_psf
	$MailboxUserSendonPermission = $SelectUsersForm_comboboxUsers
	try
	{
		$TextboxResults.Text = "Getting Send On Behalf permissions for $MailboxUserSendonPermission..."
		$textboxDetails.Text = "Get-RecipientPermission $MailboxUserSendonPermission | Where-Object { (`$_.IsInherited -eq `$False) -and -not (`$_.Trustee -like 'NT AUTHORITY\SELF') } | Sort-Object User | Format-Table"
		$TextboxResults.text = Get-RecipientPermission $MailboxUserSendonPermission | Where-Object { ($_.IsInherited -eq $False) -and -not ($_.Trustee -like "NT AUTHORITY\SELF") } | Sort-Object User | Format-Table | Out-String
	}
	Catch
	{
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}
#>

$removeFullAccessPermissionsForAMailboxToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$UserRemoveFullAccessRights = Read-Host "What user mailbox would you like modify Full Access rights to"
			$SelectUsersFormText = "Select the User you want to modify Full Access rights for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedDisplayNames_psf
			#$UserRemoveFullAccessRights = $SelectUsersForm_comboboxUsers
			$UserRemoveFullAccessRights = $SelectCachedDisplayNames_comboboxNames
			If (!$UserRemoveFullAccessRights)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			Else
			{
				#$RemoveFullAccessRightsUser = Read-Host "Enter the UPN of the user you want to remove"
				$FullPermissionsText = "Select the User you want to remove"
				Show-SelectUserFullPermissions_psf
				$RemoveFullAccessRightsUser = $SelectUserFullPermissions_comboboxSelectFullAccessUsers
				If (!$RemoveFullAccessRightsUser)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Removing Full Access Permissions for $RemoveFullAccessRightsUser on account $UserRemoveFullAccessRights..."
					$textboxDetails.Text = "Remove-MailboxPermission  $UserRemoveFullAccessRights -User $RemoveFullAccessRightsUser -AccessRights FullAccess -Confirm:`$False -ea 1"
					Remove-MailboxPermission  $UserRemoveFullAccessRights -User $RemoveFullAccessRightsUser -AccessRights FullAccess -Confirm:$False -ea 1
					$TextboxResults.text = Get-MailboxPermission $UserRemoveFullAccessRights | Where-Object { ($_.IsInherited -eq $False) -and -not ($_.User -like "NT AUTHORITY\SELF") } | Sort-Object User | Format-Table | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to modify permissions for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$revokeSendAsPermissionsForAMailboxToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$UserDeleteSendAsAccessOn = Read-Host "What user mailbox would you like to modify Send As permission for?"
			$SelectUsersFormText = "Select the User you want to modify Send As permissions for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedDisplayNames_psf
			#$GlobalUserCurrentPermissions = $SelectUsersForm_comboboxUsers
			$GlobalUserCurrentPermissions = $SelectCachedDisplayNames_comboboxNames
			If (!$GlobalUserCurrentPermissions)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			Else
			{
				#$UserDeleteSendAsAccess = Read-Host "Enter the UPN of the user you want to remove Send As access to?"
				$CurrentMailboxPermissionsText = "Select the user you want to remove Send As access to"
				Show-SelectExistingMailboxPermissions_psf
				$UserDeleteSendAsAccess = $SelectExistingMailboxPermissions_comboboxSelectCurrentPermissions
				If (!$UserDeleteSendAsAccess)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Removing Send As permission for $UserDeleteSendAsAccess on account $GlobalUserCurrentPermissions..."
					$textboxDetails.Text = "Remove-RecipientPermission $GlobalUserCurrentPermissions -AccessRights SendAs -Trustee $UserDeleteSendAsAccess"
					$TextboxResults.Text = Remove-RecipientPermission $GlobalUserCurrentPermissions -AccessRights SendAs -Trustee $UserDeleteSendAsAccess | Sort-Object User | Format-Table | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
					
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to modify permissions for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$viewAllMailboxesAUserHasFullAccessToToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$ViewAllFullAccess = Read-Host "Enter the UPN of the account you want to view"
			$SelectUsersFormText = "Select the User you want to view"
			#Call-SelectUsersForm_psf
			Show-SelectCachedDisplayNames_psf
			#$ViewAllFullAccess = $SelectUsersForm_comboboxUsers
			$ViewAllFullAccess = $SelectCachedDisplayNames_comboboxNames
			If (!$ViewAllFullAccess)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting all mailboxes $ViewAllFullAccess has Full Access permissions to..."
				$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Get-MailboxPermission -User $ViewAllFullAccess |  Sort-Object Identity | Format-Table"
				$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Get-MailboxPermission -User $ViewAllFullAccess | Sort-Object Identity | Format-Table | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to view all Mailboxes another user has Full Access to?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$viewAllMailboxesAUserHasSendAsPermissionsToToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$ViewSendAsAccess = Read-Host "Enter the UPN of the account you want to view"
			$SelectUsersFormText = "Select the user you want to view all accounts they have Send As permissions for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedDisplayNames_psf
			$ViewSendAsAccess = $SelectUsersForm_comboboxUsers
			$ViewSendAsAccess = $SelectCachedDisplayNames_comboboxNames
			If (!$ViewSendAsAccess)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a user", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting all mailboxes $ViewSendAsAccess has Send As permissions to..."
				$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Get-RecipientPermission -Trustee $ViewSendAsAccess | Sort-Object Identity | Format-Table"
				$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Get-RecipientPermission -Trustee $ViewSendAsAccess | Sort-Object Identity | Format-Table | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to view all Mailboxes another user has Send As Permission to?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$viewAllMailboxesAUserHasSendOnBehaldPermissionsToToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$ViewSendonBehalf = Read-Host "Enter the Name of the account you want to view"
			$SelectUsersFormText = "Select the User you want to view all accounts they have Send On Behalf Of permissiosn for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedDisplayNames_psf
			#$ViewSendonBehalf = $SelectUsersForm_comboboxUsers
			$ViewSendonBehalf = $SelectCachedDisplayNames_comboboxNames
			If (!$ViewSendonBehalf)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting all mailboxes $ViewSendonBehalf has Send On Behalf permissions to..."
				$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Where-Object { `$_.GrantSendOnBehalfTo -match $ViewSendonBehalf } | Sort-Object DisplayName | Format-Table DisplayName, GrantSendOnBehalfTo, PrimarySmtpAddress, RecipientType"
				$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Where-Object { $_.GrantSendOnBehalfTo -match $ViewSendonBehalf } | Sort-Object DisplayName | Format-Table DisplayName, GrantSendOnBehalfTo, PrimarySmtpAddress, RecipientType | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to view all Mailboxes another user has Send on Behalf to?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$removeAllPermissionsToAMailboxToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$UserDeleteAllAccessOn = Read-Host "What user mailbox would you like to modify permissions for?"
			$SelectUsersFormText = "Select the User you want to modify permissions for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedDisplayNames_psf
			#$GlobalUserCurrentPermissions = $SelectUsersForm_comboboxUsers
			$GlobalUserCurrentPermissions = $SelectCachedDisplayNames_comboboxNames
			If (!$GlobalUserCurrentPermissions)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			Else
			{
				#$UserDeleteAllAccess = Read-Host "Enter the UPN of the user you want to remove access to?"
				$CurrentMailboxPermissionsText = "Select the User you want to remove access to"
				Show-SelectExistingMailboxPermissions_psf
				$UserDeleteAllAccess = $SelectExistingMailboxPermissions_comboboxSelectCurrentPermissions
				If (!$UserDeleteAllAccess)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Removing all permissions for $UserDeleteAllAccess on account $GlobalUserCurrentPermissions..."
					$textboxDetails.Text = "Remove-MailboxPermission -Identity $GlobalUserCurrentPermissions -User $UserDeleteAllAccess -AccessRights FullAccess -InheritanceType All"
					Remove-MailboxPermission -Identity $GlobalUserCurrentPermissions -User $UserDeleteAllAccess -AccessRights FullAccess -InheritanceType All
					$TextboxResults.Text = "Getting mailbox permissions for $GlobalUserCurrentPermissions..."
					$TextboxResults.Text = Get-MailboxPermission -Identity $GlobalUserCurrentPermissions | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to modify permissions for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

#Forwarding

$getAllUsersForwardinToInternalRecipientToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting all users forwarding to internal users..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Where-Object { `$_.ForwardingAddress -ne `$Null -and `$_.RecipientType -eq 'UserMailbox' } | Sort-Object Name | Format-Table Name, ForwardingAddress, DeliverToMailboxAndForward -AutoSize"
		$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Where-Object { $_.ForwardingAddress -ne $Null -and $_.RecipientType -eq "UserMailbox" } | Sort-Object Name | Format-Table Name, ForwardingAddress, DeliverToMailboxAndForward -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		$FormO365AdministrationCenter.Cursor = 'Default'
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$forwardToInternalRecipientAndDontSaveLocalCopyToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$UsertoFWD2 = Read-Host "Enter the users UPN, Display Name, Alias, or Email Address of the user to forward"
			$SelectUsersFormText = "Select the user you want to modify fowarding for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedDisplayNames_psf
			#$UsertoFWD2 = $SelectUsersForm_comboboxUsers
			$UsertoFWD2 = $SelectCachedDisplayNames_comboboxNames
			If (!$UsertoFWD2)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a user", "Error")
			}
			Else
			{
				#$Fwd2me2 = Read-Host "Enter the Name, Display Name, Alias, or Email Address of the user to forward to"
				$SelectUsersFormText = "Select the User you want $UsertoFWD2 to forward to"
				#Call-SelectUsersForm_psf
				Show-SelectCachedDisplayNames_psf
				#$Fwd2me2 = $SelectUsersForm_comboboxUsers
				$Fwd2me2 = $SelectCachedDisplayNames_comboboxNames
				If (!$Fwd2me2)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Setting up forwarding from $UsertoFWD2 to $Fwd2me2..."
					$textboxDetails.Text = "Set-Mailbox  $UsertoFWD2 -ForwardingAddress $Fwd2me2 -DeliverToMailboxAndForward `$False"
					Set-Mailbox  $UsertoFWD2 -ForwardingAddress $Fwd2me2 -DeliverToMailboxAndForward $False
					$TextboxResults.Text = Get-Mailbox $UsertoFWD2 | Format-List Name, DeliverToMailboxAndForward, ForwardingAddress | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to modify forwarding for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$forwardToExternalAddressAndSaveLocalCopyToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$UsertoFWD3 = Read-Host "Enter the users UPN, Display Name, Alias, or Email Address of the user to forward"
			$SelectUsersFormText = "Select the User you want to modify fowarding for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedDisplayNames_psf
			#$UsertoFWD3 = $SelectUsersForm_comboboxUsers
			$UsertoFWD3 = $SelectCachedDisplayNames_comboboxNames
			If (!$UsertoFWD3)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			Else
			{
				$Fwd2me2External = Read-Host "Enter the external Email Address to forward to"
				If (!$Fwd2me2External)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No external E-mail Address was entered, please enter a valid E-mail Address", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Setting up forwarding from $UsertoFWD3 to $Fwd2me2External..."
					$textboxDetails.Text = "Set-Mailbox $UsertoFWD3 -ForwardingsmtpAddress $Fwd2me2External -DeliverToMailboxAndForward `$true"
					Set-Mailbox $UsertoFWD3 -ForwardingsmtpAddress $Fwd2me2External -DeliverToMailboxAndForward $true
					$TextboxResults.Text = Get-Mailbox $UsertoFWD3 | Format-List Name, DeliverToMailboxAndForward, ForwardingSmtpAddress | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to modify forwarding for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$forwardToExternalAddressAndDontSaveLocalCopyToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$UsertoFWD4 = Read-Host "Enter the users UPN, Display Name, Alias, or Email Address of the user to forward"
			$SelectUsersFormText = "Select the User you want to modify fowarding for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedDisplayNames_psf
			#$UsertoFWD4 = $SelectUsersForm_comboboxUsers
			$UsertoFWD4 = $SelectCachedDisplayNames_comboboxNames
			If (!$UsertoFWD4)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			Else
			{
				$Fwd2me2External2 = Read-Host "Enter the external Email Address to forward to"
				If (!$Fwd2me2External2)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No external E-mail Address was entered, please enter a valid external E-mail Address", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Setting up forwarding from $UsertoFWD4 to $Fwd2me2External2..."
					$textboxDetails.Text = "Set-Mailbox $UsertoFWD4 -ForwardingsmtpAddress $Fwd2me2External2 -DeliverToMailboxAndForward `$False"
					Set-Mailbox $UsertoFWD4 -ForwardingsmtpAddress $Fwd2me2External2 -DeliverToMailboxAndForward $False
					$TextboxResults.Text = Get-Mailbox $UsertoFWD4 | Format-List Name, DeliverToMailboxAndForward, ForwardingSmtpAddress | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to modify forwarding for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getForwardingInfoForAUserToolStripMenuItem_Click = {
	Do
	{
		try
		{
			#$UserFwdInfo = Read-Host "Enter the users UPN, Display Name, Alias, or Email Address of the user"
			$SelectUsersFormText = "Select the user you want view Forwarding information for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedDisplayNames_psf
			#$UserFwdInfo = $SelectUsersForm_comboboxUsers
			$UserFwdInfo = $SelectCachedDisplayNames_comboboxNames
			If (!$UserFwdInfo)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a user", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting forwarding info for $UserFwdInfo..."
				$textboxDetails.Text = "Get-Mailbox $UserFwdInfo | Format-List Name, DeliverToMailboxAndForward, ForwardingAddress, ForwardingSmtpAddress"
				$TextboxResults.Text = Get-Mailbox $UserFwdInfo | Format-List Name, DeliverToMailboxAndForward, ForwardingAddress, ForwardingSmtpAddress | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get forwarding information for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$removeExternalForwadingForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$RemoveFWDfromUserExternal = Read-Host "Enter the users UPN, Display Name, Alias, or Email Address"
			$SelectUsersWithForwardingFormText = "Select the user you want remove forwarding for"
			Show-SelectExternalUsersWithForwarding_psf
			$RemoveFWDfromUserExternal = $SelectExternalUsersWithForwarding_comboboxUsersWithForwarding
			If (!$RemoveFWDfromUserExternal)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a user", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Removing all external forwarding from $RemoveFWDfromUserExternal..."
				$textboxDetails.Text = "Set-Mailbox $RemoveFWDfromUserExternal -ForwardingSmtpAddress `$Null"
				Set-Mailbox $RemoveFWDfromUserExternal -ForwardingSmtpAddress $Null
				$TextboxResults.Text = Get-Mailbox $RemoveFWDfromUserExternal | Sort-Object Name | Format-Table Name, DeliverToMailboxAndForward, ForwardingSmtpAddress -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to remove all external forwarding for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$removeAllForwardingForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$RemoveAllFWDforUser = Read-Host "Enter the users UPN, Display Name, Alias, or Email Address"
			$SelectUsersAllForwaringFormText = "Select the user you want to remove forwarding for"
			Show-SelectUsersAnyForwarding_psf
			$RemoveAllFWDforUser = $SelectUsersForm_comboboxUsers
			If (!$RemoveAllFWDforUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a user", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Removing all forwarding from $RemoveAllFWDforUser..."
				$textboxDetails.Text = "Set-Mailbox $RemoveAllFWDforUser -ForwardingAddress `$Null -ForwardingSmtpAddress `$Null"
				Set-Mailbox $RemoveAllFWDforUser -ForwardingAddress $Null -ForwardingSmtpAddress $Null
				$TextboxResults.Text = Get-Mailbox $RemoveAllFWDforUser | Format-List Name, DeliverToMailboxAndForward, ForwardingAddress, ForwardingSmtpAddress | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to remove all forwarding another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$removeInternalForwardingForUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$RemoveFWDfromUser = Read-Host "Enter the users UPN, Display Name, Alias, or Email Address"
			$SelectUsersInternalForwaringFormText = "Select the User to remove forwarding for"
			Show-SelectUsersInternalForwarding_psf
			$RemoveFWDfromUser = $SelectUsersInternalForwarding_comboboxUsersInternalForwarding
			If (!$RemoveFWDfromUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Removing all internal forwarding from $RemoveFWDfromUser..."
				$textboxDetails.Text = "Set-Mailbox $RemoveFWDfromUser -ForwardingAddress `$Null"
				Set-Mailbox $RemoveFWDfromUser -ForwardingAddress $Null
				$TextboxResults.Text = Get-Mailbox $RemoveFWDfromUser | Format-List Name, DeliverToMailboxAndForward, ForwardingAddress | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to remove all internal forwarding another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$forwardToInternalRecipientAndSaveLocalCopyToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$UsertoFWD = Read-Host "Enter the users UPN, Display Name, Alias, or Email Address of the user to forward"
			$SelectUsersFormText = "Select the User you want to modify fowarding for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedDisplayNames_psf
			#$UsertoFWD = $SelectUsersForm_comboboxUsers
			$UsertoFWD = $SelectCachedDisplayNames_comboboxNames
			If (!$UsertoFWD)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			Else
			{
				#$Fwd2me = Read-Host "Enter the Name, Display Name, Alias, or Email Address of the user to forward to"
				$SelectUsersFormText = "Select the User you want to $UsertoFWD to forward to"
				#Call-SelectUsersForm_psf
				Show-SelectCachedDisplayNames_psf
				#$Fwd2me = $SelectUsersForm_comboboxUsers
				$Fwd2me = $SelectCachedDisplayNames_comboboxNames
				If (!$Fwd2me)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Setting up forwarding from $UsertoFWD to $Fwd2me..."
					$textboxDetails.Text = "Set-Mailbox  $UsertoFWD -ForwardingAddress $Fwd2me -DeliverToMailboxAndForward `$True"
					Set-Mailbox  $UsertoFWD -ForwardingAddress $Fwd2me -DeliverToMailboxAndForward $True
					$TextboxResults.Text = Get-Mailbox $UsertoFWD | Format-List Name, DeliverToMailboxAndForward, ForwardingAddress | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to modify forwarding for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getAllUsersForwardingToExternalRecipientToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting all users forwarding to external users..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Where-Object { `$_.ForwardingSmtpAddress -ne `$Null -and `$_.RecipientType -eq 'UserMailbox' } | Sort-Object Name | Format-Table Name, DeliverToMailboxAndForward, ForwardingSmtpAddress -AutoSize"
		$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Where-Object { $_.ForwardingSmtpAddress -ne $Null -and $_.RecipientType -eq "UserMailbox" } | Sort-Object Name | Format-Table Name, DeliverToMailboxAndForward, ForwardingSmtpAddress -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
	
}

$removeAllForwardingForAllUsersToolStripMenuItem_Click = {
	Try
	{
		$OUTPUT = [System.Windows.Forms.MessageBox]::Show("Are you sure you want to remove all forwarding from all users?", "Warning!", 4)
		If ($OUTPUT -eq "YES")
		{
			Try
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Removing all forwarding from all users..."
				$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Where-Object { `$_.RecipientType -eq 'UserMailbox' } | Set-Mailbox -ForwardingAddress `$Null -ForwardingSmtpAddress `$Null"
				$AllMailboxes = Get-Mailbox -ResultSize unlimited | Where-Object { $_.RecipientType -eq "UserMailbox" } | Set-Mailbox -ForwardingAddress $Null -ForwardingSmtpAddress $Null
				$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Where-Object { $_.RecipientType -eq "UserMailbox" } | Sort-Object Name | Format-Table Name, DeliverToMailboxAndForward, ForwardingAddress, ForwardingSmtpAddress -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			Catch
			{
				$FormO365AdministrationCenter.Cursor = 'Default'
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("$_", "Error")
			}
		}
		Else
		{
			[System.Windows.Forms.MessageBox]::Show("All users forwarding has not been changed", "Info")
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$removeExternalForwardingForAllUsersToolStripMenuItem_Click = {
	Try
	{
		$OUTPUT = [System.Windows.Forms.MessageBox]::Show("Are you sure you want to remove external forwarding for all users?", "Warning!", 4)
		If ($OUTPUT -eq "YES")
		{
			Try
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Removing all external forwarding from all users..."
				$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Where-Object { `$_.RecipientType -eq 'UserMailbox' } | Set-Mailbox -ForwardingSmtpAddress `$Null"
				Get-Mailbox -ResultSize unlimited | Where-Object { $_.RecipientType -eq "UserMailbox" } | Set-Mailbox -ForwardingSmtpAddress $Null
				$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Where-Object { $_.RecipientType -eq "UserMailbox" } | Sort-Object Name | Format-Table Name, DeliverToMailboxAndForward, ForwardingSmtpAddress -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			Catch
			{
				$FormO365AdministrationCenter.Cursor = 'Default'
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("$_", "Error")
			}
		}
		Else
		{
			[System.Windows.Forms.MessageBox]::Show("External forwarding for all users has not been changed", "Info")
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
	
}

$removeInternalForwardingForAllUsersToolStripMenuItem_Click = {
	Try
	{
		$OUTPUT = [System.Windows.Forms.MessageBox]::Show("Are you sure you want to remove internal forwarding for all users?", "Warning!", 4)
		If ($OUTPUT -eq "YES")
		{
			Try
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Removing all internal forwarding from all users..."
				$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Where-Object { `$_.RecipientType -eq 'UserMailbox' } | Set-Mailbox -ForwardingAddress `$Null"
				Get-Mailbox -ResultSize unlimited | Where-Object { $_.RecipientType -eq "UserMailbox" } | Set-Mailbox -ForwardingAddress $Null
				$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Where-Object { $_.RecipientType -eq "UserMailbox" } | Sort-Object Name | Format-Table Name, DeliverToMailboxAndForward, ForwardingAddress -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			Catch
			{
				$FormO365AdministrationCenter.Cursor = 'Default'
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("$_", "Error")
			}
		}
		Else
		{
			[System.Windows.Forms.MessageBox]::Show("Internal forwarding for all users has not been changed", "Info")
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
	
}

$forwardAllUsersEmailToExternalRecipientAndSaveALocalCopyToolStripMenuItem_Click = {
	Try
	{
		$ForwardAllToExternal = Read-Host "Enter the email to forward all email to"
		If (!$ForwardAllToExternal)
		{
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("No e-mail address was entered, please enter a valid e-mail address", "Error")
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Setting up forwarding for all users to $ForwardAllToExternal..."
			$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Where-Object { `$_.RecipientType -eq 'UserMailbox' } | Set-Mailbox -ForwardingsmtpAddress $ForwardAllToExternal -DeliverToMailboxAndForward `$True"
			Get-Mailbox -ResultSize unlimited | Where-Object { $_.RecipientType -eq "UserMailbox" } | Set-Mailbox -ForwardingsmtpAddress $ForwardAllToExternal -DeliverToMailboxAndForward $True
			$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Where-Object { $_.RecipientType -eq "UserMailbox" } | Sort-Object Name | Format-Table Name, DeliverToMailboxAndForward, ForwardingSmtpAddress -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$forwardAllUsersEmailToExternalRecipientAndDontSaveALocalCopyToolStripMenuItem_Click = {
	Try
	{
		$ForwardAllToExternal2 = Read-Host "Enter the email to forward all email to"
		If (!$ForwardAllToExternal2)
		{
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("No e-mail was entered, please enter a valid e-mail", "Error")
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Setting up forwarding for all users to $ForwardAllToExternal2..."
			$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Where-Object { `$_.RecipientType -eq 'UserMailbox' } | Set-Mailbox -ForwardingsmtpAddress $ForwardAllToExternal2 -DeliverToMailboxAndForward `$False"
			Get-Mailbox -ResultSize unlimited | Where-Object { $_.RecipientType -eq "UserMailbox" } | Set-Mailbox -ForwardingsmtpAddress $ForwardAllToExternal2 -DeliverToMailboxAndForward $False
			$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Where-Object { $_.RecipientType -eq "UserMailbox" } | Sort-Object Name | Format-Table Name, DeliverToMailboxAndForward, ForwardingSmtpAddress -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$forwardAllUsersEmailToInternalRecipientAndSaveLocalCopyToolStripMenuItem_Click = {
	Try
	{
		#$ForwardAllToInternal = Read-Host "Enter the users UPN, Display Name, Alias, or Email Address of the user to forward"
		$SelectUsersFormText = "Select the user you want to forward all email to"
		#Call-SelectUsersForm_psf
		Show-SelectCachedDisplayNames_psf
		#$ForwardAllToInternal = $SelectUsersForm_comboboxUsers
		$ForwardAllToInternal = $SelectCachedDisplayNames_comboboxNames
		If (!$ForwardAllToInternal)
		{
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a user", "Error")
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Setting up forwarding for all users to $ForwardAllToInternal..."
			$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Where-Object { `$_.RecipientType -eq 'UserMailbox' } | Set-Mailbox -ForwardingAddress $ForwardAllToInternal -DeliverToMailboxAndForward `$True"
			Get-Mailbox -ResultSize unlimited | Where-Object { $_.RecipientType -eq "UserMailbox" } | Set-Mailbox -ForwardingAddress $ForwardAllToInternal -DeliverToMailboxAndForward $True
			$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Where-Object { $_.RecipientType -eq "UserMailbox" } | Sort-Object Name | Format-Table Name, DeliverToMailboxAndForward, ForwardingAddress | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$forwardAllUsersEmailToInternalRecipientAndDontSaveLocalCopyToolStripMenuItem_Click = {
	Try
	{
		#$ForwardAllToInternal2 = Read-Host "Enter the users UPN, Display Name, Alias, or Email Address of the user to forward"
		$SelectUsersFormText = "Select the user you want to forward all email to"
		#Call-SelectUsersForm_psf
		Show-SelectCachedDisplayNames_psf
		#$ForwardAllToInternal2 = $SelectUsersForm_comboboxUsers
		$ForwardAllToInternal2 = $SelectCachedDisplayNames_comboboxNames
		If (!$ForwardAllToInternal2)
		{
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a user", "Error")
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Setting up forwarding for all users to $ForwardAllToInternal2..."
			$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Where-Object { `$_.RecipientType -eq 'UserMailbox' } | Set-Mailbox -ForwardingAddress $ForwardAllToInternal2 -DeliverToMailboxAndForward `$True"
			Get-Mailbox -ResultSize unlimited | Where-Object { $_.RecipientType -eq "UserMailbox" } | Set-Mailbox -ForwardingAddress $ForwardAllToInternal2 -DeliverToMailboxAndForward $True
			$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Where-Object { $_.RecipientType -eq "UserMailbox" } | Sort-Object Name | Format-Table Name, DeliverToMailboxAndForward, ForwardingAddress -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

#Aliases

$addEmailAddressForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$AddAliasforUser = Read-Host "Enter the UPN of the user you want to add an alias for"
			$SelectUsersFormText = "Select the User you want to add an Alias for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedDisplayNames_psf
			#$AddAliasforUser = $SelectUsersForm_comboboxUsers
			$AddAliasforUser = $SelectCachedDisplayNames_comboboxNames
			If (!$AddAliasforUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			Else
			{
				$AddAlias = Read-Host "Enter the Alias Address"
				If (!$AddAlias)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Alias Address was entered, please enter a valid Alias Address", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Adding $AddAlias as an Alias for $AddAliasforUser..."
					$textboxDetails.Text = "Set-Mailbox $AddAliasforUser -EmailAddresses @{ add = '$AddAlias' }"
					Set-Mailbox $AddAliasforUser -EmailAddresses @{ add = $AddAlias }
					$TextboxResults.Text = "Getting all aliases for $AddAliasforUser..."
					$TextboxResults.Text = Get-Mailbox $AddAliasforUser | Format-List EmailAddresses | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to add an Alias for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$removeAnEmailAddressForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$RemoveAliasforUser = Read-Host "Enter the UPN of the user you want to remove an alias for"
			$SelectUsersFormText = "Select the user you want to remove an Alias for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedDisplayNames_psf
			#$EmailAddressUser = $SelectUsersForm_comboboxUsers
			$EmailAddressUser = $SelectCachedDisplayNames_comboboxNames
			If (!$EmailAddressUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a user", "Error")
			}
			Else
			{
				$EmailAddressText = "Select the users Alias you want to remove"
				Show-SelectEmailAddresses_psf
				$removeAlias = $SelectEmailAddresses_comboboxSelectEmailAddresses
				#$removeAlias = Read-Host "Enter the alias address"
				If (!$removeAlias)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Alias was selected, please select a valid Alias address you want to remove", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Removing $removeAlias as an Alias for $EmailAddressUser..."
					$textboxDetails.Text = "Set-Mailbox $EmailAddressUser -EmailAddresses @{ remove = '$removeAlias' }"
					Set-Mailbox $EmailAddressUser -EmailAddresses @{ remove = $removeAlias }
					$TextboxResults.Text = "Getting all aliases for $EmailAddressUser..."
					$TextboxResults.Text = Get-Mailbox $EmailAddressUser | Format-List EmailAddresses | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to remove an Alias for another user?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getAUsersEmailAddressesToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$ViewAliasforaUser = Read-Host "Enter the UPN of the user you want to view email addresses for"
			$SelectUsersFormText = "Select the User you want to view all Email Addresses for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedDisplayNames_psf
			#$ViewAliasforaUser = $SelectUsersForm_comboboxUsers
			$ViewAliasforaUser = $SelectCachedDisplayNames_comboboxNames
			If (!$ViewAliasforaUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting all Email Addresses for $ViewAliasforaUser..."
				$textboxDetails.Text = "Get-Mailbox -identity $ViewAliasforaUser | Format-List EmailAddresses"
				$TextboxResults.Text = Get-Mailbox -identity $ViewAliasforaUser | Format-List EmailAddresses | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to view all Email Addresses for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}



###GROUPS###

	#Distribution Groups

$displayDistributionGroupsToolStripMenuItem_Click = {
	try
	{
		$TempDir = $env:temp
		$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter\distros.txt")
		If ((Test-Path $O365AdminTempFolder) -eq $false)
		{
			$Textboxresults.text = "Caching Distribution Groups…"
			(Get-DistributionGroup -ResultSize unlimited | Where-Object { $_.GroupType -notlike 'Universal, SecurityEnabled' }).DisplayName | Out-File "$O365AdminTempFolder"
			$Textboxresults.text = ""
			
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all Distribution Groups..."
			$textboxDetails.Text = "Get-DistributionGroup -ResultSize unlimited | Where-Object { `$_.GroupType -notlike 'Universal, SecurityEnabled'} | Sort-Object DisplayName | Format-Table DisplayName -AutoSize"
			#$TextboxResults.text = Get-DistributionGroup -ResultSize unlimited | Where-Object { $_.GroupType -notlike "Universal, SecurityEnabled" } | Sort-Object DisplayName | Format-Table DisplayName -AutoSize | Out-String -Width 2147483647
			$TextboxResults.Text = Get-Content $O365AdminTempFolder | Format-Table DisplayName -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all Distribution Groups..."
			$textboxDetails.Text = "Get-DistributionGroup -ResultSize unlimited | Where-Object { `$_.GroupType -notlike 'Universal, SecurityEnabled'} | Sort-Object DisplayName | Format-Table DisplayName -AutoSize"
			#$TextboxResults.text = Get-DistributionGroup -ResultSize unlimited | Where-Object { $_.GroupType -notlike "Universal, SecurityEnabled" } | Sort-Object DisplayName | Format-Table DisplayName -AutoSize | Out-String -Width 2147483647
			$TextboxResults.Text = Get-Content $O365AdminTempFolder | Format-Table DisplayName -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$createADistributionGroupToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$NewDistroGroup = Read-Host "What is the name of the new Distribution Group?"
			If (!$NewDistroGroup)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Distribution Group name was entered, please enter a valid name", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Creating the $NewDistroGroup Distribution Group..."
				$textboxDetails.Text = "New-DistributionGroup -Name $NewDistroGroup | Format-List"
				$TextboxResults.Text = New-DistributionGroup -Name $NewDistroGroup | Format-List | Out-String -Width 2147483647
				$TempDir = $env:temp
				$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter\distros.txt")
				Remove-Item $O365AdminTempFolder -Force
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to create another Distribution Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$deleteADistributionGroupToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			
			$TempDir = $env:temp
			$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter\distros.txt")
			If ((Test-Path $O365AdminTempFolder) -eq $false)
			{
				$Textboxresults.text = "Caching Distribution Groups…"
				(Get-DistributionGroup -ResultSize unlimited | Where-Object { $_.GroupType -notlike 'Universal, SecurityEnabled' }).DisplayName | Out-File "$O365AdminTempFolder"
				$Textboxresults.text = ""
				
				#$DeleteDistroGroup = Read-Host "Enter the name of the Distribtuion group you want deleted."
				$DistroGroupsText = "Select the Distribution Group you want to delete"
				Show-SelectCachedDistroGroups_psf
				$DeleteDistroGroup = $SelectCachedDistroGroups_comboboxNames
				If (!$DeleteDistroGroup)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group to delete", "Error")
				}
				Else
				{
					$OUTPUT = [System.Windows.Forms.MessageBox]::Show("Are you sure you want to delete $DeleteDistroGroup ?", "Warning!", 4)
					If ($OUTPUT -eq "YES")
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Deleting the $DeleteDistroGroup Distribution Group..."
						$textboxDetails.Text = "Remove-DistributionGroup $DeleteDistroGroup"
						Remove-DistributionGroup $DeleteDistroGroup
						$TextboxResults.Text = "Getting list of distribution groups"
						$TextboxResults.text = Get-DistributionGroup -ResultSize unlimited | Where-Object { $_.GroupType -notlike "Universal, SecurityEnabled" } | Sort-Object DisplayName | Format-Table DisplayName -AutoSize | Out-String -Width 2147483647
						$TempDir = $env:temp
						$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter\distros.txt")
						Remove-Item $O365AdminTempFolder -Force
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
					Else
					{
						[System.Windows.Forms.MessageBox]::Show("$DeleteDistroGroup was not deleted", "Info")
					}
				}
			}
			Else
			{
				
				#$DeleteDistroGroup = Read-Host "Enter the name of the Distribtuion group you want deleted."
				$DistroGroupsText = "Select the Distribution Group you want to delete"
				Show-SelectCachedDistroGroups_psf
				$DeleteDistroGroup = $SelectCachedDistroGroups_comboboxNames
				If (!$DeleteDistroGroup)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group to delete", "Error")
				}
				Else
				{
					$OUTPUT = [System.Windows.Forms.MessageBox]::Show("Are you sure you want to delete $DeleteDistroGroup ?", "Warning!", 4)
					If ($OUTPUT -eq "YES")
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Deleting the $DeleteDistroGroup Distribution Group..."
						$textboxDetails.Text = "Remove-DistributionGroup $DeleteDistroGroup"
						Remove-DistributionGroup $DeleteDistroGroup
						$TextboxResults.Text = "Getting list of distribution groups"
						$TextboxResults.text = Get-DistributionGroup -ResultSize unlimited | Where-Object { $_.GroupType -notlike "Universal, SecurityEnabled" } | Sort-Object DisplayName | Format-Table DisplayName -AutoSize | Out-String -Width 2147483647
						$TempDir = $env:temp
						$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter\distros.txt")
						Remove-Item $O365AdminTempFolder -Force
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
					Else
					{
						[System.Windows.Forms.MessageBox]::Show("$DeleteDistroGroup was not deleted", "Info")
					}
				}
			}
		}
		
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to delete another Distribution Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$allowDistributionGroupToReceiveExternalEmailToolStripMenuItem_Click = {
	Try
	{
		$TempDir = $env:temp
		$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter\distros.txt")
		If ((Test-Path $O365AdminTempFolder) -eq $false)
		{
			$Textboxresults.text = "Caching Distribution Groups…"
			(Get-DistributionGroup -ResultSize unlimited | Where-Object { $_.GroupType -notlike 'Universal, SecurityEnabled' }).DisplayName | Out-File $O365AdminTempFolder
			$Textboxresults.text = ""
			#$AllowExternalEmail = Read-Host "Enter the name of the Distribtuion Group you want to allow external email to"
			$DistroGroupsText = "Select the Distribution Group you want to allow External Email to"
			Show-SelectCachedDistroGroups_psf
			$AllowExternalEmail = $SelectCachedDistroGroups_comboboxNames
			If (!$AllowExternalEmail)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group you want to allow external e-mail to", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Allowing extneral senders for the $AllowExternalEmail Distribution Group..."
				$textboxDetails.Text = "Set-DistributionGroup $AllowExternalEmail -RequireSenderAuthenticationEnabled `$False"
				Set-DistributionGroup $AllowExternalEmail -RequireSenderAuthenticationEnabled $False
				$TextboxResults.text = Get-DistributionGroup $AllowExternalEmail | Format-List Name, RequireSenderAuthenticationEnabled | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Else
		{
			#$AllowExternalEmail = Read-Host "Enter the name of the Distribtuion Group you want to allow external email to"
			$DistroGroupsText = "Select the Distribution Group you want to allow External Email to"
			Show-SelectCachedDistroGroups_psf
			$AllowExternalEmail = $SelectCachedDistroGroups_comboboxNames
			If (!$AllowExternalEmail)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group you want to allow external e-mail to", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Allowing extneral senders for the $AllowExternalEmail Distribution Group..."
				$textboxDetails.Text = "Set-DistributionGroup $AllowExternalEmail -RequireSenderAuthenticationEnabled `$False"
				Set-DistributionGroup $AllowExternalEmail -RequireSenderAuthenticationEnabled $False
				$TextboxResults.text = Get-DistributionGroup $AllowExternalEmail | Format-List Name, RequireSenderAuthenticationEnabled | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$hideDistributionGroupFromGALToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$TempDir = $env:temp
			$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter\distros.txt")
			If ((Test-Path $O365AdminTempFolder) -eq $false)
			{
				$Textboxresults.text = "Caching Distribution Groups…"
				(Get-DistributionGroup -ResultSize unlimited | Where-Object { $_.GroupType -notlike 'Universal, SecurityEnabled' }).DisplayName | Out-File "$O365AdminTempFolder"
				$Textboxresults.text = ""
				
				#$GroupHideGAL = Read-Host "Enter the name of the Distribtuion Group you want to hide from the GAL"
				$DistroGroupsText = "Select the Distribution Group you want to hide from the Global Address List"
				Show-SelectCachedDistroGroups_psf
				$GroupHideGAL = $SelectCachedDistroGroups_comboboxNames
				If (!$GroupHideGAL)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group you want to hide from the Global Address List", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Hiding the $GroupHideGAL from the Global Address List..."
					$textboxDetails.Text = "Set-DistributionGroup $GroupHideGAL -HiddenFromAddressListsEnabled `$True"
					Set-DistributionGroup $GroupHideGAL -HiddenFromAddressListsEnabled $True
					$TextboxResults.text = Get-DistributionGroup $GroupHideGAL | Format-List Name, HiddenFromAddressListsEnabled | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
			Else
			{
				#$GroupHideGAL = Read-Host "Enter the name of the Distribtuion Group you want to hide from the GAL"
				$DistroGroupsText = "Select the Distribution Group you want to hide from the Global Address List"
				Show-SelectCachedDistroGroups_psf
				$GroupHideGAL = $SelectCachedDistroGroups_comboboxNames
				If (!$GroupHideGAL)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group you want to hide from the Global Address List", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Hiding the $GroupHideGAL from the Global Address List..."
					$textboxDetails.Text = "Set-DistributionGroup $GroupHideGAL -HiddenFromAddressListsEnabled `$True"
					Set-DistributionGroup $GroupHideGAL -HiddenFromAddressListsEnabled $True
					$TextboxResults.text = Get-DistributionGroup $GroupHideGAL | Format-List Name, HiddenFromAddressListsEnabled | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to hide another Distribution Group from the Global Address List?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$displayDistributionGroupMembersToolStripMenuItem_Click = {
	Try
	{
		$TempDir = $env:temp
		$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter\distros.txt")
		If ((Test-Path $O365AdminTempFolder) -eq $false)
		{
			$Textboxresults.text = "Caching Distribution Groups…"
			(Get-DistributionGroup -ResultSize unlimited | Where-Object { $_.GroupType -notlike 'Universal, SecurityEnabled' }).DisplayName | Out-File "$O365AdminTempFolder"
			$Textboxresults.text = ""
			
			#$ListDistributionGroupMembers = Read-Host "Enter the name of the Distribution Group you want to list members of"
			$DistroGroupsText = "Select the Distribution Group you want to view the members of"
			Show-SelectCachedDistroGroups_psf
			$ListDistributionGroupMembers = $SelectCachedDistroGroups_comboboxNames
			If (!$ListDistributionGroupMembers)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group you want to view members of", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting all members of the $ListDistributionGroupMembers Distrubution Group..."
				$textboxDetails.Text = "Get-DistributionGroupMember $ListDistributionGroupMembers | Sort-Object DisplayName | Format-Table -AutoSize"
				$TextboxResults.Text = Get-DistributionGroupMember $ListDistributionGroupMembers | Sort-Object DisplayName | Format-Table -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Else
		{
			#$ListDistributionGroupMembers = Read-Host "Enter the name of the Distribution Group you want to list members of"
			$DistroGroupsText = "Select the Distribution Group you want to view the members of"
			Show-SelectCachedDistroGroups_psf
			$ListDistributionGroupMembers = $SelectCachedDistroGroups_comboboxNames
			If (!$ListDistributionGroupMembers)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group you want to view members of", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting all members of the $ListDistributionGroupMembers Distrubution Group..."
				$textboxDetails.Text = "Get-DistributionGroupMember $ListDistributionGroupMembers | Sort-Object DisplayName | Format-Table -AutoSize"
				$TextboxResults.Text = Get-DistributionGroupMember $ListDistributionGroupMembers | Sort-Object DisplayName | Format-Table -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$addAUserToADistributionGroupToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$TempDir = $env:temp
			$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter\distros.txt")
			If ((Test-Path $O365AdminTempFolder) -eq $false)
			{
				$Textboxresults.text = "Caching Distribution Groups…"
				(Get-DistributionGroup -ResultSize unlimited | Where-Object { $_.GroupType -notlike 'Universal, SecurityEnabled' }).DisplayName | Out-File "$O365AdminTempFolder"
				$Textboxresults.text = ""
				
				#$DistroGroupAdd = Read-Host "Enter the name of the Distribution Group"
				$DistroGroupsText = "Select the Distribution Group you want to add a user to"
				Show-SelectCachedDistroGroups_psf
				$DistroGroupAdd = $SelectCachedDistroGroups_comboboxNames
				If (!$DistroGroupAdd)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group you want to add a user to", "Error")
				}
				Else
				{
					#$DistroGroupAddUser = Read-Host "Enter the UPN of the user you wish to add to $DistroGroupAdd"
					$SelectUsersFormText = "Select the user you want to add to $DistroGroupAdd"
					Show-SelectCachedDisplayNames_psf
					$DistroGroupAddUser = $SelectCachedDisplayNames_comboboxNames
					If (!$DistroGroupAddUser)
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a user you want to add to $DistroGroupAdd", "Error")
					}
					Else
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Adding $DistroGroupAddUser to the $DistroGroupAdd Distribution Group..."
						$textboxDetails.Text = "Add-DistributionGroupMember -Identity $DistroGroupAdd -Member $DistroGroupAddUser"
						Add-DistributionGroupMember -Identity $DistroGroupAdd -Member $DistroGroupAddUser
						$TextboxResults.Text = "Getting members of $DistroGroupAdd..."
						$TextboxResults.Text = Get-DistributionGroupMember $DistroGroupAdd | Sort-Object DisplayName | Format-Table -AutoSize | Out-String -Width 2147483647
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
				}
			}
			Else
			{
				#$DistroGroupAdd = Read-Host "Enter the name of the Distribution Group"
				$DistroGroupsText = "Select the Distribution Group you want to add a user to"
				Show-SelectCachedDistroGroups_psf
				$DistroGroupAdd = $SelectCachedDistroGroups_comboboxNames
				If (!$DistroGroupAdd)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group you want to add a user to", "Error")
				}
				Else
				{
					#$DistroGroupAddUser = Read-Host "Enter the UPN of the user you wish to add to $DistroGroupAdd"
					$SelectUsersFormText = "Select the user you want to add to $DistroGroupAdd"
					Show-SelectCachedDisplayNames_psf
					$DistroGroupAddUser = $SelectCachedDisplayNames_comboboxNames
					If (!$DistroGroupAddUser)
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a user you want to add to $DistroGroupAdd", "Error")
					}
					Else
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Adding $DistroGroupAddUser to the $DistroGroupAdd Distribution Group..."
						$textboxDetails.Text = "Add-DistributionGroupMember -Identity $DistroGroupAdd -Member $DistroGroupAddUser"
						Add-DistributionGroupMember -Identity $DistroGroupAdd -Member $DistroGroupAddUser
						$TextboxResults.Text = "Getting members of $DistroGroupAdd..."
						$TextboxResults.Text = Get-DistributionGroupMember $DistroGroupAdd | Sort-Object DisplayName | Format-Table -AutoSize | Out-String -Width 2147483647
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to add another User to a Distribution Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$removeAUserADistributionGroupToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$TempDir = $env:temp
			$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter\distros.txt")
			If ((Test-Path $O365AdminTempFolder) -eq $false)
			{
				$Textboxresults.text = "Caching Distribution Groups…"
				(Get-DistributionGroup -ResultSize unlimited | Where-Object { $_.GroupType -notlike 'Universal, SecurityEnabled' }).DisplayName | Out-File "$O365AdminTempFolder"
				$Textboxresults.text = ""
				
				#$DistroGroupRemove = Read-Host "Enter the name of the Distribution Group"
				$DistroGroupsText = "Select the Distribution Group you want to remove a user from"
				Show-SelectCachedDistroGroups_psf
				$GlobalDistroGroupMembers = $SelectCachedDistroGroups_comboboxNames
				If (!$GlobalDistroGroupMembers)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group you want to remove a user from", "Error")
				}
				Else
				{
					#$DistroGroupRemoveUser = Read-Host "Enter the UPN of the user you wish to remove from $GlobalDistroGroupMembers"
					$DistroGroupMembersText = "Select the User you want to remove from $GlobalDistroGroupMembers"
					Show-SelectCachedDistroGroups_psf
					$DistroGroupRemoveUser = $SelectCachedDistroGroups_comboboxNames
					If (!$DistroGroupRemoveUser)
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a user you want to remove from $GlobalDistroGroupMembers", "Error")
					}
					Else
					{
						$OUTPUT = [System.Windows.Forms.MessageBox]::Show("Are you sure you want to remove $DistroGroupRemoveUser from $GlobalDistroGroupMembers ?", "Warning!", 4)
						If ($OUTPUT -eq "YES")
						{
							$FormO365AdministrationCenter.Cursor = 'WaitCursor'
							$TextboxResults.Text = "Removing $DistroGroupRemoveUser from the $GlobalDistroGroupMembers Distribution Group..."
							$textboxDetails.Text = "Remove-DistributionGroupMember -Identity $GlobalDistroGroupMembers -Member $DistroGroupRemoveUser"
							Remove-DistributionGroupMember -Identity $GlobalDistroGroupMembers -Member $DistroGroupRemoveUser
							$TextboxResults.Text = "Getting members of $GlobalDistroGroupMembers"
							$TextboxResults.Text = Get-DistributionGroupMember $GlobalDistroGroupMembers | Sort-Object DisplayName | Format-Table -AutoSize | Out-String -Width 2147483647
							$FormO365AdministrationCenter.Cursor = 'Default'
						}
						Else
						{
							[System.Windows.Forms.MessageBox]::Show("$DistroGroupRemoveUser was not removed from $DistroGroupRemove ?", "Info")
						}
					}
				}
			}
			Else
			{
				#$DistroGroupRemove = Read-Host "Enter the name of the Distribution Group"
				$DistroGroupsText = "Select the Distribution Group you want to remove a user from"
				Show-SelectCachedDistroGroups_psf
				$GlobalDistroGroupMembers = $SelectCachedDistroGroups_comboboxNames
				If (!$GlobalDistroGroupMembers)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group you want to remove a user from", "Error")
				}
				Else
				{
					#$DistroGroupRemoveUser = Read-Host "Enter the UPN of the user you wish to remove from $GlobalDistroGroupMembers"
					$DistroGroupMembersText = "Select the User you want to remove from $GlobalDistroGroupMembers"
					Show-SelectDistroGroupMembers_psf
					$DistroGroupRemoveUser = $SelectDistroGroupMembers_comboboxSelectDistroGroupMembers
					If (!$DistroGroupRemoveUser)
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a user you want to remove from $GlobalDistroGroupMembers", "Error")
					}
					Else
					{
						$OUTPUT = [System.Windows.Forms.MessageBox]::Show("Are you sure you want to remove $DistroGroupRemoveUser from $GlobalDistroGroupMembers ?", "Warning!", 4)
						If ($OUTPUT -eq "YES")
						{
							$FormO365AdministrationCenter.Cursor = 'WaitCursor'
							$TextboxResults.Text = "Removing $DistroGroupRemoveUser from the $GlobalDistroGroupMembers Distribution Group..."
							$textboxDetails.Text = "Remove-DistributionGroupMember -Identity $GlobalDistroGroupMembers -Member $DistroGroupRemoveUser"
							Remove-DistributionGroupMember -Identity $GlobalDistroGroupMembers -Member $DistroGroupRemoveUser
							$TextboxResults.Text = "Getting members of $GlobalDistroGroupMembers"
							$TextboxResults.Text = Get-DistributionGroupMember $GlobalDistroGroupMembers | Sort-Object DisplayName | Format-Table -AutoSize | Out-String -Width 2147483647
							$FormO365AdministrationCenter.Cursor = 'Default'
						}
						Else
						{
							[System.Windows.Forms.MessageBox]::Show("$DistroGroupRemoveUser was not removed from $DistroGroupRemove ?", "Info")
						}
					}
				}
			}
		}
		catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to remove another user from a Distribution Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$addAllUsersToADistributionGroupToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$TempDir = $env:temp
			$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter\distros.txt")
			If ((Test-Path $O365AdminTempFolder) -eq $false)
			{
				$Textboxresults.text = "Caching Distribution Groups…"
				(Get-DistributionGroup -ResultSize unlimited | Where-Object { $_.GroupType -notlike 'Universal, SecurityEnabled' }).DisplayName | Out-File "$O365AdminTempFolder"
				$Textboxresults.text = ""
				
				$users = Get-Mailbox -ResultSize unlimited | Select-Object -ExpandProperty Alias
				#$AddAllUsersToSingleDistro = Read-Host "Enter the name of the Distribution Group you want to add all users to"
				$DistroGroupsText = "Select the Distribution Group you want to add all users too"
				Show-SelectCachedDistroGroups_psf
				$AddAllUsersToSingleDistro = $SelectCachedDistroGroups_comboboxNames
				If (!$AddAllUsersToSingleDistro)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group you want to add all users too", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Adding all users to the $AddAllUsersToSingleDistro distribution group..."
					$textboxDetails.Text = "Foreach (`$user in `$users) { Add-DistributionGroupMember -Identity $AddAllUsersToSingleDistro -Member `$user }"
					Foreach ($user in $users) { Add-DistributionGroupMember -Identity $AddAllUsersToSingleDistro -Member $user }
					$TextboxResults.Text = "Getting members of $AddAllUsersToSingleDistro"
					$TextboxResults.Text = Get-DistributionGroupMember $AddAllUsersToSingleDistro | Sort-Object DisplayName | Format-Table -AutoSize | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
			Else
			{
				$users = Get-Mailbox -ResultSize unlimited | Select-Object -ExpandProperty Alias
				#$AddAllUsersToSingleDistro = Read-Host "Enter the name of the Distribution Group you want to add all users to"
				$DistroGroupsText = "Select the Distribution Group you want to add all users too"
				Show-SelectCachedDistroGroups_psf
				$AddAllUsersToSingleDistro = $SelectCachedDistroGroups_comboboxNames
				If (!$AddAllUsersToSingleDistro)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group you want to add all users too", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Adding all users to the $AddAllUsersToSingleDistro distribution group..."
					$textboxDetails.Text = "Foreach (`$user in `$users) { Add-DistributionGroupMember -Identity $AddAllUsersToSingleDistro -Member `$user }"
					Foreach ($user in $users) { Add-DistributionGroupMember -Identity $AddAllUsersToSingleDistro -Member $user }
					$TextboxResults.Text = "Getting members of $AddAllUsersToSingleDistro"
					$TextboxResults.Text = Get-DistributionGroupMember $AddAllUsersToSingleDistro | Sort-Object DisplayName | Format-Table -AutoSize | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to add all Users to another Distribtuion Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getDetailedInfoForDistributionGroupToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$TempDir = $env:temp
			$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter\distros.txt")
			If ((Test-Path $O365AdminTempFolder) -eq $false)
			{
				$Textboxresults.text = "Caching Distribution Groups…"
				(Get-DistributionGroup -ResultSize unlimited | Where-Object { $_.GroupType -notlike 'Universal, SecurityEnabled' }).DisplayName | Out-File "$O365AdminTempFolder"
				$Textboxresults.text = ""
				
				#$DetailedInfoMailDistroGroup = Read-Host "Enter the group name"
				$DistroGroupsText = "Select the Distribution Group you want to view more information on"
				Show-SelectCachedDistroGroups_psf
				$DetailedInfoMailDistroGroup = $SelectCachedDistroGroups_comboboxNames
				If (!$DetailedInfoMailDistroGroup)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group you want to view detailed information for", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Getting detailed info about the $DetailedInfoMailDistroGroup group..."
					$textboxDetails.Text = "Get-DistributionGroup $DetailedInfoMailDistroGroup | Format-List"
					$TextboxResults.text = Get-DistributionGroup $DetailedInfoMailDistroGroup | Format-List | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
			Else
			{
				#$DetailedInfoMailDistroGroup = Read-Host "Enter the group name"
				$DistroGroupsText = "Select the Distribution Group you want to view more information on"
				Show-SelectCachedDistroGroups_psf
				$DetailedInfoMailDistroGroup = $SelectCachedDistroGroups_comboboxNames
				If (!$DetailedInfoMailDistroGroup)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group you want to view detailed information for", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Getting detailed info about the $DetailedInfoMailDistroGroup group..."
					$textboxDetails.Text = "Get-DistributionGroup $DetailedInfoMailDistroGroup | Format-List"
					$TextboxResults.text = Get-DistributionGroup $DetailedInfoMailDistroGroup | Format-List | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get information on another Distribution Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$allowAllDistributionGroupsToReceiveExternalEmailToolStripMenuItem_Click = {
	try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Allowing extneral senders for all Distribution Groups..."
		$textboxDetails.Text = "Get-DistributionGroup -ResultSize unlimited | Set-DistributionGroup -RequireSenderAuthenticationEnabled `$False"
		Get-DistributionGroup -ResultSize unlimited | Set-DistributionGroup -RequireSenderAuthenticationEnabled $False
		$TextboxResults.text = Get-DistributionGroup -ResultSize unlimited | Sort-Object Name | Format-Table Name, RequireSenderAuthenticationEnabled -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$denyDistributionGroupFromReceivingExternalEmailToolStripMenuItem_Click = {
	Try
	{
		$TempDir = $env:temp
		$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter\distros.txt")
		If ((Test-Path $O365AdminTempFolder) -eq $false)
		{
			$Textboxresults.text = "Caching Distribution Groups…"
			(Get-DistributionGroup -ResultSize unlimited | Where-Object { $_.GroupType -notlike 'Universal, SecurityEnabled' }).DisplayName | Out-File "$O365AdminTempFolder"
			$Textboxresults.text = ""
			
			#$DenyExternalEmail = Read-Host "Enter the name of the Distribtuion Group you want to deny external email to"
			$DistroGroupsText = "Select the Distribution Group you want to deny external email to"
			Show-SelectCachedDistroGroups_psf
			$DenyExternalEmail = $SelectCachedDistroGroups_comboboxNames
			If (!$DenyExternalEmail)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Distribution Group selected, please select a valid Distribution Group you want to deny external email to", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Denying extneral senders for the $DenyExternalEmail Distribution Group..."
				$textboxDetails.Text = "Set-DistributionGroup $DenyExternalEmail -RequireSenderAuthenticationEnabled `$True"
				Set-DistributionGroup $DenyExternalEmail -RequireSenderAuthenticationEnabled $True
				$TextboxResults.text = Get-DistributionGroup $DenyExternalEmail | Sort-Object Name | Format-Table Name, RequireSenderAuthenticationEnabled -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
				}
		}
		Else
		{
			#$DenyExternalEmail = Read-Host "Enter the name of the Distribtuion Group you want to deny external email to"
			$DistroGroupsText = "Select the Distribution Group you want to deny external email to"
			Show-SelectCachedDistroGroups_psf
			$DenyExternalEmail = $SelectCachedDistroGroups_comboboxNames
			If (!$DenyExternalEmail)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Distribution Group selected, please select a valid Distribution Group you want to deny external email to", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Denying extneral senders for the $DenyExternalEmail Distribution Group..."
				$textboxDetails.Text = "Set-DistributionGroup $DenyExternalEmail -RequireSenderAuthenticationEnabled `$True"
				Set-DistributionGroup $DenyExternalEmail -RequireSenderAuthenticationEnabled $True
				$TextboxResults.text = Get-DistributionGroup $DenyExternalEmail | Sort-Object Name | Format-Table Name, RequireSenderAuthenticationEnabled -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$denyAllDistributionGroupsFromReceivingExternalEmailToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Denying extneral senders for all Distribution Groups..."
		$textboxDetails.Text = "Get-DistributionGroup -ResultSize unlimited | Set-DistributionGroup -RequireSenderAuthenticationEnabled `$True"
		Get-DistributionGroup -ResultSize unlimited | Set-DistributionGroup -RequireSenderAuthenticationEnabled $True
		$TextboxResults.text = Get-DistributionGroup -ResultSize unlimited | Sort-Objects Name | Format-Table Name, RequireSenderAuthenticationEnabled -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getExternalEmailStatusForADistributionGroupToolStripMenuItem_Click = {
	Try
	{
		$TempDir = $env:temp
		$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter\distros.txt")
		If ((Test-Path $O365AdminTempFolder) -eq $false)
		{
			$Textboxresults.text = "Caching Distribution Groups…"
			(Get-DistributionGroup -ResultSize unlimited | Where-Object { $_.GroupType -notlike 'Universal, SecurityEnabled' }).DisplayName | Out-File "$O365AdminTempFolder"
			$Textboxresults.text = ""
			
			#$ExternalEmailStatus = Read-Host "Enter the Distribution Group"
			$DistroGroupsText = "Select the Distribution Group you want to view external email status for"
			Show-SelectCachedDistroGroups_psf
			$ExternalEmailStatus = $SelectCachedDistroGroups_comboboxNames
			If (!$ExternalEmailStatus)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group you want to view external email status for", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting external email status for $ExternalEmailStatus..."
				$textboxDetails.Text = "Get-DistributionGroup $ExternalEmailStatus | Format-List Name, RequireSenderAuthenticationEnabled"
				$TextboxResults.text = Get-DistributionGroup $ExternalEmailStatus | Format-List Name, RequireSenderAuthenticationEnabled | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Else
		{
			#$ExternalEmailStatus = Read-Host "Enter the Distribution Group"
			$DistroGroupsText = "Select the Distribution Group you want to view external email status for"
			Show-SelectCachedDistroGroups_psf
			$ExternalEmailStatus = $SelectCachedDistroGroups_comboboxNames
			If (!$ExternalEmailStatus)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group you want to view external email status for", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting external email status for $ExternalEmailStatus..."
				$textboxDetails.Text = "Get-DistributionGroup $ExternalEmailStatus | Format-List Name, RequireSenderAuthenticationEnabled"
				$TextboxResults.text = Get-DistributionGroup $ExternalEmailStatus | Format-List Name, RequireSenderAuthenticationEnabled | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getExternalEmailStatusForAllDistributionGroupsToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting external email status for all distribution groups..."
		$textboxDetails.Text = "Get-DistributionGroup -ResultSize unlimited | Sort-Object Name | Format-Table Name, RequireSenderAuthenticationEnabled -AutoSize"
		$TextboxResults.text = Get-DistributionGroup -ResultSize unlimited | Sort-Object Name | Format-Table Name, RequireSenderAuthenticationEnabled -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getDistributionGroupsAcceptMessagesFromInfoToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$TempDir = $env:temp
			$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter\distros.txt")
			If ((Test-Path $O365AdminTempFolder) -eq $false)
			{
				$Textboxresults.text = "Caching Distribution Groups…"
				(Get-DistributionGroup -ResultSize unlimited | Where-Object { $_.GroupType -notlike 'Universal, SecurityEnabled' }).DisplayName | Out-File "$O365AdminTempFolder"
				$Textboxresults.text = ""
				
				$DistroGroupsText = "Select the distro group you want to view Accept Messages Only From info for"
				Show-SelectCachedDistroGroups_psf
				$distro = $SelectCachedDistroGroups_comboboxNames
				If (!$distro)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$textboxDetails.Text = "Get-DistributionGroup -Identity $distro | Format-List Identity, AcceptMessagesOnlyFrom, AcceptMessagesOnlyFromDLMembers, AcceptMessagesOnlyFromSendersOrMember"
					$TextboxResults.Text = "Getting delivery restriction information for $distro..."
					$TextboxResults.text = Get-DistributionGroup -Identity $distro | Format-List Identity, AcceptMessagesOnlyFrom, AcceptMessagesOnlyFromDLMembers, AcceptMessagesOnlyFromSendersOrMembers | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
			Else
			{
				$DistroGroupsText = "Select the distro group you want to view Accept Messages Only From info for"
				Show-SelectCachedDistroGroups_psf
				$distro = $SelectCachedDistroGroups_comboboxNames
				If (!$distro)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$textboxDetails.Text = "Get-DistributionGroup -Identity $distro | Format-List Identity, AcceptMessagesOnlyFrom, AcceptMessagesOnlyFromDLMembers, AcceptMessagesOnlyFromSendersOrMember"
					$TextboxResults.Text = "Getting delivery restriction information for $distro..."
					$TextboxResults.text = Get-DistributionGroup -Identity $distro | Format-List Identity, AcceptMessagesOnlyFrom, AcceptMessagesOnlyFromDLMembers, AcceptMessagesOnlyFromSendersOrMembers | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to view another Distribution Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getDistributionGroupsRejectMessagesFromInfoToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$TempDir = $env:temp
			$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter\distros.txt")
			If ((Test-Path $O365AdminTempFolder) -eq $false)
			{
				$Textboxresults.text = "Caching Distribution Groups…"
				(Get-DistributionGroup -ResultSize unlimited | Where-Object { $_.GroupType -notlike 'Universal, SecurityEnabled' }).DisplayName | Out-File "$O365AdminTempFolder"
				$Textboxresults.text = ""
				
				$DistroGroupsText = "Select the distro group you want to view Reject Messages Only From info for"
				Show-SelectCachedDistroGroups_psf
				$distro = $SelectCachedDistroGroups_comboboxNames
				If (!$distro)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$textboxDetails.Text = "Get-DistributionGroup -Identity $distro | Format-List Identity, RejectMessagesFrom, RejectMessagesFromDLMembers, RejectMessagesFromSendersOrMembers"
					$TextboxResults.Text = "Getting delivery restriction information for $distro..."
					$TextboxResults.text = Get-DistributionGroup -Identity $distro | Format-List Identity, RejectMessagesFrom, RejectMessagesFromDLMembers, RejectMessagesFromSendersOrMembers | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
			Else
			{
				$DistroGroupsText = "Select the distro group you want to view Reject Messages Only From info for"
				Show-SelectCachedDistroGroups_psf
				$distro = $SelectCachedDistroGroups_comboboxNames
				If (!$distro)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$textboxDetails.Text = "Get-DistributionGroup -Identity $distro | Format-List Identity, RejectMessagesFrom, RejectMessagesFromDLMembers, RejectMessagesFromSendersOrMembers"
					$TextboxResults.Text = "Getting delivery restriction information for $distro..."
					$TextboxResults.text = Get-DistributionGroup -Identity $distro | Format-List Identity, RejectMessagesFrom, RejectMessagesFromDLMembers, RejectMessagesFromSendersOrMembers | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to view another Distribution Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
}

$getAllGroupsAndAllMembersToCSVToolStripMenuItem1_Click = {
	Try
	{
		$savedialog = New-Object windows.forms.savefiledialog
		$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
		$savedialog.title = "Export to File"
		$savedialog.filter = ".csv|*.csv"
		$savedialog.ShowHelp = $True
		$result = $savedialog.ShowDialog(); $result
		if ($result -eq "OK")
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			#Constant Variables 
			$OutputFile = $savedialog.filename
			$TextboxResults.Text = "Getting all groups and members..."
			$arrDLMembers = @{ }
			
			#Prepare Output file with headers 
			Out-File -FilePath $OutputFile -InputObject "Distribution Group DisplayName,Distribution Group Email,Member DisplayName, Member Email, Member Type" -Encoding UTF8
			
			#Get all Distribution Groups from Office 365 
			$objDistributionGroups = Get-DistributionGroup -ResultSize Unlimited
			
			#Iterate through all groups, one at a time     
			Foreach ($objDistributionGroup in $objDistributionGroups)
			{
				
				#write-host "Processing $($objDistributionGroup.DisplayName)..."
				
				#Get members of this group 
				$objDGMembers = Get-DistributionGroupMember -Identity $($objDistributionGroup.PrimarySmtpAddress)
				
				#write-host "Found $($objDGMembers.Count) members..."
				
				#Iterate through each member 
				Foreach ($objMember in $objDGMembers)
				{
					Out-File -FilePath $OutputFile -InputObject "$($objDistributionGroup.DisplayName),$($objDistributionGroup.PrimarySMTPAddress),$($objMember.DisplayName),$($objMember.PrimarySMTPAddress),$($objMember.RecipientType)" -Encoding UTF8 -append
					#write-host "`t$($objDistributionGroup.DisplayName),$($objDistributionGroup.PrimarySMTPAddress),$($objMember.DisplayName),$($objMember.PrimarySMTPAddress),$($objMember.RecipientType)"
				}
			}
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		$TextboxResults.Text = ""
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
	
}

$getADistributionGroupsMembersToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$TempDir = $env:temp
			$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter\distros.txt")
			If ((Test-Path $O365AdminTempFolder) -eq $false)
			{
				$Textboxresults.text = "Caching Distribution Groups…"
				(Get-DistributionGroup -ResultSize unlimited | Where-Object { $_.GroupType -notlike 'Universal, SecurityEnabled' }).DisplayName | Out-File "$O365AdminTempFolder"
				$Textboxresults.text = ""
				
				
				#$ListDistributionGroupMembers = Read-Host "Enter the name of the Distribution Group you want to list members of"
				$DistroGroupsText = "Select the Distribution Group you want to view the members of"
				Show-SelectCachedDistroGroups_psf
				$ListDistributionGroupMembers = $SelectCachedDistroGroups_comboboxNames
				If (!$ListDistributionGroupMembers)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group you want to view the members of", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Getting all members of the $ListDistributionGroupMembers Distrubution Group..."
					$textboxDetails.Text = "Get-DistributionGroupMember $ListDistributionGroupMembers | Sort-Object DisplayName | Format-Table -AutoSize"
					$TextboxResults.Text = Get-DistributionGroupMember $ListDistributionGroupMembers | Sort-Object DisplayName | Format-Table -AutoSize | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
			Else
			{
				#$ListDistributionGroupMembers = Read-Host "Enter the name of the Distribution Group you want to list members of"
				$DistroGroupsText = "Select the Distribution Group you want to view the members of"
				Show-SelectCachedDistroGroups_psf
				$ListDistributionGroupMembers = $SelectCachedDistroGroups_comboboxNames
				If (!$ListDistributionGroupMembers)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group you want to view the members of", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Getting all members of the $ListDistributionGroupMembers Distrubution Group..."
					$textboxDetails.Text = "Get-DistributionGroupMember $ListDistributionGroupMembers | Sort-Object DisplayName | Format-Table -AutoSize"
					$TextboxResults.Text = Get-DistributionGroupMember $ListDistributionGroupMembers | Sort-Object DisplayName | Format-Table -AutoSize | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get Members of another Distribution Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getAllDisabledUsersThatAreStillMembersOfDistroGroupsToCSVToolStripMenuItem_Click = {
	Try
	{
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$savedialog = New-Object windows.forms.savefiledialog
			$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
			$savedialog.title = "Export to File"
			$savedialog.filter = ".csv|*.csv"
			$savedialog.ShowHelp = $True
			$result = $savedialog.ShowDialog(); $result
			$TextboxResults.Text = "Getting all users that are disabled and still members of distro groups..."
			if ($result -eq "OK")
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				
				#Get All Groups 
				$Groups = Get-MsolGroup -All
				
				#Build Hash of all disabled users 
				$MSOLDisabledUsers = Get-MsolUser -All -EnabledFilter DisabledOnly | Select-Object ObjectId
				$AllDisabledUsers = @()
				$MSOLDisabledUsers | ForEach-Object { $AllDisabledUsers += $_.ObjectID.Guid }
				
				$DisabledUserMembers = @()
				
				foreach ($Group in $Groups)
				{
					#$TextboxResults.Text = "Processing $($Group.DisplayName)..."
					#Get All Members and Loop through them 
					$GroupMembers = Get-MsolGroupMember -All -GroupObjectID $Group.ObjectID
					foreach ($Member in $GroupMembers)
					{
						#Is this member in our disabled list? 
						if ($AllDisabledUsers -contains $Member.ObjectId)
						{
							#$TextboxResults.Text = "`tFound $($Member.DisplayName)"
							#Add them to the list 
							$DisabledUserMembers += (
								$Object = [pscustomobject][ordered] @{
									GroupName = $Group.DisplayName
									GroupEmail = $Group.EmailAddress
									UserName = $Member.DisplayName
									EmailAddress = $Member.EmailAddress
								}
							)
						}
					}
				}
				$DisabledUserMembers | Export-CSV -NoTypeInformation $savedialog.filename
				$TextboxResults.Text = ""
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$savedialog = New-Object windows.forms.savefiledialog
			$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
			$savedialog.title = "Export to File"
			$savedialog.filter = ".csv|*.csv"
			$savedialog.ShowHelp = $True
			$result = $savedialog.ShowDialog(); $result
			$TextboxResults.Text = "Getting all users that are disabled and still members of distro groups..."
			if ($result -eq "OK")
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				
				#Get All Groups 
				$Groups = Get-MsolGroup -All -TenantId $PartnerComboBox.SelectedItem.TenantID
				
				#Build Hash of all disabled users 
				$MSOLDisabledUsers = Get-MsolUser -All -TenantId $PartnerComboBox.SelectedItem.TenantID -EnabledFilter DisabledOnly | Select-Object ObjectId
				$AllDisabledUsers = @()
				$MSOLDisabledUsers | ForEach-Object { $AllDisabledUsers += $_.ObjectID.Guid }
				
				$DisabledUserMembers = @()
				
				foreach ($Group in $Groups)
				{
					#$TextboxResults.Text = "Processing $($Group.DisplayName)..."
					#Get All Members and Loop through them 
					$GroupMembers = Get-MsolGroupMember -All -GroupObjectID $Group.ObjectID -TenantId $PartnerComboBox.SelectedItem.TenantID
					foreach ($Member in $GroupMembers)
					{
						#Is this member in our disabled list? 
						if ($AllDisabledUsers -contains $Member.ObjectId)
						{
							#$TextboxResults.Text = "`tFound $($Member.DisplayName)"
							#Add them to the list 
							$DisabledUserMembers += (
								$Object = [pscustomobject][ordered] @{
									GroupName = $Group.DisplayName
									GroupEmail = $Group.EmailAddress
									UserName = $Member.DisplayName
									EmailAddress = $Member.EmailAddress
								}
							)
						}
					}
				}
				$DisabledUserMembers | Export-CSV -NoTypeInformation $savedialog.filename
				$TextboxResults.Text = ""
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Else
		{
			$savedialog = New-Object windows.forms.savefiledialog
			$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
			$savedialog.title = "Export to File"
			$savedialog.filter = ".csv|*.csv"
			$savedialog.ShowHelp = $True
			$result = $savedialog.ShowDialog(); $result
			$TextboxResults.Text = "Getting all users that are disabled and still members of distro groups..."
			if ($result -eq "OK")
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				
				#Get All Groups 
				$Groups = Get-MsolGroup -All
				
				#Build Hash of all disabled users 
				$MSOLDisabledUsers = Get-MsolUser -All -EnabledFilter DisabledOnly | Select-Object ObjectId
				$AllDisabledUsers = @()
				$MSOLDisabledUsers | ForEach-Object { $AllDisabledUsers += $_.ObjectID.Guid }
				
				$DisabledUserMembers = @()
				
				foreach ($Group in $Groups)
				{
					#$TextboxResults.Text = "Processing $($Group.DisplayName)..."
					#Get All Members and Loop through them 
					$GroupMembers = Get-MsolGroupMember -All -GroupObjectID $Group.ObjectID
					foreach ($Member in $GroupMembers)
					{
						#Is this member in our disabled list? 
						if ($AllDisabledUsers -contains $Member.ObjectId)
						{
							#$TextboxResults.Text = "`tFound $($Member.DisplayName)"
							#Add them to the list 
							$DisabledUserMembers += (
								$Object = [pscustomobject][ordered] @{
									GroupName = $Group.DisplayName
									GroupEmail = $Group.EmailAddress
									UserName = $Member.DisplayName
									EmailAddress = $Member.EmailAddress
								}
							)
						}
					}
				}
				$DisabledUserMembers | Export-CSV -NoTypeInformation $savedialog.filename
				$TextboxResults.Text = ""
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$rejectMessagesFromSpecificSenderForGroupToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$TempDir = $env:temp
			$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter\distros.txt")
			If ((Test-Path $O365AdminTempFolder) -eq $false)
			{
				$Textboxresults.text = "Caching Distribution Groups…"
				(Get-DistributionGroup -ResultSize unlimited | Where-Object { $_.GroupType -notlike 'Universal, SecurityEnabled' }).DisplayName | Out-File "$O365AdminTempFolder"
				$Textboxresults.text = ""
				
				$DistroGroupsText = "Select the distro group you want to modify delivery restriction for"
				Show-SelectCachedDistroGroups_psf
				$distro = $SelectCachedDistroGroups_comboboxNames
				If (!$distro)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group", "Error")
				}
				Else
				{
					$DistroGroupsText = "Select the distro group you don't want the members to be able to send to $distro"
					Show-SelectCachedDistroGroups_psf
					$rejectfrom = $SelectCachedDistroGroups_comboboxNames
					If (!$rejectfrom)
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group", "Error")
					}
					Else
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$textboxDetails.Text = "Set-DistributionGroup -Identity $distro -RejectMessagesFrom `@{ Add = $Rejectfrom }"
						$TextboxResults.Text = "Modifying delivery restriction information for $distro"
						Set-DistributionGroup -Identity $distro -RejectMessagesFromDLMembers @{ Add = $Rejectfrom }
						$TextboxResults.text = Get-DistributionGroup -Identity $distro | Format-List Identity, RejectMessagesFrom, RejectMessagesFromDLMembers, RejectMessagesFromSendersOrMembers | Out-String -Width 2147483647
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
				}
			}
			Else
			{
				
				$DistroGroupsText = "Select the distro group you want to modify delivery restriction for"
				Show-SelectCachedDistroGroups_psf
				$distro = $SelectCachedDistroGroups_comboboxNames
				If (!$distro)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group", "Error")
				}
				Else
				{
					$DistroGroupsText = "Select the distro group you don't want the members to be able to send to $distro"
					Show-SelectCachedDistroGroups_psf
					$rejectfrom = $SelectCachedDistroGroups_comboboxNames
					If (!$rejectfrom)
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group", "Error")
					}
					Else
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$textboxDetails.Text = "Set-DistributionGroup -Identity $distro -RejectMessagesFrom `@{ Add = $Rejectfrom }"
						$TextboxResults.Text = "Modifying delivery restriction information for $distro"
						Set-DistributionGroup -Identity $distro -RejectMessagesFromDLMembers @{ Add = $Rejectfrom }
						$TextboxResults.text = Get-DistributionGroup -Identity $distro | Format-List Identity, RejectMessagesFrom, RejectMessagesFromDLMembers, RejectMessagesFromSendersOrMembers | Out-String -Width 2147483647
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to modify another Distribution Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$acceptMessagesForAGroupFromMembersOfAGroupToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$TempDir = $env:temp
			$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter\distros.txt")
			If ((Test-Path $O365AdminTempFolder) -eq $false)
			{
				$Textboxresults.text = "Caching Distribution Groups…"
				(Get-DistributionGroup -ResultSize unlimited | Where-Object { $_.GroupType -notlike 'Universal, SecurityEnabled' }).DisplayName | Out-File "$O365AdminTempFolder"
				$Textboxresults.text = ""
				
				$DistroGroupsText = "Select the distro group you want to modify delivery restriction for"
				Show-SelectCachedDistroGroups_psf
				$distro = $SelectCachedDistroGroups_comboboxNames
				If (!$distro)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group", "Error")
				}
				Else
				{
					$DistroGroupsText = "Select the distro group you want the members to be able to send to $distro"
					Show-SelectCachedDistroGroups_psf
					$rejectfrom = $SelectCachedDistroGroups_comboboxNames
					If (!$rejectfrom)
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group", "Error")
					}
					Else
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$textboxDetails.Text = "Set-DistributionGroup -Identity $distro -AllowMessagesFrom `@{ Add = $Rejectfrom }"
						$TextboxResults.Text = "Modifying delivery restriction information for $distro"
						Set-DistributionGroup -Identity $distro -AcceptMessagesOnlyFromDLMembers @{ Add = $Rejectfrom }
						$TextboxResults.text = Get-DistributionGroup -Identity $distro | Format-List Identity, AcceptMessagesOnlyFrom, AcceptMessagesOnlyFromDLMembers, AcceptMessagesOnlyFromSendersOrMembers | Out-String -Width 2147483647
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
				}
			}
			Else
			{
				$DistroGroupsText = "Select the distro group you want to modify delivery restriction for"
				Show-SelectCachedDistroGroups_psf
				$distro = $SelectCachedDistroGroups_comboboxNames
				If (!$distro)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group", "Error")
				}
				Else
				{
					$DistroGroupsText = "Select the distro group you want the members to be able to send to $distro"
					Show-SelectCachedDistroGroups_psf
					$rejectfrom = $SelectCachedDistroGroups_comboboxNames
					If (!$rejectfrom)
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group", "Error")
					}
					Else
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$textboxDetails.Text = "Set-DistributionGroup -Identity $distro -AllowMessagesFrom `@{ Add = $Rejectfrom }"
						$TextboxResults.Text = "Modifying delivery restriction information for $distro"
						Set-DistributionGroup -Identity $distro -AcceptMessagesOnlyFromDLMembers @{ Add = $Rejectfrom }
						$TextboxResults.text = Get-DistributionGroup -Identity $distro | Format-List Identity, AcceptMessagesOnlyFrom, AcceptMessagesOnlyFromDLMembers, AcceptMessagesOnlyFromSendersOrMembers | Out-String -Width 2147483647
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to modify another Distribution Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

#Unified Groups

$getListOfUnifiedGroupsToolStripMenuItem_Click = {
	try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting list of all unified groups..."
		$textboxDetails.Text = "Get-UnifiedGroup | Sort-Object Name | Format-Table -AutoSize"
		$TextboxResults.Text = Get-UnifiedGroup | Sort-Object Name | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$listMembersOfAGroupToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$GetUnifiedGroupMembers = Read-Host "Enter the name of the group you want to view members for."
			$SelectUnifiedGroupsText = "Select the Unified Group you want to view members for"
			Show-SelectUnifiedGroups_psf
			$GetUnifiedGroupMembers = $SelectUnifiedGroups_comboboxUnifiedGroups
			If (!$GetUnifiedGroupMembers)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Unified Group was selected, please enter a valid Unified Group you want to view members for", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting all members of the $GetUnifiedGroupMembers group..."
				$textboxDetails.Text = "Get-UnifiedGroupLinks –Identity $GetUnifiedGroupMembers –LinkType Members | Sort-Object DisplayName | Format-Table DisplayName -AutoSize"
				$TextboxResults.Text = Get-UnifiedGroupLinks –Identity $GetUnifiedGroupMembers –LinkType Members | Sort-Object DisplayName | Format-Table DisplayName -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get Members of another Unified Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$removeAGroupToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$RemoveUnifiedGroup = Read-Host "Enter the name of the group you want to remove"
			$SelectUnifiedGroupsText = "Select the Unified Group you want to remove"
			Show-SelectUnifiedGroups_psf
			$RemoveUnifiedGroup = $SelectUnifiedGroups_comboboxUnifiedGroups
			If (!$RemoveUnifiedGroup)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Unified Group was selected, please select a valid Unified Group to remove", "Error")
			}
			Else
			{
				$OUTPUT = [System.Windows.Forms.MessageBox]::Show("Are you sure you want to delete $RemoveUnifiedGroup ?", "Warning!", 4)
				
				If ($OUTPUT -eq "YES")
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Removing the $RemoveUnifiedGroup group..."
					$textboxDetails.Text = "Remove-UnifiedGroup $RemoveUnifiedGroup"
					Remove-UnifiedGroup $RemoveUnifiedGroup
					$TextboxResults.Text = "Getting list of unified groups..."
					$TextboxResults.Text = Get-UnifiedGroup | Sort-Object Name | Format-Table -AutoSize | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
					
				}
				Else
				{
					[System.Windows.Forms.MessageBox]::Show("$RemoveUnifiedGroup was not deleted", "Info")
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to remove another Unified Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$addAUserToAGroupToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$UnifiedGroupAddUser = Read-Host "Enter the name of the group you want to add a user to"
			$SelectUnifiedGroupsText = "Select the Unified Group you want to add a user to"
			Show-SelectUnifiedGroups_psf
			$UnifiedGroupAddUser = $SelectUnifiedGroups_comboboxUnifiedGroups
			If (!$UnifiedGroupAddUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Unified Group was selected, please select a valid Unified Group you want to add a user to", "Error")
			}
			Else
			{
				#$UnifiedGroupUserAdd = Read-Host "Enter the UPN of the user you want to add to the $UnifiedGroupAddUser group."
				$SelectUsersFormText = "Select the user you want add to $UnifiedGroupAddUser"
				Show-SelectCachedDisplayNames_psf
				$UnifiedGroupUserAdd = $SelectCachedDisplayNames_comboboxNames
				If (!$UnifiedGroupUserAdd)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a user you want to add to $UnifiedGroupAddUser", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Adding $UnifiedGroupUserAdd as a member of the $UnifiedGroupAddUser group..."
					$textboxDetails.Text = "Add-UnifiedGroupLinks $UnifiedGroupAddUser –Links $UnifiedGroupUserAdd –LinkType Members"
					Add-UnifiedGroupLinks $UnifiedGroupAddUser –Links $UnifiedGroupUserAdd –LinkType Members
					$TextboxResults.Text = "Getting members for $UnifiedGroupAddUser..."
					$TextboxResults.Text = Get-UnifiedGroupLinks –Identity $UnifiedGroupAddUser –LinkType Members | Sort-Object DisplayName | Format-Table DisplayName -AutoSize | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to add another User to a Unified Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$createANewGroupToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$NewUnifiedGroupName = Read-Host "Enter the Display Name of the new group"
			If (!$NewUnifiedGroupName)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Display Name was entered, please enter a valid display name for the new group", "Error")
			}
			Else
			{
				#$NewUnifiedGroupAccessType = Read-Host "Enter the Access Type for the group $NewUnifiedGroupName (Public or Private)"
				$UnifiedGroupAccessTypeText = "Select the Access Type for the group $NewUnifiedGroupName"
				Show-SelectUnifiedGroupAccessType_psf
				$NewUnifiedGroupAccessType = $SelectUnifiedGroupAccessType_comboboxAccessType_SelectedItem
				If (!$NewUnifiedGroupAccessType)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Access Type was selected, please select a valid access type", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Creating a the $NewUnifiedGroupName group..."
					$textboxDetails.Text = "New-UnifiedGroup –DisplayName $NewUnifiedGroupName -AccessType $NewUnifiedGroupAccessType"
					New-UnifiedGroup –DisplayName $NewUnifiedGroupName -AccessType $NewUnifiedGroupAccessType
					$TextboxResults.Text = Get-UnifiedGroup $NewUnifiedGroupName | Format-Table -AutoSize | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to create a new Unified Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$listOwnersOfAGroupToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$GetUnifiedGroupOwners = Read-Host "Enter the name of the group you want to view members for."
			$SelectUnifiedGroupsText = "Select the Unified Group you want to view owners for"
			Show-SelectUnifiedGroups_psf
			$GetUnifiedGroupOwners = $SelectUnifiedGroups_comboboxUnifiedGroups
			If (!$GetUnifiedGroupOwners)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Unified Group was selected, please select a valid Unified Group you want to view owners for", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting all owners of the $GetUnifiedGroupOwners group..."
				$textboxDetails.Text = "Get-UnifiedGroupLinks –Identity $GetUnifiedGroupOwners –LinkType Owners | Format-List DisplayName | Format-Table -AutoSize"
				$TextboxResults.Text = Get-UnifiedGroupLinks –Identity $GetUnifiedGroupOwners –LinkType Owners | Sort-Object DisplayName | Format-Table -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get Owners for another Unified Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$listSubscribersOfAGroupToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$GetUnifiedGroupSubscribers = Read-Host "Enter the name of the group you want to view members for."
			$SelectUnifiedGroupsText = "Select the Unified Group you want to view members for"
			Show-SelectUnifiedGroups_psf
			$GetUnifiedGroupSubscribers = $SelectUnifiedGroups_comboboxUnifiedGroups
			If (!$GetUnifiedGroupSubscribers)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Unified Group was selected, please select a valid Unified Group", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting all subscribers of the $GetUnifiedGroupSubscribers group..."
				$textboxDetails.Text = "Get-UnifiedGroupLinks –Identity $GetUnifiedGroupSubscribers –LinkType Subscribers | Sort-Object DisplayName | Format-Table -AutoSize"
				$TextboxResults.Text = Get-UnifiedGroupLinks –Identity $GetUnifiedGroupSubscribers –LinkType Subscribers | Sort-Object DisplayName | Format-Table -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get Subscribers of another Unified Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$addAnOwnerToAGroupToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$TextboxResults.Text = "Important! The user must be a member of the group prior to becoming an owner"
			#$UnifiedGroupAddOwner = Read-Host "Enter the name of the group you want to modify ownership for"
			$SelectUnifiedGroupsText = "Select the Unified Group you want to modify ownership for"
			Show-SelectUnifiedGroups_psf
			$UnifiedGroupModify = $SelectUnifiedGroups_comboboxUnifiedGroups
			If (!$UnifiedGroupModify)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Unified Group was selected, please select a Unified Group you want to modify ownership for", "Error")
			}
			Else
			{
				#$AddUnifiedGroupOwner = Read-Host "Enter the UPN of the user you want to become an owner"
				$UnifiedGroupMembersText = "Select the user you want to add as a owner to $UnifiedGroupModify"
				Show-SelectUnifiedGroupMembers_psf
				$AddUnifiedGroupOwner = $SelectUnifiedGroupMembers_comboboxUnifiedGroupMembers
				If (!$AddUnifiedGroupOwner)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a user you want to be an owner of $UnifiedGroupModify", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Adding $AddUnifiedGroupOwner as an owner of the $UnifiedGroupModify group..."
					$textboxDetails.Text = "Add-UnifiedGroupLinks -Identity $UnifiedGroupModify -LinkType Owners -Links $AddUnifiedGroupOwner"
					Add-UnifiedGroupLinks -Identity $UnifiedGroupModify -LinkType Owners -Links $AddUnifiedGroupOwner
					$TextboxResults.Text = "Getting list of owners for $UnifiedGroupModify..."
					$TextboxResults.Text = Get-UnifiedGroupLinks –Identity $UnifiedGroupModify –LinkType Owners | Sort-Object DisplayName | Format-Table -AutoSize | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to add another User as an Owner of a Unified Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$addASubscriberToAGroupToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$UnifiedGroupAddSubscriber = Read-Host "Enter the name of the group you want to add a subscriber for"
			$SelectUnifiedGroupsText = "Select the Unified Group you want to add a subscriber to"
			Show-SelectUnifiedGroups_psf
			$UnifiedGroupAddSubscriber = $SelectUnifiedGroups_comboboxUnifiedGroups
			If (!$UnifiedGroupAddSubscriber)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Unified Group was selected, please select a valid Unified Group", "Error")
			}
			Else
			{
				#$AddUnifiedGroupSubscriber = Read-Host "Enter the UPN of the user you want to add as a subscriber"
				$SelectUsersFormText = "Select the user you want to add as a subscriber to $UnifiedGroupAddSubscriber"
				Show-SelectCachedDisplayNames_psf
				$AddUnifiedGroupSubscriber = $SelectCachedDisplayNames_comboboxNames
				If (!$AddUnifiedGroupSubscriber)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a valid user you want to add as a subscriber to $UnifiedGroupAddSubscriber", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Adding $AddUnifiedGroupSubscriber as a subscriber to the $UnifiedGroupAddSubscriber group..."
					$textboxDetails.Text = "Add-UnifiedGroupLinks -Identity $UnifiedGroupAddSubscriber -LinkType Owners -Links $AddUnifiedGroupSubscriber"
					Add-UnifiedGroupLinks -Identity $UnifiedGroupAddSubscriber -LinkType Owners -Links $AddUnifiedGroupSubscriber
					$TextboxResults.Text = "Getting list of subscribers for $UnifiedGroupAddSubscriber..."
					$TextboxResults.Text = Get-UnifiedGroupLinks –Identity $UnifiedGroupAddSubscriber –LinkType Subscribers | Sort-Object DisplayName | Format-List | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to add a Subscriber to another Unified Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$removeAMemberFromAGroupToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$SelectUnifiedGroupsText = "Select the Unified Group you want to remove a member from"
			Show-SelectUnifiedGroups_psf
			$UnifiedGroupModify = $SelectUnifiedGroups_comboboxUnifiedGroups
			If (!$UnifiedGroupModify)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Unified Group was selected, please select a Unified Group you want to remove a member from", "Error")
			}
			Else
			{
				$UnifiedGroupMembersText = "Select the user you want to remove from $UnifiedGroupModify"
				Show-SelectUnifiedGroupMembers_psf
				$RemoveUserFromUnifiedGroup = $SelectUnifiedGroupMembers_comboboxUnifiedGroupMembers
				If (!$RemoveUserFromUnifiedGroup)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a user to remove from $UnifiedGroupModify", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Removing $RemoveUserFromUnifiedGroup from the $UnifiedGroupModify group..."
					$textboxDetails.Text = "Remove-UnifiedGroupLinks -Identity $UnifiedGroupModify -LinkType Members -Links $RemoveUserFromUnifiedGroup"
					Remove-UnifiedGroupLinks -Identity $UnifiedGroupModify -LinkType Members -Links $RemoveUserFromUnifiedGroup
					$TextboxResults.Text = "Getting members of $UnifiedGroupModify..."
					$TextboxResults.Text = Get-UnifiedGroupLinks –Identity $UnifiedGroupModify –LinkType Members | Sort-Object Name | Format-Table Name -AutoSize | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to remove another Member from a Unified Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

#Security Groups

$createARegularSecurityGroupToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$SecurityGroupName = Read-Host "Enter a name for the new Security Group"
			If (!$SecurityGroupName)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Name was entered, please enter a valid name for the Security Group", "Error")
			}
			Else
			{
				#What to do if connected to main o365 account
				If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Creating the $SecurityGroupName security group..."
					$textboxDetails.Text = "New-MsolGroup -DisplayName $SecurityGroupName "
					$TextboxResults.Text = New-MsolGroup -DisplayName $SecurityGroupName | Format-List | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
				#What to do if connected to partner account
				ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
				{
					$TenantText = $PartnerComboBox.text
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Creating the $SecurityGroupName security group..."
					$textboxDetails.Text = "New-MsolGroup -DisplayName $SecurityGroupName -TenantId $TenantText"
					$TextboxResults.Text = New-MsolGroup -DisplayName $SecurityGroupName -TenantId $PartnerComboBox.SelectedItem.TenantID | Format-List | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Creating the $SecurityGroupName security group..."
					$textboxDetails.Text = "New-MsolGroup -DisplayName $SecurityGroupName "
					$TextboxResults.Text = New-MsolGroup -DisplayName $SecurityGroupName | Format-List | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to create another Security Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getAllRegularSecurityGroupsToolStripMenuItem_Click = {
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting list of all Security groups..."
			$textboxDetails.Text = "Get-MsolGroup -All -GroupType Security | Sort-Object DisplayName | Format-Table DisplayName, GroupType -AutoSize"
			$TextboxResults.Text = Get-MsolGroup -All -GroupType Security | Sort-Object DisplayName | Format-Table DisplayName, GroupType -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting list of all Security groups..."
			$textboxDetails.Text = "Get-MsolGroup -All -TenantId $TenantText -GroupType Security | Sort-Object DisplayName | Format-Table DisplayName, GroupType -AutoSize"
			$TextboxResults.Text = Get-MsolGroup -All -TenantId $PartnerComboBox.SelectedItem.TenantID -GroupType Security | Sort-Object DisplayName | Format-Table DisplayName, GroupType -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting list of all Security groups..."
			$textboxDetails.Text = "Get-MsolGroup -All -GroupType Security | Sort-Object DisplayName | Format-Table DisplayName, GroupType -AutoSize"
			$TextboxResults.Text = Get-MsolGroup -All -GroupType Security | Sort-Object DisplayName | Format-Table DisplayName, GroupType -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
	
}

$getAllMailEnabledSecurityGroupsToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting all Mail Enabled Security Groups..."
		$textboxDetails.Text = "Get-DistributionGroup -ResultSize unlimited | Where-Object { `$_.GroupType -like 'Universal, SecurityEnabled' } | Sort-Object DisplayName | Format-Table DisplayName, SamAccountName, GroupType, IsDirSynced, EmailAddresses -AutoSize "
		$TextboxResults.text = Get-DistributionGroup -ResultSize unlimited | Where-Object { $_.GroupType -like "Universal, SecurityEnabled" } | Sort-Object DisplayName | Format-Table DisplayName, SamAccountName, GroupType, IsDirSynced, EmailAddresses -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$createAMailEnabledSecurityGroupToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$MailEnabledSecurityGroup = Read-Host "Enter the name of the Security Group"
			If (!$MailEnabledSecurityGroup)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No name was entered, please enter a valid name for the new Security Group", "Error")
			}
			Else
			{
				$MailEnabledSMTPAddress = Read-Host "Enter the Primary SMTP address for $MailEnabledSecurityGroup"
				If (!$MailEnabledSMTPAddress)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Primary SMTP address was entered, please enter a valid Primary SMTP address", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Creating the $MailEnabledSecurityGroup security group..."
					$textboxDetails.Text = "New-DistributionGroup -Name $MailEnabledSecurityGroup -Type Security -PrimarySmtpAddress $MailEnabledSMTPAddress"
					$TextboxResults.Text = New-DistributionGroup -Name $MailEnabledSecurityGroup -Type Security -PrimarySmtpAddress $MailEnabledSMTPAddress | Format-List | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to create another Mail Enabled Security Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$addAUserToAMailEnabledSecurityGroupToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$MailEnabledGroupAdd = Read-Host "Enter the name of the Group"
			$MailEnabledSecurityGroupText = "Select the Mail Enabled Security Group you want to add a user to"
			Show-SelectMailEnabledSecurityGroups_psf
			$MailEnabledGroupAdd = $SelectMailEnabledSecurityGroups_comboboxSelectMailEnabledSecurityGroups
			If (!$MailEnabledGroupAdd)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Mail Enabled Security Group was selected, please select a valid Mail Enabled Security Group", "Error")
			}
			Else
			{
				#$MailEnabledGroupAddUser = Read-Host "Enter the UPN of the user you wish to add to $MailEnabledGroupAdd"
				$SelectUsersFormText = "Select the user you want to add to $MailEnabledGroupAdd"
				Show-SelectCachedDisplayNames_psf
				$MailEnabledGroupAddUser = $SelectCachedDisplayNames_comboboxNames
				If (!$MailEnabledGroupAddUser)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a valid user to add to $MailEnabledGroupAdd", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Adding $MailEnabledGroupAddUser to the $MailEnabledGroupAdd Group..."
					$textboxDetails.Text = "Add-DistributionGroupMember -Identity $MailEnabledGroupAdd -Member $MailEnabledGroupAddUser"
					Add-DistributionGroupMember -Identity $MailEnabledGroupAdd -Member $MailEnabledGroupAddUser
					$TextboxResults.Text = "Getting members of $MailEnabledGroupAdd..."
					$TextboxResults.Text = Get-DistributionGroupMember $MailEnabledGroupAdd | Sort-Object DisplayName | Format-Table Displayname -AutoSize | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to add another User to a Mail Enabled Security Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$allowSecurityGroupToRecieveExternalMailToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$AllowExternalEmailSecurity = Read-Host "Enter the name of the Group you want to allow external email to"
			$MailEnabledSecurityGroupText = "Select the Mail Enabled Security Group you want to allow external email to"
			Show-SelectMailEnabledSecurityGroups_psf
			$AllowExternalEmailSecurity = $SelectMailEnabledSecurityGroups_comboboxSelectMailEnabledSecurityGroups
			If (!$AllowExternalEmailSecurity)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Mail Enabled Security Group was selected, please select a valid Mail Enabled Security Group", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Allowing extneral senders for the $AllowExternalEmailSecurity Group..."
				$textboxDetails.Text = "Set-DistributionGroup $AllowExternalEmailSecurity -RequireSenderAuthenticationEnabled `$False"
				Set-DistributionGroup $AllowExternalEmailSecurity -RequireSenderAuthenticationEnabled $False
				$TextboxResults.text = Get-DistributionGroup $AllowExternalEmailSecurity | Format-List Name, RequireSenderAuthenticationEnabled | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to Allow another Security Group to Recieve External Mail?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getDetailedInfoForMailEnabledSecurityGroupToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$DetailedInfoMailEnabledSecurityGroup = Read-Host "Enter the group name"
			$MailEnabledSecurityGroupText = "Select the Mail Enabled Security Group you want to get detailed information for"
			Show-SelectMailEnabledSecurityGroups_psf
			$DetailedInfoMailEnabledSecurityGroup = $SelectMailEnabledSecurityGroups_comboboxSelectMailEnabledSecurityGroups
			If (!$DetailedInfoMailEnabledSecurityGroup)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Mail Enabled Security Group was selected, please select a valid Mail Enabled Security Group to view detailed information about", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting detailed info about the $DetailedInfoMailEnabledSecurityGroup group..."
				$textboxDetails.Text = "Get-DistributionGroup $DetailedInfoMailEnabledSecurityGroup | Format-List"
				$TextboxResults.text = Get-DistributionGroup $DetailedInfoMailEnabledSecurityGroup | Format-List | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get detailed information for another Security Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$removeMailENabledSecurityGroupToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$DeleteMailEnabledSecurityGroup = Read-Host "Enter the name of the group you want deleted."
			$MailEnabledSecurityGroupText = "Select the Mail Enabled Security Group you want to remove"
			Show-SelectMailEnabledSecurityGroups_psf
			$DeleteMailEnabledSecurityGroup = $SelectMailEnabledSecurityGroups_comboboxSelectMailEnabledSecurityGroups
			If (!$DeleteMailEnabledSecurityGroup)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Mail Enabled Security Group was selected, please select a Mail Enabled Security Group that you want to delete", "Error")
			}
			Else
			{
				
				$OUTPUT = [System.Windows.Forms.MessageBox]::Show("Are you sure you want to delete $DeleteMailEnabledSecurityGroup ?", "Warning!", 4)
				
				If ($OUTPUT -eq "YES")
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Deleting the $DeleteMailEnabledSecurityGroup Group..."
					$textboxDetails.Text = "Remove-DistributionGroup $DeleteMailEnabledSecurityGroup"
					Remove-DistributionGroup $DeleteMailEnabledSecurityGroup
					$TextboxResults.Text = "Getting list of mail enabled security groups..."
					$TextboxResults.text = Get-DistributionGroup -ResultSize unlimited | Where-Object { $_.GroupType -like "Universal, SecurityEnabled" } | Sort-Object DisplayName | Format-Table DisplayName -AutoSize | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
				Else
				{
					[System.Windows.Forms.MessageBox]::Show("$DeleteMailEnabledSecurityGroup was not deleted", "Info")
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to remove another Mail Enabled Security Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$denySecurityGroupFromRecievingExternalEmailToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$DenyExternalEmailSecurity = Read-Host "Enter the name of the Group you want to deny external email to"
			$MailEnabledSecurityGroupText = "Select the Mail Enabled Security Group you want to deny external email to"
			Show-SelectMailEnabledSecurityGroups_psf
			$DenyExternalEmailSecurity = $SelectMailEnabledSecurityGroups_comboboxSelectMailEnabledSecurityGroups
			If (!$DenyExternalEmailSecurity)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Mail Enabled Security Group was selected, please select a valid Mail Enabled Security Group", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Denying extneral senders for the $DenyExternalEmailSecurity Group..."
				$textboxDetails.Text = "Set-DistributionGroup $DenyExternalEmailSecurity -RequireSenderAuthenticationEnabled `$True"
				Set-DistributionGroup $DenyExternalEmailSecurity -RequireSenderAuthenticationEnabled $True
				$TextboxResults.text = Get-DistributionGroup $DenyExternalEmailSecurity | Format-List Name, RequireSenderAuthenticationEnabled | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to Deny another Security Group from recieving External Email?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}



###RESOURCE MAILBOX###

	#Booking Options

$allowConflictMeetingsToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$ConflictMeetingAllow = Read-Host "Enter the Room Name of the Resource Calendar you want to allow conflicts"
			$RoomMailboxText = "Select a Room Mailbox to allow conflict meetings for"
			Show-SelectRoomMailbox_psf
			$ConflictMeetingAllow = $SelectRoomMailbox_comboboxSelectRoomMailbox
			If (!$ConflictMeetingAllow)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Room Mailbox was selected, please select a valid Room Mailbox", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Allowing conflict meetings $ConflictMeetingAllow..."
				$textboxDetails.Text = "Set-CalendarProcessing $ConflictMeetingAllow -AllowConflicts `$True"
				Set-CalendarProcessing $ConflictMeetingAllow -AllowConflicts $True
				$TextboxResults.Text = Get-CalendarProcessing -identity $ConflictMeetingAllow | Format-List Identity, AllowConflicts | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to allow conflict meetings on another Resource Mailbox?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$denyConflictMeetingsForAllResourceMailboxesToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Denying conflict meeting for all room calendars..."
		$textboxDetails.Text = "Get-MailBox -ResultSize unlimited | Where-Object { `$_.ResourceType -eq 'Room' } | Set-CalendarProcessing -AllowConflicts `$False"
		Get-MailBox -ResultSize unlimited | Where-Object { $_.ResourceType -eq "Room" } | Set-CalendarProcessing -AllowConflicts $False
		$TextboxResults.Text = Get-MailBox -ResultSize unlimited | Where-Object { $_.ResourceType -eq "Room" } | Get-CalendarProcessing | Sort-Object Identity | Format-Table Identity, AllowConflicts -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$allowConflicMeetingsForAllResourceMailboxesToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Allowing conflict meeting for all room calendars..."
		$textboxDetails.Text = "Get-MailBox -ResultSize unlimited | Where-Object { `$_.ResourceType -eq 'Room' } | Set-CalendarProcessing -AllowConflicts `$True"
		Get-MailBox -ResultSize unlimited | Where-Object { $_.ResourceType -eq "Room" } | Set-CalendarProcessing -AllowConflicts $True
		$TextboxResults.Text = Get-MailBox -ResultSize unlimited | Where-Object { $_.ResourceType -eq "Room" } | Get-CalendarProcessing | Sort-Object Identity | Format-Table Identity, AllowConflicts -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$disallowconflictmeetingsToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$ConflictMeetingDeny = Read-Host "Enter the Room Name of the Resource Calendar you want to disallow conflicts"
			$RoomMailboxText = "Select a Room Mailbox to disallow conflict meetings for"
			Show-SelectRoomMailbox_psf
			$ConflictMeetingDeny = $SelectRoomMailbox_comboboxSelectRoomMailbox
			If (!$ConflictMeetingDeny)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Room Mailbox was selected, please select a valid Room Mailbox", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Denying conflict meetings for $ConflictMeetingDeny..."
				$textboxDetails.Text = "Set-CalendarProcessing $ConflictMeetingDeny -AllowConflicts `$False"
				Set-CalendarProcessing $ConflictMeetingDeny -AllowConflicts $False
				$TextboxResults.Text = Get-CalendarProcessing -identity $ConflictMeetingDeny | Format-List Identity, AllowConflicts | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to deny conflict meetings on another Resource Mailbox?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$enableAutomaticBookingForAllResourceMailboxToolStripMenuItem1_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Enabling automatic booking on all room calendars..."
		$textboxDetails.Text = "Get-MailBox -ResultSize unlimited | Where-Object { `$_.ResourceType -eq 'Room' } | Set-CalendarProcessing -AutomateProcessing:AutoAccept"
		Get-MailBox -ResultSize unlimited | Where-Object { $_.ResourceType -eq "Room" } | Set-CalendarProcessing -AutomateProcessing:AutoAccept
		$TextboxResults.Text = Get-MailBox -ResultSize unlimited | Where-Object { $_.ResourceType -eq "Room" } | Get-CalendarProcessing | Sort-Object Identity | Format-Table Identity, AutomateProcessing -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$GetRoomMailBoxCalendarProcessingToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$RoomMailboxCalProcessing = Read-Host "Enter the Calendar Name you want to view calendar processing information for"
			$RoomMailboxText = "Select a Room Mailbox to view calendar processing for"
			Show-SelectRoomMailbox_psf
			$RoomMailboxCalProcessing = $SelectRoomMailbox_comboboxSelectRoomMailbox
			If (!$RoomMailboxCalProcessing)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Room Mailbox was selected, please select a valid Room Mailox", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting calendar processing information for $RoomMailboxCalProcessing..."
				$textboxDetails.Text = "Get-Mailbox $RoomMailboxCalProcessing | Get-CalendarProcessing | Format-List"
				$TextboxResults.Text = Get-Mailbox $RoomMailboxCalProcessing | Get-CalendarProcessing | Format-List | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get Calendar Processing for another Resource Mailbox?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

#Room Mailbox

$convertAMailboxToARoomMailboxToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$MailboxtoRoom = Read-Host "What user would you like to convert to a Room Mailbox? Please enter the full email address"
			$MailboxText = "Select a Mailbox to convert to a Room Mailbox"
			Show-SelectMailboxes_psf
			$MailboxtoRoom = $SelectMailboxes_comboboxSelectMailbox
			If (!$MailboxtoRoom)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Mailbox was selected, please select a valid Mailbox to convert to a Room Mailbox", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Converting $MailboxtoRoom to a Room Mailbox..."
				$textboxDetails.Text = "Set-Mailbox $MailboxtoRoom -Type Room"
				Set-Mailbox $MailboxtoRoom -Type Room
				$TextboxResults.Text = Get-MailBox $MailboxtoRoom | Format-List Name, ResourceType, PrimarySmtpAddress, EmailAddresses, UserPrincipalName, IsMailboxEnabled | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to convert another Mailbox to a Room Mailbox?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$createANewRoomMailboxToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$NewRoomMailbox = Read-Host "Enter the name of the new Room Mailbox"
			If (!$NewRoomMailbox)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No name was entered for the new Room Mailbox, please enter a valid name", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Creating the $NewRoomMailbox Room Mailbox..."
				$textboxDetails.Text = "New-Mailbox -Name $NewRoomMailbox -Room "
				$TextboxResults.Text = New-Mailbox -Name $NewRoomMailbox -Room | Format-List | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to create another Room Mailbox?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getListOfRoomMailboxesToolStripMenuItem_Click = {
	try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting list of all Room Mailboxes..."
		$textboxDetails.Text = "Get-MailBox -ResultSize unlimited | Where-Object { `$_.ResourceType -eq 'Room' } | Sort-Object Name | Format-Table -AutoSize"
		$TextboxResults.Text = Get-MailBox -ResultSize unlimited | Where-Object { $_.ResourceType -eq "Room" } | Sort-Object Name | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$removeARoomMailboxToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$RemoveRoomMailbox = Read-Host "Enter the name of the room mailbox"
			$RoomMailboxText = "Select a Room Mailbox to remove"
			Show-SelectRoomMailbox_psf
			$RemoveRoomMailbox = $SelectRoomMailbox_comboboxSelectRoomMailbox
			If (!$RemoveRoomMailbox)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Room Mailbox was selected, please select a valid Room Mailbox to remove", "Error")
			}
			Else
			{
				
				$OUTPUT = [System.Windows.Forms.MessageBox]::Show("Are you sure you want to remove $RemoveRoomMailbox ?", "Warning!", 4)
				
				If ($OUTPUT -eq "YES")
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Removing the $RemoveRoomMailbox Room Mailbox..."
					$textboxDetails.Text = "Remove-Mailbox $RemoveRoomMailbox"
					Remove-Mailbox $RemoveRoomMailbox
					$TextboxResults.Text = "Getting list of Room Mailboxes..."
					$TextboxResults.Text = Get-MailBox -ResultSize unlimited | Where-Object { $_.ResourceType -eq "Room" } | Sort-Object Name | Format-Table -AutoSize | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
				Else
				{
					[System.Windows.Forms.MessageBox]::Show("$RemoveRoomMailbox was not removed", "Info")
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to remove another Room Mailbox?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}




###JUNK EMAIL CONFIGURATION###

	#Blacklist

$blacklistDomainForAllToolStripMenuItem_Click = {
	Try
	{
		$BlacklistDomain = Read-Host "Enter the domain you want to blacklist for all users. EX: google.com"
		If (!$BlacklistDomain)
		{
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("No domain was entered, please enter a valid domain you want to blacklist for all users", "Error")
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Blacklisting $BlacklistDomain for all users..."
			$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Set-MailboxJunkEmailConfiguration -BlockedSendersAndDomains `@{ Add = $BlacklistDomain }"
			Get-Mailbox -ResultSize unlimited | Set-MailboxJunkEmailConfiguration -BlockedSendersAndDomains @{ Add = $BlacklistDomain }
			$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Get-MailboxJunkEmailConfiguration | Sort-Object Identity | Format-Table Identity, BlockedSendersAndDomains, Enabled -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$blacklistDomainForASingleUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$Blockeddomainuser = Read-Host "Enter the UPN of the user you want to modify junk email for"
			$SelectUsersFormText = "Select the User you want to modify the blacklist for"
			Show-SelectCachedDisplayNames_psf
			$Blockeddomainuser = $SelectCachedDisplayNames_comboboxNames
			If (!$Blockeddomainuser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid User", "Error")
			}
			Else
			{
				$BlockedDomain2 = Read-Host "Enter the Domain you want to blacklist"
				If (!$BlockedDomain2)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Domain was entered, please enter a valid Domain to blacklist", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Blacklisting $BlockedDomain2 for $Blockeddomainuser..."
					$textboxDetails.Text = "Set-MailboxJunkEmailConfiguration -Identity $Blockeddomainuser -BlockedSendersAndDomains `@{ Add = $BlockedDomain2 } "
					Set-MailboxJunkEmailConfiguration -Identity $Blockeddomainuser -BlockedSendersAndDomains @{ Add = $BlockedDomain2 }
					$TextboxResults.Text = Get-MailboxJunkEmailConfiguration -Identity $Blockeddomainuser | Format-List Identity, BlockedSendersAndDomains | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to modify the blacklist for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$blacklistASpecificEmailAddressForAllToolStripMenuItem_Click = {
	Try
	{
		$BlockSpecificEmailForAll = Read-Host "Enter the email address you want to blacklist for all"
		If (!$BlockSpecificEmailForAll)
		{
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("No e-mail address was entered, please enter a valid e-mail address you want to blacklist for all users", "Error")
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Blacklisting $BlockSpecificEmailForAll for all users..."
			$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Set-MailboxJunkEmailConfiguration -BlockedSendersAndDomains `@{ Add = $BlockSpecificEmailForAll }"
			Get-Mailbox -ResultSize unlimited | Set-MailboxJunkEmailConfiguration -BlockedSendersAndDomains @{ Add = $BlockSpecificEmailForAll }
			$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Get-MailboxJunkEmailConfiguration | Sort-Object Identity | Format-Table Identity, BlockedSendersAndDomains, Enabled -Autosize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$blacklistASpecificEmailAddressForASingleUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$ModifyblacklistforaUser = Read-Host "Enter the user you want to modify the blacklist for"
			$SelectUsersFormText = "Select the User you want to modify the blacklist for"
			Show-SelectCachedDisplayNames_psf
			$ModifyblacklistforaUser = $SelectCachedDisplayNames_comboboxNames
			If (!$ModifyblacklistforaUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid User", "Error")
			}
			Else
			{
				$DenySpecificEmailForOne = Read-Host "Enter the E-mail Address you want to blacklist for $ModifyblacklistforaUser"
				If (!$DenySpecificEmailForOne)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No E-mail Address was entered, please enter a valid E-mail Address to blacklist for $ModifyblacklistforaUser", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Blacklisting $DenySpecificEmailForOne for $ModifyblacklistforaUser..."
					$textboxDetails.Text = "Set-MailboxJunkEmailConfiguration -Identity $ModifyblacklistforaUser -BlockedSendersAndDomains `@{ Add = $DenySpecificEmailForOne }"
					Set-MailboxJunkEmailConfiguration -Identity $ModifyblacklistforaUser -BlockedSendersAndDomains @{ Add = $DenySpecificEmailForOne }
					$TextboxResults.Text = Get-MailboxJunkEmailConfiguration -Identity $ModifyblacklistforaUser | Format-List Identity, BlockedSendersAndDomains, Enabled | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to modify the blacklist for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

#Junk Email General Items

$checkSafeAndBlockedSendersForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$CheckSpamUser = Read-Host "Enter the UPN of the user you want to check blocked and allowed senders for"
			$SelectUsersFormText = "Select the User you want to check safe and blocked senders for"
			Show-SelectCachedDisplayNames_psf
			$GlobalUPN = $SelectCachedDisplayNames_comboboxNames
			If (!$GlobalUPN)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid User", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting safe and blocked senders for $GlobalUPN..."
				$textboxDetails.Text = "Get-MailboxJunkEmailConfiguration -Identity $GlobalUPN | Format-List Identity, TrustedListsOnly, ContactsTrusted, TrustedSendersAndDomains, BlockedSendersAndDomains, TrustedRecipientsAndDomains, IsValid "
				$TextboxResults.Text = Get-MailboxJunkEmailConfiguration -Identity $GlobalUPN | Format-List Identity, TrustedListsOnly, ContactsTrusted, TrustedSendersAndDomains, BlockedSendersAndDomains, TrustedRecipientsAndDomains, IsValid | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to check Safe and Blocked Senders for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$checkSafeAndBlockedSendersForAllToolStripMenuItem_Click = {
	try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting safe and blocked senders for all users..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Get-MailboxJunkEmailConfiguration | Sort-Object Identity | Format-List Identity, TrustedListsOnly, ContactsTrusted, TrustedSendersAndDomains, BlockedSendersAndDomains, TrustedRecipientsAndDomains, IsValid"
		$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Get-MailboxJunkEmailConfiguration | Sort-Object Identity | Format-List Identity, TrustedListsOnly, ContactsTrusted, TrustedSendersAndDomains, BlockedSendersAndDomains, TrustedRecipientsAndDomains, IsValid | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

	#Whitelist

$whitelistDomainForAllToolStripMenuItem_Click = {
	Try
	{
		$AllowedDomain = Read-Host "Enter the domain you want to whitelist for all users. EX: google.com"
		If (!$AllowedDomain)
		{
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("No domain was entered, please enter a valid domain to whitelist for all users", "Error")
		}
		
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Whitelisting $AllowedDomain for all..."
			$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Set-MailboxJunkEmailConfiguration -TrustedSendersAndDomains `@{ Add = $AllowedDomain }"
			Get-Mailbox -ResultSize unlimited | Set-MailboxJunkEmailConfiguration -TrustedSendersAndDomains @{ Add = $AllowedDomain }
			$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Get-MailboxJunkEmailConfiguration | Sort-Object Identity | Format-Table Identity, TrustedSendersAndDomains, TrustedRecipientsAndDomains -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$whitelistDomainForASingleUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$Alloweddomainuser = Read-Host "Enter the UPN of the user you want to modify junk email for"
			$SelectUsersFormText = "Select the User you want to modify the whitelist for"
			Show-SelectCachedDisplayNames_psf
			$Alloweddomainuser = $SelectCachedDisplayNames_comboboxNames
			If (!$Alloweddomainuser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid User", "Error")
			}
			Else
			{
				$AllowedDomain2 = Read-Host "Enter the Domain you want to whitelist for $Alloweddomainuser"
				If (!$AllowedDomain2)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Domain was entered, please enter a valid Domain you want to whitelist for $Alloweddomainuser", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Whitelisting $AllowedDomain2 for $Alloweddomainuser..."
					$textboxDetails.Text = "Set-MailboxJunkEmailConfiguration -Identity $Alloweddomainuser -TrustedSendersAndDomains `@{ Add = $AllowedDomain2 }"
					Set-MailboxJunkEmailConfiguration -Identity $Alloweddomainuser -TrustedSendersAndDomains @{ Add = $AllowedDomain2 }
					$TextboxResults.Text = Get-MailboxJunkEmailConfiguration -Identity $Alloweddomainuser | Format-List Identity, TrustedSendersAndDomains, TrustedRecipientsAndDomains | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to modify the Whitelist for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$whitelistASpecificEmailAddressForAllToolStripMenuItem_Click = {
	Try
	{
		$AllowSpecificEmailForAll = Read-Host "Enter the email address you want to whitelist for all"
		If (!$AllowSpecificEmailForAll)
		{
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("No e-mail address was entered, please enter a valid e-mail address you want to whitelist for all users", "Error")
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Whitelisting $AllowSpecificEmailForAll for all..."
			$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | | Where-Object { `$_.RecipientType -eq 'UserMailbox' } | Set-MailboxJunkEmailConfiguration -TrustedSendersAndDomains @{ Add = $AllowSpecificEmailForAll }"
			Get-Mailbox -ResultSize unlimited | Where-Object { $_.RecipientType -eq 'UserMailbox' } | Set-MailboxJunkEmailConfiguration -TrustedSendersAndDomains @{ Add = $AllowSpecificEmailForAll }
			$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Where-Object { $_.RecipientType -eq 'UserMailbox' } | Get-MailboxJunkEmailConfiguration | Sort-Object Identity | Format-Table Identity, TrustedSendersAndDomains, TrustedRecipientsAndDomains -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$whitelistASpecificEmailAddressForASingleUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$ModifyWhitelistforaUser = Read-Host "Enter the user you want to modify the whitelist for"
			$SelectUsersFormText = "Select the User you want to modify the Whitelist for"
			Show-SelectCachedDisplayNames_psf
			$ModifyWhitelistforaUser = $SelectCachedDisplayNames_comboboxNames
			If (!$ModifyWhitelistforaUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was slected, Please select a valid user you want to modify the Whitelist for", "Error")
			}
			Else
			{
				$AllowSpecificEmailForOne = Read-Host "Enter the E-mail Address you want to Whitelist for $ModifyWhitelistforaUser"
				If (!$AllowSpecificEmailForOne)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No E-mail Address was entered, please enter a valid E-mail address to add to the Whitelist for $ModifyWhitelistforaUser", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Whitelisting $AllowSpecificEmailForOne for $ModifyWhitelistforaUser..."
					$textboxDetails.Text = "Set-MailboxJunkEmailConfiguration -Identity $ModifyWhitelistforaUser -TrustedSendersAndDomains `@{ Add = $AllowSpecificEmailForOne }"
					Set-MailboxJunkEmailConfiguration -Identity $ModifyWhitelistforaUser -TrustedSendersAndDomains @{ Add = $AllowSpecificEmailForOne }
					$TextboxResults.Text = Get-MailboxJunkEmailConfiguration -Identity $ModifyWhitelistforaUser | Format-List Identity, TrustedSendersAndDomains, TrustedRecipientsAndDomains, Enabled | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to modify the Whitelist for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}


###CONTACTS FOLDER PERMISSIONS

$addContactsPermissionsForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$SelectUsersFormText = "Select the User you want to modify contacts permissions for"
			Show-SelectCachedDisplayNames_psf
			$GlobalUPNmodifycontacts = $SelectCachedDisplayNames_comboboxNames
			If (!$GlobalUPNmodifycontacts)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid User", "Error")
			}
			Else
			{
				$SelectUsersFormText = "Select the User you want to add to $GlobalUPNmodifycontacts contacts"
				Show-SelectCachedDisplayNames_psf
				$GlobalUPNadd2contacts = $SelectCachedDisplayNames_comboboxNames
				If (!$GlobalUPNadd2contacts)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid User", "Error")
				}
				Else
				{
					$LabelPermissionsText = "Select the level of access"
					Show-AccessPermissions_psf
					$GlobalContactsPermissions = $AccessPermissions_comboboxPermissions_SelectedItem
					If (!$GlobalContactsPermissions)
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						[System.Windows.Forms.MessageBox]::Show("No Access Level was selected, please select a valid Access Level", "Error")
					}
					Else
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Adding $GlobalUPNadd2contacts to $GlobalUPNmodifycontacts contacts folder with $GlobalContactsPermissions permissions..."
						$textboxDetails.Text = "Add-MailboxFolderPermission -Identity ${GlobalUPNmodifycontacts}:\contacts -user $GlobalUPNadd2contacts -AccessRights $GlobalContactsPermissions"
						Remove-MailboxFolderPermission -identity ${$GlobalUPNmodifycontacts}:\contacts -user $GlobalUPNadd2contacts -Confirm:$False
						Add-MailboxFolderPermission -Identity ${GlobalUPNmodifycontacts}:\contacts -user $GlobalUPNadd2contacts -AccessRights $GlobalContactsPermissions
						$TextboxResults.Text = "Getting contact folder permissions for $GlobalUPNmodifycontacts..."
						$TextboxResults.Text = Get-MailboxFolderPermission -Identity ${GlobalUPNmodifycontacts}:\contacts | Sort-Object User, AccessRights | Format-Table User, AccessRights, FolderName -AutoSize | Out-String -Width 2147483647
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to modify another Users Contacts Folder permissions?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getUsersContactsPermissionsToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$ContactsUserPermissions = Read-Host "What user would you like contacts folder permissions for?"
			$SelectUsersFormText = "Select the user you want to view contacts permissions for"
			Show-SelectUsersForm_psf
			$GlobalUPNremovecontacts = $SelectUsersForm_comboboxUsers
			If (!$GlobalUPNremovecontacts)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No user was selected, please select a valid users", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting $GlobalUPNremovecontacts contacts permissions..."
				$textboxDetails.Text = "Get-MailboxFolderPermission -Identity ${GlobalUPNremovecontacts}:\contacts | Sort-Object User, AccessRights | Format-Table User, AccessRights, FolderName "
				$TextboxResults.Text = Get-MailboxFolderPermission -Identity ${GlobalUPNremovecontacts}:\contacts | Sort-Object User, AccessRights | Format-Table User, AccessRights, FolderName -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get Contacts Folder permission for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$removeAUserFromSomeonesContactsPermissionsToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$SelectUsersFormText = "Select the user whose contacts you want to remove access to"
			Show-SelectCachedDisplayNames_psf
			$GlobalUPNremove = $SelectCachedDisplayNames_comboboxNames
			If (!$GlobalUPNremove)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid Users", "Error")
			}
			Else
			{
				$SelectUsersFormText = "Select the user you want to remove access to the contacts of $GlobalUPNremove"
				Show-SelectCachedDisplayNames_psf
				$GlobalUPN2remove = $SelectCachedDisplayNames_comboboxNames
				If (!$GlobalUPN2remove)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid user", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Removing $GlobalUPN2remove from $GlobalUPNremove contacts folder..."
					$textboxDetails.Text = "Remove-MailboxFolderPermission -Identity ${GlobalUPNremove}:\contacts -user $GlobalUPN2remove"
					Remove-MailboxFolderPermission -Identity ${GlobalUPNremove}:\contacts -user $GlobalUPN2remove
					$TextboxResults.Text = "Getting contact folder permissions for $GlobalUPNremove..."
					$TextboxResults.Text = Get-MailboxFolderPermission -Identity ${GlobalUPNremove}:\contacts | Sort-Object User, AccessRights | Format-Table User, AccessRights, FolderName -AutoSize | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to modify permissions for the Contacts Folder for another user?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$removeAUserFromAllContactsFoldersToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$RemoveUserFromAllContacts = Read-Host "Enter the UPN of the user you want to remove from all contacts folders"
			$SelectUsersFormText = "Select the user you want to remove from all users contacts folder"
			Show-SelectCachedDisplayNames_psf
			$GlobalUPNremovefromallcontacts = $SelectCachedDisplayNames_comboboxNames
			If (!$GlobalUPNremovefromallcontacts)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid user", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Removing $GlobalUPNremovefromallcontacts from all users contacts folders..."
				$textboxDetails.Text = "`$users = Get-Mailbox -ResultSize unlimited | Select-Object -ExpandProperty Alias
Foreach (`$user in `$users) { Remove-MailboxFolderPermission `${user}:\Contacts -user $GlobalUPNremovefromallcontacts -Confirm:`$false}﻿"
				$users = Get-Mailbox -ResultSize unlimited | Select-Object -ExpandProperty Alias
				Foreach ($user in $users) { Remove-MailboxFolderPermission ${user}:\Contacts -user $GlobalUPNremovefromallcontacts -Confirm:$false }﻿
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			#[System.Windows.Forms.MessageBox]::Show("$_", "Error")
			$TextboxResults.Text = ""
		}
		$TextboxResults.Text = ""
		
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to remove another user from everyones Contacts Folder?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$addASingleUserPermissionsOnAllContactsFoldersToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$SelectUsersFormText = "Select the user you want to add to everyones contacts folder"
			Show-SelectCachedDisplayNames_psf
			$GlobalUPNremoveaddtoallcontacts = $SelectCachedDisplayNames_comboboxNames
			If (!$GlobalUPNremoveaddtoallcontacts)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid User", "Error")
			}
			Else
			{
				$LabelPermissionsText = "Select the level of access"
				Show-AccessPermissions_psf
				$GlobalContactsPermissions2 = $AccessPermissions_comboboxPermissions_SelectedItem
				If (!$GlobalContactsPermissions2)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Access Level was selected, please select a valid Access Level", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Adding $GlobalUPNremoveaddtoallcontacts to everyones contacts folder with $GlobalContactsPermissions2 permissions..."
					$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Select-Object -ExpandProperty Alias
Foreach (`$user in `$users) { Add-MailboxFolderPermission `${user}:\Contacts -user $GlobalUPNremoveaddtoallcontacts -accessrights $GlobalContactsPermissions2 }﻿"
					$users = Get-Mailbox -ResultSize unlimited | Select-Object -ExpandProperty Alias
					Foreach ($user in $users) { Add-MailboxFolderPermission ${user}:\Contacts -user $GlobalUPNremoveaddtoallcontacts -accessrights $GlobalContactsPermissions2 }﻿
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to add another User to everyones Contacts Folder?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
}



###ADMIN###

	#OWA

$disableAccessToOWAForASingleUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$DisableOWAforUser = Read-Host "Enter the UPN of the user you want to disable OWA access for"
			$SelectUsersFormText = "Select the user you want to disable OWA access for"
			Show-SelectCachedDisplayNames_psf
			$DisableOWAforUser = $SelectCachedDisplayNames_comboboxNames
			If (!$DisableOWAforUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid user", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Disabling OWA access for $DisableOWAforUser..."
				$textboxDetails.Text = "Set-CASMailbox $DisableOWAforUser -OWAEnabled `$False"
				Set-CASMailbox $DisableOWAforUser -OWAEnabled $False
				$TextboxResults.Text = Get-CASMailbox $DisableOWAforUser | Format-List DisplayName, OWAEnabled | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to Disable OWA Access for another user?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$enableOWAAccessForASingleUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$EnableOWAforUser = Read-Host "Enter the UPN of the user you want to enable OWA access for"
			$SelectUsersFormText = "Select the user you want to enable OWA access for"
			Show-SelectCachedDisplayNames_psf
			$EnableOWAforUser = $SelectCachedDisplayNames_comboboxNames
			If (!$EnableOWAforUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid user", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Enabling OWA access for $EnableOWAforUser..."
				$textboxDetails.Text = "Set-CASMailbox $EnableOWAforUser -OWAEnabled `$True"
				Set-CASMailbox $EnableOWAforUser -OWAEnabled $True
				$TextboxResults.Text = Get-CASMailbox $EnableOWAforUser | Format-List DisplayName, OWAEnabled | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to Enable OWA Access for another user?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
}

$disableOWAAccessForAllToolStripMenuItem_Click = {
	Try
	{
		$OUTPUT = [System.Windows.Forms.MessageBox]::Show("Are you sure you want to disable OWA for all users?", "Warning!", 4)
		
		If ($OUTPUT -eq "YES")
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Disabling OWA access for all..."
			$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Set-CASMailbox -OWAEnabled `$False"
			Get-Mailbox -ResultSize unlimited | Set-CASMailbox -OWAEnabled $False
			$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Get-CASMailbox | Sort-Object DisplayName | Format-Table DisplayName, OWAEnabled -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			[System.Windows.Forms.MessageBox]::Show("ActiveSync has not been disabled for all users", "Info")
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
	
}

$enableOWAAccessForAllToolStripMenuItem_Click = {
	try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Enabling OWA access for all..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Set-CASMailbox -OWAEnabled `$True"
		Get-Mailbox -ResultSize unlimited | Set-CASMailbox -OWAEnabled $True
		$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Get-CASMailbox | Sort-Object DisplayName | Format-Table DisplayName, OWAEnabled -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getOWAAccessForAllToolStripMenuItem_Click = {
	try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting OWA info for all users..."
		$textboxDetails.Text = "Get-Mailbox | Get-CASMailbox | Sort-Object DisplayName | Format-Table DisplayName, OWAEnabled, OwaMailboxPolicy, OWAforDevicesEnabled -Autosize"
		$TextboxResults.Text = Get-Mailbox | Get-CASMailbox | Sort-Object DisplayName | Format-Table DisplayName, OWAEnabled, OwaMailboxPolicy, OWAforDevicesEnabled -Autosize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getOWAInfoForASingleUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$OWAAccessUser = Read-Host "Enter the UPN for the User you want to view OWA info for"
			$SelectUsersFormText = "Select the user you want to view OWA information for"
			Show-SelectCachedDisplayNames_psf
			$OWAAccessUser = $SelectCachedDisplayNames_comboboxNames
			If (!$OWAAccessUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid user", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting OWA Access for $OWAAccessUser..."
				$textboxDetails.Text = "Get-CASMailbox -identity $OWAAccessUser | Format-List DisplayName, OWAEnabled, OwaMailboxPolicy, OWAforDevicesEnabled"
				$TextboxResults.Text = Get-CASMailbox -identity $OWAAccessUser | Format-List DisplayName, OWAEnabled, OwaMailboxPolicy, OWAforDevicesEnabled | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get OWA information for another user?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

#ActiveSync

$getActiveSyncDevicesForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$ActiveSyncDevicesUser = Read-Host "Enter the UPN of the user you wish to see ActiveSync Devices for"
			$SelectUsersFormText = "Select the user you want to view ActiveSync devices for"
			Show-SelectCachedDisplayNames_psf
			$ActiveSyncDevicesUser = $SelectCachedDisplayNames_comboboxNames
			If (!$ActiveSyncDevicesUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid user", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting ActiveSync device info for $ActiveSyncDevicesUser..."
				$textboxDetails.Text = "Get-MobileDeviceStatistics -Mailbox $ActiveSyncDevicesUser | Format-List DeviceFriendlyName, DeviceModel, DeviceOS, DeviceMobileOperator, DeviceType, Status, FirstSyncTime, LastPolicyUpdateTime, LastSyncAttemptTime, LastSuccessSync, LastPingHeartbeat, DeviceAccessState, IsValid "
				$TextboxResults.Text = Get-MobileDeviceStatistics -Mailbox $ActiveSyncDevicesUser | Format-List DeviceFriendlyName, DeviceModel, DeviceOS, DeviceMobileOperator, DeviceType, Status, FirstSyncTime, LastPolicyUpdateTime, LastSyncAttemptTime, LastSuccessSync, LastPingHeartbeat, DeviceAccessState, IsValid | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get all ActiveSync devices for another user?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$disableActiveSyncForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$DisableActiveSyncForUser = Read-Host "Enter the UPN of the user you wish to disable ActiveSync for"
			$SelectUsersFormText = "Select the user you want to disable ActiveSync for"
			Show-SelectCachedDisplayNames_psf
			$DisableActiveSyncForUser = $SelectCachedDisplayNames_comboboxNames
			If (!$DisableActiveSyncForUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid user", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Disabling ActiveSync for $DisableActiveSyncForUser..."
				$textboxDetails.Text = "Set-CASMailbox $DisableActiveSyncForUser -ActiveSyncEnabled `$False"
				Set-CASMailbox $DisableActiveSyncForUser -ActiveSyncEnabled $False
				$TextboxResults.Text = Get-CASMailbox -Identity $DisableActiveSyncForUser | Format-List DisplayName, ActiveSyncEnabled | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to Disable ActiveSync for another user?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$enableActiveSyncForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$EnableActiveSyncForUser = Read-Host "Enter the UPN of the user you wish to enable ActiveSync for"
			$SelectUsersFormText = "Select the user you want to enable ActiveSync for"
			Show-SelectCachedDisplayNames_psf
			$EnableActiveSyncForUser = $SelectCachedDisplayNames_comboboxNames
			If (!$EnableActiveSyncForUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid user", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Enabling ActiveSync for $EnableActiveSyncForUser... "
				$textboxDetails.Text = "Set-CASMailbox $EnableActiveSyncForUser -ActiveSyncEnabled `$True"
				Set-CASMailbox $EnableActiveSyncForUser -ActiveSyncEnabled $True
				$TextboxResults.Text = Get-CASMailbox -Identity $EnableActiveSyncForUser | Format-List DisplayName, ActiveSyncEnabled | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to Enable ActiveSync for another user?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$viewActiveSyncInfoForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$ActiveSyncInfoForUser = Read-Host "Enter the UPN for the user you want to view ActiveSync info for"
			$SelectUsersFormText = "Select the user you want to view ActiveSync information for"
			Show-SelectCachedDisplayNames_psf
			$ActiveSyncInfoForUser = $SelectCachedDisplayNames_comboboxNames
			If (!$ActiveSyncInfoForUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid user", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting ActiveSync info for $ActiveSyncInfoForUser..."
				$textboxDetails.Text = "Get-CASMailbox -Identity $ActiveSyncInfoForUser | Format-List DisplayName, ActiveSyncEnabled, ActiveSyncAllowedDeviceIDs, ActiveSyncBlockedDeviceIDs, ActiveSyncMailboxPolicy, ActiveSyncMailboxPolicyIsDefaulted, ActiveSyncDebugLogging, HasActiveSyncDevicePartnership"
				$TextboxResults.Text = Get-CASMailbox -Identity $ActiveSyncInfoForUser | Format-List DisplayName, ActiveSyncEnabled, ActiveSyncAllowedDeviceIDs, ActiveSyncBlockedDeviceIDs, ActiveSyncMailboxPolicy, ActiveSyncMailboxPolicyIsDefaulted, ActiveSyncDebugLogging, HasActiveSyncDevicePartnership | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to view ActiveSync information for another user?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$disableActiveSyncForAllToolStripMenuItem_Click = {
	Try
	{
		$OUTPUT = [System.Windows.Forms.MessageBox]::Show("Are you sure you want to disable ActiveSync for all users?", "Warning!", 4)
		
		If ($OUTPUT -eq "YES")
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Disabling ActiveSync for all..."
			$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Set-CASMailbox -ActiveSyncEnabled `$False"
			Get-Mailbox -ResultSize unlimited | Set-CASMailbox -ActiveSyncEnabled $False
			$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Get-CASMailbox | Sort-Object DisplayName | Format-Table DisplayName, ActiveSyncEnabled -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			[System.Windows.Forms.MessageBox]::Show("ActiveSync has not been disabled for all users", "Info")
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getActiveSyncInfoForAllToolStripMenuItem_Click = {
	try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting ActiveSync info for all..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited | Get-CASMailbox | Sort-Object DisplayName | Format-Table DisplayName, ActiveSyncEnabled -AutoSize"
		$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Get-CASMailbox | Sort-Object DisplayName | Format-Table DisplayName, ActiveSyncEnabled -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		
	}
}

$enableActiveSyncForAllToolStripMenuItem_Click = {
	try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Enabling ActiveSync for all.."
		$textboxDetails.Text = "Get-Mailbox | Set-CASMailbox -ActiveSyncEnabled `$True"
		Get-Mailbox -ResultSize unlimited | Set-CASMailbox -ActiveSyncEnabled $True
		$TextboxResults.Text = Get-Mailbox -ResultSize unlimited | Get-CASMailbox | Sort-Object DisplayName | Format-Table DisplayName, ActiveSyncEnabled -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

	#PowerShell

$disableAccessToPowerShellForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$DisablePowerShellforUser = Read-Host "Enter the UPN of the user you want to disable PowerShell access for"
			$SelectUsersFormText = "Select the user you want to disable PowerShell access for"
			Show-SelectCachedDisplayNames_psf
			$DisablePowerShellforUser = $SelectCachedDisplayNames_comboboxNames
			If (!$DisablePowerShellforUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid user", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Disabling PowerShell access for $DisablePowerShellforUser..."
				$textboxDetails.Text = "Set-User $DisablePowerShellforUser -RemotePowerShellEnabled `$False"
				Set-User $DisablePowerShellforUser -RemotePowerShellEnabled $False
				$TextboxResults.Text = Get-User $DisablePowerShellforUser | Format-List DisplayName, RemotePowerShellEnabled | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to Disable PowerShell Access for another user?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$displayPowerShellRemotingStatusForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$PowerShellRemotingStatusUser = Read-Host "Enter the UPN of the user you want to view PowerShell Remoting for"
			$SelectUsersFormText = "Select the user you want to view PowerShell remoting for"
			Show-SelectCachedDisplayNames_psf
			$PowerShellRemotingStatusUser = $SelectCachedDisplayNames_comboboxNames
			If (!$PowerShellRemotingStatusUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid user", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting PowerShell info for $PowerShellRemotingStatusUser..."
				$textboxDetails.Text = "Get-User $PowerShellRemotingStatusUser | Format-List DisplayName, RemotePowerShellEnabled"
				$TextboxResults.Text = Get-User $PowerShellRemotingStatusUser | Format-List DisplayName, RemotePowerShellEnabled | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get PowerShell Access for another user?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$enableAccessToPowerShellForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$EnablePowerShellforUser = Read-Host "Enter the UPN of the user you want to enable PowerShell access for"
			$SelectUsersFormText = "Select the user you want to enable PowerShell access for"
			Show-SelectCachedDisplayNames_psf
			$EnablePowerShellforUser = $SelectCachedDisplayNames_comboboxNames
			If (!$EnablePowerShellforUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid user", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Enabling PowerShell access for $EnablePowerShellforUser..."
				$textboxDetails.Text = "Set-User $EnablePowerShellforUser -RemotePowerShellEnabled `$True"
				Set-User $EnablePowerShellforUser -RemotePowerShellEnabled $True
				$TextboxResults.Text = Get-User $EnablePowerShellforUser | Format-List DisplayName, RemotePowerShellEnabled | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to enable PowerShell Access for another user?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getPowerShellRemotingStatusForAllToolStripMenuItem_Click = {
	try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting PowerShell info for all users..."
		$textboxDetails.Text = "Get-User -ResultSize unlimited | Sort-Object DisplayName | Format-Table DisplayName, RemotePowerShellEnabled -AutoSize"
		$TextboxResults.Text = Get-User -ResultSize unlimited | Sort-Object DisplayName | Format-Table DisplayName, RemotePowerShellEnabled -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}


	#Message Trace

$messageTraceToolStripMenuItem_Click = {
	
}

$GetAllRecentToolStripMenuItem_Click = {
	try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting recent messages..."
		$textboxDetails.Text = "Get-MessageTrace | Format-List Received, SenderAddress, RecipientAddress, FromIP, ToIP, Subject, Size, Status"
		$TextboxResults.Text = Get-MessageTrace | Format-List Received, SenderAddress, RecipientAddress, FromIP, ToIP, Subject, Size, Status | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$fromACertainSenderToolStripMenuItem1_Click = {
	Do
	{
		Try
		{
			$MessageTraceSender = Read-Host "Enter the senders email address"
			If (!$MessageTraceSender)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No e-mail was entered, please enter a valid sender e-mail", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting messages from $MessageTraceSender..."
				$textboxDetails.Text = "Get-MessageTrace -SenderAddress $MessageTraceSender | Format-List Received, SenderAddress, RecipientAddress, FromIP, ToIP, Subject, Size, Status"
				$TextboxResults.Text = Get-MessageTrace -SenderAddress $MessageTraceSender | Format-List Received, SenderAddress, RecipientAddress, FromIP, ToIP, Subject, Size, Status | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to run another message trace?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$toACertainRecipientToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$MessageTraceRecipient = Read-Host "Enter the recipients email address"
			If (!$MessageTraceRecipient)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No recipient e-mail was entered, please enter a valid e-mail address", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting messages sent to $MessageTraceRecipient..."
				$textboxDetails.Text = "Get-MessageTrace -RecipientAddress $MessageTraceRecipient | Format-List Received, SenderAddress, RecipientAddress, FromIP, ToIP, Subject, Size, Status"
				$TextboxResults.Text = Get-MessageTrace -RecipientAddress $MessageTraceRecipient | Format-List Received, SenderAddress, RecipientAddress, FromIP, ToIP, Subject, Size, Status | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to run another message trace?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getFailedMessagesToolStripMenuItem_Click = {
	try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting failed messages..."
		$textboxDetails.Text = "Get-MessageTrace -Status 'Failed' | Format-Table Received, SenderAddress, RecipientAddress, FromIP, ToIP, Subject, Size, Status"
		$TextboxResults.Text = Get-MessageTrace -Status "Failed" | Format-List Received, SenderAddress, RecipientAddress, FromIP, ToIP, Subject, Size, Status | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$GetMessagesBetweenDatesToolStripMenuItem_Click = {
	Do
	{
		#$MessageTraceStartDate = Read-Host "Enter the start date. EX: 06/13/2015 or 09/01/2015 5:00 PM"
		$StartDateText = "Select the beginning date for the message trace"
		$StartDateFormText = "Start Date"
		Show-SelectDatePicker_psf
		$startdate = $SelectDatePicker_monthcalendar1
		$MessageTraceStartDate = "$startdate".trimend('00:00:00')
		
		#$MessageTraceEndDate = Read-Host "Enter the end date. EX: 06/15/2015 or 09/01/2015 5:00 PM"
		$StartDateText = "Select the ending date for the message trace"
		$StartDateFormText = "End Date"
		Show-SelectDatePicker_psf
		$enddate = $SelectDatePicker_monthcalendar1
		$MessageTraceEndDate = "$enddate".trimend('00:00:00')
		
		try
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting messages between $MessageTraceStartDate and $MessageTraceEndDate..."
			$textboxDetails.Text = "Get-MessageTrace -StartDate $MessageTraceStartDate -EndDate $MessageTraceEndDate | Format-List Received, SenderAddress, RecipientAddress, FromIP, ToIP, Subject, Size, Status"
			$TextboxResults.Text = Get-MessageTrace -StartDate $MessageTraceStartDate -EndDate $MessageTraceEndDate | Format-List Received, SenderAddress, RecipientAddress, FromIP, ToIP, Subject, Size, Status | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to run another message trace?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

#Company Info

$getTechnicalNotificationEmailToolStripMenuItem_Click = {
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting technical account info..."
			$textboxDetails.Text = "Get-MsolCompanyInformation | Format-List TechnicalNotificationEmails"
			$TextboxResults.Text = Get-MsolCompanyInformation | Format-List TechnicalNotificationEmails | Out-String
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting technical account info..."
			$textboxDetails.Text = "Get-MsolCompanyInformation -TenantId $TenantText | Format-List TechnicalNotificationEmails"
			$TextboxResults.Text = Get-MsolCompanyInformation -TenantId $PartnerComboBox.SelectedItem.TenantID | Format-List TechnicalNotificationEmails | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting technical account info..."
			$textboxDetails.Text = "Get-MsolCompanyInformation | Format-List TechnicalNotificationEmails"
			$TextboxResults.Text = Get-MsolCompanyInformation | Format-List TechnicalNotificationEmails | Out-String
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$lastDirSyncTimeToolStripMenuItem_Click = {
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting last DirSync time..."
			$textboxDetails.Text = "Get-MsolCompanyInformation | Format-List LastDirSyncTime"
			$TextboxResults.Text = Get-MsolCompanyInformation | Format-List LastDirSyncTime | Out-String
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting last DirSync time..."
			$textboxDetails.Text = "Get-MsolCompanyInformation -TenantId $TenantText | Format-List LastDirSyncTime"
			$TextboxResults.Text = Get-MsolCompanyInformation -TenantId $PartnerComboBox.SelectedItem.TenantID | Format-List LastDirSyncTime | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting last DirSync time..."
			$textboxDetails.Text = "Get-MsolCompanyInformation | Format-List LastDirSyncTime"
			$TextboxResults.Text = Get-MsolCompanyInformation | Format-List LastDirSyncTime | Out-String
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getLastPasswordSyncTimeToolStripMenuItem_Click = {
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting last password sync time..."
			$textboxDetails.Text = "Get-MsolCompanyInformation | Format-List LastPasswordSyncTime"
			$TextboxResults.Text = Get-MsolCompanyInformation | Format-List LastPasswordSyncTime | Out-String
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting last password sync time..."
			$textboxDetails.Text = "Get-MsolCompanyInformation -TenantId $TenantText  | Format-List LastPasswordSyncTime"
			$TextboxResults.Text = Get-MsolCompanyInformation -TenantId $PartnerComboBox.SelectedItem.TenantID | Format-List LastPasswordSyncTime | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting last password sync time..."
			$textboxDetails.Text = "Get-MsolCompanyInformation | Format-List LastPasswordSyncTime"
			$TextboxResults.Text = Get-MsolCompanyInformation | Format-List LastPasswordSyncTime | Out-String
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getAllCompanyInfoToolStripMenuItem_Click = {
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all company info..."
			$textboxDetails.Text = "Get-MsolCompanyInformation | Format-List "
			$TextboxResults.Text = Get-MsolCompanyInformation | Format-List | Out-String
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all company info..."
			$textboxDetails.Text = "Get-MsolCompanyInformation -TenantId $TenantText | Format-List"
			$TextboxResults.Text = Get-MsolCompanyInformation -TenantId $PartnerComboBox.SelectedItem.TenantID | Format-List | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all company info..."
			$textboxDetails.Text = "Get-MsolCompanyInformation | Format-List "
			$TextboxResults.Text = Get-MsolCompanyInformation | Format-List | Out-String
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

#Sharing Policy

$getSharingPolicyToolStripMenuItem_Click = {
	try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting all sharing policies..."
		$textboxDetails.Text = "Get-SharingPolicy | Format-List Name, Domains, Enabled, Default, Identity, WhenChanged, WhenCreated, IsValid, ObjectState"
		$TextboxResults.Text = Get-SharingPolicy | Format-List Name, Domains, Enabled, Default, Identity, WhenChanged, WhenCreated, IsValid, ObjectState | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$disableASharingPolicyToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$DisableSharingPolicy = Read-Host "Enter the name of the policy you want to disable"
			$SharingPolicyText = "Select the Sharing Policy you want to disable"
			Show-SelectSharingPolicy_psf
			$DisableSharingPolicy = $SelectSharingPolicy_comboboxSharingPolicies
			If (!$DisableSharingPolicy)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Sharing Policy was selected, please selected a valid Sharing Policy to disable", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Disabling the sharing policy $DisableSharingPolicy..."
				$textboxDetails.Text = "Set-SharingPolicy -Identity $DisableSharingPolicy -Enabled `$False"
				Set-SharingPolicy -Identity $DisableSharingPolicy -Enabled $False
				$TextboxResults.Text = Get-SharingPolicy -Identity $DisableSharingPolicy | Format-List Name, Enabled, ObjectState | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to disable another Sharing Policy?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$enableASharingPolicyToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$EnableSharingPolicy = Read-Host "Enter the name of the policy you want to Enable"
			$SharingPolicyText = "Select the Sharing Policy you want to enable"
			Show-SelectSharingPolicy_psf
			$EnableSharingPolicy = $SelectSharingPolicy_comboboxSharingPolicies
			If (!$EnableSharingPolicy)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Sharing Policy was selected, please select a valid Sharing Policy to enable", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Enabling the sharing policy $EnableSharingPolicy..."
				$textboxDetails.Text = "Set-SharingPolicy -Identity $EnableSharingPolicy -Enabled `$True"
				Set-SharingPolicy -Identity $EnableSharingPolicy -Enabled $True
				$TextboxResults.Text = Get-SharingPolicy -Identity $EnableSharingPolicy | Format-List Name, Enabled, ObjectState | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to enable another Sharing Policy?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$createANewSharingPolicyToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$TextboxResults.Text = "You may need to enable organization customization if customization status is dehydrated."
			$TextboxResults.Text = Get-OrganizationConfig | Format-List  Identity, IsDehydrated | Out-String
			$NewSharingPolicyName = Read-Host "Enter the name for the Sharing Policy"
			If (!$NewSharingPolicyName)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No name was entered, please enter a valid name for the new Sharing Policy", "Error")
			}
			Else
			{
				$TextboxResults.Text = "The following Sharing Policy Action Values can be used:
CalendarSharingFreeBusySimple: Share free/busy hours only
CalendarSharingFreeBusyDetail: Share free/busy hours, subject, and location
CalendarSharingFreeBusyReviewer: Share free/busy hours, subject, location, and the body of the message or calendar item
ContactsSharing: Share contacts only

EXAMPLE: mail.contoso.com: CalendarSharingFreeBusyDetail, ContactsSharing "
				$SharingPolicy = Read-Host "Enter the domain this policy will apply to and the value"
				If (!$SharingPolicy)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Sharing Policy Action Value was entered, please enter a valid Sharing Policy Action Value", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Creating a new sharing policy $NewSharingPolicyName..."
					$textboxDetails.Text = "New-SharingPolicy -Name $NewSharingPolicyName -Domains $SharingPolicy"
					New-SharingPolicy -Name $NewSharingPolicyName -Domains $SharingPolicy
					$TextboxResults.Text = Get-SharingPolicy -Identity $NewSharingPolicyName | Format-List Name, Domains, Enabled, Default, Identity, WhenChanged, WhenCreated, IsValid, ObjectState | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to create another Sharing Policy?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getInfoForASingleSharingPolicyToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$DetailedInfoForSharingPolicy = Read-Host "Enter the name of the policy you want info for"
			$SharingPolicyText = "Select the Sharing Policy you want to view detailed information for"
			Show-SelectSharingPolicy_psf
			$DetailedInfoForSharingPolicy = $SelectSharingPolicy_comboboxSharingPolicies
			If (!$DetailedInfoForSharingPolicy)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Sharing Policy was selected, please select a valid Sharing Policy to get detailed information on", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting info for the sharing policy $DetailedInfoForSharingPolicy..."
				$textboxDetails.Text = "Get-SharingPolicy -Identity $DetailedInfoForSharingPolicy | Format-List Name, Domains, Enabled, Default, Identity, WhenChanged, WhenCreated, IsValid, ObjectState"
				$TextboxResults.Text = Get-SharingPolicy -Identity $DetailedInfoForSharingPolicy | Format-List Name, Domains, Enabled, Default, Identity, WhenChanged, WhenCreated, IsValid, ObjectState | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get information about another Sharing Policy?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

#Configuration 

$enableCustomizationToolStripMenuItem_Click = {
	try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Enabling customization..."
		$textboxDetails.Text = "Enable-OrganizationCustomization"
		Enable-OrganizationCustomization
		$TextboxResults.Text = "Success"
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getCustomizationStatusToolStripMenuItem_Click = {
	try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting customization status..."
		$textboxDetails.Text = "Get-OrganizationConfig | Format-Table  Identity, IsDehydrated -AutoSize "
		$TextboxResults.Text = Get-OrganizationConfig | Format-Table  Identity, IsDehydrated -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getOrganizationCustomizationToolStripMenuItem_Click = {
	try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting customization information..."
		$textboxDetails.Text = "Get-OrganizationConfig | Format-List"
		$TextboxResults.Text = Get-OrganizationConfig | Format-List | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getSharepointSiteToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting sharepoint URL..."
		$textboxDetails.Text = "Get-OrganizationConfig | Format-List SharePointUrl"
		$TextboxResults.Text = Get-OrganizationConfig | Format-List SharePointUrl | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}



###REPORTING###

$getAllMailboxSizesToolStripMenuItem_Click = {
	try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Generating mailbox sizes report..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize Unlimited | Get-MailboxStatistics | Select-Object DisplayName,`@{name = 'TotalItemSize (MB)'; expression = {[math]::Round( `
(`$_.TotalItemSize.ToString().Split('(')[1].Split(' ')[0].Replace(', ', '')/1MB), 2)}}, `
ItemCount | Sort-Object 'TotalItemSize (MB)' -Descending | Format-Table -AutoSize"
		$TextboxResults.Text =
		Get-Mailbox -ResultSize Unlimited | Get-MailboxStatistics | Select-Object DisplayName, `
		
		@{
			name = "TotalItemSize (MB)"; expression = {
				[math]::Round( `
					($_.TotalItemSize.ToString().Split("(")[1].Split(" ")[0].Replace(",", "")/1MB), 2)
			}
		}, `
		
		ItemCount | Sort-Object "TotalItemSize (MB)" -Descending | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getLicenceReconciliationReportToolStripMenuItem_Click = {
	$textboxDetails.Text = ""
	$TextboxResults.Text = ""
	Try
	{
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$savedialog = New-Object windows.forms.savefiledialog
			$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
			$savedialog.title = "Export to File"
			$savedialog.filter = ".csv|*.csv"
			$savedialog.ShowHelp = $True
			$result = $savedialog.ShowDialog(); $result
			if ($result -eq "OK")
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$LogFile = $savedialog.filename
				$TextboxResults.Text = "Getting License Report..."
				
				# Define Hashtables for lookup 
				$Sku = @{
					"DESKLESSPACK" = "Office 365 (Plan K1)"
					"DESKLESSWOFFPACK" = "Office 365 (Plan K2)"
					"LITEPACK" = "Office 365 (Plan P1)"
					"EXCHANGESTANDARD" = "Office 365 Exchange Online Only"
					"STANDARDPACK" = "Office 365 (Plan E1)"
					"STANDARDWOFFPACK" = "Office 365 (Plan E2)"
					"ENTERPRISEPACK" = "Office 365 (Plan E3)"
					"ENTERPRISEPACKLRG" = "Office 365 (Plan E3)"
					"ENTERPRISEWITHSCAL" = "Office 365 (Plan E4)"
					"STANDARDPACK_STUDENT" = "Office 365 (Plan A1) for Students"
					"STANDARDWOFFPACKPACK_STUDENT" = "Office 365 (Plan A2) for Students"
					"ENTERPRISEPACK_STUDENT" = "Office 365 (Plan A3) for Students"
					"ENTERPRISEWITHSCAL_STUDENT" = "Office 365 (Plan A4) for Students"
					"STANDARDPACK_FACULTY" = "Office 365 (Plan A1) for Faculty"
					"STANDARDWOFFPACKPACK_FACULTY" = "Office 365 (Plan A2) for Faculty"
					"ENTERPRISEPACK_FACULTY" = "Office 365 (Plan A3) for Faculty"
					"ENTERPRISEWITHSCAL_FACULTY" = "Office 365 (Plan A4) for Faculty"
					"ENTERPRISEPACK_B_PILOT" = "Office 365 (Enterprise Preview)"
					"STANDARD_B_PILOT" = "Office 365 (Small Business Preview)"
				}
				
				# Get a list of all licences that exist within the tenant 
				$licensetype = Get-MsolAccountSku | Where-Object { $_.ConsumedUnits -ge 1 }
				
				# Loop through all licence types found in the tenant 
				foreach ($license in $licensetype)
				{
					# Build and write the Header for the CSV file 
					$headerstring = "DisplayName,UserPrincipalName,AccountSku"
					
					foreach ($row in $($license.ServiceStatus))
					{
						
						# Build header string 
						switch -wildcard ($($row.ServicePlan.servicename))
						{
							"EXC*" { $thisLicence = "Exchange Online" }
							"MCO*" { $thisLicence = "Lync Online" }
							"LYN*" { $thisLicence = "Lync Online" }
							"OFF*" { $thisLicence = "Office Profesional Plus" }
							"SHA*" { $thisLicence = "Sharepoint Online" }
							"*WAC*" { $thisLicence = "Office Web Apps" }
							"WAC*" { $thisLicence = "Office Web Apps" }
							default { $thisLicence = $row.ServicePlan.servicename }
						}
						
						$headerstring = ($headerstring + "," + $thisLicence)
					}
					
					Out-File -FilePath $LogFile -InputObject $headerstring -Encoding UTF8 -append
					
					# Gather users for this particular AccountSku 
					$users = Get-MsolUser -all | Where-Object { $_.isLicensed -eq "True" -and $_.licenses[0].accountskuid.tostring() -eq $license.accountskuid }
					
					# Loop through all users and write them to the CSV file 
					foreach ($user in $users)
					{
						
						#write-host ("Processing " + $user.displayname)
						
						$datastring = ($user.displayname + "," + $user.userprincipalname + "," + $Sku.Item($user.licenses[0].AccountSku.SkuPartNumber))
						
						foreach ($row in $($user.licenses[0].servicestatus))
						{
							
							# Build data string 
							$datastring = ($datastring + "," + $($row.provisioningstatus))
						}
						
						Out-File -FilePath $LogFile -InputObject $datastring -Encoding UTF8 -append
						
					}
				}
				$FormO365AdministrationCenter.Cursor = 'Default'
				
			}
			$TextboxResults.Text = ""
		}
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$savedialog = New-Object windows.forms.savefiledialog
			$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
			$savedialog.title = "Export to File"
			$savedialog.filter = ".csv|*.csv"
			$savedialog.ShowHelp = $True
			$result = $savedialog.ShowDialog(); $result
			if ($result -eq "OK")
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$LogFile = $savedialog.filename
				$TextboxResults.Text = "Getting License Report..."
				
				# Define Hashtables for lookup 
				$Sku = @{
					"DESKLESSPACK" = "Office 365 (Plan K1)"
					"DESKLESSWOFFPACK" = "Office 365 (Plan K2)"
					"LITEPACK" = "Office 365 (Plan P1)"
					"EXCHANGESTANDARD" = "Office 365 Exchange Online Only"
					"STANDARDPACK" = "Office 365 (Plan E1)"
					"STANDARDWOFFPACK" = "Office 365 (Plan E2)"
					"ENTERPRISEPACK" = "Office 365 (Plan E3)"
					"ENTERPRISEPACKLRG" = "Office 365 (Plan E3)"
					"ENTERPRISEWITHSCAL" = "Office 365 (Plan E4)"
					"STANDARDPACK_STUDENT" = "Office 365 (Plan A1) for Students"
					"STANDARDWOFFPACKPACK_STUDENT" = "Office 365 (Plan A2) for Students"
					"ENTERPRISEPACK_STUDENT" = "Office 365 (Plan A3) for Students"
					"ENTERPRISEWITHSCAL_STUDENT" = "Office 365 (Plan A4) for Students"
					"STANDARDPACK_FACULTY" = "Office 365 (Plan A1) for Faculty"
					"STANDARDWOFFPACKPACK_FACULTY" = "Office 365 (Plan A2) for Faculty"
					"ENTERPRISEPACK_FACULTY" = "Office 365 (Plan A3) for Faculty"
					"ENTERPRISEWITHSCAL_FACULTY" = "Office 365 (Plan A4) for Faculty"
					"ENTERPRISEPACK_B_PILOT" = "Office 365 (Enterprise Preview)"
					"STANDARD_B_PILOT" = "Office 365 (Small Business Preview)"
				}
				
				# Get a list of all licences that exist within the tenant 
				$licensetype = Get-MsolAccountSku -TenantId $PartnerComboBox.SelectedItem.TenantID | Where-Object { $_.ConsumedUnits -ge 1 }
				
				# Loop through all licence types found in the tenant 
				foreach ($license in $licensetype)
				{
					# Build and write the Header for the CSV file 
					$headerstring = "DisplayName,UserPrincipalName,AccountSku"
					
					foreach ($row in $($license.ServiceStatus))
					{
						
						# Build header string 
						switch -wildcard ($($row.ServicePlan.servicename))
						{
							"EXC*" { $thisLicence = "Exchange Online" }
							"MCO*" { $thisLicence = "Lync Online" }
							"LYN*" { $thisLicence = "Lync Online" }
							"OFF*" { $thisLicence = "Office Profesional Plus" }
							"SHA*" { $thisLicence = "Sharepoint Online" }
							"*WAC*" { $thisLicence = "Office Web Apps" }
							"WAC*" { $thisLicence = "Office Web Apps" }
							default { $thisLicence = $row.ServicePlan.servicename }
						}
						
						$headerstring = ($headerstring + "," + $thisLicence)
					}
					
					Out-File -FilePath $LogFile -InputObject $headerstring -Encoding UTF8 -append
					
					# Gather users for this particular AccountSku 
					$users = Get-MsolUser -all -TenantId $PartnerComboBox.SelectedItem.TenantID | Where-Object { $_.isLicensed -eq "True" -and $_.licenses[0].accountskuid.tostring() -eq $license.accountskuid }
					
					# Loop through all users and write them to the CSV file 
					foreach ($user in $users)
					{
						
						#write-host ("Processing " + $user.displayname)
						
						$datastring = ($user.displayname + "," + $user.userprincipalname + "," + $Sku.Item($user.licenses[0].AccountSku.SkuPartNumber))
						
						foreach ($row in $($user.licenses[0].servicestatus))
						{
							
							# Build data string 
							$datastring = ($datastring + "," + $($row.provisioningstatus))
						}
						
						Out-File -FilePath $LogFile -InputObject $datastring -Encoding UTF8 -append
						
					}
				}
				$FormO365AdministrationCenter.Cursor = 'Default'
				
			}
			$TextboxResults.Text = ""
		}
		Else
		{
			$savedialog = New-Object windows.forms.savefiledialog
			$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
			$savedialog.title = "Export to File"
			$savedialog.filter = ".csv|*.csv"
			$savedialog.ShowHelp = $True
			$result = $savedialog.ShowDialog(); $result
			if ($result -eq "OK")
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$LogFile = $savedialog.filename
				$TextboxResults.Text = "Getting License Report..."
				
				# Define Hashtables for lookup 
				$Sku = @{
					"DESKLESSPACK" = "Office 365 (Plan K1)"
					"DESKLESSWOFFPACK" = "Office 365 (Plan K2)"
					"LITEPACK" = "Office 365 (Plan P1)"
					"EXCHANGESTANDARD" = "Office 365 Exchange Online Only"
					"STANDARDPACK" = "Office 365 (Plan E1)"
					"STANDARDWOFFPACK" = "Office 365 (Plan E2)"
					"ENTERPRISEPACK" = "Office 365 (Plan E3)"
					"ENTERPRISEPACKLRG" = "Office 365 (Plan E3)"
					"ENTERPRISEWITHSCAL" = "Office 365 (Plan E4)"
					"STANDARDPACK_STUDENT" = "Office 365 (Plan A1) for Students"
					"STANDARDWOFFPACKPACK_STUDENT" = "Office 365 (Plan A2) for Students"
					"ENTERPRISEPACK_STUDENT" = "Office 365 (Plan A3) for Students"
					"ENTERPRISEWITHSCAL_STUDENT" = "Office 365 (Plan A4) for Students"
					"STANDARDPACK_FACULTY" = "Office 365 (Plan A1) for Faculty"
					"STANDARDWOFFPACKPACK_FACULTY" = "Office 365 (Plan A2) for Faculty"
					"ENTERPRISEPACK_FACULTY" = "Office 365 (Plan A3) for Faculty"
					"ENTERPRISEWITHSCAL_FACULTY" = "Office 365 (Plan A4) for Faculty"
					"ENTERPRISEPACK_B_PILOT" = "Office 365 (Enterprise Preview)"
					"STANDARD_B_PILOT" = "Office 365 (Small Business Preview)"
				}
				
				# Get a list of all licences that exist within the tenant 
				$licensetype = Get-MsolAccountSku | Where-Object { $_.ConsumedUnits -ge 1 }
				
				# Loop through all licence types found in the tenant 
				foreach ($license in $licensetype)
				{
					# Build and write the Header for the CSV file 
					$headerstring = "DisplayName,UserPrincipalName,AccountSku"
					
					foreach ($row in $($license.ServiceStatus))
					{
						
						# Build header string 
						switch -wildcard ($($row.ServicePlan.servicename))
						{
							"EXC*" { $thisLicence = "Exchange Online" }
							"MCO*" { $thisLicence = "Lync Online" }
							"LYN*" { $thisLicence = "Lync Online" }
							"OFF*" { $thisLicence = "Office Profesional Plus" }
							"SHA*" { $thisLicence = "Sharepoint Online" }
							"*WAC*" { $thisLicence = "Office Web Apps" }
							"WAC*" { $thisLicence = "Office Web Apps" }
							default { $thisLicence = $row.ServicePlan.servicename }
						}
						
						$headerstring = ($headerstring + "," + $thisLicence)
					}
					
					Out-File -FilePath $LogFile -InputObject $headerstring -Encoding UTF8 -append
					
					# Gather users for this particular AccountSku 
					$users = Get-MsolUser -all | Where-Object { $_.isLicensed -eq "True" -and $_.licenses[0].accountskuid.tostring() -eq $license.accountskuid }
					
					# Loop through all users and write them to the CSV file 
					foreach ($user in $users)
					{
						
						#write-host ("Processing " + $user.displayname)
						
						$datastring = ($user.displayname + "," + $user.userprincipalname + "," + $Sku.Item($user.licenses[0].AccountSku.SkuPartNumber))
						
						foreach ($row in $($user.licenses[0].servicestatus))
						{
							
							# Build data string 
							$datastring = ($datastring + "," + $($row.provisioningstatus))
						}
						
						Out-File -FilePath $LogFile -InputObject $datastring -Encoding UTF8 -append
						
					}
				}
				$FormO365AdministrationCenter.Cursor = 'Default'
				
			}
			$TextboxResults.Text = ""
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getAllGroupsAndAllMembersToCSVToolStripMenuItem_Click = {
	Try
	{
		$savedialog = New-Object windows.forms.savefiledialog
		$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
		$savedialog.title = "Export to File"
		$savedialog.filter = ".csv|*.csv"
		$savedialog.ShowHelp = $True
		$result = $savedialog.ShowDialog(); $result
		if ($result -eq "OK")
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			#Constant Variables 
			$OutputFile = $savedialog.filename
			$TextboxResults.Text = "Getting all groups and members..."
			$arrDLMembers = @{ }
			
			#Prepare Output file with headers 
			Out-File -FilePath $OutputFile -InputObject "Distribution Group DisplayName,Distribution Group Email,Member DisplayName, Member Email, Member Type" -Encoding UTF8
			
			#Get all Distribution Groups from Office 365 
			$objDistributionGroups = Get-DistributionGroup -ResultSize Unlimited
			
			#Iterate through all groups, one at a time     
			Foreach ($objDistributionGroup in $objDistributionGroups)
			{
				
				#write-host "Processing $($objDistributionGroup.DisplayName)..."
				
				#Get members of this group 
				$objDGMembers = Get-DistributionGroupMember -Identity $($objDistributionGroup.PrimarySmtpAddress)
				
				#write-host "Found $($objDGMembers.Count) members..."
				
				#Iterate through each member 
				Foreach ($objMember in $objDGMembers)
				{
					Out-File -FilePath $OutputFile -InputObject "$($objDistributionGroup.DisplayName),$($objDistributionGroup.PrimarySMTPAddress),$($objMember.DisplayName),$($objMember.PrimarySMTPAddress),$($objMember.RecipientType)" -Encoding UTF8 -append
					#write-host "`t$($objDistributionGroup.DisplayName),$($objDistributionGroup.PrimarySMTPAddress),$($objMember.DisplayName),$($objMember.PrimarySMTPAddress),$($objMember.RecipientType)"
				}
			}
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		$TextboxResults.Text = ""
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getAllUsersLastLogonTimestampToCSVToolStripMenuItem_Click = {
	$savedialog = New-Object windows.forms.savefiledialog
	$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
	$savedialog.title = "Export to CSV"
	$savedialog.filter = ".csv|*.csv"
	$savedialog.ShowHelp = $True
	$result = $savedialog.ShowDialog(); $result
	if ($result -eq "OK")
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting all users last logon timestamp..."
		$textboxDetails.Text = "(Get-Mailbox) | ForEach-Object { Get-MailboxStatistics $_.Identity | Select-Object DisplayName, LastLogonTime } "
		(Get-Mailbox) | ForEach-Object { Get-MailboxStatistics $_.Identity | Select-Object DisplayName, LastLogonTime } | Export-CSV $savedialog.filename -Encoding utf8 -NoTypeInformation -Delimiter ","
		$TextboxResults.Text = ""
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	else
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getAllMailboxPermissionsToCSVToolStripMenuItem_Click = {
	Try
	{
		$savedialog = New-Object windows.forms.savefiledialog
		$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
		$savedialog.title = "Export to File"
		$savedialog.filter = ".csv|*.csv"
		$savedialog.ShowHelp = $True
		$result = $savedialog.ShowDialog(); $result
		if ($result -eq "OK")
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$OutputFile = $savedialog.filename
			$TextboxResults.Text = "Getting all mailbox permissions..."
			
			#$OutputFile = Read-Host "Enter the location and name for the CSV. EX: C:\Scripts\UserPerms.csv"
			$textboxDetails.Text = ""
			
			#Main
			Function Main
			{
				
				
				
				#Prepare Output file with headers
				Out-File -FilePath $OutputFile -InputObject "UserPrincipalName,ObjectWithAccess,ObjectType,AccessType,Inherited,AllowOrDeny" -Encoding UTF8
				
				
				$objUsers = get-mailbox -ResultSize Unlimited | Select-Object UserPrincipalName
				
				
				#Iterate through all users	
				Foreach ($objUser in $objUsers)
				{
					#Connect to the users mailbox
					$objUserMailbox = get-mailboxpermission -Identity $($objUser.UserPrincipalName) | Select-Object User, AccessRights, Deny, IsInherited
					
					#Prepare UserPrincipalName variable
					$strUserPrincipalName = $objUser.UserPrincipalName
					
					#Loop through each permission
					foreach ($objPermission in $objUserMailbox)
					{
						#Get the remaining permission details (We're only interested in real users, not built in system accounts/groups)
						if (($objPermission.user.tolower().contains("\domain admin")) -or ($objPermission.user.tolower().contains("\enterprise admin")) -or ($objPermission.user.tolower().contains("\organization management")) -or ($objPermission.user.tolower().contains("\administrator")) -or ($objPermission.user.tolower().contains("\exchange servers")) -or ($objPermission.user.tolower().contains("\public folder management")) -or ($objPermission.user.tolower().contains("nt authority")) -or ($objPermission.user.tolower().contains("\exchange trusted subsystem")) -or ($objPermission.user.tolower().contains("\discovery management")) -or ($objPermission.user.tolower().contains("s-1-5-21")))
						{ }
						Else
						{
							$objRecipient = (get-recipient $($objPermission.user) -EA SilentlyContinue)
							
							if ($objRecipient)
							{
								$strUserWithAccess = $($objRecipient.DisplayName) + " (" + $($objRecipient.PrimarySMTPAddress) + ")"
								$strObjectType = $objRecipient.RecipientType
							}
							else
							{
								$strUserWithAccess = $($objPermission.user)
								$strObjectType = "Other"
							}
							
							$strAccessType = $($objPermission.AccessRights) -replace ",", ";"
							
							if ($objPermission.Deny -eq $true)
							{
								$strAllowOrDeny = "Deny"
							}
							else
							{
								$strAllowOrDeny = "Allow"
							}
							
							$strInherited = $objPermission.IsInherited
							
							#Prepare the user details in CSV format for writing to file
							$strUserDetails = "$strUserPrincipalName,$strUserWithAccess,$strObjectType,$strAccessType,$strInherited,$strAllowOrDeny"
							
							$TextboxResults.Text = $strUserDetails
							
							#Append the data to file
							Out-File -FilePath $OutputFile -InputObject $strUserDetails -Encoding UTF8 -append
						}
					}
				}
				
				
			}
			
			# Start script
			. Main
			$TextboxResults.Text = ""
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getAllDIsabledUsersThatAreStillMembersOfDistroGroupsToolStripMenuItem_Click = {
	Try
	{
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
		$savedialog = New-Object windows.forms.savefiledialog
		$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
		$savedialog.title = "Export to File"
		$savedialog.filter = ".csv|*.csv"
		$savedialog.ShowHelp = $True
		$result = $savedialog.ShowDialog(); $result
		$TextboxResults.Text = "Getting all users that are disabled and still members of distro groups..."
			if ($result -eq "OK")
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				
				#Get All Groups 
				$Groups = Get-MsolGroup -All
				
				#Build Hash of all disabled users 
				$MSOLDisabledUsers = Get-MsolUser -All -EnabledFilter DisabledOnly | Select-Object ObjectId
				$AllDisabledUsers = @()
				$MSOLDisabledUsers | ForEach-Object { $AllDisabledUsers += $_.ObjectID.Guid }
				
				$DisabledUserMembers = @()
				
				foreach ($Group in $Groups)
				{
					#$TextboxResults.Text = "Processing $($Group.DisplayName)..."
					#Get All Members and Loop through them 
					$GroupMembers = Get-MsolGroupMember -All -GroupObjectID $Group.ObjectID
					foreach ($Member in $GroupMembers)
					{
						#Is this member in our disabled list? 
						if ($AllDisabledUsers -contains $Member.ObjectId)
						{
							#$TextboxResults.Text = "`tFound $($Member.DisplayName)"
							#Add them to the list 
							$DisabledUserMembers += (
								$Object = [pscustomobject][ordered] @{
									GroupName = $Group.DisplayName
									GroupEmail = $Group.EmailAddress
									UserName = $Member.DisplayName
									EmailAddress = $Member.EmailAddress
								}
							)
						}
					}
				}
				$DisabledUserMembers | Export-CSV -NoTypeInformation $savedialog.filename
				$TextboxResults.Text = ""
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
			{
				$savedialog = New-Object windows.forms.savefiledialog
				$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
				$savedialog.title = "Export to File"
				$savedialog.filter = ".csv|*.csv"
				$savedialog.ShowHelp = $True
				$result = $savedialog.ShowDialog(); $result
				$TextboxResults.Text = "Getting all users that are disabled and still members of distro groups..."
				if ($result -eq "OK")
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					
					#Get All Groups 
					$Groups = Get-MsolGroup -All
					
					#Build Hash of all disabled users 
					$MSOLDisabledUsers = Get-MsolUser -All -EnabledFilter DisabledOnly | Select-Object ObjectId
					$AllDisabledUsers = @()
					$MSOLDisabledUsers | ForEach-Object { $AllDisabledUsers += $_.ObjectID.Guid }
					
					$DisabledUserMembers = @()
					
					foreach ($Group in $Groups)
					{
						#$TextboxResults.Text = "Processing $($Group.DisplayName)..."
						#Get All Members and Loop through them 
						$GroupMembers = Get-MsolGroupMember -TenantId $PartnerComboBox.SelectedItem.TenantID -All -GroupObjectID $Group.ObjectID
						foreach ($Member in $GroupMembers)
						{
							#Is this member in our disabled list? 
							if ($AllDisabledUsers -contains $Member.ObjectId)
							{
								#$TextboxResults.Text = "`tFound $($Member.DisplayName)"
								#Add them to the list 
								$DisabledUserMembers += (
									$Object = [pscustomobject][ordered] @{
										GroupName = $Group.DisplayName
										GroupEmail = $Group.EmailAddress
										UserName = $Member.DisplayName
										EmailAddress = $Member.EmailAddress
									}
								)
							}
						}
					}
					$DisabledUserMembers | Export-CSV -NoTypeInformation $savedialog.filename
					$TextboxResults.Text = ""
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
			Else
			{
				$savedialog = New-Object windows.forms.savefiledialog
				$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
				$savedialog.title = "Export to File"
				$savedialog.filter = ".csv|*.csv"
				$savedialog.ShowHelp = $True
				$result = $savedialog.ShowDialog(); $result
				$TextboxResults.Text = "Getting all users that are disabled and still members of distro groups..."
				if ($result -eq "OK")
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					
					#Get All Groups 
					$Groups = Get-MsolGroup -All
					
					#Build Hash of all disabled users 
					$MSOLDisabledUsers = Get-MsolUser -All -EnabledFilter DisabledOnly | Select-Object ObjectId
					$AllDisabledUsers = @()
					$MSOLDisabledUsers | ForEach-Object { $AllDisabledUsers += $_.ObjectID.Guid }
					
					$DisabledUserMembers = @()
					
					foreach ($Group in $Groups)
					{
						#$TextboxResults.Text = "Processing $($Group.DisplayName)..."
						#Get All Members and Loop through them 
						$GroupMembers = Get-MsolGroupMember -All -GroupObjectID $Group.ObjectID
						foreach ($Member in $GroupMembers)
						{
							#Is this member in our disabled list? 
							if ($AllDisabledUsers -contains $Member.ObjectId)
							{
								#$TextboxResults.Text = "`tFound $($Member.DisplayName)"
								#Add them to the list 
								$DisabledUserMembers += (
									$Object = [pscustomobject][ordered] @{
										GroupName = $Group.DisplayName
										GroupEmail = $Group.EmailAddress
										UserName = $Member.DisplayName
										EmailAddress = $Member.EmailAddress
									}
								)
							}
						}
					}
					$DisabledUserMembers | Export-CSV -NoTypeInformation $savedialog.filename
					$TextboxResults.Text = ""
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
			
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
}

$UsersGetLicensesRecoReportToolStripMenuItem1_Click = {
	$textboxDetails.Text = ""
	$TextboxResults.Text = ""
	Try
	{
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$savedialog = New-Object windows.forms.savefiledialog
			$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
			$savedialog.title = "Export to File"
			$savedialog.filter = ".csv|*.csv"
			$savedialog.ShowHelp = $True
			$result = $savedialog.ShowDialog(); $result
			if ($result -eq "OK")
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				
				$LogFile = $savedialog.filename
				$TextboxResults.Text = "Getting License Report..."
				
				# Define Hashtables for lookup 
				$Sku = @{
					"DESKLESSPACK" = "Office 365 (Plan K1)"
					"DESKLESSWOFFPACK" = "Office 365 (Plan K2)"
					"LITEPACK" = "Office 365 (Plan P1)"
					"EXCHANGESTANDARD" = "Office 365 Exchange Online Only"
					"STANDARDPACK" = "Office 365 (Plan E1)"
					"STANDARDWOFFPACK" = "Office 365 (Plan E2)"
					"ENTERPRISEPACK" = "Office 365 (Plan E3)"
					"ENTERPRISEPACKLRG" = "Office 365 (Plan E3)"
					"ENTERPRISEWITHSCAL" = "Office 365 (Plan E4)"
					"STANDARDPACK_STUDENT" = "Office 365 (Plan A1) for Students"
					"STANDARDWOFFPACKPACK_STUDENT" = "Office 365 (Plan A2) for Students"
					"ENTERPRISEPACK_STUDENT" = "Office 365 (Plan A3) for Students"
					"ENTERPRISEWITHSCAL_STUDENT" = "Office 365 (Plan A4) for Students"
					"STANDARDPACK_FACULTY" = "Office 365 (Plan A1) for Faculty"
					"STANDARDWOFFPACKPACK_FACULTY" = "Office 365 (Plan A2) for Faculty"
					"ENTERPRISEPACK_FACULTY" = "Office 365 (Plan A3) for Faculty"
					"ENTERPRISEWITHSCAL_FACULTY" = "Office 365 (Plan A4) for Faculty"
					"ENTERPRISEPACK_B_PILOT" = "Office 365 (Enterprise Preview)"
					"STANDARD_B_PILOT" = "Office 365 (Small Business Preview)"
				}
				
				# Get a list of all licences that exist within the tenant 
				$licensetype = Get-MsolAccountSku | Where-Object { $_.ConsumedUnits -ge 1 }
				
				# Loop through all licence types found in the tenant 
				foreach ($license in $licensetype)
				{
					# Build and write the Header for the CSV file 
					$headerstring = "DisplayName,UserPrincipalName,AccountSku"
					
					foreach ($row in $($license.ServiceStatus))
					{
						
						# Build header string 
						switch -wildcard ($($row.ServicePlan.servicename))
						{
							"EXC*" { $thisLicence = "Exchange Online" }
							"MCO*" { $thisLicence = "Lync Online" }
							"LYN*" { $thisLicence = "Lync Online" }
							"OFF*" { $thisLicence = "Office Profesional Plus" }
							"SHA*" { $thisLicence = "Sharepoint Online" }
							"*WAC*" { $thisLicence = "Office Web Apps" }
							"WAC*" { $thisLicence = "Office Web Apps" }
							default { $thisLicence = $row.ServicePlan.servicename }
						}
						
						$headerstring = ($headerstring + "," + $thisLicence)
					}
					
					Out-File -FilePath $LogFile -InputObject $headerstring -Encoding UTF8 -append
					
					# Gather users for this particular AccountSku 
					$users = Get-MsolUser -all | Where-Object { $_.isLicensed -eq "True" -and $_.licenses[0].accountskuid.tostring() -eq $license.accountskuid }
					
					# Loop through all users and write them to the CSV file 
					foreach ($user in $users)
					{
						
						$datastring = ($user.displayname + "," + $user.userprincipalname + "," + $Sku.Item($user.licenses[0].AccountSku.SkuPartNumber))
						
						foreach ($row in $($user.licenses[0].servicestatus))
						{
							
							# Build data string 
							$datastring = ($datastring + "," + $($row.provisioningstatus))
						}
						
						Out-File -FilePath $LogFile -InputObject $datastring -Encoding UTF8 -append
						
					}
				}
				$TextboxResults.Text = ""
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$savedialog = New-Object windows.forms.savefiledialog
			$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
			$savedialog.title = "Export to File"
			$savedialog.filter = ".csv|*.csv"
			$savedialog.ShowHelp = $True
			$result = $savedialog.ShowDialog(); $result
			if ($result -eq "OK")
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				
				$LogFile = $savedialog.filename
				$TextboxResults.Text = "Getting License Report..."
				
				# Define Hashtables for lookup 
				$Sku = @{
					"DESKLESSPACK" = "Office 365 (Plan K1)"
					"DESKLESSWOFFPACK" = "Office 365 (Plan K2)"
					"LITEPACK" = "Office 365 (Plan P1)"
					"EXCHANGESTANDARD" = "Office 365 Exchange Online Only"
					"STANDARDPACK" = "Office 365 (Plan E1)"
					"STANDARDWOFFPACK" = "Office 365 (Plan E2)"
					"ENTERPRISEPACK" = "Office 365 (Plan E3)"
					"ENTERPRISEPACKLRG" = "Office 365 (Plan E3)"
					"ENTERPRISEWITHSCAL" = "Office 365 (Plan E4)"
					"STANDARDPACK_STUDENT" = "Office 365 (Plan A1) for Students"
					"STANDARDWOFFPACKPACK_STUDENT" = "Office 365 (Plan A2) for Students"
					"ENTERPRISEPACK_STUDENT" = "Office 365 (Plan A3) for Students"
					"ENTERPRISEWITHSCAL_STUDENT" = "Office 365 (Plan A4) for Students"
					"STANDARDPACK_FACULTY" = "Office 365 (Plan A1) for Faculty"
					"STANDARDWOFFPACKPACK_FACULTY" = "Office 365 (Plan A2) for Faculty"
					"ENTERPRISEPACK_FACULTY" = "Office 365 (Plan A3) for Faculty"
					"ENTERPRISEWITHSCAL_FACULTY" = "Office 365 (Plan A4) for Faculty"
					"ENTERPRISEPACK_B_PILOT" = "Office 365 (Enterprise Preview)"
					"STANDARD_B_PILOT" = "Office 365 (Small Business Preview)"
				}
				
				# Get a list of all licences that exist within the tenant 
				$licensetype = Get-MsolAccountSku -TenantId $PartnerComboBox.SelectedItem.TenantID | Where-Object { $_.ConsumedUnits -ge 1 }
				
				# Loop through all licence types found in the tenant 
				foreach ($license in $licensetype)
				{
					# Build and write the Header for the CSV file 
					$headerstring = "DisplayName,UserPrincipalName,AccountSku"
					
					foreach ($row in $($license.ServiceStatus))
					{
						
						# Build header string 
						switch -wildcard ($($row.ServicePlan.servicename))
						{
							"EXC*" { $thisLicence = "Exchange Online" }
							"MCO*" { $thisLicence = "Lync Online" }
							"LYN*" { $thisLicence = "Lync Online" }
							"OFF*" { $thisLicence = "Office Profesional Plus" }
							"SHA*" { $thisLicence = "Sharepoint Online" }
							"*WAC*" { $thisLicence = "Office Web Apps" }
							"WAC*" { $thisLicence = "Office Web Apps" }
							default { $thisLicence = $row.ServicePlan.servicename }
						}
						
						$headerstring = ($headerstring + "," + $thisLicence)
					}
					
					Out-File -FilePath $LogFile -InputObject $headerstring -Encoding UTF8 -append
					
					# Gather users for this particular AccountSku 
					$users = Get-MsolUser -all -TenantId $PartnerComboBox.SelectedItem.TenantID | Where-Object { $_.isLicensed -eq "True" -and $_.licenses[0].accountskuid.tostring() -eq $license.accountskuid }
					
					# Loop through all users and write them to the CSV file 
					foreach ($user in $users)
					{
						
						$datastring = ($user.displayname + "," + $user.userprincipalname + "," + $Sku.Item($user.licenses[0].AccountSku.SkuPartNumber))
						
						foreach ($row in $($user.licenses[0].servicestatus))
						{
							
							# Build data string 
							$datastring = ($datastring + "," + $($row.provisioningstatus))
						}
						
						Out-File -FilePath $LogFile -InputObject $datastring -Encoding UTF8 -append
						
					}
				}
				$TextboxResults.Text = ""
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Else
		{
			$savedialog = New-Object windows.forms.savefiledialog
			$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
			$savedialog.title = "Export to File"
			$savedialog.filter = ".csv|*.csv"
			$savedialog.ShowHelp = $True
			$result = $savedialog.ShowDialog(); $result
			if ($result -eq "OK")
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				
				$LogFile = $savedialog.filename
				$TextboxResults.Text = "Getting License Report..."
				
				# Define Hashtables for lookup 
				$Sku = @{
					"DESKLESSPACK" = "Office 365 (Plan K1)"
					"DESKLESSWOFFPACK" = "Office 365 (Plan K2)"
					"LITEPACK" = "Office 365 (Plan P1)"
					"EXCHANGESTANDARD" = "Office 365 Exchange Online Only"
					"STANDARDPACK" = "Office 365 (Plan E1)"
					"STANDARDWOFFPACK" = "Office 365 (Plan E2)"
					"ENTERPRISEPACK" = "Office 365 (Plan E3)"
					"ENTERPRISEPACKLRG" = "Office 365 (Plan E3)"
					"ENTERPRISEWITHSCAL" = "Office 365 (Plan E4)"
					"STANDARDPACK_STUDENT" = "Office 365 (Plan A1) for Students"
					"STANDARDWOFFPACKPACK_STUDENT" = "Office 365 (Plan A2) for Students"
					"ENTERPRISEPACK_STUDENT" = "Office 365 (Plan A3) for Students"
					"ENTERPRISEWITHSCAL_STUDENT" = "Office 365 (Plan A4) for Students"
					"STANDARDPACK_FACULTY" = "Office 365 (Plan A1) for Faculty"
					"STANDARDWOFFPACKPACK_FACULTY" = "Office 365 (Plan A2) for Faculty"
					"ENTERPRISEPACK_FACULTY" = "Office 365 (Plan A3) for Faculty"
					"ENTERPRISEWITHSCAL_FACULTY" = "Office 365 (Plan A4) for Faculty"
					"ENTERPRISEPACK_B_PILOT" = "Office 365 (Enterprise Preview)"
					"STANDARD_B_PILOT" = "Office 365 (Small Business Preview)"
				}
				
				# Get a list of all licences that exist within the tenant 
				$licensetype = Get-MsolAccountSku | Where-Object { $_.ConsumedUnits -ge 1 }
				
				# Loop through all licence types found in the tenant 
				foreach ($license in $licensetype)
				{
					# Build and write the Header for the CSV file 
					$headerstring = "DisplayName,UserPrincipalName,AccountSku"
					
					foreach ($row in $($license.ServiceStatus))
					{
						
						# Build header string 
						switch -wildcard ($($row.ServicePlan.servicename))
						{
							"EXC*" { $thisLicence = "Exchange Online" }
							"MCO*" { $thisLicence = "Lync Online" }
							"LYN*" { $thisLicence = "Lync Online" }
							"OFF*" { $thisLicence = "Office Profesional Plus" }
							"SHA*" { $thisLicence = "Sharepoint Online" }
							"*WAC*" { $thisLicence = "Office Web Apps" }
							"WAC*" { $thisLicence = "Office Web Apps" }
							default { $thisLicence = $row.ServicePlan.servicename }
						}
						
						$headerstring = ($headerstring + "," + $thisLicence)
					}
					
					Out-File -FilePath $LogFile -InputObject $headerstring -Encoding UTF8 -append
					
					# Gather users for this particular AccountSku 
					$users = Get-MsolUser -all | Where-Object { $_.isLicensed -eq "True" -and $_.licenses[0].accountskuid.tostring() -eq $license.accountskuid }
					
					# Loop through all users and write them to the CSV file 
					foreach ($user in $users)
					{
						
						$datastring = ($user.displayname + "," + $user.userprincipalname + "," + $Sku.Item($user.licenses[0].AccountSku.SkuPartNumber))
						
						foreach ($row in $($user.licenses[0].servicestatus))
						{
							
							# Build data string 
							$datastring = ($datastring + "," + $($row.provisioningstatus))
						}
						
						Out-File -FilePath $LogFile -InputObject $datastring -Encoding UTF8 -append
						
					}
				}
				$TextboxResults.Text = ""
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getAllGroupsAndAllMembersToolStripMenuItem_Click = {
	Try
	{
		$savedialog = New-Object windows.forms.savefiledialog
		$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
		$savedialog.title = "Export to File"
		$savedialog.filter = ".csv|*.csv"
		$savedialog.ShowHelp = $True
		$result = $savedialog.ShowDialog(); $result
		if ($result -eq "OK")
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			#Constant Variables 
			$OutputFile = $savedialog.filename
			$TextboxResults.Text = "Getting all groups and members..."
			$arrDLMembers = @{ }
			
			#Prepare Output file with headers 
			Out-File -FilePath $OutputFile -InputObject "Distribution Group DisplayName,Distribution Group Email,Member DisplayName, Member Email, Member Type" -Encoding UTF8
			
			#Get all Distribution Groups from Office 365 
			$objDistributionGroups = Get-DistributionGroup -ResultSize Unlimited
			
			#Iterate through all groups, one at a time     
			Foreach ($objDistributionGroup in $objDistributionGroups)
			{
				
				#write-host "Processing $($objDistributionGroup.DisplayName)..."
				
				#Get members of this group 
				$objDGMembers = Get-DistributionGroupMember -Identity $($objDistributionGroup.PrimarySmtpAddress)
				
				#write-host "Found $($objDGMembers.Count) members..."
				
				#Iterate through each member 
				Foreach ($objMember in $objDGMembers)
				{
					Out-File -FilePath $OutputFile -InputObject "$($objDistributionGroup.DisplayName),$($objDistributionGroup.PrimarySMTPAddress),$($objMember.DisplayName),$($objMember.PrimarySMTPAddress),$($objMember.RecipientType)" -Encoding UTF8 -append
					#write-host "`t$($objDistributionGroup.DisplayName),$($objDistributionGroup.PrimarySMTPAddress),$($objMember.DisplayName),$($objMember.PrimarySMTPAddress),$($objMember.RecipientType)"
				}
			}
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		$TextboxResults.Text = ""
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$exportAllEmailAddressesToCSVToolStripMenuItem_Click = {
	Try
	{
		$savedialog = New-Object windows.forms.savefiledialog
		$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
		$savedialog.title = "Export to File"
		$savedialog.filter = ".csv|*.csv"
		$savedialog.ShowHelp = $True
		$result = $savedialog.ShowDialog(); $result
		if ($result -eq "OK")
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$OutputFile = $savedialog.filename
			$textboxDetails.Text = "Get-Recipient -ResultSize Unlimited | Select-Object DisplayName, RecipientType, EmailAddresses"
			$TextboxResults.Text = "Exporting list of all email addresses..."
			Get-Recipient -ResultSize Unlimited | select-object DisplayName, RecipientType, EmailAddresses | Export-Csv $OutputFile -NoTypeInformation
			$TextboxResults.Text = ""
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

#Mail Malware Report

$getMailMalwareReportToolStripMenuItem1_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting mail malware report..."
		$textboxDetails.Text = "Get-MailDetailMalwareReport | Format-List"
		$TextboxResults.Text = Get-MailDetailMalwareReport | Format-List | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getMailMalwareReportFromSenderToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$MalwareSender = Read-Host "Enter the email of the sender"
			If (!$MalwareSender)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No e-mail was entered, please enter a valid e-mail of the sender", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Generating mail malware report sent from $MalwareSender..."
				$textboxDetails.Text = "Get-MailDetailMalwareReport -SenderAddress $MalwareSender | Format-List"
				$TextboxResults.Text = Get-MailDetailMalwareReport -SenderAddress $MalwareSender | Format-List | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get a Mail Malware report for a different Sender?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getMailMalwareReportBetweenDatesToolStripMenuItem_Click = {
	Do
	{
		#$MalwareReportStart = Read-Host "Enter the start date. EX: 06/13/2015"
		$StartDateText = "Select the beginning date for the mail malware report"
		$StartDateFormText = "Start Date"
		Show-SelectDatePicker_psf
		$startdate = $SelectDatePicker_monthcalendar1
		$MalwareReportStart = "$startdate".trimend('00:00:00')
		
		#$MalwareReportEnd = Read-Host "Enter the end date. EX: 06/15/2015 "
		$StartDateText = "Select the ending date for the mail malware report"
		$StartDateFormText = "End Date"
		Show-SelectDatePicker_psf
		$enddate = $SelectDatePicker_monthcalendar1
		$MalwareReportEnd = "$enddate".trimend('00:00:00')
		
		try
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Generating mail malware report between $MalwareReportStart and $MalwareReportEnd..."
			$textboxDetails.Text = "Get-MailDetailMalwareReport -StartDate $MalwareReportStart -EndDate $MalwareReportEnd | Format-List"
			$TextboxResults.Text = Get-MailDetailMalwareReport -StartDate $MalwareReportStart -EndDate $MalwareReportEnd | Format-List | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get another Mail Malware report for a different date?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getMailMalwareReportToARecipientToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$MalwareRecipient = Read-Host "Enter the email of the recipient"
			If (!$MalwareRecipient)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Recipient E-mail was entered, please enter a valid recipient e-mail", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Generating mail malware report sent to $MalwareRecipient..."
				$textboxDetails.Text = "Get-MailDetailMalwareReport -RecipientAddress $MalwareRecipient | Format-List"
				$TextboxResults.Text = Get-MailDetailMalwareReport -RecipientAddress $MalwareRecipient | Format-List | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get another Mail Malware report for a different Recipient?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getMailMalwareReporforInboundToolStripMenuItem_Click = {
	try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Generating mail malware inbound report..."
		$textboxDetails.Text = "Get-MailDetailMalwareReport -Direction Inbound | Format-List "
		$TextboxResults.Text = Get-MailDetailMalwareReport -Direction Inbound | Format-List | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getMailMalwareReportForOutboundToolStripMenuItem_Click = {
	try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Generating mail malware outbound report..."
		$textboxDetails.Text = "Get-MailDetailMalwareReport -Direction Outbound | Format-List"
		$TextboxResults.Text = Get-MailDetailMalwareReport -Direction Outbound | Format-List | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

	#Mail Traffic Report

$getRecentMailTrafficReportToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Generating recent mail traffic report..."
		$textboxDetails.Text = "Get-MailTrafficReport | Format-Table -AutoSize"
		$TextboxResults.Text = Get-MailTrafficReport | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getInboundMailTrafficReportToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Generating inbound traffic report..."
		$textboxDetails.Text = "Get-MailTrafficReport -Direction Inbound | Format-Table -AutoSize"
		$TextboxResults.Text = Get-MailTrafficReport -Direction Inbound | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getOutboundMailTrafficReportToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Generating outbound mail traffic report..."
		$textboxDetails.Text = "Get-MailTrafficReport -Direction Outbound | Format-Table -AutoSize"
		$TextboxResults.Text = Get-MailTrafficReport -Direction Outbound | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getMailTrafficReportBetweenDatesToolStripMenuItem_Click = {
	
	#$MailTrafficStart = Read-Host "Enter the start date. EX: 06/13/2015"
	$StartDateText = "Select the beginning date for the mail traffic report"
	$StartDateFormText = "Start Date"
	Show-SelectDatePicker_psf
	$startdate = $SelectDatePicker_monthcalendar1
	$MailTrafficStart = "$startdate".trimend('00:00:00')
	
	#$MailTrafficEnd = Read-Host "Enter the end date. EX: 06/15/2015 "
	$StartDateText = "Select the ending date for the mail traffic report"
	$StartDateFormText = "End Date"
	Show-SelectDatePicker_psf
	$enddate = $SelectDatePicker_monthcalendar1
	$MailTrafficEnd = "$enddate".trimend('00:00:00')
	
	
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Generating mail traffic report between $MailTrafficStart and $MailTrafficEnd..."
		$textboxDetails.Text = "Get-MailTrafficReport -StartDate $MailTrafficStart -EndDate $MailTrafficEnd | Format-Table -AutoSize"
		$TextboxResults.Text = Get-MailTrafficReport -StartDate $MailTrafficStart -EndDate $MailTrafficEnd | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

	#ActiveSyncDevices

$getAllUsersActiveSyncDevicesToolStripMenuItem_Click = {
	Try
	{
		$savedialog = New-Object windows.forms.savefiledialog
		$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
		$savedialog.title = "Export to CSV"
		$savedialog.filter = ".csv|*.csv"
		$savedialog.ShowHelp = $True
		$result = $savedialog.ShowDialog(); $result
		if ($result -eq "OK")
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all ActiveSync Devices for all users..."
			$textboxDetails.Text = "Get-Mailbox -ResultSize Unlimited | ForEach-Object { `$PrimarySmtpAddress = `$_.PrimarySmtpAddress; Get-MobileDeviceStatistics -Mailbox `$_.Identity | Select-Object @{ Name = 'PrimarySmtpAddress'; Expression = { `$PrimarySmtpAddress } }, DeviceType, DeviceOS, DeviceMobileOperator, LastSyncAttemptTime } | Export-CSV `$savedialog.filename -Encoding utf8 -NoTypeInformation -Delimiter ", ""
			$MailBox = Get-Mailbox -ResultSize Unlimited
			$MailBox | ForEach-Object { $PrimarySmtpAddress = $_.PrimarySmtpAddress; Get-MobileDeviceStatistics -Mailbox $_.Identity | Select-Object @{ Name = "PrimarySmtpAddress"; Expression = { $PrimarySmtpAddress } }, DeviceType, DeviceOS, DeviceMobileOperator, LastSyncAttemptTime } | Export-CSV $savedialog.filename -Encoding utf8 -NoTypeInformation -Delimiter ","
			$TextboxResults.Text = ""
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}



###SHARED MAILBOXES###

$createASharedMailboxToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$NewSharedMailbox = Read-Host "Enter the name of the new Shared Mailbox"
			If (!$NewSharedMailbox)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No name was entered, please enter a valid name for the new Shared Mailbox", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Creating new shared mailbox $NewSharedMailbox"
				$textboxDetails.Text = "New-Mailbox -Name $NewSharedMailbox –Shared"
				New-Mailbox -Name $NewSharedMailbox –Shared
				$TextboxResults.Text = Get-Mailbox -ResultSize unlimited -RecipientTypeDetails SharedMailbox | Format-Table -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to create another Shared Mailbox?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getAllSharedMailboxesToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting list of shared mailboxes..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize unlimited -RecipientTypeDetails SharedMailbox | Format-Table -AutoSize"
		$TextboxResults.Text = Get-Mailbox -ResultSize unlimited -RecipientTypeDetails SharedMailbox | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$convertRegularMailboxToSharedToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$ConvertMailboxtoShared = Read-Host "Enter the name of the account you want to convert"
			$SelectUsersFormText = "Select the User you want to convert to a Shared Mailbox"
			Show-SelectCachedDisplayNames_psf
			$ConvertMailboxtoShared = $SelectCachedDisplayNames_comboboxNames
			If (!$ConvertMailboxtoShared)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid User to convert to a Shared Mailbox", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Converting $ConvertMailboxtoShared to a shared mailbox..."
				$textboxDetails.Text = "Set-Mailbox $ConvertMailboxtoShared –Type shared"
				Set-Mailbox $ConvertMailboxtoShared –Type shared
				$TextboxResults.Text = Get-Mailbox -Identity $ConvertMailboxtoShared | Format-List UserPrincipalName, DisplayName, RecipientTypeDetails, PrimarySmtpAddress, EmailAddresses, IsDirSynced | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to convert another User to a Shared Mailbox?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$convertSharedMailboxToRegularToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$ConvertMailboxtoRegular = Read-Host "Enter the name of the account you want to convert"
			$SharedMailboxesText = "Select the Shared Mailbox you want convert to a Regular Mailbox"
			Show-SelectSharedMailbox_psf
			$ConvertMailboxtoRegular = $SelectSharedMailbox_comboboxSharedMailboxes
			If (!$ConvertMailboxtoRegular)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Shared Mailbox was selected, please select a valid Shared Mailbox", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Converting $ConvertMailboxtoRegular to a Regular Mailbox..."
				$textboxDetails.Text = "Set-Mailbox $ConvertMailboxtoRegular –Type Regular"
				Set-Mailbox $ConvertMailboxtoRegular –Type Regular
				$TextboxResults.Text = Get-Mailbox -Identity $ConvertMailboxtoRegular | Format-List UserPrincipalName, DisplayName, RecipientTypeDetails, PrimarySmtpAddress, EmailAddresses, IsDirSynced | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to convert another Shared Mailbox to a Regular Mailbox?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getDetailedInfoForASharedMailboxToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$SharedMailboxDetailedInfo = Read-Host "Enter the name of the shared mailbox"
			$SharedMailboxesText = "Select the Shared Mailbox you want to view detailed information for"
			Show-SelectSharedMailbox_psf
			$SharedMailboxDetailedInfo = $SelectSharedMailbox_comboboxSharedMailboxes
			If (!$SharedMailboxDetailedInfo)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Shared Mailbox was selected, please select a valid Shared Mailbox", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting shared mailbox information for $SharedMailboxDetailedInfo..."
				$textboxDetails.Text = "Get-Mailbox $SharedMailboxDetailedInfo | Format-List"
				$TextboxResults.Text = Get-Mailbox $SharedMailboxDetailedInfo | Format-List | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get information on another Shared Mailbox?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$removeASharedMailboxToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$SharedMailboxesText = "Please select the Shared Mailbox you want to delete "
			Show-SelectSharedMailbox_psf
			$DeleteSharedMailbox = $SelectSharedMailbox_comboboxSharedMailboxes
			If (!$DeleteSharedMailbox)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Shared Mailbox was selected, please select a valid Shared Mailbox to delete", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$textboxDetails.Text = "Remove-Mailbox -Identity $DeleteSharedMailbox"
				$TextboxResults.Text = "Deleting the $DeleteSharedMailbox mailbox"
				Remove-Mailbox -Identity $DeleteSharedMailbox
				$TextboxResults.Text = "Getting list of shared mailboxes..."
				$TextboxResults.Text = Get-Mailbox -ResultSize unlimited -RecipientTypeDetails SharedMailbox | Format-Table -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to remove another Shared Mailbox?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

#Permissions

$exportAllUsersMailboxPermissionsToCSVToolStripMenuItem_Click = {
	
	
	Try
	{
		$savedialog = New-Object windows.forms.savefiledialog
		$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
		$savedialog.title = "Export to File"
		$savedialog.filter = ".csv|*.csv"
		$savedialog.ShowHelp = $True
		$result = $savedialog.ShowDialog(); $result
		if ($result -eq "OK")
		{
			$OutputFile = $savedialog.filename
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			#$OutputFile = Read-Host "Enter the location and name for the CSV. EX: C:\Scripts\UserPerms.csv"
			$textboxDetails.Text = "https://gallery.technet.microsoft.com/scriptcenter/Export-mailbox-permissions-d12a1d28"
			
			#Main
			Function Main
			{
				
				
				
				#Prepare Output file with headers
				Out-File -FilePath $OutputFile -InputObject "UserPrincipalName,ObjectWithAccess,ObjectType,AccessType,Inherited,AllowOrDeny" -Encoding UTF8
				
				
				$objUsers = get-mailbox -ResultSize Unlimited | Select-Object UserPrincipalName
				
				
				#Iterate through all users	
				Foreach ($objUser in $objUsers)
				{
					#Connect to the users mailbox
					$objUserMailbox = get-mailboxpermission -Identity $($objUser.UserPrincipalName) | Select-Object User, AccessRights, Deny, IsInherited
					
					#Prepare UserPrincipalName variable
					$strUserPrincipalName = $objUser.UserPrincipalName
					
					#Loop through each permission
					foreach ($objPermission in $objUserMailbox)
					{
						#Get the remaining permission details (We're only interested in real users, not built in system accounts/groups)
						if (($objPermission.user.tolower().contains("\domain admin")) -or ($objPermission.user.tolower().contains("\enterprise admin")) -or ($objPermission.user.tolower().contains("\organization management")) -or ($objPermission.user.tolower().contains("\administrator")) -or ($objPermission.user.tolower().contains("\exchange servers")) -or ($objPermission.user.tolower().contains("\public folder management")) -or ($objPermission.user.tolower().contains("nt authority")) -or ($objPermission.user.tolower().contains("\exchange trusted subsystem")) -or ($objPermission.user.tolower().contains("\discovery management")) -or ($objPermission.user.tolower().contains("s-1-5-21")))
						{ }
						Else
						{
							$objRecipient = (get-recipient $($objPermission.user) -EA SilentlyContinue)
							
							if ($objRecipient)
							{
								$strUserWithAccess = $($objRecipient.DisplayName) + " (" + $($objRecipient.PrimarySMTPAddress) + ")"
								$strObjectType = $objRecipient.RecipientType
							}
							else
							{
								$strUserWithAccess = $($objPermission.user)
								$strObjectType = "Other"
							}
							
							$strAccessType = $($objPermission.AccessRights) -replace ",", ";"
							
							if ($objPermission.Deny -eq $true)
							{
								$strAllowOrDeny = "Deny"
							}
							else
							{
								$strAllowOrDeny = "Allow"
							}
							
							$strInherited = $objPermission.IsInherited
							
							#Prepare the user details in CSV format for writing to file
							$strUserDetails = "$strUserPrincipalName,$strUserWithAccess,$strObjectType,$strAccessType,$strInherited,$strAllowOrDeny"
							
							$TextboxResults.Text = $strUserDetails
							
							#Append the data to file
							Out-File -FilePath $OutputFile -InputObject $strUserDetails -Encoding UTF8 -append
						}
					}
				}
				
				
			}
			
			# Start script
			. Main
			$TextboxResults.Text = ""
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$addFullAccessPermissionsToASharedMailboxToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$SharedMailboxFullAccess = Read-Host "Enter the name of the shared mailbox"
			$SharedMailboxesText = "Select the Shared Mailbox you want to modify Full Access permissions for"
			Show-SelectSharedMailbox_psf
			$SharedMailboxFullAccess = $SelectSharedMailbox_comboboxSharedMailboxes
			If (!$SharedMailboxFullAccess)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Shared Mailbox was selected, please select a valid Shared mailbox", "Error")
			}
			Else
			{
				#$GrantFullAccesstoSharedMailbox = Read-Host "Enter the UPN of the user that will have full access"
				$SelectUsersFormText = "Select the user you want to have full access to $SharedMailboxFullAccess"
				Show-SelectCachedDisplayNames_psf
				$GrantFullAccesstoSharedMailbox = $SelectCachedDisplayNames_comboboxNames
				If (!$GrantFullAccesstoSharedMailbox)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid user", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Granting Full Access permissions to $GrantFullAccesstoSharedMailbox for the $SharedMailboxFullAccess shared mailbox..."
					$textboxDetails.Text = "Add-MailboxPermission $SharedMailboxFullAccess -User $GrantFullAccesstoSharedMailbox -AccessRights FullAccess -InheritanceType All | Format-List"
					$TextboxResults.Text = Add-MailboxPermission $SharedMailboxFullAccess -User $GrantFullAccesstoSharedMailbox -AccessRights FullAccess -InheritanceType All | Format-List | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to modify permissions on another Shared Mailbox?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getSharedMailboxPermissionsToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$SharedMailboxPermissionsList = Read-Host "Enter the name of the Shared Mailbox"
			$SharedMailboxesText = "Select the Shared Mailbox you want to view permissions for"
			Show-SelectSharedMailbox_psf
			$SharedMailboxPermissionsList = $SelectSharedMailbox_comboboxSharedMailboxes
			If (!$SharedMailboxPermissionsList)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Shared Mailbox was selected, please select a valid Shared Mailbox", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting Send As permissions for $SharedMailboxPermissionsList..."
				$textboxDetails.Text = "Get-RecipientPermission $SharedMailboxPermissionsList | Where-Object { (`$_.Trustee -notlike 'NT AUTHORITY\SELF') } | Sort-Object Trustee | Format-Table Trustee, AccessControlType, AccessRights -AutoSize"
				#$TextboxResults.Text = Get-RecipientPermission $SharedMailboxPermissionsList | Format-List | Out-String
				$TextboxResults.Text = Get-RecipientPermission $SharedMailboxPermissionsList | Where-Object { ($_.Trustee -notlike "NT AUTHORITY\SELF") } | Sort-Object Trustee | Format-Table Trustee, AccessControlType, AccessRights -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to view permissions for another Shared Mailbox?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getSharedMailboxFullAccessPermissionsToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$SharedMailboxFullAccessPermissionsList = Read-Host "Enter the name of the Shared Mailbox"
			$SharedMailboxesText = "Select the Shared Mailbox you want to view Full Access permissions for"
			Show-SelectSharedMailbox_psf
			$SharedMailboxFullAccessPermissionsList = $SelectSharedMailbox_comboboxSharedMailboxes
			If (!$SharedMailboxFullAccessPermissionsList)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Shared Mailbox was selected, please select a valid Shared Mailbox", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting Full Access permissions for $SharedMailboxFullAccessPermissionsList..."
				$textboxDetails.Text = "Get-MailboxPermission $SharedMailboxFullAccessPermissionsList | Where-Object { (`$_.User -notlike 'NT AUTHORITY\SELF'') } | Sort-Object Identity | Format-Table Identity, User, AccessRights -AutoSize"
				$TextboxResults.Text = Get-MailboxPermission $SharedMailboxFullAccessPermissionsList | Where-Object { ($_.User -notlike "NT AUTHORITY\SELF") } | Sort-Object Identity | Format-Table Identity, User, AccessRights -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to view permissions on another Shared Mailbox?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$addSendAsAccessToASharedMailboxToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$SharedMailboxSendAsAccess = Read-Host "Enter the name of the shared mailbox"
			$SharedMailboxesText = "Select the Shared Mailbox you want to modify Send As permissions for"
			Show-SelectSharedMailbox_psf
			$SharedMailboxSendAsAccess = $SelectSharedMailbox_comboboxSharedMailboxes
			If (!$SharedMailboxSendAsAccess)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Shared Mailbox was selected, please select a valid Shared Mailbox", "Error")
			}
			Else
			{
				#$SharedMailboxSendAsUser = Read-Host "Enter the UPN of the user"
				$SelectUsersFormText = "Select the user you want grant Send As permissions for $SharedMailboxSendAsAccess shared mailbox"
				Show-SelectCachedDisplayNames_psf
				$SharedMailboxSendAsUser = $SelectCachedDisplayNames_comboboxNames
				If (!$SharedMailboxSendAsUser)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid user", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Getting Send As permissions for $SharedMailboxSendAsAccess..."
					$textboxDetails.Text = "Add-RecipientPermission $SharedMailboxSendAsAccess -Trustee $SharedMailboxSendAsUser -AccessRights SendAs | Format-List"
					$TextboxResults.Text = Add-RecipientPermission $SharedMailboxSendAsAccess -Trustee $SharedMailboxSendAsUser -AccessRights SendAs | Format-List | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to modify permissions on another Shared Mailbox?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}



###CONTACTS###

$createANewMailContactToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$ContactFirstName = Read-Host "Enter the contacts first name"
			If (!$ContactFirstName)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No first name was entered, please enter a valid first name", "Error")
			}
			Else
			{
				$ContactsLastName = Read-Host "Enter the contacts last name"
				If (!$ContactsLastName)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No last name was entered, please enter a valid last name", "Error")
				}
				Else
				{
					$ContactName = $ContactFirstName + " " + $ContactsLastName
					$ContactExternalEmail = Read-Host "Enter external email for $ContactName"
					If (!$ContactExternalEmail)
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						[System.Windows.Forms.MessageBox]::Show("No external email was entered, please enter a valid external email", "Error")
					}
					Else
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Creating a new contact $ContactName"
						$textboxDetails.Text = "New-MailContact -Name $ContactName -FirstName $ContactFirstName -LastName $ContactsLastName -ExternalEmailAddress $ContactExternalEmail"
						New-MailContact -Name $ContactName -FirstName $ContactFirstName -LastName $ContactsLastName -ExternalEmailAddress $ContactExternalEmail
						$TextboxResults.Text = Get-MailContact -Identity $ContactName | Format-List DisplayName, EmailAddresses, PrimarySmtpAddress, ExternalEmailAddress, RecipientType | Out-String -Width 2147483647
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to create another Contact?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getAllContactsToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting all contacts..."
		$textboxDetails.Text = "Get-MailContact -ResultSize unlimited | Sort-Object DisplayName | Format-Table DisplayName, EmailAddresses -AutoSize"
		$TextboxResults.Text = Get-MailContact -ResultSize unlimited | Sort-Object DisplayName | Format-Table DisplayName, EmailAddresses -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getDetailedInfoForAContactToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$DetailedInfoForContact = Read-Host "Enter the contact name, displayname, alias or email address"
			$MailContactText = "Select the Contact to get detailed information for"
			Show-SelectMailContact_psf
			$DetailedInfoForContact = $SelectMailContact_comboboxSelectMailContacts
			If (!$DetailedInfoForContact)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Contact was selected, please select a Contact to view detailed information of", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting detailed info for $DetailedInfoForContact..."
				$textboxDetails.Text = "Get-MailContact -Identity $DetailedInfoForContact | Format-List"
				$TextboxResults.Text = Get-MailContact -Identity $DetailedInfoForContact | Format-List | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get information on another Contact?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$removeAContactToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$RemoveMailContact = Read-Host "Enter the contact name, displayname, alias or email address"
			$MailContactText = "Select the Contact you want to remove"
			Show-SelectMailContact_psf
			$RemoveMailContact = $SelectMailContact_comboboxSelectMailContacts
			If (!$RemoveMailContact)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Contact was selected, please select a valid Contact to remove", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Removing contact $RemoveMailContact..."
				$textboxDetails.Text = "Remove-MailContact -Identity $RemoveMailContact"
				Remove-MailContact -Identity $RemoveMailContact
				$TextboxResults.Text = "Getting list of all contacts..."
				$TextboxResults.Text = Get-MailContact -ResultSize unlimited | Sort-Object DisplayName | Format-Table DisplayName, EmailAddresses, PrimarySmtpAddress, ExternalEmailAddress, RecipientType -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to remove another Contact?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

#Global Address List

$hideContactFromGALToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$HideGALMailContact = Read-Host "Enter the contact name, displayname, alias or email address"
			$MailContactText = "Select the Contact you want to hide from the Global Address List"
			Show-SelectMailContact_psf
			$HideGALMailContact = $SelectMailContact_comboboxSelectMailContacts
			If (!$HideGALMailContact)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Contact was selected, please select a valid Contact to hide from the Global Address List", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Hiding $HideGALMailContact from the GAL..."
				$textboxDetails.Text = "Set-MailContact -Identity $HideGALMailContact -HiddenFromAddressListsEnabled `$True"
				Set-MailContact -Identity $HideGALMailContact -HiddenFromAddressListsEnabled $True
				$TextboxResults.Text = Get-MailContact -Identity $HideGALMailContact | Format-List DisplayName, HiddenFromAddressListsEnabled | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to hide another Contact from the Global Address List?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$unhideContactFromGALToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$unHideGALMailContact = Read-Host "Enter the contact name, displayname, alias or email address"
			$MailContactText = "Select the Contact you want to unhide from the Global Address List"
			Show-SelectMailContact_psf
			$unHideGALMailContact = $SelectMailContact_comboboxSelectMailContacts
			If (!$unHideGALMailContact)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Contact was selected, please select a valid Contact to unhide from the Global Address List", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "unhiding $unHideGALMailContact from the GAL..."
				$textboxDetails.Text = "Set-MailContact -Identity $unHideGALMailContact -HiddenFromAddressListsEnabled `$False"
				Set-MailContact -Identity $unHideGALMailContact -HiddenFromAddressListsEnabled $False
				$TextboxResults.Text = Get-MailContact -Identity $unHideGALMailContact | Format-List DisplayName, HiddenFromAddressListsEnabled | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to unhide another Contact from the Global Address List?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getGALStatusForAllUsersToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting GAL status for all users..."
		$textboxDetails.Text = "Get-MailContact -ResultSize unlimited | Sort-Object DisplayName | Format-Table DisplayName, HiddenFromAddressListsEnabled -AutoSize"
		$TextboxResults.Text = Get-MailContact -ResultSize unlimited | Sort-Object DisplayName | Format-Table DisplayName, HiddenFromAddressListsEnabled -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getContactsHiddenFromGALToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting all users that are hidden from the GAL..."
		$textboxDetails.Text = "Get-MailContact -ResultSize unlimited | Where-Object { `$_.HiddenFromAddressListsEnabled -like 'True' } | Sort-Object DisplayName | Format-Table DisplayName, HiddenFromAddressListsEnabled -AutoSize"
		$TextboxResults.Text = Get-MailContact -ResultSize unlimited | Where-Object { $_.HiddenFromAddressListsEnabled -like "True" } | Sort-Object DisplayName | Format-Table DisplayName, HiddenFromAddressListsEnabled -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getContactsNotHiddenFromGALToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting all users that not are hidden from the GAL"
		$textboxDetails.Text = "Get-MailContact -ResultSize unlimited | Where-Object { `$_.HiddenFromAddressListsEnabled -like 'False' } | Sort-Object DisplayName | Format-Table DisplayName, HiddenFromAddressListsEnabled -AutoSize"
		$TextboxResults.Text = Get-MailContact -ResultSize unlimited | Where-Object { $_.HiddenFromAddressListsEnabled -like "False" } | Sort-Object DisplayName | Format-Table DisplayName, HiddenFromAddressListsEnabled -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}


###SKYPE###

$getAllOnlineUserToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting all online users..."
		$textboxDetails.Text = "Get-CsOnlineUser -ResultSize 2147483647 | Sort-Object DisplayName | Format-Table DisplayName "
		$TextboxResults.Text = Get-CsOnlineUser -ResultSize 2147483647 | Sort-Object DisplayName | Format-Table DisplayName -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getAllClientPoliciesToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting all client policies..."
		$textboxDetails.Text = "Get-CsClientPolicy "
		$TextboxResults.Text = Get-CsClientPolicy | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getExternalAccessPoliciesToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting external access policies..."
		$textboxDetails.Text = "Get-CsExternalAccessPolicy"
		$TextboxResults.Text = Get-CsExternalAccessPolicy | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getVoicePoliciesToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting voice policies..."
		$textboxDetails.Text = "Get-CsVoicePolicy"
		$TextboxResults.Text = Get-CsVoicePolicy | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getBroadcastMeetingPoliciesToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting broadcast meeting policies..."
		$textboxDetails.Text = "Get-CsBroadcastMeetingPolicy"
		$TextboxResults.Text = Get-CsBroadcastMeetingPolicy | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getBroadcaseMeetingConfigurationToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting broadcast meeting configuration..."
		$textboxDetails.Text = "Get-CsBroadcastMeetingConfiguration"
		$TextboxResults.Text = Get-CsBroadcastMeetingConfiguration | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getPushNotificationConfigurationToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Push Notification configuration..."
		$textboxDetails.Text = "Get-CsPushNotificationConfiguration"
		$TextboxResults.Text = Get-CsPushNotificationConfiguration | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getHostedVoicemailPolicyToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Hosted Voicemail policy..."
		$textboxDetails.Text = "Get-CsHostedVoicemailPolicy"
		$TextboxResults.Text = Get-CsHostedVoicemailPolicy | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}



###COMPLIANCE CENTER###

$newHoldCompliancePolicyToolStripMenuItem1_Click = {
	Do
	{
		Try
		{
			$NewRetentionPolicy = Read-Host "Enter the name for the new Retention Policy"
			If (!$NewRetentionPolicy)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No name was entered, please enter a valid name for the new Retention Policy ", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$textboxResults.Text = "Creating the $NewRetentionPolicy Retention Policy..."
				$textboxDetails.Text = "New-RetentionCompliancePolicy -Name $NewRetentionPolicy"
				$textboxResults.Text = New-RetentionCompliancePolicy -Name $NewRetentionPolicy | Sort-Object Name | Format-Table -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to create another Retention Compliance Policy?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getHoldCompliancePoliciesToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$textboxResults.Text = "Getting all Retention Policies..."
		$textboxDetails.Text = "Get-RetentionCompliancePolicy | Format-Table -AutoSize | Out-String"
		$textboxResults.Text = Get-RetentionCompliancePolicy | Sort-Object Name | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$removeARetentionCompliancePolicyToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			#$RemoveRetentionPolicy = Read-Host "Enter the policy name you want to remove"
			$RetentionPoliciesText = "Select the Retention Policy you want to remove"
			Show-SelectRetentionPolicy_psf
			$RemoveRetentionPolicy = $SelectRetentionPolicy_comboboxRetentionPolicies
			If (!$RemoveRetentionPolicy)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No policy was selected, please select a valid policy to delete", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$textboxResults.Text = "Removing the $RemoveRetentionPolicy retention policy..."
				$textboxDetails.Text = "Remove-RetentionCompliancePolicy -Identity $RemoveRetentionPolicy"
				Remove-RetentionCompliancePolicy -Identity $RemoveRetentionPolicy
				$textboxResults.Text = "Getting all retention policies..."
				$textboxResults.Text = Get-RetentionCompliancePolicy | Sort-Object Name | Format-Table -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to remove another Retention Policy?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getAllManagementRolesToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$textboxResults.Text = "Getting all management roles..."
		$textboxDetails.Text = "Get-ManagementRole | Sort-Object Name | Format-Table Name, RoleType -AutoSize"
		$textboxResults.Text = Get-ManagementRole | Sort-Object Name | Format-Table Name, RoleType -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

	#Data Loss Prevention Policies

$getDataLossPreventionPoliciesToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$textboxResults.Text = "Getting Data Loss Prevention Policies..."
		$textboxDetails.Text = "Get-DlpCompliancePolicy"
		$textboxResults.Text = Get-DlpCompliancePolicy | Sort-Object Name | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$newDataLossPreventionPolicyToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$NewDLP = Read-Host "Enter the name of the new Data Loss Prevention Policy"
			If (!$NewDLP)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No name was entered, please enter a valid name for the new Data Loss Prevention Policy", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$textboxResults.Text = "Creating the new $NewDLP Data Loss Prevention policy..."
				$textboxDetails.Text = "New-DlpCompliancePolicy -Name $NewDLP"
				$textboxResults.Text = New-DlpCompliancePolicy -Name $NewDLP | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to create another Data Loss Prevention Policy?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$removeDataLossPreventionPolicyToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$SelectDLPText = "Select the Data Loss Prevention Policy you want to remove"
			Show-SelectDLP_psf
			$RemoveDLP = $SelectDLP_comboboxDLP
			If (!$RemoveDLP)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Data Loss Prevention Policy was selected, please enter a valid Data Loss Prevention Policy", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Removing $RemoveDLP Data Loss Prevention policy..."
				$textboxDetails.Text = "Remove-DlpCompliancePolicy -Identity $RemoveDLP"
				Remove-DlpCompliancePolicy -Identity $RemoveDLP
				$TextboxResults.Text = "Getting list of Data Loss Prevention policies..."
				$textboxResults.Text = Get-DlpCompliancePolicy | Sort-Object Name | Format-Table -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to remove another Data Loss Prevention Policy?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

#Data Loss Compliance Rule

$getDataLossComplianceRulesToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$textboxResults.Text = "Getting Data Loss Compliance rules..."
		$textboxDetails.Text = "Get-DlpComplianceRule"
		$textboxResults.Text = Get-DlpComplianceRule | Sort-Object Name | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$newDataLossComplianceRuleToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$NewDLC = Read-Host "Enter the name of the new Data Loss Compliance Rule"
			If (!$NewDLC)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No name was entered, please enter a valid name for the new Data Loss Compliance Rule", "Error")
			}
			Else
			{
				$SelectDLPText = "Select the Data Loss Prevention Policy that will contain the DLP rule"
				Show-SelectDLP_psf
				$DLPolicy = $SelectDLP_comboboxDLP
				If (!$DLPolicy)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Data Loss Prevention Policy was selected, please select a valid Data Loss Prevention Policy for the new DLP rule", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$textboxResults.Text = "Creating the new $NewDLC Data Loss Compliance rule..."
					$textboxDetails.Text = "New-DlpComplianceRule -Name $NewDLC -Policy $DLPolicy"
					$textboxResults.Text = New-DlpComplianceRule -Name $NewDLC -Policy $DLPolicy | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to create another Data Loss Compliance Rule?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
}

$removeDataLossComplianceRuleToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$SelectDLCText = "Select the Data Loss Compliance Rule you want to remove"
			Show-SelectDataComplianceRule_psf
			$RemoveDLC = $SelectDataComplianceRule_comboboxDLC
			If (!$RemoveDLC)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Data Loss Compliance Rule was selected, please enter a valid Data Loss Compliance Rule", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$textboxResults.Text = "Removing the $RemoveDLC Data Loss Compliance rule..."
				$textboxDetails.Text = "Remove-DlpComplianceRule -Identity $RemoveDLC"
				Remove-DlpComplianceRule -Identity $RemoveDLC
				$textboxResults.Text = "Getting Data Loss Compliance rules..."
				$textboxResults.Text = Get-DlpComplianceRule | Sort-Object Name | Format-Table -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to remove another Data Loss Compliance Rule?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}


###eDISCOVERY###

	#Case Hold Policies

$getCaseHoldPoliciesToolStripMenuItem_Click = {
	Try
	{
		$ComplianceCaseText = "Select the eDiscovery case that is associated with the case hold policy"
		Show-SelectComplianceCase_psf
		$CCase = $SelectComplianceCase_comboboxComplianceCases
		If (!$CCase)
		{
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("No eDiscovery Case was selected, please select a valid eDiscovery Case", "Error")
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$textboxResults.Text = "Getting Case Hold Policies..."
			$textboxDetails.Text = "Get-CaseHoldPolicy -Case $CCase"
			$textboxResults.Text = Get-CaseHoldPolicy -Case $CCase | Sort-Object Name | Format-Table -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$newComplianceCaseToolStripMenuItem_Click = {
	Try
	{
		$NewCC = Read-Host "Enter the name for the new Compliance Case"
		If (!$NewCC)
		{
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("No Name was entered, please enter a valid name for the new Compliance Case", "Error")
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$textboxResults.Text = "Creating the $NewCC Compliance Case..."
			$textboxDetails.Text = "New-ComplianceCase -Name $NewCC"
			$textboxResults.Text = New-ComplianceCase -Name $NewCC | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$newCaseHoldPolicyToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$NewCaseHoldPolicy = Read-Host "Enter the name of the new Case Hold Policy"
			If (!$NewCaseHoldPolicy)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Name was entered, please enter a valid Name for the new Case Hold Policy", "Error")
			}
			Else
			{
				$ComplianceCaseText = "Select the eDiscovery Case that you want to associate with the $NewCaseHoldPolicy case hold policy"
				Show-SelectComplianceCase_psf
				$CCase = $SelectComplianceCase_comboboxComplianceCases
				If (!$CCase)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No eDiscovery Case was selected, please select a valid eDiscovery Case", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$textboxResults.Text = "Creating the new $NewCaseHoldPolicy Case Hold Policy..."
					$textboxDetails.Text = "New-CaseHoldPolicy -Name $NewCaseHoldPolicy -Case $CCase"
					$textboxResults.Text = New-CaseHoldPolicy -Name $NewCaseHoldPolicy -Case $CCase | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to create another Case Hold Policy?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$removeComplianceCaseToolStripMenuItem_Click = {
	Try
	{
		$ComplianceCaseText = "Select the Compliance Case you want to remove"
		Show-SelectComplianceCase_psf
		$RemoveCCase = $SelectComplianceCase_comboboxComplianceCases
		If (!$RemoveCCase)
		{
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("No Compliance Case was selected, please select a valid Compliance Case you want to remove", "Error")
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$textboxResults.Text = "Removing the Compliance Case $RemoveCCase..."
			$textboxDetails.Text = "Remove-ComplianceCase -Identity $RemoveCCase"
			$textboxResults.Text = Remove-ComplianceCase -Identity $RemoveCCase | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getComplianceCasesToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$textboxResults.Text = "Getting Compliance Cases..."
		$textboxDetails.Text = "Get-ComplianceCase"
		$textboxResults.Text = Get-ComplianceCase | Sort-Object Name | Format-Table Name -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getDetailedComplianceCaseInformationToolStripMenuItem_Click = {
	Try
	{
		$ComplianceCaseText = "Select the Compliance Case you want to view detailed information for"
		Show-SelectComplianceCase_psf
		$DetailedCCase = $SelectComplianceCase_comboboxComplianceCases
		If (!$DetailedCCase)
		{
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("No Compliance Case was selected, please select a valid Compliance Case", "Error")
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$textboxResults.Text = "Getting detailed information for $DetailedCCase..."
			$textboxDetails.Text = "Get-ComplianceCase -Identity $DetailedCCase | Format-List"
			$textboxResults.Text = Get-ComplianceCase -Identity $DetailedCCase | Format-List | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

#Case Admin

$addAEDiscoveryCaseAdminToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
			{
				$TextboxResults.Text = "Connecting to Exchange Online to get list of Users..."
				$exchangeSession = New-PSSession -Name MainAccount -ConfigurationName Microsoft.Exchange -ConnectionUri https://outlook.office365.com/powershell-liveid/ -Credential $global:o365credentials -Authentication Basic -AllowRedirection
				Import-PSSession $exchangeSession -AllowClobber
				$checkboxExchangeOnline.Checked = $true
				
				$TextboxResults.Text = "Caching Users..."
				$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter")
				Get-MSOLUser -All | Select-Object -ExpandProperty DisplayName | Out-File "$O365AdminTempFolder\names.txt"
				
				$SelectUsersFormText = "Select the User you want to add as a eDiscovery Case Admin"
				Show-SelectCachedDisplayNames_psf
				$NewECaseAdmin = $SelectCachedDisplayNames_comboboxNames
				If (!$NewECaseAdmin)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid User", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$textboxResults.Text = "Adding $NewECaseAdmin as a eDiscovery case admin..."
					$textboxDetails.Text = "Add-eDiscoveryCaseAdmin -User $NewECaseAdmin"
					Add-eDiscoveryCaseAdmin -User $NewECaseAdmin
					$TextboxResults.Text = "Getting eDiscovery Case Admins..."
					$TextboxResults.Text = Get-eDiscoveryCaseAdmin | Sort-Object Name | Format-Table Name -AutoSize | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
			ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
			{
				$TextboxResults.Text = "Connecting to Exchange Online to get list of Users..."
				$exchangeSession = New-PSSession -Name MainAccount -ConfigurationName Microsoft.Exchange -ConnectionUri https://outlook.office365.com/powershell-liveid/ -Credential $global:o365credentials -Authentication Basic -AllowRedirection
				Import-PSSession $exchangeSession -AllowClobber
				$checkboxExchangeOnline.Checked = $true
				
				$TextboxResults.Text = "Caching Users..."
				$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter")
				Get-MSOLUser -All -TenantId $PartnerComboBox.SelectedItem.TenantID | Select-Object -ExpandProperty DisplayName | Out-File "$O365AdminTempFolder\names.txt"
				
				$SelectUsersFormText = "Select the User you want to add as a eDiscovery Case Admin"
				Show-SelectCachedDisplayNames_psf
				$NewECaseAdmin = $SelectCachedDisplayNames_comboboxNames
				If (!$NewECaseAdmin)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid User", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$textboxResults.Text = "Adding $NewECaseAdmin as a eDiscovery case admin..."
					$textboxDetails.Text = "Add-eDiscoveryCaseAdmin -User $NewECaseAdmin"
					Add-eDiscoveryCaseAdmin -User $NewECaseAdmin
					$TextboxResults.Text = "Getting eDiscovery Case Admins..."
					$TextboxResults.Text = Get-eDiscoveryCaseAdmin | Sort-Object Name | Format-Table Name -AutoSize | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
			Else
			{
				$TextboxResults.Text = "Connecting to Exchange Online to get list of Users..."
				$exchangeSession = New-PSSession -Name MainAccount -ConfigurationName Microsoft.Exchange -ConnectionUri https://outlook.office365.com/powershell-liveid/ -Credential $global:o365credentials -Authentication Basic -AllowRedirection
				Import-PSSession $exchangeSession -AllowClobber
				$checkboxExchangeOnline.Checked = $true
				
				$TextboxResults.Text = "Caching Users..."
				$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter")
				Get-MSOLUser -All | Select-Object -ExpandProperty DisplayName | Out-File "$O365AdminTempFolder\names.txt"
				
				$SelectUsersFormText = "Select the User you want to add as a eDiscovery Case Admin"
				Show-SelectCachedDisplayNames_psf
				$NewECaseAdmin = $SelectCachedDisplayNames_comboboxNames
				If (!$NewECaseAdmin)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid User", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$textboxResults.Text = "Adding $NewECaseAdmin as a eDiscovery case admin..."
					$textboxDetails.Text = "Add-eDiscoveryCaseAdmin -User $NewECaseAdmin"
					Add-eDiscoveryCaseAdmin -User $NewECaseAdmin
					$TextboxResults.Text = "Getting eDiscovery Case Admins..."
					$TextboxResults.Text = Get-eDiscoveryCaseAdmin | Sort-Object Name | Format-Table Name -AutoSize | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to add another eDiscovery Case Admin?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getEDiscoveryCaseAdminsToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting eDiscovery Case Admins..."
		$textboxDetails.Text = "Get-eDiscoveryCaseAdmin"
		$TextboxResults.Text = Get-eDiscoveryCaseAdmin | Sort-Object Name | Format-Table Name -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}


###SHAREPOINT###

$getAllSiteCollectionsToolStripMenuItem_Click = {
	try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting list of sharepoint sites..."
		$textboxDetails.Text = "Get-SPOsite | Format-Table -Autosize"
		$TextboxResults.Text = Get-SPOSite | Format-Table -AutoSize | Out-string -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getAllDeletedSiteCollectionsToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting all deleted SharePoint sites..."
		$textboxDetails.Text = "Get-SPODeletedSite | Format-Table -Autosize"
		$TextboxResults.Text = Get-SPODeletedSite | Format-Table -AutoSize | Out-string -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getAllUsersForASiteToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$SPOSiteText = "Select the SharePoint Site you want to get all Users from"
			Show-SelectSPOSites_psf
			$site = $SelectSPOSites_comboboxSelectSPOSites
			If (!$site)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No SharePoint Site was selected, please select a valid SharePoint Site", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$textboxDetails.Text = "Get-SPOUser -Site $site | Format-Table -AutoSize"
				$TextboxResults.Text = "Getting all users from site $site..."
				$TextboxResults.Text = Get-SPOUser -Site $site | Format-Table -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get all Users for another SharePoint Site?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$testSharePointSiteToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$SPOSiteText = "Select the SharePoint Site you want to test"
			Show-SelectSPOSites_psf
			$site = $SelectSPOSites_comboboxSelectSPOSites
			If (!$site)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No SharePoint Site was selected, please select a valid SharePoint Site to test", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$textboxDetails.Text = "Test-SPOSite -identity $site"
				$TextboxResults.Text = "Testing $site..."
				$TextboxResults.Text = Test-SPOSite -identity $site | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to test another SharePoint Site?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$repairSharePointSiteToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$SPOSiteText = "Select the SharePoint Site you want to repair"
			Show-SelectSPOSites_psf
			$site = $SelectSPOSites_comboboxSelectSPOSites
			If (!$site)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No SharePoint Site was selected, please select a valid SharePoint Site to reapir", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$textboxDetails.Text = "Repair-SPOSite -identity $site"
				$TextboxResults.Text = "Repairing $site..."
				$TextboxResults.Text = Repair-SPOSite -identity $site | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to repair another SharePoint Site?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$removeSharePointSiteToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$SPOSiteText = "Select the SharePoint Site you want to remove"
			Show-SelectSPOSites_psf
			$site = $SelectSPOSites_comboboxSelectSPOSites
			If (!$site)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No SharePoint Site was selected, please select a valid SharePoint Site to delete", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$textboxDetails.Text = "Remove-SPOSite -identity $site"
				$TextboxResults.Text = "Removing $site..."
				$TextboxResults.Text = Remove-SPOSite -identity $site | Out-String -Width 2147483647
				$TextboxResults.Text = "Getting all deleted SharePoint sites..."
				$TextboxResults.Text = Get-SPODeletedSite | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to remove another SharePoint Site?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getDeletedSharePointSitesToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$textboxDetails.Text = "Get-SPODeletedSite"
		$TextboxResults.Text = "Getting all deleted SharePoint sites..."
		$TextboxResults.Text = Get-SPODeletedSite | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$restoreDeletedSharePointSiteToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$DeletedSitesText = "Please select the SharePoint Site you want to restore"
			Show-SelectDeletedSPOSites_psf
			$RestoreSite = $SelectDeletedSPOSites_comboboxDeletedSites
			If (!$RestoreSite)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No SharePoint Site was selected, please select a valid SharePoint Site to recover", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$textboxDetails.Text = "Restore-SPODeletedSite -identity $RestoreSite"
				$TextboxResults.Text = "Restoring $RestoreSite..."
				$TextboxResults.Text = Restore-SPODeletedSite -identity $RestoreSite | Out-String -Width 2147483647
				$TextboxResults.Text = "Getting all SharePoint sites..."
				$TextboxResults.Text = Get-SPOSite | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to restore another SharePoint Site?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$newSharePointSiteToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$NewSPOSite = Read-Host "Please enter the full URL for the new SharePoint Site"
			If (!$NewSPOSite)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No URL was entered, please enter a valid SharePoint URL", "Error")
			}
			Else
			{
				$SelectUsersFormText = "Select the user you want to be the owner of the new site"
				Show-SelectUsersForm_psf
				$SPOSiteOwner = $SelectUsersForm_comboboxUsers
				If (!$SPOSiteOwner)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid user", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$textboxDetails.Text = "New-SPOSite -url $NewSPOSite -Owner $SPOSiteOwner"
					$TextboxResults.Text = "Creating a new SharePoint site $NewSPOSite..."
					$TextboxResults.Text = New-SPOSite -url $NewSPOSite -Owner $SPOSiteOwner -StorageQuota 1048576 | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to create another SharePoint Site?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
}



###FILE###

#About

$aboutToolStripMenuItem_Click = {
	$TextboxResults.Text = "                                
M365 Admin Center Tools 


Version: $Version
Version Release Date: $UpdateDate
Website: https://www.o365admin.center
FAQ: https://www.o365admin.center/FAQ"
	
}

#Pre-Reqs

$prerequisitesToolStripMenuItem_Click = {
	Try
	{
		Start-Process -FilePath https://o365admin.center/prerequisites/
	}
	Catch
	{
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

#Changelog

$changelogToolStripMenuItem_Click = {
	Try
	{
		Start-Process -FilePath http://o365admin.center/changelog/
	}
	Catch
	{
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

#Context Menu

$clearScreenToolStripMenuItem1_Click = {
	$TextboxResults.Text = ""
}

$selectAllToolStripMenuItem_Click = {
	$TextboxResults.SelectAll()
}

$copyToolStripMenuItem_Click = {
	[System.Windows.Forms.Clipboard]::SetText($TextboxResults.SelectedText.Trim())
}

$cutToolStripMenuItem_Click = {
	$TextboxResults.SelectedText = ""
}

$pasteToolStripMenuItem_Click = {
	$PastedItem = [System.Windows.Forms.Clipboard]::GetText()
	$insertText = $PastedItem;
	$selectionIndex = $TextboxResults.SelectionStart;
	$TextboxResults.Text = $TextboxResults.Text.Insert($selectionIndex, $insertText);
	$TextboxResults.SelectionStart = $selectionIndex + $insertText.Length;
	
}

$cutToolStripMenuItem1_Click = {
	$TextboxResults.SelectedText = ""	
}

$copyToolStripMenuItem1_Click = {
	[System.Windows.Forms.Clipboard]::SetText($TextboxResults.SelectedText.Trim())	
}

$pasteToolStripMenuItem1_Click = {
	$PastedItem = [System.Windows.Forms.Clipboard]::GetText()
	$insertText = $PastedItem;
	$selectionIndex = $TextboxResults.SelectionStart;
	$TextboxResults.Text = $TextboxResults.Text.Insert($selectionIndex, $insertText);
	$TextboxResults.SelectionStart = $selectionIndex + $insertText.Length;
}

$selectAllToolStripMenuItem1_Click = {
	$TextboxResults.SelectAll()	
}

$clearScreenToolStripMenuItem2_Click = {
	$TextboxResults.Text = ""
}

$printToolStripMenuItem1_Click = {
	$Printdialog = New-Object System.Windows.Forms.PrintDialog
	$Printdialog.ShowHelp = $False
	$Printdialog.AllowSelection = $true
	$Printdialog.AllowPrintToFile = $true
	$Printdialog.AllowSomePages = $false
	$Printdialog.ShowNetwork = $true
	$result = $Printdialog.ShowDialog(); $result
	If ($result -eq 'OK')
	{
		$TextboxResults.Text | Out-Printer $Printdialog.PrinterSettings.PrinterName
	}
}

$saveAsToolStripMenuItem_Click = {
	$savedialog = New-Object windows.forms.savefiledialog
	$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
	$savedialog.title = "Export to File"
	$savedialog.filter = ".doc|*.doc|.txt|*.txt|.xls|*.xls"
	$savedialog.ShowHelp = $True
	$result = $savedialog.ShowDialog(); $result
	if ($result -eq "OK")
	{
		$TextboxResults.Text | Out-File -Encoding Default $savedialog.filename
	}
	
}



###JUNK ITEMS###

$TextboxResults_TextChanged = {
	
}

$menustripExchange_ItemClicked = [System.Windows.Forms.ToolStripItemClickedEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.ToolStripItemClickedEventArgs]
}


$tabpageComplianceCenter_Click={
	#ignore
	
}

$checkboxSharepoint_CheckedChanged={
	#ignore
	
}

$checkboxExchangeOnline_CheckedChanged={
	#ignore
	
}

$checkboxComplianceCenter_CheckedChanged={
	#ignore
	
}

$checkboxSkypeForBusiness_CheckedChanged={
	#ignore
	
}

$organizationCustomizationToolStripMenuItem_Click={
	#ignore
	
}

$getMailMalwareReportToolStripMenuItem_Click={
	#ignore
	
}

$securityGroupsToolStripMenuItem_Click={
	#ignore
	
}

$aliasAddressesToolStripMenuItem_Click={
	#ignore
	
}

$checkForUpdatesToolStripMenuItem1_Click = {
	Try
	{
		#Get reg-key to see if update should prompt
		$UpdateCheck = Get-ItemProperty 'HKCU:\Software\O365 Admin Center' -Name UpdateCheck | Select-Object -ExpandProperty UpdateCheck
		
		If ($UpdateCheck -eq 0)
		{
			#Check to see if there is a new version available 
			$PublicVersion = Invoke-WebRequest -Uri https://www.o365admin.center/update.txt | Select-Object -ExpandProperty content
			#If local version is less than the public version then prompt for update
			If ($Version -lt $publicVersion)
			{
				Show-UpdateCheck_psf
			}
			#If Publicversion equals nothing then ignore, this is if the website is down or the user does not have internet
			elseif ($PublicVersion = $Null)
			{
			}
			Else
			{
				#Create the pop-up message
				Add-Type -AssemblyName System.Windows.Forms
				[System.Windows.Forms.MessageBox]::Show('You are up to date!', 'O365 Admin Center Updates', 'OK', 'Info')
			}
		}
		elseif ($UpdateCheck -eq 1)
		{
			$InformationText = "Updates are set to never be checked. Please enable updates"
			Show-Info_OK_psf
		}
		
	}
	Catch
	{
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$neverCheckForUpdatesToolStripMenuItem_Click = {
	Try
	{
		#Sets the update check key
		Get-Item 'HKCU:\Software\O365 Admin Center' -Force | New-ItemProperty -Name UpdateCheck -Value 1 -Force | Out-Null
		$InformationText = "Updates have been disabled"
		Show-Info_OK_psf
	}
	Catch
	{
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$enableUpdatesToolStripMenuItem_Click = {
	Try
	{
		#Sets the update check key
		Get-Item 'HKCU:\Software\O365 Admin Center' -Force | New-ItemProperty -Name UpdateCheck -Value 0 -Force | Out-Null
		
		$InformationText = "Updates have been enabled"
		Show-Info_OK_psf
	}
	Catch
	{
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getUsersWithInPlaceArchiveToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting all users with an archive..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize Unlimited -Filter { ArchiveStatus -NE 'None' -AND RecipientTypeDetails -eq 'UserMailbox' }"
		$TextboxResults.Text = Get-Mailbox -ResultSize Unlimited | Where-Object { $_.ArchiveStatus -NE 'None'} | Sort-Object Name | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
	
}

$getUsersWithoutInPlaceArchiveToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting all users without an archive..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize Unlimited -Filter { ArchiveStatus -EQ 'None' -AND RecipientTypeDetails -eq 'UserMailbox' }"
		$TextboxResults.Text = Get-Mailbox -ResultSize Unlimited | Where-Object { $_.ArchiveStatus -EQ 'None'} | Sort-Object Name | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
	
}

$enableInPlaceArchiveForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$SelectUsersFormText = "Select the User you want to enable In-Place Archive for"
			Show-SelectCachedDisplayNames_psf
			$EnableInPlaceArchiveUser = $SelectCachedDisplayNames_comboboxNames
			If (!$EnableInPlaceArchiveUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid User", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Enabling In-Place Archive for $EnableInPlaceArchiveUser..."
				$textboxDetails.Text = "Enable-Mailbox -Identity $EnableInPlaceArchiveUser -Archive"
				Enable-Mailbox -Identity $EnableInPlaceArchiveUser -Archive | Out-String -Width 2147483647
				$TextboxResults.Text = "Getting all users with an Archive enabled..."
				$TextboxResults.Text = Get-Mailbox -ResultSize Unlimited | Where-Object { $_.ArchiveStatus -NE 'None' } | Sort-Object Name | Format-Table -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to enable In-Place Archiving for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$submitAIssueToolStripMenuItem_Click = {
	Try
	{
		Start-Process -FilePath mailto:issues@o365admin.center
	}
	Catch
	{
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$submitAFeatureRequestToolStripMenuItem_Click = {
	Try
	{
		Start-Process -FilePath mailto:request@o365admin.center
	}
	Catch
	{
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$disableInPlaceArchiveForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$SelectUsersFormText = "Select the User you want to disable In-Place Archive for"
			Show-SelectCachedDisplayNames_psf
			#$DisableInPlaceArchiveUser = $SelectCachedUserPrincipalName_comboboxUPN
			$DisableInPlaceArchiveUser = $SelectCachedDisplayNames_comboboxNames
			If (!$DisableInPlaceArchiveUser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Disabling In-Place Archive for $DisableInPlaceArchiveUser..."
				$textboxDetails.Text = "Disable-Mailbox -Identity $DisableInPlaceArchiveUser -Archive"
				Disable-Mailbox -Identity $DisableInPlaceArchiveUser -Archive | Out-String -Width 2147483647
				$TextboxResults.Text = "Getting all users without an Archive..."
				$TextboxResults.Text = Get-Mailbox -ResultSize Unlimited | Where-Object { $_.ArchiveStatus -EQ 'None' } | Sort-Object Name | Format-Table -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to disable In-Place Archiving for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getAllPublicFoldersToolStripMenuItem_Click = {
	$CachedPF = ("$TempDir" + "\O365AdminCenter" + "\pf.txt")
	$TempDir = $env:temp
	Try
	{
		If ((Test-Path $CachedPF) -eq $false)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Caching Public Folders..."
			#$parentpath = Get-PublicFolder -ResultSize Unlimited -Identity "\" -Recurse | Select-Object -ExpandProperty ParentPath
			#$names = Get-PublicFolder -ResultSize Unlimited -Identity "\" -Recurse | Select-Object -ExpandProperty Name
			#$firstName = @($parentpath)
			#$lastName = @($names)
			#0..($firstName.Count - 1) | ForEach-Object { $fullName += @("$($firstName[$_])\$($lastName[$_])") }
			#$fullname | Out-File $CachedPF 
			(Get-PublicFolder -ResultSize Unlimited -Identity "\" -Recurse).Identity | Out-File $CachedPF
			
			$TextboxResults.Text = "Getting all Public Folders..."
			$textboxDetails.Text = "Get-PublicFolder -Identity '\' -Recurse"
			$TextboxResults.Text = Get-PublicFolder -ResultSize Unlimited -Identity "\" -Recurse | Select-Object Name, ParentPath |  Sort-Object Name | Format-Table -AutoSize | Out-String -Width 2147483647
			#$parentpath = Get-PublicFolder -ResultSize Unlimited -Identity "\" -Recurse | Select-Object -ExpandProperty ParentPath
			#$names = Get-PublicFolder -ResultSize Unlimited -Identity "\" -Recurse | Select-Object -ExpandProperty Name
			#$firstName = @($parentpath)
			#$lastName = @($names)
			#0..($firstName.Count - 1) | ForEach-Object { $fullName += @("$($firstName[$_])\$($lastName[$_])") }
			#$TextboxResults.Text = $fullname | Out-String 
			
			$FormO365AdministrationCenter.Cursor = 'Default'
			
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all Public Folders..."
			$textboxDetails.Text = "Get-PublicFolder -Identity '\' -Recurse"
			$TextboxResults.Text = Get-PublicFolder -ResultSize Unlimited -Identity "\" -Recurse | Select-Object Name, ParentPath | Sort-Object Name | Format-Table -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$contextmenustrip1_Opening=[System.ComponentModel.CancelEventHandler]{
	
}

$statisticsToolStripMenuItem_Click = {
	Do
	{
		$TempDir = $env:temp
		$CachedPF = ("$TempDir" + "\O365AdminCenter" + "\pf.txt")
		Try
		{
			If ((Test-Path $CachedPF) -eq $false)
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Caching Public Folders..."
				#$parentpath = Get-PublicFolder -ResultSize Unlimited -Identity "\" -Recurse | Select-Object -ExpandProperty ParentPath
				#$names = Get-PublicFolder -ResultSize Unlimited -Identity "\" -Recurse | Select-Object -ExpandProperty Name
				#$firstName = @($parentpath)
				#$lastName = @($names)
				#0..($firstName.Count - 1) | ForEach-Object { $fullName += @("$($firstName[$_])\$($lastName[$_])") }
				#$fullname | Out-File $CachedPF
				(Get-PublicFolder -ResultSize Unlimited -Identity "\" -Recurse).Identity | Out-File $CachedPF
				
				$PFText = "Please select the Public Folder you want to view statistics for"
				Show-SelectCachedPublicFolders_psf
				$PFStats = $SelectCachedPublicFolders_comboboxPF
				If (!$PFStats)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Public Folder was selected, please select a valid Public Folder", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Getting Public Folder statistics for $PFStats.."
					$textboxDetails.Text = "Get-PublicFolderItemStatistics -Identity $PFStats"
					$TextboxResults.Text = Get-PublicFolderItemStatistics -Identity $PFStats | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
			Else
			{
				
				$PFText = "Please select the Public Folder you want to view statistics for"
				Show-SelectCachedPublicFolders_psf
				$PFStats = $SelectCachedPublicFolders_comboboxPF
				If (!$PFStats)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Public Folder was selected, please select a valid Public Folder", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Getting Public Folder statistics for $PFStats.."
					$textboxDetails.Text = "Get-PublicFolderItemStatistics -Identity $PFStats"
					$TextboxResults.Text = Get-PublicFolderItemStatistics -Identity $PFStats | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
			
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get information on another Public Folder?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getPublicFoldersThatAreMailEnabledToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Mail Enabled Public Folders..."
		$textboxDetails.Text = "Get-PublicFolder -ResultSize Unlimited -Identity '\' -Recurse | Where-Object { `$_.MailEnabled -eq `$True } "
		$TextboxResults.Text = Get-PublicFolder -ResultSize Unlimited -Identity "\" -Recurse | Where-Object { $_.MailEnabled -eq $True } | Select-Object Name, ParentPath, MailEnabled | Sort-Object Name | Format-Table -Autosize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getPublicFoldersThatAreNotMailEnabledToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Mail Enabled Public Folders..."
		$textboxDetails.Text = "Get-PublicFolder -ResultSize Unlimited -Identity '\' -Recurse | Where-Object { `$_.MailEnabled -eq `$False } "
		$TextboxResults.Text = Get-PublicFolder -ResultSize Unlimited -Identity "\" -Recurse | Where-Object { $_.MailEnabled -eq $False } | Select-Object Name, ParentPath, MailEnabled | Sort-Object Name | Format-Table -Autosize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$ascendingToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Public Folders Sizes..."
		$textboxDetails.Text = "Get-PublicFolder -ResultSize Unlimited -Identity '\' -Recurse | Select-Object Name, FolderSize | Sort-Object FolderSize"
		$TextboxResults.Text = Get-PublicFolder -ResultSize Unlimited -Identity "\" -Recurse | Select-Object Name, FolderSize | Sort-Object FolderSize | Format-Table -Autosize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$descendingToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Public Folders Sizes..."
		$textboxDetails.Text = "Get-PublicFolder -ResultSize Unlimited -Identity '\' -Recurse | Select-Object Name, FolderSize | Sort-Object FolderSize -Descending"
		$TextboxResults.Text = Get-PublicFolder -ResultSize Unlimited -Identity "\" -Recurse | Select-Object Name, FolderSize | Sort-Object FolderSize -Descending | Format-Table -Autosize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$alphabeticallyToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Public Folders Sizes..."
		$textboxDetails.Text = "Get-PublicFolder -ResultSize Unlimited -Identity '\' -Recurse | Select-Object Name, FolderSize | Sort-Object Name"
		$TextboxResults.Text = Get-PublicFolder -ResultSize Unlimited -Identity "\" -Recurse | Select-Object Name, FolderSize | Sort-Object Name | Format-Table -Autosize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getAllPublicFoldersWithSubfoldersToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Public Folders with Subfolders..."
		$textboxDetails.Text = "Get-PublicFolder -ResultSize Unlimited -Identity '\'' -Recurse | Where-Object { `$_.HasSubFolders -eq `$True }"
		$TextboxResults.Text = Get-PublicFolder -ResultSize Unlimited -Identity "\" -Recurse | Where-Object { $_.HasSubFolders -eq $True } | Select-Object Name, ParentPath, HasSubFolders | Sort-Object Name | Format-Table -Autosize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getAllPublicFoldersWithoutSubfoldersToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Public Folders with Subfolders..."
		$textboxDetails.Text = "Get-PublicFolder -ResultSize Unlimited -Identity '\'' -Recurse | Where-Object { `$_.HasSubFolders -eq `$False }"
		$TextboxResults.Text = Get-PublicFolder -ResultSize Unlimited -Identity "\" -Recurse | Where-Object { $_.HasSubFolders -eq $False } | Select-Object Name, ParentPath, HasSubFolders | Sort-Object Name | Format-Table -Autosize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getAllPublicFolderQuotaToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting All Public Folder Quotas..."
		$textboxDetails.Text = "Get-PublicFolder -ResultSize Unlimited -Identity '\' -Recurse | Select-Object Name, ProhibitPostQuota, IssueWarningQuota, MaxItemSize "
		$TextboxResults.Text = Get-PublicFolder -ResultSize Unlimited -Identity "\" -Recurse | Select-Object Name, ProhibitPostQuota, IssueWarningQuota, MaxItemSize | Sort-Object Name | Format-Table -Autosize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getIssueWarningQuotaToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting All Public Folder Quotas..."
		$textboxDetails.Text = "Get-PublicFolder -ResultSize Unlimited -Identity '\' -Recurse | Select-Object Name, IssueWarningQuota "
		$TextboxResults.Text = Get-PublicFolder -ResultSize Unlimited -Identity "\" -Recurse | Select-Object Name, IssueWarningQuota | Sort-Object Name | Format-Table -Autosize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getMaxItemSizeQuotaToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting All Public Folder Quotas..."
		$textboxDetails.Text = "Get-PublicFolder -ResultSize Unlimited -Identity '\' -Recurse | Select-Object Name, MaxItemSize "
		$TextboxResults.Text = Get-PublicFolder -ResultSize Unlimited -Identity "\" -Recurse | Select-Object Name, MaxItemSize | Sort-Object Name | Format-Table -Autosize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getProhibitPostQuotaToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting All Public Folder Quotas..."
		$textboxDetails.Text = "Get-PublicFolder -ResultSize Unlimited -Identity '\' -Recurse | Select-Object Name, ProhibitPostQuota"
		$TextboxResults.Text = Get-PublicFolder -ResultSize Unlimited -Identity "\" -Recurse | Select-Object Name, ProhibitPostQuota| Sort-Object Name | Format-Table -Autosize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getDetailedPublicFolderReportToCSVToolStripMenuItem_Click={
	Try
	{
		$savedialog = New-Object windows.forms.savefiledialog
		$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
		$savedialog.title = "Export to File"
		$savedialog.filter = ".csv|*.csv"
		$savedialog.ShowHelp = $True
		$result = $savedialog.ShowDialog(); $result
		if ($result -eq "OK")
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$OutputFile = $savedialog.filename
			$textboxDetails.Text = "Get-PublicFolder -ResultSize Unlimited -Identity '\' -Recurse"
			$TextboxResults.Text = "Getting Detailed Public Folder Report..."
			Get-PublicFolder -ResultSize Unlimited -Identity '\' -Recurse | Export-Csv $OutputFile -NoTypeInformation
			$TextboxResults.Text = ""
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$checkForUpdatesToolStripMenuItem_Click={
	#Leave blank this is the parent button
	
}

$getMailTrafficTopReportToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Mail Traffic Top Report..."
		$textboxDetails.Text = "Get-MailTrafficTopReport | Sort-Object 'Direction' | Format-Table -AutoSize"
		$TextboxResults.Text = Get-MailTrafficTopReport | Sort-Object "Direction" | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getStaleMailboxReportToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Stale Mailbox Report..."
		$textboxDetails.Text = "Get-StaleMailboxReport | Format-Table -AutoSize"
		$TextboxResults.Text = Get-StaleMailboxReport | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
	
}

$getStaleMailboxDetailReportToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Stale Mailbox Detail Report..."
		$textboxDetails.Text = "Get-StaleMailboxDetailReport | Format-Table -AutoSize"
		$TextboxResults.Text = Get-StaleMailboxDetailReport | Sort-Object UserName | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$exportMailDetailedSpamReportToCSVToolStripMenuItem_Click={
	Try
	{
		$savedialog = New-Object windows.forms.savefiledialog
		$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
		$savedialog.title = "Export to File"
		$savedialog.filter = ".csv|*.csv"
		$savedialog.ShowHelp = $True
		$result = $savedialog.ShowDialog(); $result
		if ($result -eq "OK")
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$OutputFile = $savedialog.filename
			$textboxDetails.Text = "Get-MailDetailSpamReport"
			$TextboxResults.Text = "Getting Detailed Mail Spam Report..."
			Get-MailDetailSpamReport | Export-Csv $OutputFile -NoTypeInformation
			$TextboxResults.Text = ""
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getDetailedMailboxUsageReportToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Detailed Mailbox Usage Report..."
		$textboxDetails.Text = "Get-MailboxUsageDetailReport | Select-Object Username, MailboxSize, CurrentMailboxSize, PercentUsed, MailboxPlan, IsInactive |  Sort-Object PercentUsed | Format-Table -AutoSize"
		$TextboxResults.Text = Get-MailboxUsageDetailReport | Select-Object Username, MailboxSize, CurrentMailboxSize, PercentUsed, MailboxPlan, IsInactive | Sort-Object PercentUsed | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$exportDetailedMailboxUsageReportToCSVToolStripMenuItem_Click={
	Try
	{
		$savedialog = New-Object windows.forms.savefiledialog
		$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
		$savedialog.title = "Export to File"
		$savedialog.filter = ".csv|*.csv"
		$savedialog.ShowHelp = $True
		$result = $savedialog.ShowDialog(); $result
		if ($result -eq "OK")
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$OutputFile = $savedialog.filename
			$TextboxResults.Text = "Getting Detailed Mailbox Usage Report..."
			$textboxDetails.Text = "Get-MailboxUsageDetailReport"
			Get-MailboxUsageDetailReport | Export-Csv $OutputFile -NoTypeInformation
			$TextboxResults.Text = ""
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getMailboxUsageReportToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Mailbox Usage Report..."
		$textboxDetails.Text = "Get-MailboxUsageReport | Format-Table -AutoSize"
		$TextboxResults.Text = Get-MailboxUsageReport | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getMailTrafficPolicyReportToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Mail Traffic Policy Report..."
		$textboxDetails.Text = "Get-MailTrafficPolicyReport | Format-Table -AutoSize"
		$TextboxResults.Text = Get-MailTrafficPolicyReport | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$testToolStripMenuItem1_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$textboxDetails.Text = ""
		$Datacenter = @{ }
		$Datacenter["CP"] = @("LAM", "Brazil")
		$Datacenter["GR"] = @("LAM", "Brazil")
		$Datacenter["HK"] = @("APC", "Hong Kong")
		$Datacenter["SI"] = @("APC", "Singapore")
		$Datacenter["SG"] = @("APC", "Singapore")
		$Datacenter["KA"] = @("JPN", "Japan")
		$Datacenter["OS"] = @("JPN", "Japan")
		$Datacenter["TY"] = @("JPN", "Japan")
		$Datacenter["AM"] = @("EUR", "Amsterdam, Netherlands")
		$Datacenter["DB"] = @("EUR", "Dublin, Ireland")
		$Datacenter["HE"] = @("EUR", "Finland")
		$Datacenter["VI"] = @("EUR", "Austria")
		$Datacenter["BL"] = @("NAM", "Virginia, USA")
		$Datacenter["SN"] = @("NAM", "San Antonio, Texas, USA")
		$Datacenter["BN"] = @("NAM", "Virginia, USA")
		$Datacenter["DM"] = @("NAM", "Des Moines, Iowa, USA")
		$Datacenter["BY"] = @("NAM", "San Francisco, California, USA")
		$Datacenter["CY"] = @("NAM", "Cheyenne, Wyoming, USA")
		$Datacenter["CO"] = @("NAM", "Quincy, Washington, USA")
		$Datacenter["MW"] = @("NAM", "Quincy, Washington, USA")
		$Datacenter["CH"] = @("NAM", "Chicago, Illinois, USA")
		$Datacenter["ME"] = @("APC", "Melbourne, Victoria, Australia")
		$Datacenter["SY"] = @("APC", "Sydney, New South Wales, Australia")
		$Datacenter["KL"] = @("APC", "Kuala Lumpur, Malaysia")
		$Datacenter["PS"] = @("APC", "Busan, South Korea")
		$Datacenter["YQ"] = @("CAN", "Quebec City, Canada")
		$Datacenter["YT"] = @("CAN", "Toronto, Canada")
		$Datacenter["MM"] = @("GBR", "Durham, England")
		$Datacenter["LO"] = @("GBR", "London, England")
		
		
		Write-Host
		$TextboxResults.Text = "Getting Mailbox Information..."
		
		$Mailboxes = Get-Mailbox -ResultSize Unlimited | Where-Object { $_.RecipientTypeDetails -ne "DiscoveryMailbox" }
		
		$ServerCount = ($Mailboxes | Group-Object { $_.ServerName }).count
		
		$DatabaseCount = ($Mailboxes | Group-Object { $_.Database }).count
		
		$Mailboxes = $Mailboxes | Group-Object { $_.ServerName.SubString(0, 2) } | Select-Object @{ Name = "Datacenter"; Expression = { $_.Name } }, Count
		
		$Locations = @()
		
		# Not pretty error handling but allows counts to add properly when a datacenter location could not be identified from the table
		$E = $ErrorActionPreference
		$ErrorActionPreference = "SilentlyContinue"
		
		ForEach ($Mailbox in $Mailboxes)
		{
			$Object = New-Object -TypeName PSObject
			$Object | Add-Member -Name 'Datacenter' -MemberType NoteProperty -Value $Mailbox.Datacenter
			$Object | Add-Member -Name 'Region' -MemberType NoteProperty -Value $Datacenter[$Mailbox.Datacenter][0]
			$Object | Add-Member -Name 'Location' -MemberType NoteProperty -Value $Datacenter[$Mailbox.Datacenter][1]
			$Object | Add-Member -Name 'Count' -MemberType NoteProperty -Value $Mailbox.Count
			$Locations += $Object
		}
		
		$ErrorActionPreference = $E
		
		$TotalMailboxes = ($Locations | Measure-Object Count -Sum).sum
		
		$LocationsConsolidated = $Locations | Group-Object Location | ForEach-Object {
			New-Object PSObject -Property @{
				Location = $_.Name
				Mailboxes = ("{0,9:N0}" -f ($_.Group | Measure-Object Count -Sum).Sum)
			}
		} | Sort-Object Count -Descending
		
		$textboxresults.text = $LocationsConsolidated | Select-Object Location, Mailboxes | Sort-Object Mailboxes | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getTotalMailboxCountToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Mailbox Count..."
		$textboxDetails.Text = "(Get-Mailbox -ResultSize Unlimited).Count"
		$TextboxResults.Text = (Get-Mailbox -ResultSize Unlimited).Count | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$viewAllUsersFocusedInboxStatusToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$mbxs = (Get-Mailbox).userprincipalname
		$TextboxResults.Text = "Getting Focused Inbox status for all users...(this may take some time)"
		$textboxDetails.Text = "`$mbxs = (Get-Mailbox).userprincipalname
foreach (`$mbx in `$mbxs) { Get-FocusedInbox -Identity `$mbx }"
		$results = foreach ($mbx in $mbxs) { Get-FocusedInbox -Identity $mbx }
		$TextboxResults.Text = $results | Sort-Object MailboxIdentity | Format-Table MailboxIdentity, FocusedInboxOn -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getTenantFocusedInboxStatusToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Focus Inbox status..."
		$textboxDetails.Text = "Get-OrganizationConfig | Format-Table FocusedInboxOn -AutoSize"
		$TextboxResults.Text = Get-OrganizationConfig | Format-Table FocusedInboxOn -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$enableFocusedInboxForCompanyToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Enabling Focus Inbox..."
		$textboxDetails.Text = "Set-OrganizationConfig -FocusedInboxOn `$True"
		Set-OrganizationConfig -FocusedInboxOn $True
		$TextboxResults.Text = "Getting Focus Inbox status..."
		$TextboxResults.Text = Get-OrganizationConfig | Format-Table FocusedInboxOn -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$disableFocusedInboxForCompanyToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Disabling Focus Inbox..."
		$textboxDetails.Text = "Set-OrganizationConfig -FocusedInboxOn `$False"
		Set-OrganizationConfig -FocusedInboxOn $False
		$TextboxResults.Text = "Getting Focus Inbox status..."
		$TextboxResults.Text = Get-OrganizationConfig | Format-Table FocusedInboxOn -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$disableFocusedInboxForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$SelectUsersFormText = "Select the User you want to disable Focused Inbox for"
			Show-SelectCachedUserPrincipalName_psf
			$FocusedInboxOff = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$FocusedInboxOff)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid User", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Disabling Focused Inbox for $FocusedInboxOff "
				$textboxDetails.Text = "Set-FocusedInbox -Identity $FocusedInboxOff -FocusedInboxOn `$False"
				$TextboxResults.Text = Set-FocusedInbox -Identity $FocusedInboxOff -FocusedInboxOn $False | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to disable Focused Inbox for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$enableFocusedInboxForAUserToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$SelectUsersFormText = "Select the User you want to enable Focused Inbox for"
			Show-SelectCachedUserPrincipalName_psf
			$FocusedInboxOff = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$FocusedInboxOff)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid User", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Enabling Focused Inbox for $FocusedInboxOff "
				$TextboxResults.Text = Set-FocusedInbox -Identity $FocusedInboxOff -FocusedInboxOn $True | Out-String -Width 2147483647
				$textboxDetails.Text = "Set-FocusedInbox -Identity $FocusedInboxOff -FocusedInboxOn `$True"
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to enable Focused Inbox for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$disableFocusedInboxForAllUsersToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Disabling Focused Inbox for all users..."
		$TextboxResults.Text = Get-Mailbox | Where-Object { $_.RecipientTypeDetails -ne "SharedMailbox" } | Set-FocusedInbox -FocusedInboxOn $False | Out-String -Width 2147483647
		$textboxDetails.Text = "Get-Mailbox | Where-Object { `$_.RecipientTypeDetails -ne 'SharedMailbox' } | Set-FocusedInbox -FocusedInboxOn `$False"
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
	
}

$enableFocusedInboxForAllUsersToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Disabling Focused Inbox for all users..."
		$TextboxResults.Text = Get-Mailbox | Where-Object { $_.RecipientTypeDetails -ne "SharedMailbox" } | Set-FocusedInbox -FocusedInboxOn $True | Out-String -Width 2147483647
		$textboxDetails.Text = "Get-Mailbox | Where-Object { `$_.RecipientTypeDetails -ne 'SharedMailbox' } | Set-FocusedInbox -FocusedInboxOn `$True"
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getAUsersFocusedInboxStatusToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$SelectUsersFormText = "Select the User you want get Focused Inbox status for"
			Show-SelectCachedUserPrincipalName_psf
			$FocusedInbox = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$FocusedInbox)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid User", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting Focused Inbox status for $FocusedInbox"
				$TextboxResults.Text = Get-FocusedInbox -Identity $FocusedInbox | Out-String -Width 2147483647
				$textboxDetails.Text = "Get-FocusedInbox -Identity $FocusedInbox"
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get another Users Focused Inbox status?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
}

$getUserCountToolStripMenuItem_Click={
	Try
	{
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting User Count..."
			$textboxDetails.Text = "(Get-MsolUser -All).count"
			$TextboxResults.Text = (Get-MsolUser -All).count | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting User Count..."
			$textboxDetails.Text = "(Get-MsolUser -All).count"
			$TextboxResults.Text = (Get-MsolUser -TenantId $PartnerComboBox.SelectedItem.TenantID -All).count | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting User Count..."
			$textboxDetails.Text = "(Get-MsolUser -All).count"
			$TextboxResults.Text = (Get-MsolUser -All).count | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getMailboxCountToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Mailbox Count..."
		$textboxDetails.Text = "(Get-Mailbox -resultsize unlimited).count"
		$TextboxResults.Text = (Get-Mailbox -resultsize unlimited).count | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getSharedMailboxCountToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Shared Mailbox Count..."
		$textboxDetails.Text = "(Get-Mailbox -RecipientTypeDetails SharedMailbox -ResultSize Unlimited).count"
		$TextboxResults.Text = (Get-Mailbox -RecipientTypeDetails SharedMailbox -ResultSize Unlimited).count | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getDistributionGroupCountToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Distribution Group Count..."
		$textboxDetails.Text = "(Get-DistributionGroup -ResultSize Unlimited).count"
		$TextboxResults.Text = (Get-DistributionGroup -ResultSize Unlimited).count | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getRegularSecurityGroupCountToolStripMenuItem_Click={
	Try
	{
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting Regular Security Group Count..."
			$textboxDetails.Text = "(Get-MsolGroup -All -GroupType Security).count"
			$TextboxResults.Text = (Get-MsolGroup -All -GroupType Security).count | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting Regular Security Group Count..."
			$textboxDetails.Text = "(Get-MsolGroup -All -GroupType Security).count"
			$TextboxResults.Text = (Get-MsolGroup -TenantId $PartnerComboBox.SelectedItem.TenantID -All -GroupType Security).count | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting Regular Security Group Count..."
			$textboxDetails.Text = "(Get-MsolGroup -All -GroupType Security).count"
			$TextboxResults.Text = (Get-MsolGroup -All -GroupType Security).count | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getMailEnabledSecurityGroupCountToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Mail Enabled Security Group Count..."
		$textboxDetails.Text = "(Get-DistributionGroup -ResultSize unlimited | Where-Object { `$_.GroupType -like 'Universal, SecurityEnabled'}).count"
		$TextboxResults.Text = (Get-DistributionGroup -ResultSize unlimited | Where-Object { $_.GroupType -like "Universal, SecurityEnabled" }).count | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getAllDynamicDistributionGroupsToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting All Dynamic Distribution Groups..."
		$textboxDetails.Text = "Get-DynamicDistributionGroup -ResultSize Unlimited | Format-Table -AutoSize"
		$TextboxResults.Text = Get-DynamicDistributionGroup -ResultSize Unlimited | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getDynamicDistributionGroupCountToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Dynamic Distribution Groups Count..."
		$textboxDetails.Text = "(Get-DynamicDistributionGroup -ResultSize Unlimited).count"
		$TextboxResults.Text = (Get-DynamicDistributionGroup -ResultSize Unlimited).Count | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$createADynamicDistributionGroupForAllUsersToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$NewDynDistro = Read-Host "Please enter a name for the new Dynamic Distribution Group"
			If (!$NewDynDistro)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No name was entered, please enter a valid name for the new Dynamic Distribution Group", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Creating a new Dynamic Distribution Group for all Users..."
				$textboxDetails.Text = "New-DynamicDistributionGroup -Name $NewDynDistro –RecipientFilter { (RecipientType -eq 'UserMailbox') }"
				$TextboxResults.Text = New-DynamicDistributionGroup -Name $NewDynDistro –RecipientFilter { (RecipientType -eq 'UserMailbox') } | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to create another Dynamic Distribution Group for all Users?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
}

$createADynamicDistributionGroupForAllManagersToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$NewDynDistro = Read-Host "Please enter a name for the new Dynamic Distribution Group"
			If (!$NewDynDistro)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No name was entered, please enter a valid name for the new Dynamic Distribution Group", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Creating a new Dynamic Distribution Group for all Managers..."
				$textboxDetails.Text = "New-DynamicDistributionGroup -Name $NewDynDistro –RecipientFilter {(RecipientType -eq 'UserMailbox') -and (Title -like 'Director*' -or Title -like 'Manager*' )}"
				$TextboxResults.Text = New-DynamicDistributionGroup -Name $NewDynDistro –RecipientFilter { (RecipientType -eq 'UserMailbox') -and (Title -like 'Director*' -or Title -like 'Manager*') } | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to create another Dynamic Distribution Group for all Managers?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getDetailedInfoForADynamicDistributionGroupToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$DistroGroupsText = "Select the Dynamic Distribution Group you want detailed information on"
			Show-SelectDynamicDistributionGroups_psf
			$DetailedDyn = $SelectDynamicDistributionGroups_comboboxSelectDistroGroups
			If (!$DetailedDyn)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Dynamic Distribution Group was selected, please select a valid Dynamic Distribution Group", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting detailed information on $DetailedDyn..."
				$textboxDetails.Text = "Get-DynamicDistributionGroup $DetailedDyn | Format-List "
				$TextboxResults.Text = Get-DynamicDistributionGroup $DetailedDyn | Format-List | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get information for another Dynamic Distribution Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$removeADynamicDistributionGroupToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$DistroGroupsText = "Select the Dynamic Distribution Group you want to delete"
			Show-SelectDynamicDistributionGroups_psf
			$DetailedDyn = $SelectDynamicDistributionGroups_comboboxSelectDistroGroups
			If (!$DetailedDyn)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Dynamic Distribution Group was selected, please select a valid Dynamic Distribution Group", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Removing $DetailedDyn..."
				$textboxDetails.Text = "Remove-DynamicDistributionGroup $DetailedDyn "
				$TextboxResults.Text = Remove-DynamicDistributionGroup $DetailedDyn | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to remove another Dynamic Distribution Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getAllOnlineUsersCountToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting all online users count..."
		$textboxDetails.Text = "(Get-CsOnlineUser -ResultSize 2147483647).count"
		$TextboxResults.Text = (Get-CsOnlineUser -ResultSize 2147483647).count
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$preferencesToolStripMenuItem_Click = {
}

$resetPersonalPreferencesToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		Remove-Item 'HKCU:\Software\O365 Admin Center' -Force
		$InformationText = "All Personal preferences have been reset"
		$FormO365AdministrationCenter.Cursor = 'Default'
		Show-Info_OK_psf
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$disableAllPrerequisitesChecksToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableAzurePrompt -Value 1 -Force | Out-Null
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableArchPrompt -Value 1 -Force | Out-Null
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableMSOnlinePrompt -Value 1 -Force | Out-Null
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableSharePointOnlinePrompt -Value 1 -Force | Out-Null
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableSkypeOnlineConnectorPrompt -Value 1 -Force | Out-Null
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name ExecutionPolicy -Value 1 -Force | Out-Null
		$InformationText = "All Prerequisite Checks have been Disabled"
		$FormO365AdministrationCenter.Cursor = 'Default'
		Show-Info_OK_psf
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$enableAllPrerequisiteChecksToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableAzurePrompt -Value 0 -Force | Out-Null
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableArchPrompt -Value 0 -Force | Out-Null
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableMSOnlinePrompt -Value 0 -Force | Out-Null
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableSharePointOnlinePrompt -Value 0 -Force | Out-Null
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableSkypeOnlineConnectorPrompt -Value 0 -Force | Out-Null
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name ExecutionPolicy -Value 0 -Force | Out-Null
		$InformationText = "All Prerequisite Checks have been Enabled"
		$FormO365AdministrationCenter.Cursor = 'Default'
		Show-Info_OK_psf
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$requestSupportToolStripMenuItem_Click={
	Try
	{
		Start-Process -FilePath mailto:support@o365admin.center
	}
	Catch
	{
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$skypeForBusinessPrerequisiteToolStripMenuItem_Click={
	
}

$disableSkypeForBusinessPrerequisiteCheckToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableSkypeOnlineConnectorPrompt -Value 1 -Force | Out-Null
		$InformationText = "Skype For Business prerequisite check has been disabled"
		$FormO365AdministrationCenter.Cursor = 'Default'
		Show-Info_OK_psf
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$enableSkypeForBusinessPrerequisiteCheckToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableSkypeOnlineConnectorPrompt -Value 0 -Force | Out-Null
		$InformationText = "Skype For Business prerequisite check has been enabled"
		$FormO365AdministrationCenter.Cursor = 'Default'
		Show-Info_OK_psf
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$disableExchangeOnlinePrerequisiteCheckToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableAzurePrompt -Value 1 -Force | Out-Null
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableMSOnlinePrompt -Value 1 -Force | Out-Null
		$InformationText = "Exchange Online prerequisite check has been disabled"
		$FormO365AdministrationCenter.Cursor = 'Default'
		Show-Info_OK_psf
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$enableExchangeOnlinePrerequisiteCheckToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableAzurePrompt -Value 0 -Force | Out-Null
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableMSOnlinePrompt -Value 0 -Force | Out-Null
		$InformationText = "Exchange Online prerequisite check has been enabled"
		$FormO365AdministrationCenter.Cursor = 'Default'
		Show-Info_OK_psf
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$disableSharePointPrerequisiteCheckToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableSharePointOnlinePrompt -Value 1 -Force | Out-Null
		$InformationText = "SharePoint prerequisite check has been Disabled"
		$FormO365AdministrationCenter.Cursor = 'Default'
		Show-Info_OK_psf
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$enableSharePointPrerequisiteCheckToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableSharePointOnlinePrompt -Value 0 -Force | Out-Null
		$InformationText = "SharePoint prerequisite check has been Enabled"
		$FormO365AdministrationCenter.Cursor = 'Default'
		Show-Info_OK_psf
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$disableArchitecturePrerequisiteToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableArchPrompt -Value 1 -Force | Out-Null
		$InformationText = "Architecture prerequisite check has been disabled"
		$FormO365AdministrationCenter.Cursor = 'Default'
		Show-Info_OK_psf
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$enableArchitecturePrerequisiteToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name DisableArchPrompt -Value 0 -Force | Out-Null
		$InformationText = "Architecture prerequisite check has been enabled"
		Show-Info_OK_psf
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getAllTransportRulesToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting all Transport Rules..."
		$textboxDetails.Text = "Get-TransportRule"
		$TextboxResults.Text = Get-TransportRule | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getAllDisabledTransportRulesToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting all disabled Transport Rules..."
		$textboxDetails.Text = "Get-TransportRule | Where-Object {`$_.State -ne 'Enabled'}"
		$TextboxResults.Text = Get-TransportRule | Where-Object {$_.State -ne 'Enabled'} | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getAllEnabledTransportRulesToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting all enabled Transport Rules..."
		$textboxDetails.Text = "Get-TransportRule | Where-Object {`$_.State -eq 'Enabled'}"
		$TextboxResults.Text = Get-TransportRule | Where-Object { $_.State -eq 'Enabled' } | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getSpoofedMailReportToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Spoof Mail Report..."
		$textboxDetails.Text = "Get-SpoofMailReport"
		$TextboxResults.Text = Get-SpoofMailReport | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getTransportRulePredicateToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Transport Rule Predicate..."
		$textboxDetails.Text = "Get-TransportRulePredicate"
		$TextboxResults.Text = Get-TransportRulePredicate | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getDetailedInfoForATransportRuleToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$TransportRulesText = "Select the Transport Rule you want to view detailed information on"
			Show-SelectTransportRules_psf
			$DetailedTransportRule = $SelectTransportRules_comboboxTPs
			If (!$DetailedTransportRule)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Transport Rule was selected, please select a valid Transport Rule", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting Detailed information on the Transport Rule, '$DetailedTransportRule'..."
				$textboxDetails.Text = "Get-TransportRule -Identity $DetailedTransportRule | Format-List "
				$TextboxResults.Text = Get-TransportRule -Identity $DetailedTransportRule | Format-List | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get information on another Transport Rule?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getTransportRuleActionToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Transport Rule Action..."
		$textboxDetails.Text = "Get-TransportRuleAction"
		$TextboxResults.Text = Get-TransportRuleAction | Format-Table -AutoSize | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$enableATransportRuleToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$TransportRulesText = "Select the Transport Rule you want to enable"
			Show-SelectDisabledTransportRules_psf
			$TransportRule = $SelectDisabledTransportRules_comboboxTPs
			If (! $TransportRule)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Transport Rule was selected, please select a valid Transport Rule", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Enabling the Transport Rule, '$TransportRule''..."
				$textboxDetails.Text = "Enable-TransportRule -Identity $TransportRule"
				$TextboxResults.Text = Enable-TransportRule -Identity $TransportRule | Out-String -Width 2147483647
				$TextboxResults.Text = Get-TransportRule | Where-Object { $_.State -eq 'Enabled' } | Format-Table -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to menable another Transport Rule?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$disableATransportRuleToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$TransportRulesText = "Select the Transport Rule you want to disable"
			Show-SelectEnabledTransportRules_psf
			$TransportRule = $SelectEnabledTransportRules_comboboxTPs
			If (!$TransportRule)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Transport Rule was selected, please select a valid Transport Rule", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Disabling the Transport Rule, '$TransportRule''..."
				$textboxDetails.Text = "Disable-TransportRule -Identity $TransportRule"
				$TextboxResults.Text = Disable-TransportRule -Identity $TransportRule | Out-String -Width 2147483647
				$TextboxResults.Text = Get-TransportRule | Where-Object { $_.State -ne 'Enabled' } | Format-Table -AutoSize | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to disable another Transport Rule?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$removeATransportRuleToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$TransportRulesText = "Select the Transport Rule you want to remove"
			Show-SelectTransportRules_psf
			$DetailedTransportRule = $SelectTransportRules_comboboxTPs
			If (!$DetailedTransportRule)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Transport Rule was selected, please select a valid Transport Rule", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Removing the Transport Rule, '$DetailedTransportRule''..."
				$textboxDetails.Text = "Remove-TransportRule -Identity $DetailedTransportRule "
				$TextboxResults.Text = Remove-TransportRule -Identity $DetailedTransportRule | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to remove another Transport Rule?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$newTransportRuleForSenderDomainToBypassClutterToolStripMenuItem_Click = {
	Try
	{
		$NewTransportRule = Read-Host "Please enter a name for the Transport Rule"
		If (!$NewTransportRule)
		{
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("No name was entered, please select a valid name for the new Transport Rule", "Error")
		}
		Else
		{
			$SenderDomain = Read-Host "Please enter the sender domain that will bypass Clutter"
			If (!$SenderDomain)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Domain was entered, please enter a valid domain name what will bypass Clutter", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Creating a new Transport Rule where $SenderDomain can bypass Clutter..."
				$textboxDetails.Text = "New-TransportRule -Name '$NewTransportRule' -SenderDomainIs $SenderDomain -SetHeaderName 'X-MS-Exchange-Organization-BypassClutter' -SetHeaderValue 'true' "
				$TextboxResults.Text = New-TransportRule -Name $NewTransportRule -SenderDomainIs $SenderDomain -SetHeaderName "X-MS-Exchange-Organization-BypassClutter" -SetHeaderValue "true" | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
				
			}
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$blockEMailMessagesBetweenTwoDistributionGroupsToolStripMenuItem_Click = {
	Try
	{
		$TempDir = $env:temp
		$O365AdminTempFolder = ("$TempDir" + "\O365AdminCenter\distros.txt")
		If ((Test-Path $O365AdminTempFolder) -eq $false)
		{
			$Textboxresults.text = "Caching Distribution Groups…"
			(Get-DistributionGroup -ResultSize unlimited | Where-Object { $_.GroupType -notlike 'Universal, SecurityEnabled' }).DisplayName | Out-File "$O365AdminTempFolder"
			$Textboxresults.text = ""
			
			$NewTransportRule = Read-Host "Please enter a name for the Transport Rule"
			If (!$NewTransportRule)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No name was entered, please select a valid name for the new Transport Rule", "Error")
			}
			Else
			{
				$DistroGroupsText = "Select the first Distribution Group"
				Show-SelectCachedDistroGroups_psf
				$Distro1 = $SelectCachedDistroGroups_comboboxNames
				If (!$Distro1)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group", "Error")
				}
				Else
				{
					$DistroGroupsText = "Select the second Distribution Group. Memers of $Distro1 will not be able to send to this group and this group will not be able to send to $Distro1 "
					Show-SelectCachedDistroGroups_psf
					$Distro2 = $SelectCachedDistroGroups_comboboxNames
					If (!$Distro2)
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group", "Error")
					}
					Else
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Creating a new Transport Rule where members of $Distro1 and $Distro2 cannot e-mail each other..."
						$textboxDetails.Text = "New-TransportRule $NewTransportRule -BetweenMemberOf1 $Distro1 -BetweenMemberOf2 $Distro2  -RejectMessageEnhancedStatusCode '5.7.1' -RejectMessageReasonText 'Email messages sent between $Distro1 and $Distro2 are prohibited.'"
						$TextboxResults.Text = New-TransportRule $NewTransportRule -BetweenMemberOf1 $Distro1 -BetweenMemberOf2 $Distro2 -RejectMessageEnhancedStatusCode "5.7.1" -RejectMessageReasonText "Email messages sent between $Distro1 and $Distro2 are prohibited." | Out-String -Width 2147483647
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
				}
			}
		}
		Else
		{
			$NewTransportRule = Read-Host "Please enter a name for the Transport Rule"
			If (!$NewTransportRule)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No name was entered, please select a valid name for the new Transport Rule", "Error")
			}
			Else
			{
				$DistroGroupsText = "Select the first Distribution Group"
				Show-SelectCachedDistroGroups_psf
				$Distro1 = $SelectCachedDistroGroups_comboboxNames
				If (!$Distro1)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group", "Error")
				}
				Else
				{
					$DistroGroupsText = "Select the second Distribution Group. Memers of $Distro1 will not be able to send to this group and this group will not be able to send to $Distro1 "
					Show-SelectCachedDistroGroups_psf
					$Distro2 = $SelectCachedDistroGroups_comboboxNames
					If (!$Distro2)
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						[System.Windows.Forms.MessageBox]::Show("No Distribution Group was selected, please select a valid Distribution Group", "Error")
					}
					Else
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Creating a new Transport Rule where members of $Distro1 and $Distro2 cannot e-mail each other..."
						$textboxDetails.Text = "New-TransportRule $NewTransportRule -BetweenMemberOf1 $Distro1 -BetweenMemberOf2 $Distro2  -RejectMessageEnhancedStatusCode '5.7.1' -RejectMessageReasonText 'Email messages sent between $Distro1 and $Distro2 are prohibited.'"
						$TextboxResults.Text = New-TransportRule $NewTransportRule -BetweenMemberOf1 $Distro1 -BetweenMemberOf2 $Distro2 -RejectMessageEnhancedStatusCode "5.7.1" -RejectMessageReasonText "Email messages sent between $Distro1 and $Distro2 are prohibited." | Out-String -Width 2147483647
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
				}
			}
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$specificSenderBypassClutterToolStripMenuItem_Click={
	Try
	{
		$NewTransportRule = Read-Host "Please enter a name for the Transport Rule"
		If (!$NewTransportRule)
		{
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("No name was entered, please select a valid name for the new Transport Rule", "Error")
		}
		Else
		{
			$SenderDomain = Read-Host "Please enter the sender's e-mail that will bypass Clutter"
			If (!$SenderDomain)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Domain was entered, please enter a valid domain name what will bypass Clutter", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Creating a new Transport Rule where $SenderDomain can bypass Clutter..."
				$textboxDetails.Text = "New-TransportRule -Name '$NewTransportRule' -From $SenderDomain -SetHeaderName 'X-MS-Exchange-Organization-BypassClutter' -SetHeaderValue 'true' "
				$TextboxResults.Text = New-TransportRule -Name $NewTransportRule -From $SenderDomain -SetHeaderName "X-MS-Exchange-Organization-BypassClutter" -SetHeaderValue "true" | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
				
			}
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$changeATransportRulePriorityToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$TransportRulesText = "Select the Transport Rule you want to modify priority for"
			Show-SelectTransportRules_psf
			$DetailedTransportRule = $SelectTransportRules_comboboxTPs
			If (!$DetailedTransportRule)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Transport Rule was selected, please select a valid Transport Rule", "Error")
			}
			Else
			{
				$NewPriority = Read-Host "Please enter a new priority number. Ex: 1"
				If (!$NewPriority)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No priority was set, please enter a valid priority number ", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Setting the priority level for $DetailedTransportRule to $NewPriority..."
					$textboxDetails.Text = "Set-TransportRule -Identity $DetailedTransportRule -Priority $NewPriority"
					$TextboxResults.Text = Set-TransportRule -Identity $DetailedTransportRule -Priority $NewPriority | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to modify another Transport Rules priority?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$blockPasswordProtectedAttachmentsToolStripMenuItem_Click={
	Try
	{
		$NewTransportRule = Read-Host "Please enter a name for the Transport Rule"
		If (!$NewTransportRule)
		{
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("No name was entered, please select a valid name for the new Transport Rule", "Error")
		}
		Else
		{
			
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Creating a new Transport Rule where password protected attachments are blocked..."
			$textboxDetails.Text = "New-TransportRule -Name '$NewTransportRule' -AttachmentIsPasswordProtected $True -Quarantine $True "
			$TextboxResults.Text = New-TransportRule -Name $NewTransportRule -AttachmentIsPasswordProtected $True -Quarantine $True | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
	
}

$quarantineMessagesWithExecutableAttachmentsToolStripMenuItem_Click= {
	$NewTransportRule = Read-Host "Please enter a name for the Transport Rule"
	If (!$NewTransportRule)
	{
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("No name was entered, please select a valid name for the new Transport Rule", "Error")
	}
	Else
	{
		
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Creating a new Transport Rule where messages with executable content is quarantined..."
		$textboxDetails.Text = "New-TransportRule -Name '$NewTransportRule' -AttachmentHasExecutableContent $True -Quarantine $True "
		$TextboxResults.Text = New-TransportRule -Name $NewTransportRule -AttachmentHasExecutableContent $True -Quarantine $True | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$addAPublicFolderPermissionToolStripMenuItem_Click = {
	Do
	{
		$TempDir = $env:temp
		$CachedPF = ("$TempDir" + "\O365AdminCenter" + "\pf.txt")
		Try
		{
			If ((Test-Path $CachedPF) -eq $false)
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Caching Public Folders..."
				(Get-PublicFolder -ResultSize Unlimited -Identity "\" -Recurse).Identity | Out-File $CachedPF
				
				$PFText = "Please select the Public Folder you want to modify permissions for"
				Show-SelectCachedPublicFolders_psf
				$PFStats = $SelectCachedPublicFolders_comboboxPF
				If (!$PFStats)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Public Folder was selected, please select a valid Public Folder", "Error")
				}
				Else
				{
					$SelectUsersFormText = "Select the user you want to add permission to $PFStats"
					#Call-SelectUsersForm_psf
					Show-SelectCachedDisplayNames_psf
					#$GlobalUPNooouser = $SelectUsersForm_comboboxUsers
					$GlobalUPNooouser = $SelectCachedDisplayNames_comboboxNames
					If (!$GlobalUPNooouser)
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid user", "Error")
					}
					Else
					{
						$PermissionsText = "Select the level of access you want $GlobalUPNooouser to have"
						Show-SelectPFPermissions_psf
						$Permissions = $SelectPFPermissions_comboboxTPs
						If (!$Permissions)
						{
							$TextboxResults.Text = ""
							$textboxDetails.Text = ""
							[System.Windows.Forms.MessageBox]::Show("No level of access was selected, please select a valid level of access", "Error")
						}
						Else
						{
							$FormO365AdministrationCenter.Cursor = 'WaitCursor'
							$TextboxResults.Text = "Modifying permissions for the public folder '$PFStats' for $GlobalUPNooouser with $Permissions access.."
							$textboxDetails.Text = "Add-PublicFolderClientPermission -identity $PFStats -user $GlobalUPNooouser -accessrights $Permissions"
							$TextboxResults.Text = Add-PublicFolderClientPermission -identity $PFStats -user $GlobalUPNooouser -accessrights $Permissions | Out-String -Width 2147483647
							$FormO365AdministrationCenter.Cursor = 'Default'
						}
					}
				}
			}
			Else
			{
				
				$PFText = "Please select the Public Folder you want to modify permissions for"
				Show-SelectCachedPublicFolders_psf
				$PFStats = $SelectCachedPublicFolders_comboboxPF
				If (!$PFStats)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Public Folder was selected, please select a valid Public Folder", "Error")
				}
				Else
				{
					$SelectUsersFormText = "Select the user you want to add permission to $PFStats"
					#Call-SelectUsersForm_psf
					Show-SelectCachedDisplayNames_psf
					#$GlobalUPNooouser = $SelectUsersForm_comboboxUsers
					$GlobalUPNooouser = $SelectCachedDisplayNames_comboboxNames
					If (!$GlobalUPNooouser)
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a valid user", "Error")
					}
					Else
					{
						$PermissionsText = "Select the level of access you want $GlobalUPNooouser to have"
						Show-SelectPFPermissions_psf
						$Permissions = $SelectPFPermissions_comboboxTPs
						If (!$Permissions)
						{
							$TextboxResults.Text = ""
							$textboxDetails.Text = ""
							[System.Windows.Forms.MessageBox]::Show("No level of access was selected, please select a valid level of access", "Error")
						}
						Else
						{
							$FormO365AdministrationCenter.Cursor = 'WaitCursor'
							$TextboxResults.Text = "Modifying permissions for the public folder '$PFStats' for $GlobalUPNooouser with $Permissions access.."
							$textboxDetails.Text = "Add-PublicFolderClientPermission -identity $PFStats -user $GlobalUPNooouser -accessrights $Permissions"
							$TextboxResults.Text = Add-PublicFolderClientPermission -identity $PFStats -user $GlobalUPNooouser -accessrights $Permissions | Out-String -Width 2147483647
							$FormO365AdministrationCenter.Cursor = 'Default'
						}
					}
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to modify permissions on another Public Folder?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getAPublicFolderPermissionToolStripMenuItem_Click = {
	Do
	{
		$TempDir = $env:temp
		$CachedPF = ("$TempDir" + "\O365AdminCenter" + "\pf.txt")
		Try
		{
			If ((Test-Path $CachedPF) -eq $false)
			{
				$TextboxResults.Text = "Caching Public Folders..."
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Caching Public Folders..."
				(Get-PublicFolder -ResultSize Unlimited -Identity "\" -Recurse).Identity | Out-File $CachedPF
				$TextboxResults.Text = ""
				$PFText = "Please select the Public Folder you want to view permissions for"
				Show-SelectCachedPublicFolders_psf
				$PFStats = $SelectCachedPublicFolders_comboboxPF
				If (!$PFStats)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Public Folder was selected, please select a valid Public Folder", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Getting Public Folder permissions for $PFStats.."
					$textboxDetails.Text = "Get-PublicFolderClientPermission -Identity $PFStats"
					$TextboxResults.Text = Get-PublicFolderClientPermission -Identity $PFStats | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
			Else
			{
				
				$PFText = "Please select the Public Folder you want to view permissions for"
				Show-SelectCachedPublicFolders_psf
				$PFStats = $SelectCachedPublicFolders_comboboxPF
				If (!$PFStats)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No Public Folder was selected, please select a valid Public Folder", "Error")
				}
				Else
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Getting Public Folder permissions for $PFStats.."
					$textboxDetails.Text = "Get-PublicFolderClientPermission -Identity $PFStats"
					$TextboxResults.Text = Get-PublicFolderClientPermission -Identity $PFStats | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
			}
			
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to modify permissions on another Public Folder?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$disableExecutionPolicyCheckToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name ExecutionPolicy -Value 1 -Force | Out-Null
		$InformationText = "Execution Policy check has been disabled"
		$FormO365AdministrationCenter.Cursor = 'Default'
		Show-Info_OK_psf
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$enableExecutionPolicyCheckToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name ExecutionPolicy -Value 0 -Force | Out-Null
		$InformationText = "Execution Policy check has been enabled"
		$FormO365AdministrationCenter.Cursor = 'Default'
		Show-Info_OK_psf
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$TextboxResults_TextChanged={
	
	
}

$deleteAllMailboxContentForAUserToolStripMenuItem_Click = {
	Do
	{
		$SelectUsersFormText = "Select the User you want to delete Mailbox Content for"
		Show-SelectCachedDisplayNames_psf
		$DeleteMailboxContent = $SelectCachedDisplayNames_comboboxNames
		If (!$DeleteMailboxContent)
		{
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
		}
		Else
		{
			Try
			{
				$OUTPUT = [System.Windows.Forms.MessageBox]::Show("Are you sure you want to delete all Mailbox Content for $DeleteMailboxContent?.", "Warning!", 4)
				If ($OUTPUT -eq "YES")
				{
					$FormO365AdministrationCenter.Cursor = 'WaitCursor'
					$TextboxResults.Text = "Removing mailbox conetent for $DeleteMailboxContent..."
					$textboxDetails.Text = "Search-Mailbox -Identity $DeleteMailboxContent -DeleteContent"
					$TextboxResults.Text = Search-Mailbox -Identity $DeleteMailboxContent -DeleteContent | Out-String -Width 2147483647
					$FormO365AdministrationCenter.Cursor = 'Default'
				}
				Else
				{
					[System.Windows.Forms.MessageBox]::Show("Mailbox Content for $DeleteMailboxContent has not been deleted", "Info")
				}
			}
			Catch
			{
				$FormO365AdministrationCenter.Cursor = 'Default'
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("$_", "Error")
			}
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to delete all Mailbox Content for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getMailboxContentForAUserToolStripMenuItem_Click = {
	Do
	{
		$SelectUsersFormText = "Select the User you want to get all Mailbox Content for"
		Show-SelectCachedDisplayNames_psf
		$MailboxContent = $SelectCachedDisplayNames_comboboxNames
		If (!$MailboxContent)
		{
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
		}
		Else
		{
			Try
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting mailbox content for $MailboxContent..."
				$textboxDetails.Text = "Get-MailboxFolderStatistics $MailboxContent | Select-Object Identity, ItemsInFolder"
				$TextboxResults.Text = Get-MailboxFolderStatistics $MailboxContent | Select-Object Identity, ItemsInFolder | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			Catch
			{
				$FormO365AdministrationCenter.Cursor = 'Default'
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("$_", "Error")
			}
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get Mailbox Content for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$createAnAutoReplyForAMailboxToolStripMenuItem_Click = {
	Do
	{
		#$OOOautoreplyUser = Read-Host "What user is the Out Of Office auto reply for?"
		$SelectUsersFormText = "Select the user you want to create an Auto Reply for"
		#Call-SelectUsersForm_psf
		Show-SelectCachedDisplayNames_psf
		#$GlobalUPNooouser = $SelectUsersForm_comboboxUsers
		$GlobalUPNooouser = $SelectCachedDisplayNames_comboboxNames
		
		Try
		{
			If (!$GlobalUPNooouser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("Please select a user you want to create an Auto Reply for", "Error")
			}
			Else
			{
				$OOOInternal = Read-Host "What is the Internal Message"
				If (!$OOOInternal)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("Please enter an internal Auto Reply message", "Error")
				}
				Else
				{
					$OOOExternal = Read-Host "What is the External Message"
					If (!$OOOExternal)
					{
						$TextboxResults.Text = ""
						$textboxDetails.Text = ""
						[System.Windows.Forms.MessageBox]::Show("Please enter an Auto Reply message", "Error")
					}
					Else
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Creating an Auto Reply for $GlobalUPNooouser..."
						$textboxDetails.Text = "Set-MailboxAutoReplyConfiguration -Identity $GlobalUPNooouser -AutoReplyState Enabled -ExternalMessage $OOOExternal -InternalMessage $OOOInternal"
						Set-MailboxAutoReplyConfiguration -Identity $GlobalUPNooouser -AutoReplyState Enabled -ExternalMessage $OOOExternal -InternalMessage $OOOInternal
						$TextboxResults.Text = Get-MailboxAutoReplyConfiguration -Identity $GlobalUPNooouser | Format-List | Out-String -Width 2147483647
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
				}
				
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to create an Auto-Reply for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$disableAutoReplyForAMailboxToolStripMenuItem_Click = {
	Do
	{
		#$OOOautoreplyUser = Read-Host "What user is the Out Of Office auto reply for?"
		$SelectUsersFormText = "Select the user you want to disable an Auto Reply for"
		#Call-SelectUsersForm_psf
		Show-SelectCachedDisplayNames_psf
		#$GlobalUPNooouser = $SelectUsersForm_comboboxUsers
		$GlobalUPNooouser = $SelectCachedDisplayNames_comboboxNames
		
		Try
		{
			If (!$GlobalUPNooouser)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No user selected, please select a user.", "Error")
				
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Disabling an Auto Reply for $GlobalUPNooouser..."
				$textboxDetails.Text = "Set-MailboxAutoReplyConfiguration -Identity $GlobalUPNooouser -AutoReplyState Disabled"
				Set-MailboxAutoReplyConfiguration -Identity $GlobalUPNooouser -AutoReplyState Disabled
				$TextboxResults.Text = Get-MailboxAutoReplyConfiguration -Identity $GlobalUPNooouser | Format-List | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to Disable Auto-Reply for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$enableMailboxAuditingOnAllMailboxesToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Enabling Auditing on all user mailboxes..."
		$textboxDetails.text = "Get-Mailbox -ResultSize Unlimited -Filter { RecipientTypeDetails -eq 'UserMailbox' } | Set-Mailbox -AuditEnabled `$true" | Out-String -Width 2147483647
		$TextboxResults.Text = Get-Mailbox -ResultSize Unlimited -Filter { RecipientTypeDetails -eq "UserMailbox" } | Set-Mailbox -AuditEnabled $true | Out-String -Width 2147483647
		$TextboxResults.Text = Get-Mailbox -ResultSize Unlimited -Filter { RecipientTypeDetails -eq 'UserMailbox' } | Format-List Name, Audit* | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$disableMailboxAuditingOnAllUsersToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Disabling Auditing on all user mailboxes..."
		$textboxDetails.text = "Get-Mailbox -ResultSize Unlimited -Filter { RecipientTypeDetails -eq 'UserMailbox' } | Set-Mailbox -AuditEnabled `$false" | Out-String -Width 2147483647
		$TextboxResults.Text = Get-Mailbox -ResultSize Unlimited -Filter { RecipientTypeDetails -eq "UserMailbox" } | Set-Mailbox -AuditEnabled $false | Out-String -Width 2147483647
		$TextboxResults.Text = Get-Mailbox -ResultSize Unlimited -Filter { RecipientTypeDetails -eq 'UserMailbox' } | Format-List Name, Audit* | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getMailboxAuditingForAllUsersToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Mailbox Auditing for all user mailboxes..."
		$textboxDetails.text = "Get-Mailbox -ResultSize Unlimited -Filter { RecipientTypeDetails -eq 'UserMailbox' } | Format-List Name, Audit*" | Out-String -Width 2147483647
		$TextboxResults.Text = Get-Mailbox -ResultSize Unlimited -Filter { RecipientTypeDetails -eq 'UserMailbox' } | Format-List Name, Audit* | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getMailboxAuditingForAUserToolStripMenuItem_Click = {
	Do
	{
		$SelectUsersFormText = "Select the User you want to get Mailbox Auditing information for"
		Show-SelectCachedDisplayNames_psf
		$GlobalUPNdetailedmailbox = $SelectCachedDisplayNames_comboboxNames
		Try
		{
			If (!$GlobalUPNdetailedmailbox)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User selected, please select a User.", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting Mailbox Auditing information for $GlobalUPNdetailedmailbox..."
				$textboxDetails.Text = "Get-Mailbox $GlobalUPNdetailedmailbox | Format-List Audit*"
				$TextboxResults.Text = Get-Mailbox $GlobalUPNdetailedmailbox | Format-List Audit* | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get the Mailbox Auditing status for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$enableMailboxAuditingForAUserToolStripMenuItem_Click = {
	Do
	{
		$SelectUsersFormText = "Select the User you want to enable Mailbox Auditing for"
		Show-SelectCachedDisplayNames_psf
		$GlobalUPNdetailedmailbox = $SelectCachedDisplayNames_comboboxNames
		Try
		{
			If (!$GlobalUPNdetailedmailbox)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User selected, please select a User.", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Enabling Mailbox Auditing information for $GlobalUPNdetailedmailbox..."
				$textboxDetails.Text = "Set-Mailbox -Identity $GlobalUPNdetailedmailbox -AuditEnabled `$true"
				$TextboxResults.Text = Set-Mailbox -Identity $GlobalUPNdetailedmailbox -AuditEnabled $true | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to enable Mailbox Auditing for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$disableMailboxAuditingForAUserToolStripMenuItem_Click = {
	Do
	{
		$SelectUsersFormText = "Select the User you want to disable Mailbox Auditing for"
		Show-SelectCachedDisplayNames_psf
		$GlobalUPNdetailedmailbox = $SelectCachedDisplayNames_comboboxNames
		Try
		{
			If (!$GlobalUPNdetailedmailbox)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User selected, please select a User.", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Disabling Mailbox Auditing information for $GlobalUPNdetailedmailbox..."
				$textboxDetails.Text = "Set-Mailbox -Identity $GlobalUPNdetailedmailbox -AuditEnabled `$false"
				$TextboxResults.Text = Set-Mailbox -Identity $GlobalUPNdetailedmailbox -AuditEnabled $false | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to disable Mailbox Auditing for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$removeCachedCredentialsToolStripMenuItem_Click={
	Try
	{
		$TempDir = $env:temp
		$O365AdminTempFolderCreds = ("$TempDir" + "\O365AdminCenter_Creds")
		$CachedMem = "$O365AdminTempFolderCreds\Creds.xml"
		Remove-Item $CachedMem -Force
		
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name CredMem -Value 0 -Force | Out-Null
		
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("Saved credentials have been removed", "Error")
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$disableCachedCredentialsToolStripMenuItem_Click = {
	Try
	{
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name CredMem -Value 2 -Force | Out-Null
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("Cached Credentials have been disabled", "Info")
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$enable2FAToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name TFA -Value 1 -Force | Out-Null
		$InformationText = "Second-Factor Authentication has been enabled"
		Show-Info_OK_psf
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$disable2FAToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name TFA -Value 0 -Force | Out-Null
		$InformationText = "Second-Factor Authentication has been Disabled"
		Show-Info_OK_psf
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$clear2FAModulePathToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		Get-Item 'HKCU:\Software\O365 Admin Center' | Remove-ItemProperty -Name TFAPath -Force | Out-Null
		$InformationText = "Second-Factor Module has been cleared"
		Show-Info_OK_psf
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$set2FAModulePathToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TFAModule = Read-Host "Please enter the full path to the 2FA Module"
		If (!$TFAModule)
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("No Path was entered!", "Error")
		}
		Else
		{
			$InformationText = "Second-Factor Module has been set to $TFAModule"
			Show-Info_OK_psf
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$download2FAModuleToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		Start-Process -FilePath https://technet.microsoft.com/en-us/library/mt775114
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$enableDirectReportsGroupAutoCreationToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Enabling Direct Reports Group Auto Creation..."
		$textboxDetails.Text = "Set-OrganizationConfig -DirectReportsGroupAutoCreationEnabled `$True"
		$TextboxResults = Set-OrganizationConfig -DirectReportsGroupAutoCreationEnabled $true | Out-String -Width 2147483647
		$TextboxResults.Text = "Success"
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$disableDirectReportsGroupAutoCreationToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Disabling Direct Reports Group Auto Creation..."
		$textboxDetails.Text = "Set-OrganizationConfig -DirectReportsGroupAutoCreationEnabled `$False"
		$TextboxResults.Text = Set-OrganizationConfig -DirectReportsGroupAutoCreationEnabled $false | Out-String -Width 2147483647
		$TextboxResults.Text = "Success"
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getDirectReportsGroupAutoCreationStatusToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Direct Reports Group Auto Creation Status..."
		$textboxDetails.Text = "Get-OrganizationConfig | Format-List *group*"
		$TextboxResults.Text = Get-OrganizationConfig | Format-List *group* | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getAllGroupsCreatedByDirectReportsGroupAutoCreationToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting All Groups Created by Direct Reports Group Auto Creation..."
		$textboxDetails.Text = "Get-UnifiedGroup -ResultSize Unlimited | Where-Object { $_.GroupPersonification -eq 'Groupsona:AutoDirectReports' }"
		$TextboxResults.Text = Get-UnifiedGroup -ResultSize Unlimited | Where-Object { $_.GroupPersonification -eq 'Groupsona:AutoDirectReports' } | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}

}

$exportFullSMTPLogToCSVToolStripMenuItem_Click={
	Try
	{
		$savedialog = New-Object windows.forms.savefiledialog
		$savedialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
		$savedialog.title = "Export to File"
		$savedialog.filter = ".csv|*.csv"
		$savedialog.ShowHelp = $True
		$result = $savedialog.ShowDialog(); $result
		$OutputFile = $savedialog.filename
		if ($result -eq "OK")
		{
			$TextboxResults.Text = "Exporting Full SMTP Log to csv..."
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			#Collect all recipients from Office 365 
			$Recipients = Get-Recipient -ResultSize Unlimited | Select-Object PrimarySMTPAddress
			$MailTraffic = @{ }
			foreach ($Recipient in $Recipients)
			{
				$MailTraffic[$Recipient.PrimarySMTPAddress.ToLower()] = @{ }
			}
			$Recipients = $null
			
			#Collect Message Tracking Logs (These are broken into "pages" in Office 365 so we need to collect them all with a loop) 
			$Messages = $null
			$Page = 1
			do
			{
				
				Write-Host "Collecting Message Tracking - Page $Page..."
				$CurrMessages = Get-MessageTrace -StartDate (Get-Date).AddDays(-7) -EndDate (Get-Date) -PageSize 5000 -Page $Page | Select-Object Received, *Address, *IP, Subject, Status, Size
				
				if ($CurrMessages -ne $null)
				{
					$CurrMessages | Export-Csv $OutputFile -NoTypeInformation
				}
				$Page++
				$Messages += $CurrMessages
				
				
			}
			until ($CurrMessages -eq $null)
		}
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$downloadMSOnlineModuleFor2FAToolStripMenuItem_Click = {
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		Start-Process -FilePath http://connect.microsoft.com/site1164/Downloads/DownloadDetails.aspx?DownloadID=59185
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}

	
}

$getMigrationStatisticsToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Migration Statistics..."
		$textboxDetails.Text = "Get-MigrationStatistics"
		$TextboxResults.Text = Get-MigrationStatistics | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getMigrationUserStatisticsToolStripMenuItem_Click = {
	Do
	{
		$SelectUsersFormText = "Select the user you want to get Migration User Statistics for"
		Show-SelectCachedDisplayNames_psf
		$GlobalUPNdetailedmailbox = $SelectCachedDisplayNames_comboboxNames
		Try
		{
			If (!$GlobalUPNdetailedmailbox)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No user selected, please select a user.", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting Migration User Statistics for $GlobalUPNdetailedmailbox..."
				$textboxDetails.Text = "Get-MailboxUserStatistics -Identity $GlobalUPNdetailedmailbox"
				$TextboxResults.Text = Get-MailboxUserStatistics -Identity $GlobalUPNdetailedmailbox | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get Migration User Statistics for another user?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getMoveRequestForAUserToolStripMenuItem_Click = {
	Do
	{
		$SelectUsersFormText = "Select the user you want to get the Move Request status for"
		Show-SelectCachedDisplayNames_psf
		$GlobalUPNdetailedmailbox = $SelectCachedDisplayNames_comboboxNames
		Try
		{
			If (!$GlobalUPNdetailedmailbox)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No user selected, please select a user.", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting the Move Request status for $GlobalUPNdetailedmailbox..."
				$textboxDetails.Text = "Get-MoveRequest -Identity $GlobalUPNdetailedmailbox"
				$TextboxResults.Text = Get-MoveRequest -Identity $GlobalUPNdetailedmailbox | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get the Move Request status for another user?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getMigrationUserStatusToolStripMenuItem_Click = {
	Do
	{
		$SelectUsersFormText = "Select the user you want to get the Migration User status for"
		Show-SelectCachedDisplayNames_psf
		$GlobalUPNdetailedmailbox = $SelectCachedDisplayNames_comboboxNames
		Try
		{
			If (!$GlobalUPNdetailedmailbox)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No user selected, please select a user.", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting Migration User status for $GlobalUPNdetailedmailbox..."
				$textboxDetails.Text = "Get-MailboxUser -Identity $GlobalUPNdetailedmailbox"
				$TextboxResults.Text = Get-MailboxUser -Identity $GlobalUPNdetailedmailbox | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get the Migration Status for another user?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$resumeMoveRequestForAUserToolStripMenuItem_Click = {
	Do
	{
		$SelectUsersFormText = "Select the user you want to resume the Move Request for"
		Show-SelectCachedDisplayNames_psf
		$GlobalUPNdetailedmailbox = $SelectCachedDisplayNames_comboboxNames
		Try
		{
			If (!$GlobalUPNdetailedmailbox)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No user selected, please select a user.", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Resuming the Move Request for $GlobalUPNdetailedmailbox..."
				$textboxDetails.Text = "Resume-MoveRequest -Identity $GlobalUPNdetailedmailbox"
				$TextboxResults.Text = Resume-MoveRequest -Identity $GlobalUPNdetailedmailbox | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to resume the Move Request for another user?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$removeMoveRequestForAUserToolStripMenuItem_Click = {
	Do
	{
		$SelectUsersFormText = "Select the user you want to remove the Move Request for"
		Show-SelectCachedDisplayNames_psf
		$GlobalUPNdetailedmailbox = $SelectCachedDisplayNames_comboboxNames
		Try
		{
			If (!$GlobalUPNdetailedmailbox)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No user selected, please select a user.", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Removing the Move Request for $GlobalUPNdetailedmailbox..."
				$textboxDetails.Text = "Remove-MoveRequest -Identity $GlobalUPNdetailedmailbox"
				$TextboxResults.Text = Remove-MoveRequest -Identity $GlobalUPNdetailedmailbox | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to remove a Move Request for another user?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$suspendMoveRequestForAUserToolStripMenuItem_Click = {
	Do
	{
		$SelectUsersFormText = "Select the user you want to suspend the Move Request for"
		Show-SelectCachedDisplayNames_psf
		$GlobalUPNdetailedmailbox = $SelectCachedDisplayNames_comboboxNames
		Try
		{
			If (!$GlobalUPNdetailedmailbox)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No user selected, please select a user.", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Suspending the Move Request for $GlobalUPNdetailedmailbox..."
				$textboxDetails.Text = "Suspend-MoveRequest -Identity $GlobalUPNdetailedmailbox"
				$TextboxResults.Text = Suspend-MoveRequest -Identity $GlobalUPNdetailedmailbox | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to suspend the Move REquest for another user?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getMembersOfADynamicDistributionGroupToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$DistroGroupsText = "Select the Dynamic Distribution Group you want to view the members of"
			Show-SelectDynamicDistributionGroups_psf
			$DetailedDyn = $SelectDynamicDistributionGroups_comboboxSelectDistroGroups
			If (!$DetailedDyn)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No Dynamic Distribution Group was selected, please select a valid Dynamic Distribution Group", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting membership for $DetailedDyn..."
				$DDG = Get-DynamicDistributionGroup $DetailedDyn
				$textboxDetails.Text = "Get-Recipient -RecipientPreviewFilter $DDG.RecipientFilter"
				$TextboxResults.Text = Get-Recipient -RecipientPreviewFilter $DDG.RecipientFilter | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get Members of another Dynamic Distribution Group?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getAllUsersImmutableIDToolStripMenuItem_Click={
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all users ImmutableID..."
			$textboxDetails.Text = "Get-MsolUser -All | Select-Object DisplayName, ImmutableID"
			$TextboxResults.text = Get-MsolUser -All | Select-Object DisplayName, ImmutableID | Sort-Object DisplayName | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all users ImmutableID..."
			$textboxDetails.Text = "Get-MsolUser -TenantId $TenantText -All | Select-Object DisplayName, ImmutableID | Sort-Object DisplayName"
			$TextboxResults.text = Get-MsolUser -TenantId $PartnerComboBox.SelectedItem.TenantID -All | Select-Object DisplayName, ImmutableID | Sort-Object DisplayName | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all users ImmutableID..."
			$textboxDetails.Text = "Get-MsolUser -All | Select-Object DisplayName, ImmutableID"
			$TextboxResults.text = Get-MsolUser -All | Select-Object DisplayName, ImmutableID | Sort-Object DisplayName | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getAUsersImmutableIDToolStripMenuItem_Click = {
	Do
	{
		$SelectUsersFormText = "Select the User you want to get the ImmutableID of"
		#Call-SelectUsersForm_psf
		Show-SelectCachedUserPrincipalName_psf
		#$GlobalUPN = $SelectUsersForm_comboboxUsers
		$GlobalUPN = $SelectCachedUserPrincipalName_comboboxUPN
		Try
		{
			If (!$GlobalUPN)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User selected, please select a User.", "Error")
			}
			ElseIf (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting ImmutableID for $GlobalUPN..."
				$textboxDetails.Text = "Get-MsolUser -UserPrincipalName $GlobalUPN | Select-Object DisplayName, ImmutableID"
				$TextboxResults.text = Get-MsolUser -UserPrincipalName $GlobalUPN | Select-Object DisplayName, ImmutableID | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
			{
				$TenantText = $PartnerComboBox.text
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting detailed ImmutableID for $GlobalUPN..."
				$textboxDetails.Text = "Get-MsolUser -UserPrincipalName $GlobalUPN -TenantId $TenantText | Select-Object DisplayName, ImmutableID"
				$TextboxResults.text = Get-MsolUser -UserPrincipalName $GlobalUPN -TenantId $PartnerComboBox.SelectedItem.TenantID | Select-Object DisplayName, ImmutableID | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting ImmutableID for $GlobalUPN..."
				$textboxDetails.Text = "Get-MsolUser -UserPrincipalName $GlobalUPN | Select-Object DisplayName, ImmutableID"
				$TextboxResults.text = Get-MsolUser -UserPrincipalName $GlobalUPN | Select-Object DisplayName, ImmutableID | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get the ImmutableID for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$setAUsersImmutableIDToolStripMenuItem_Click = {
	Do
	{
		$SelectUsersFormText = "Select the User you want to set the ImmutableID for"
		#Call-SelectUsersForm_psf
		Show-SelectCachedUserPrincipalName_psf
		#$GlobalUPN = $SelectUsersForm_comboboxUsers
		$GlobalUPN = $SelectCachedUserPrincipalName_comboboxUPN
		Try
		{
			If (!$GlobalUPN)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User selected, please select a User.", "Error")
			}
			Else
			{
				$ImmutableIDVar = Read-Host "Please enter the ImmutableID you want to set for $GlobalUPN..."
				If (!$ImmutableIDVar)
				{
					$TextboxResults.Text = ""
					$textboxDetails.Text = ""
					[System.Windows.Forms.MessageBox]::Show("No ImmutableID value was entered for $GlobalUPN! Please enter a valid ImmutableID.", "Error")
				}
				Else
				{
					If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Setting the ImmutableID for $GlobalUPN..."
						$textboxDetails.Text = "Set-MsolUser -UserPrincipalName $GlobalUPN -ImmutableID $ImmutableIDVar"
						Set-MsolUser -UserPrincipalName $GlobalUPN -ImmutableID $ImmutableIDVar
						$TextboxResults.text = Get-MsolUser -UserPrincipalName $GlobalUPN | Select-Object DisplayName, ImmutableID | Out-String -Width 2147483647
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
					ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
					{
						$TenantText = $PartnerComboBox.text
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Setting the ImmutableID for $GlobalUPN..."
						$textboxDetails.Text = "Set-MsolUser -TenantId $TenantText  -UserPrincipalName $GlobalUPN -ImmutableID $ImmutableIDVar"
						Set-MsolUser TenantId $PartnerComboBox.SelectedItem.TenantID -UserPrincipalName $GlobalUPN -ImmutableID $ImmutableIDVar
						$TextboxResults.text = Get-MsolUser TenantId $PartnerComboBox.SelectedItem.TenantID -UserPrincipalName $GlobalUPN | Select-Object DisplayName, ImmutableID | Out-String -Width 2147483647
						$FormO365AdministrationCenter.Cursor = 'Default'
						
					}
					Else
					{
						$FormO365AdministrationCenter.Cursor = 'WaitCursor'
						$TextboxResults.Text = "Setting the ImmutableID for $GlobalUPN..."
						$textboxDetails.Text = "Set-MsolUser -UserPrincipalName $GlobalUPN -ImmutableID $ImmutableIDVar"
						Set-MsolUser -UserPrincipalName $GlobalUPN -ImmutableID $ImmutableIDVar
						$TextboxResults.text = Get-MsolUser -UserPrincipalName $GlobalUPN | Select-Object DisplayName, ImmutableID | Out-String -Width 2147483647
						$FormO365AdministrationCenter.Cursor = 'Default'
					}
				}
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to set the ImmutableID for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$getAllGroupsToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.text = "Getting all Groups..."
		$textboxDetails.Text = "Get-Groups | Format-Table"
		$TextboxResults.text = Get-Groups | Format-Table | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getAllRecipientsToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.text = "Getting all Recipients..."
		$textboxDetails.Text = "Get-Recipient -ResultSize unlimited"
		$TextboxResults.text = Get-Recipient -ResultSize unlimited | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getAllSiteTemplatesToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.text = "Getting all Site Templates..."
		$textboxDetails.Text = "Get-SPOWebTemplate"
		$TextboxResults.text = Get-SPOWebTemplate | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getSharePointOnlinePropertiesToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.text = "Getting all SharePoint Site Online Organization Properties..."
		$textboxDetails.Text = "Get-SPOTenant"
		$TextboxResults.text = Get-SPOTenant | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}



$getSharePointOnlineLogsToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.text = "Getting all SharePoint Organization logs..."
		$textboxDetails.Text = "Get-SPOTenantLogEntry"
		$TextboxResults.text = Get-SPOTenantLogEntry | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getAllActivityAlertsToolStripMenuItem_Click={
	Try
	{
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.text = "Getting all Activity Alerts..."
		$textboxDetails.Text = "Get-ActivityAlert"
		$TextboxResults.text = Get-ActivityAlert | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$newActivityAlertToolStripMenuItem_Click = {
	Do
	{
		Try
		{
			$ActivityReport = Read-Host "Enter a name for the new Activity Report"
			If (!$ActivityReport)
			{
				[System.Windows.Forms.MessageBox]::Show("No name was entered for the Activity Report, please enter a valid name", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.text = "Getting all Activity Alerts..."
				$textboxDetails.Text = "New-ActivityAlert -Identity $ActivityReport"
				$TextboxResults.text = New-ActivityAlert -Identity $ActivityReport | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to create another Activity Report?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
}

$disableOutlookAnyWhereForAUserToolStripMenuItem_Click={
	Do
	{
		Try
		{
			#$ResetPasswordUser = Read-Host "Enter the UPN of the user you want to reset the password for"
			$SelectUsersFormText = "Select the User you want to disable Outlook AnyWhere for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPNrpp = $SelectUsersForm_comboboxUsers
			$GlobalUPNrpp = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$GlobalUPNrpp)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			
			Else
			{
				
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Disabling Outlook AnyWhere for $GlobalUPNrpp..."
				$textboxDetails.Text = "Set-CASMailbox $GlobalUPNrpp -MAPIEnabled `$False"
				Set-CASMailbox $GlobalUPNrpp -MAPIEnabled $False 
				$TextboxResults.Text = Get-CASMailbox $GlobalUPNrpp | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
				
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to disable Outlook AnyWhere for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
}

$enableOutlookAnyWhereForAUserToolStripMenuItem_Click={
	Do
	{
		Try
		{
			#$ResetPasswordUser = Read-Host "Enter the UPN of the user you want to reset the password for"
			$SelectUsersFormText = "Select the User you want to enable Outlook AnyWhere for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPNrpp = $SelectUsersForm_comboboxUsers
			$GlobalUPNrpp = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$GlobalUPNrpp)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			
			Else
			{
				
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Enabling Outlook AnyWhere for $GlobalUPNrpp..."
				$textboxDetails.Text = "Set-CASMailbox $GlobalUPNrpp -MAPIEnabled `$True"
				Set-CASMailbox $GlobalUPNrpp -MAPIEnabled $True
				$TextboxResults.Text = Get-CASMailbox $GlobalUPNrpp | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
				
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to enable Outlook AnyWhere for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
}



$disableOutlookAnyWhereForAllUsersToolStripMenuItem_Click={
	Try
	{
		
		
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Disabling Outlook AnyWhere for all users..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize Unlimited | Set-CASMailbox -MAPIEnabled `$False"
		Get-Mailbox -ResultSize Unlimited | Set-CASMailbox -MAPIEnabled $False
		$TextboxResults.Text = Get-Mailbox -ResultSize Unlimited | Get-CASMailbox | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
		
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	

}

$getClientAccessSettingsForAllUsersToolStripMenuItem_Click={
	Try
	{
		
		
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting Client Access Settings for all users..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize Unlimited | Get-CASMailbox"
		$TextboxResults.Text = Get-Mailbox -ResultSize Unlimited | Get-CASMailbox | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
		
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getClientAccessSettingsForAUserToolStripMenuItem_Click={
	Do
	{
		Try
		{
			#$ResetPasswordUser = Read-Host "Enter the UPN of the user you want to reset the password for"
			$SelectUsersFormText = "Select the User you want to get Client Access Settings for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPNrpp = $SelectUsersForm_comboboxUsers
			$GlobalUPNrpp = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$GlobalUPNrpp)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			
			Else
			{
				
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting Client Access Settings for $GlobalUPNrpp..."
				$textboxDetails.Text = "Get-CASMailbox $GlobalUPNrpp"
				$TextboxResults.Text =  Get-CASMailbox $GlobalUPNrpp | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
				
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get Client Access Settings for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
	
}

$enableOutlookAnyWhereForAllUsersToolStripMenuItem_Click={
	Try
	{
		
		
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Enabling Outlook AnyWhere for all users..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize Unlimited | Set-CASMailbox -MAPIEnabled `$True"
		Get-Mailbox -ResultSize Unlimited | Set-CASMailbox -MAPIEnabled $True
		$TextboxResults.Text = Get-Mailbox -ResultSize Unlimited | Get-CASMailbox | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
		
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$disableAllClientAccessSettingsForAUserToolStripMenuItem_Click={
	Do
	{
		Try
		{
			#$ResetPasswordUser = Read-Host "Enter the UPN of the user you want to reset the password for"
			$SelectUsersFormText = "Select the User you want to disable all Client Access Settings for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPNrpp = $SelectUsersForm_comboboxUsers
			$GlobalUPNrpp = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$GlobalUPNrpp)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			
			Else
			{
				
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Disabling all Client Access Settings for $GlobalUPNrpp..."
				$textboxDetails.Text = "Set-CASMailbox $GlobalUPNrpp -ActiveSyncEnabled `$False -OWAEnabled `$False -PopEnabled `$False -ImapEnabled `$False -MapiEnabled `$False"
				Set-CASMailbox $GlobalUPNrpp -ActiveSyncEnabled $False -OWAEnabled $False -PopEnabled $False -ImapEnabled $False -MapiEnabled $False
				$TextboxResults.Text = Get-CASMailbox $GlobalUPNrpp | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
				
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to disable all Client Access Settings for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
	
}

$enableAllClientAccessSettingsForAUserToolStripMenuItem_Click={
	Do
	{
		Try
		{
			#$ResetPasswordUser = Read-Host "Enter the UPN of the user you want to reset the password for"
			$SelectUsersFormText = "Select the User you want to enable all Client Access Settings for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPNrpp = $SelectUsersForm_comboboxUsers
			$GlobalUPNrpp = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$GlobalUPNrpp)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			
			Else
			{
				
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Enabling all Client Access Settings for $GlobalUPNrpp..."
				$textboxDetails.Text = "Set-CASMailbox $GlobalUPNrpp -ActiveSyncEnabled `$True -OWAEnabled `$True -PopEnabled `$True -ImapEnabled `$True -MapiEnabled `$True"
				Set-CASMailbox $GlobalUPNrpp -ActiveSyncEnabled $True -OWAEnabled $True -PopEnabled $True -ImapEnabled $True -MapiEnabled $True
				$TextboxResults.Text = Get-CASMailbox $GlobalUPNrpp | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
				
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to disable all Client Access Settings for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
}

$getDetailedClientAccessInformationForAUserToolStripMenuItem_Click={
	Do
	{
		Try
		{
			#$ResetPasswordUser = Read-Host "Enter the UPN of the user you want to reset the password for"
			$SelectUsersFormText = "Select the User you want to get detailed Client Access Settings for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPNrpp = $SelectUsersForm_comboboxUsers
			$GlobalUPNrpp = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$GlobalUPNrpp)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			
			Else
			{
				
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting detailed Client Access Settings for $GlobalUPNrpp..."
				$textboxDetails.Text = "Get-CASMailbox $GlobalUPNrpp | Format-List "
				$TextboxResults.Text = Get-CASMailbox $GlobalUPNrpp | Format-List | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
				
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get detailed Client Access Settings for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
	
}

$disableAllClientAccessSettingsForAllUsersToolStripMenuItem_Click={
	Try
	{
		
		
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Disabling all Client Access Settings for all users..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize Unlimited | Set-CASMailbox  -ActiveSyncEnabled `$False -OWAEnabled `$False -PopEnabled `$False -ImapEnabled `$False -MapiEnabled `$False"
		Get-Mailbox -ResultSize Unlimited | Set-CASMailbox -ActiveSyncEnabled $False -OWAEnabled $False -PopEnabled $False -ImapEnabled $False -MapiEnabled $False
		$TextboxResults.Text = Get-Mailbox -ResultSize Unlimited | Get-CASMailbox | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
		
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$enableAllClientAccessSettingsForAllUsersToolStripMenuItem_Click={
	Try
	{
		
		
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Enabling all Client Access Settings for all users..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize Unlimited | Set-CASMailbox  -ActiveSyncEnabled `$True -OWAEnabled `$True -PopEnabled `$True -ImapEnabled `$True -MapiEnabled `$True"
		Get-Mailbox -ResultSize Unlimited | Set-CASMailbox -ActiveSyncEnabled $FTrue -OWAEnabled $True -PopEnabled $True -ImapEnabled $True -MapiEnabled $True
		$TextboxResults.Text = Get-Mailbox -ResultSize Unlimited | Get-CASMailbox | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
		
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getOutlookAnyWhereStatusForAUserToolStripMenuItem_Click={
	Do
	{
		Try
		{
			#$ResetPasswordUser = Read-Host "Enter the UPN of the user you want to reset the password for"
			$SelectUsersFormText = "Select the User you want to get the Outlook AnyWhere status for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPNrpp = $SelectUsersForm_comboboxUsers
			$GlobalUPNrpp = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$GlobalUPNrpp)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			
			Else
			{
				
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting the Outlook AnyWhere status for $GlobalUPNrpp..."
				$textboxDetails.Text = "Get-CASMailbox $GlobalUPNrpp | Select-Object Name, MAPIEnabled "
				$TextboxResults.Text = Get-CASMailbox $GlobalUPNrpp | Select-Object Name, MAPIEnabled | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
				
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get the Outlook AnyWhere status for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
}

$getActiveSyncStatusForAUserToolStripMenuItem_Click={
	Do
	{
		Try
		{
			#$ResetPasswordUser = Read-Host "Enter the UPN of the user you want to reset the password for"
			$SelectUsersFormText = "Select the User you want to get the ActiveSync status for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPNrpp = $SelectUsersForm_comboboxUsers
			$GlobalUPNrpp = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$GlobalUPNrpp)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			
			Else
			{
				
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting the ActiveSync status for $GlobalUPNrpp..."
				$textboxDetails.Text = "Get-CASMailbox $GlobalUPNrpp | Select-Object Name, ActiveSyncEnabled "
				$TextboxResults.Text = Get-CASMailbox $GlobalUPNrpp | Select-Object Name, MAPIEnabled | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
				
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get the ActiveSync status for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
	
}

$disableActiveSyncForAUserToolStripMenuItem1_Click={
	Do
	{
		Try
		{
			#$ResetPasswordUser = Read-Host "Enter the UPN of the user you want to reset the password for"
			$SelectUsersFormText = "Select the User you want to disable ActiveSync for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPNrpp = $SelectUsersForm_comboboxUsers
			$GlobalUPNrpp = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$GlobalUPNrpp)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			
			Else
			{
				
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Disabling ActiveSync for $GlobalUPNrpp..."
				$textboxDetails.Text = "Set-CASMailbox $GlobalUPNrpp -ActiveSyncEnabled `$False"
				Set-CASMailbox $GlobalUPNrpp -ActiveSyncEnabled $False
				$TextboxResults.Text = Get-CASMailbox $GlobalUPNrpp | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
				
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to disable ActiveSync for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
}

$enableActiveSyncForAUserToolStripMenuItem1_Click={
	Do
	{
		Try
		{
			#$ResetPasswordUser = Read-Host "Enter the UPN of the user you want to reset the password for"
			$SelectUsersFormText = "Select the User you want to enable ActiveSync for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPNrpp = $SelectUsersForm_comboboxUsers
			$GlobalUPNrpp = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$GlobalUPNrpp)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			
			Else
			{
				
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Enabling ActiveSync for $GlobalUPNrpp..."
				$textboxDetails.Text = "Set-CASMailbox $GlobalUPNrpp -ActiveSyncEnabled `$True"
				Set-CASMailbox $GlobalUPNrpp -ActiveSyncEnabled $True
				$TextboxResults.Text = Get-CASMailbox $GlobalUPNrpp | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
				
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to Enable ActiveSync for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
}

$disableActiveSyncForAllUsersToolStripMenuItem_Click={
	Try
	{
		
		
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Disabling ActiveSync for all users..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize Unlimited | Set-CASMailbox -ActiveSyncEnabled `$False"
		Get-Mailbox -ResultSize Unlimited | Set-CASMailbox -ActiveSyncEnabled $False
		$TextboxResults.Text = Get-Mailbox -ResultSize Unlimited | Get-CASMailbox | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
		
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$enableActiveSyncForAllUsersToolStripMenuItem_Click={
	Try
	{
		
		
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Enabling ActiveSync for all users..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize Unlimited | Set-CASMailbox -ActiveSyncEnabled `$True"
		Get-Mailbox -ResultSize Unlimited | Set-CASMailbox -ActiveSyncEnabled $True
		$TextboxResults.Text = Get-Mailbox -ResultSize Unlimited | Get-CASMailbox | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
		
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getIMAPStatusForAUserToolStripMenuItem_Click={
	Do
	{
		Try
		{
			#$ResetPasswordUser = Read-Host "Enter the UPN of the user you want to reset the password for"
			$SelectUsersFormText = "Select the User you want to get the IMAP status for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPNrpp = $SelectUsersForm_comboboxUsers
			$GlobalUPNrpp = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$GlobalUPNrpp)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			
			Else
			{
				
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting the IMAP status for $GlobalUPNrpp..."
				$textboxDetails.Text = "Get-CASMailbox $GlobalUPNrpp | Select-Object Name, ImapEnabled"
				$TextboxResults.Text = Get-CASMailbox $GlobalUPNrpp | Select-Object Name, ImapEnabled | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
				
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get the IMAP status for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
}

$disableIMAPForAUserToolStripMenuItem_Click={
	Do
	{
		Try
		{
			#$ResetPasswordUser = Read-Host "Enter the UPN of the user you want to reset the password for"
			$SelectUsersFormText = "Select the User you want to disable IMAP for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPNrpp = $SelectUsersForm_comboboxUsers
			$GlobalUPNrpp = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$GlobalUPNrpp)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			
			Else
			{
				
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Disabling IMAP for $GlobalUPNrpp..."
				$textboxDetails.Text = "Set-CASMailbox $GlobalUPNrpp -ImapEnabled `$False"
				Set-CASMailbox $GlobalUPNrpp -ImapEnabled $False
				$TextboxResults.Text = Get-CASMailbox $GlobalUPNrpp | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
				
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to disable IMAP for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
	
}

$enableIMAPForAUserToolStripMenuItem_Click={
	Do
	{
		Try
		{
			#$ResetPasswordUser = Read-Host "Enter the UPN of the user you want to reset the password for"
			$SelectUsersFormText = "Select the User you want to enable IMAP for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPNrpp = $SelectUsersForm_comboboxUsers
			$GlobalUPNrpp = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$GlobalUPNrpp)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			
			Else
			{
				
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Disabling IMAP for $GlobalUPNrpp..."
				$textboxDetails.Text = "Set-CASMailbox $GlobalUPNrpp -ImapEnabled `$True"
				Set-CASMailbox $GlobalUPNrpp -ImapEnabled $True
				$TextboxResults.Text = Get-CASMailbox $GlobalUPNrpp | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
				
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to enable IMAP for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
}

$disableIMAPForAllUsersToolStripMenuItem_Click={
	Try
	{
		
		
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Disabling IMAP for all users..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize Unlimited | Set-CASMailbox -ImapEnabled `$False"
		Get-Mailbox -ResultSize Unlimited | Set-CASMailbox -ImapEnabled $False
		$TextboxResults.Text = Get-Mailbox -ResultSize Unlimited | Get-CASMailbox | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
		
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$enableIMAPForAllUsersToolStripMenuItem_Click={
	Try
	{
		
		
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Enabling IMAP for all users..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize Unlimited | Set-CASMailbox -ImapEnabled `$True"
		Get-Mailbox -ResultSize Unlimited | Set-CASMailbox -ImapEnabled $True
		$TextboxResults.Text = Get-Mailbox -ResultSize Unlimited | Get-CASMailbox | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
		
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getOutlookWebAccessStatusForAUserToolStripMenuItem_Click={
	Do
	{
		Try
		{
			#$ResetPasswordUser = Read-Host "Enter the UPN of the user you want to reset the password for"
			$SelectUsersFormText = "Select the User you want to get the Outlook Web Access status for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPNrpp = $SelectUsersForm_comboboxUsers
			$GlobalUPNrpp = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$GlobalUPNrpp)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			
			Else
			{
				
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting the Outlook Web Access status for $GlobalUPNrpp..."
				$textboxDetails.Text = "Get-CASMailbox $GlobalUPNrpp | Select-Object Name, OWAEnabled "
				$TextboxResults.Text = Get-CASMailbox $GlobalUPNrpp | Select-Object Name, OWAEnabled | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
				
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get the Outlook Web Access status for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
}

$disableOutlookWebAccessForAUserToolStripMenuItem_Click={
	Do
	{
		Try
		{
			#$ResetPasswordUser = Read-Host "Enter the UPN of the user you want to reset the password for"
			$SelectUsersFormText = "Select the User you want to disable Outlook Web Access for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPNrpp = $SelectUsersForm_comboboxUsers
			$GlobalUPNrpp = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$GlobalUPNrpp)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			
			Else
			{
				
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Disabling Outlook Web Access for $GlobalUPNrpp..."
				$textboxDetails.Text = "Set-CASMailbox $GlobalUPNrpp -OWAEnabled `$False"
				Set-CASMailbox $GlobalUPNrpp -OWAEnabled $False
				$TextboxResults.Text = Get-CASMailbox $GlobalUPNrpp | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
				
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to disable Outlook Web Acccess for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
}

$enableOutlookWebAccessForAUserToolStripMenuItem_Click={
	Do
	{
		Try
		{
			#$ResetPasswordUser = Read-Host "Enter the UPN of the user you want to reset the password for"
			$SelectUsersFormText = "Select the User you want to enable Outlook Web Access for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPNrpp = $SelectUsersForm_comboboxUsers
			$GlobalUPNrpp = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$GlobalUPNrpp)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			
			Else
			{
				
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Enabling Outlook Web Access for $GlobalUPNrpp..."
				$textboxDetails.Text = "Set-CASMailbox $GlobalUPNrpp -OWAEnabled `$True"
				Set-CASMailbox $GlobalUPNrpp -OWAEnabled $True
				$TextboxResults.Text = Get-CASMailbox $GlobalUPNrpp | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
				
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to True Outlook Web Acccess for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
}

$disableOutlookWebAccessForAllUsersToolStripMenuItem_Click={
	Try
	{
		
		
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Disabling Outlook Web Access for all users..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize Unlimited | Set-CASMailbox -OWAEnabled `$False"
		Get-Mailbox -ResultSize Unlimited | Set-CASMailbox -OWAEnabled $False
		$TextboxResults.Text = Get-Mailbox -ResultSize Unlimited | Get-CASMailbox | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
		
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$enableOutlookWebAccessForAllUsersToolStripMenuItem_Click={
	Try
	{
		
		
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Enabling Outlook Web Access for all users..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize Unlimited | Set-CASMailbox -OWAEnabled `$True"
		Get-Mailbox -ResultSize Unlimited | Set-CASMailbox -OWAEnabled $True
		$TextboxResults.Text = Get-Mailbox -ResultSize Unlimited | Get-CASMailbox | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
		
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getPOPStatusForAUserToolStripMenuItem_Click={
	Do
	{
		Try
		{
			#$ResetPasswordUser = Read-Host "Enter the UPN of the user you want to reset the password for"
			$SelectUsersFormText = "Select the User you want to get the POP status for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPNrpp = $SelectUsersForm_comboboxUsers
			$GlobalUPNrpp = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$GlobalUPNrpp)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			
			Else
			{
				
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Getting the POP status for $GlobalUPNrpp..."
				$textboxDetails.Text = "Get-CASMailbox $GlobalUPNrpp | Select-Object Name, PopEnabled "
				$TextboxResults.Text = Get-CASMailbox $GlobalUPNrpp | Select-Object Name, PopEnabled | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
				
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to get the POP status for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
	
}

$disablePOPForAUserToolStripMenuItem_Click={
	Do
	{
		Try
		{
			#$ResetPasswordUser = Read-Host "Enter the UPN of the user you want to reset the password for"
			$SelectUsersFormText = "Select the User you want to disable POP for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPNrpp = $SelectUsersForm_comboboxUsers
			$GlobalUPNrpp = $SelectCachedUserPrincipalName_comboboxUPN
			If (!$GlobalUPNrpp)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User was selected, please select a User", "Error")
			}
			
			Else
			{
				
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Disabling POP for $GlobalUPNrpp..."
				$textboxDetails.Text = "Set-CASMailbox $GlobalUPNrpp -PopEnabled `$False"
				Set-CASMailbox $GlobalUPNrpp -PopEnabled $False
				$TextboxResults.Text = Get-CASMailbox $GlobalUPNrpp | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
				
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$textboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to disable POP for another User?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
	
}

$enablePOPForAUserToolStripMenuItem_Click={
	Try
	{
		
		
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Enabling POP for all users..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize Unlimited | Set-CASMailbox -PopEnabled `$True"
		Get-Mailbox -ResultSize Unlimited | Set-CASMailbox -PopEnabled $True
		$TextboxResults.Text = Get-Mailbox -ResultSize Unlimited | Get-CASMailbox | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
		
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$disablePOPForAllUsersToolStripMenuItem_Click={
	Try
	{
		
		
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Disabling POP for all users..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize Unlimited | Set-CASMailbox -PopEnabled `$False"
		Get-Mailbox -ResultSize Unlimited | Set-CASMailbox -PopEnabled $False
		$TextboxResults.Text = Get-Mailbox -ResultSize Unlimited | Get-CASMailbox | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
		
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$clearAllUsersImmutableIDToolStripMenuItem_Click={
	Try
	{
		$OUTPUT = [System.Windows.Forms.MessageBox]::Show("Are you sure you want to clear all users ImmutableID?.", "Warning!", 4)
		If ($OUTPUT -eq "YES")
		{
			
			#What to do if connected to main o365 account
			If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Clearing all users ImmutableID..."
				$textboxDetails.Text = "Get-MSOLUser -All | Set-MSOLUser -ImmutableID '`$Null'"
				Get-MSOLUser -All | Set-MSOLUser -ImmutableID "$Null"
				$TextboxResults.Text = Get-MsolUser -All | Select-Object DisplayName, ImmutableID | Sort-Object DisplayName | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			#What to do if connected to partner account
			ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
			{
				$TenantText = $PartnerComboBox.text
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Clearing all users ImmutableID..."
				$textboxDetails.Text = "Get-MSOLUser -TenantId $TenantText -All | Set-MSOLUser -TenantId $TenantText -ImmutableID '`$Null'"
				Get-MSOLUser -TenantId $PartnerComboBox.SelectedItem.TenantID -All | Set-MSOLUser -TenantId $PartnerComboBox.SelectedItem.TenantID -ImmutableID "$Null"
				$TextboxResults.Text = Get-MsolUser -TenantId $PartnerComboBox.SelectedItem.TenantID -All | Select-Object DisplayName, ImmutableID | Sort-Object DisplayName | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Clearing all users ImmutableID..."
				$textboxDetails.Text = "Get-MSOLUser -All | Set-MSOLUser -ImmutableID '`$Null'"
				Get-MSOLUser -All | Set-MSOLUser -ImmutableID "$Null"
				$TextboxResults.Text = Get-MsolUser -All | Select-Object DisplayName, ImmutableID | Sort-Object DisplayName | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Else
		{
			[System.Windows.Forms.MessageBox]::Show("All users ImmutableID has not been changed", "Info")
		}
	}
	
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
	
}

$getAllUsersWith2FAEnabledToolStripMenuItem_Click = {
	Try
	{
		
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all users with 2FA enabled..."
			$textboxDetails.Text = "Get-MsolUser | Where-Object { `$_.StrongAuthenticationRequirements -like ' * ' } | Select-Object UserPrincipalName, StrongAuthenticationMethods, StrongAuthenticationRequirements "
			#Find all MFA enabled users
			$TextboxResults.Text = Get-MsolUser -All | Where-Object { $_.StrongAuthenticationRequirements -like "*" } | Select-Object UserPrincipalName, StrongAuthenticationMethods, StrongAuthenticationRequirements | Sort-Object UserPrincipalName | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all users with 2FA enabled..."
			$textboxDetails.Text = "Get-MsolUser | Where-Object { `$_.StrongAuthenticationRequirements -like ' * ' } | Select-Object UserPrincipalName, StrongAuthenticationMethods, StrongAuthenticationRequirements "
			#Find all MFA enabled users
			$TextboxResults.Text = Get-MsolUser -All -TenantId $PartnerComboBox.SelectedItem.TenantID | Where-Object { $_.StrongAuthenticationRequirements -like "*" } | Select-Object UserPrincipalName, StrongAuthenticationMethods, StrongAuthenticationRequirements | Sort-Object UserPrincipalName | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all users with 2FA enabled..."
			$textboxDetails.Text = "Get-MsolUser | Where-Object { `$_.StrongAuthenticationRequirements -like ' * ' } | Select-Object UserPrincipalName, StrongAuthenticationMethods, StrongAuthenticationRequirements "
			#Find all MFA enabled users
			$TextboxResults.Text = Get-MsolUser -All | Where-Object { $_.StrongAuthenticationRequirements -like "*" } | Select-Object UserPrincipalName, StrongAuthenticationMethods, StrongAuthenticationRequirements | Sort-Object UserPrincipalName | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		
		
		
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
	
}

$getAllUsersWith2FADisabledToolStripMenuItem_Click={
	Try
	{
		
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all users with 2FA disabled..."
			$textboxDetails.Text = "Get-MsolUser -All | Where-Object { `$_.StrongAuthenticationMethods -like ' * ' } | Select-Object UserPrincipalName, StrongAuthenticationMethods, StrongAuthenticationRequirements "
			#Find all MFA enabled users
			$TextboxResults.Text = Get-MsolUser -All | Where-Object { $_.StrongAuthenticationMethods -like "*" } | Select-Object UserPrincipalName, StrongAuthenticationMethods, StrongAuthenticationRequirements | Sort-Object UserPrincipalName | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all users with 2FA disabled..."
			$textboxDetails.Text = "Get-MsolUser -All | Where-Object { `$_.StrongAuthenticationMethods -like ' * ' } | Select-Object UserPrincipalName, StrongAuthenticationMethods, StrongAuthenticationRequirements "
			#Find all MFA enabled users
			$TextboxResults.Text = Get-MsolUser -All -TenantId $PartnerComboBox.SelectedItem.TenantID | Where-Object { $_.StrongAuthenticationMethods -like "*" } | Select-Object UserPrincipalName, StrongAuthenticationMethods, StrongAuthenticationRequirements | Sort-Object UserPrincipalName | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all users with 2FA disabled..."
			$textboxDetails.Text = "Get-MsolUser -All | Where-Object { `$_.StrongAuthenticationMethods -like ' * ' } | Select-Object UserPrincipalName, StrongAuthenticationMethods, StrongAuthenticationRequirements "
			#Find all MFA enabled users
			$TextboxResults.Text = Get-MsolUser -All | Where-Object { $_.StrongAuthenticationMethods -like "*" } | Select-Object UserPrincipalName, StrongAuthenticationMethods, StrongAuthenticationRequirements | Sort-Object UserPrincipalName | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		
		
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$enableCachedCredentialsToolStripMenuItem_Click={
	Try
	{
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name CredMem -Value 1 -Force | Out-Null
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("Cached Credentials have been enabled", "Info")
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getLastDirSyncTimeToolStripMenuItem_Click={
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting last DirSync time..."
			$textboxDetails.Text = "Get-MsolCompanyInformation | Format-List LastDirSyncTime"
			$TextboxResults.Text = Get-MsolCompanyInformation | Format-List LastDirSyncTime | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting last DirSync time..."
			$textboxDetails.Text = "Get-MsolCompanyInformation -TenantId $TenantText | Format-List LastDirSyncTime"
			$TextboxResults.Text = Get-MsolCompanyInformation -TenantId $PartnerComboBox.SelectedItem.TenantID | Format-List LastDirSyncTime | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting last DirSync time..."
			$textboxDetails.Text = "Get-MsolCompanyInformation | Format-List LastDirSyncTime"
			$TextboxResults.Text = Get-MsolCompanyInformation | Format-List LastDirSyncTime | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getDirSyncServiceAccountToolStripMenuItem_Click={
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting DirSync service account..."
			$textboxDetails.Text = "Get-MsolCompanyInformation | Format-List DirSyncServiceAccount"
			$TextboxResults.Text = Get-MsolCompanyInformation | Format-List DirSyncServiceAccount | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting DirSync service account..."
			$textboxDetails.Text = "Get-MsolCompanyInformation -TenantId $TenantText | Format-List DirSyncServiceAccount"
			$TextboxResults.Text = Get-MsolCompanyInformation -TenantId $PartnerComboBox.SelectedItem.TenantID | Format-List DirSyncServiceAccount | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting DirSync service account..."
			$textboxDetails.Text = "Get-MsolCompanyInformation | Format-List DirSyncServiceAccount"
			$TextboxResults.Text = Get-MsolCompanyInformation | Format-List DirSyncServiceAccount | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$enableDirSyncTenantWideToolStripMenuItem_Click={
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Enabling DirSync..."
			$textboxDetails.Text = "Set-MsolDirSyncEnabled -EnableDirSync `$True"
			$TextboxResults.Text = Set-MsolDirSyncEnabled -EnableDirSync $True | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Enabling DirSync..."
			$textboxDetails.Text = "Set-MsolDirSyncEnabled -TenantId $TenantText -EnableDirSync `$True"
			$TextboxResults.Text = Set-MsolDirSyncEnabled -TenantId $PartnerComboBox.SelectedItem.TenantID -EnableDirSync $True | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Disabling DirSync..."
			$textboxDetails.Text = "Set-MsolDirSyncEnabled -EnableDirSync `$True"
			$TextboxResults.Text = Set-MsolDirSyncEnabled -EnableDirSync $True | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$disableDirSyncTenantWideToolStripMenuItem_Click={
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Disabling DirSync..."
			$textboxDetails.Text = "Set-MsolDirSyncEnabled -EnableDirSync `$False"
			$TextboxResults.Text = Set-MsolDirSyncEnabled -EnableDirSync $False | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Disabling DirSync..."
			$textboxDetails.Text = "Set-MsolDirSyncEnabled -TenantId $TenantText -EnableDirSync `$False"
			$TextboxResults.Text = Set-MsolDirSyncEnabled -TenantId $PartnerComboBox.SelectedItem.TenantID -EnableDirSync $False  | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Disabling DirSync..."
			$textboxDetails.Text = "Set-MsolDirSyncEnabled -EnableDirSync `$False"
			$TextboxResults.Text = Set-MsolDirSyncEnabled -EnableDirSync $False | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getLastPasswordSyncTimeToolStripMenuItem1_Click={
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting last Password Sync time..."
			$textboxDetails.Text = "Get-MsolCompanyInformation | Format-List LastPasswordSyncTime "
			$TextboxResults.Text = Get-MsolCompanyInformation | Format-List LastPasswordSyncTime  | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting last Password time..."
			$textboxDetails.Text = "Get-MsolCompanyInformation -TenantId $TenantText | Format-List LastPasswordSyncTime"
			$TextboxResults.Text = Get-MsolCompanyInformation -TenantId $PartnerComboBox.SelectedItem.TenantID | Format-List LastPasswordSyncTime  | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting last Password time..."
			$textboxDetails.Text = "Get-MsolCompanyInformation | Format-List LastPasswordSyncTime "
			$TextboxResults.Text = Get-MsolCompanyInformation | Format-List LastPasswordSyncTime  | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
	
}

$getDirSyncStatusToolStripMenuItem_Click={
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting Password Sync Status..."
			$textboxDetails.Text = "Get-MsolCompanyInformation | Format-List PasswordSynchronizationEnabled "
			$TextboxResults.Text = Get-MsolCompanyInformation | Format-List PasswordSynchronizationEnabled | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting Password Sync Status..."
			$textboxDetails.Text = "Get-MsolCompanyInformation -TenantId $TenantText | Format-List PasswordSynchronizationEnabled"
			$TextboxResults.Text = Get-MsolCompanyInformation -TenantId $PartnerComboBox.SelectedItem.TenantID | Format-List PasswordSynchronizationEnabled | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting Password Sync Status..."
			$textboxDetails.Text = "Get-MsolCompanyInformation | Format-List PasswordSynchronizationEnabled "
			$TextboxResults.Text = Get-MsolCompanyInformation | Format-List PasswordSynchronizationEnabled| Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getPasswordSyncStatusToolStripMenuItem_Click={
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting DirSync Status..."
			$textboxDetails.Text = "Get-MsolCompanyInformation | Format-List DirectorySynchronizationEnabled"
			$TextboxResults.Text = Get-MsolCompanyInformation | Format-List DirectorySynchronizationEnabled | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting Password Sync Status..."
			$textboxDetails.Text = "Get-MsolCompanyInformation -TenantId $TenantText | Format-List DirectorySynchronizationEnabled"
			$TextboxResults.Text = Get-MsolCompanyInformation -TenantId $PartnerComboBox.SelectedItem.TenantID | Format-List DirectorySynchronizationEnabled | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting Password Sync Status..."
			$textboxDetails.Text = "Get-MsolCompanyInformation | Format-List DirectorySynchronizationEnabled"
			$TextboxResults.Text = Get-MsolCompanyInformation | Format-List DirectorySynchronizationEnabled | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getDirSyncErrorsToolStripMenuItem_Click={
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting DirSync Errors..."
			$textboxDetails.Text = "Get-MsolDirSyncProvisioningError"
			$TextboxResults.Text = Get-MsolDirSyncProvisioningError | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting DirSync Errors..."
			$textboxDetails.Text = "Get-MsolDirSyncProvisioningError -TenantId $TenantText"
			$TextboxResults.Text = Get-MsolDirSyncProvisioningError -TenantId $PartnerComboBox.SelectedItem.TenantID | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting DirSync Errors..."
			$textboxDetails.Text = "Get-MsolDirSyncProvisioningError"
			$TextboxResults.Text = Get-MsolDirSyncProvisioningError | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getPartnerInformationToolStripMenuItem_Click={
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting Partner Information..."
			$textboxDetails.Text = "Get-MsolPartnerInformation"
			$TextboxResults.Text = Get-MsolPartnerInformation | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting Partner Information..."
			$textboxDetails.Text = "Get-MsolPartnerInformation -TenantId $TenantText"
			$TextboxResults.Text = Get-MsolPartnerInformation -TenantId $PartnerComboBox.SelectedItem.TenantID | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting Partner Information..."
			$textboxDetails.Text = "Get-MsolPartnerInformation"
			$TextboxResults.Text = Get-MsolPartnerInformation | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}



$setNewCachedCredentialsToolStripMenuItem_Click = {
	Try
	{
		$global:o365credentials = (Get-Credential -Message "Please enter your Office 365 credentials")
		$TempDir = $env:temp
		$O365AdminTempFolderCreds = ("$TempDir" + "\O365AdminCenter_Creds")
		#Create temporary directory
		#[system.io.directory]::CreateDirectory("$O365AdminTempFolderCreds")
		$global:o365credentials | Export-Clixml -path $O365AdminTempFolderCreds\Creds.xml -Force
		Get-Item 'HKCU:\Software\O365 Admin Center' | New-ItemProperty -Name CredMem -Value 1 -Force | Out-Null
		[System.Windows.Forms.MessageBox]::Show("The new credentials have been saved!", "Info", "OK", "Info")
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$getAllGlobalAdminsToolStripMenuItem_Click = {
	$Role = "Company Administrators"
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$O365ROLE = Get-MsolRole -RoleName "Company Administrator"
			$TextboxResults.Text = "Getting All $Role..."
			$textboxDetails.Text = "`$O365ROLE = Get-MsolRole -RoleName 'Company Administrator'
Get-MsolRoleMember -All -RoleObjectId `$O365ROLE.ObjectId"
			$TextboxResults.Text = Get-MsolRoleMember -All -RoleObjectId $O365ROLE.ObjectId | Out-String -Width 2147483647
			
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$O365ROLE = Get-MsolRole -TenantId $PartnerComboBox.SelectedItem.TenantID -RoleName "Company Administrator"
			$TextboxResults.Text = "Getting All $Role..."
			$textboxDetails.Text = "`$O365ROLE = Get-MsolRole -RoleName 'Company Administrator'
Get-MsolRoleMember -All -RoleObjectId `$O365ROLE.ObjectId"
			$TextboxResults.Text = Get-MsolRoleMember -TenantId $PartnerComboBox.SelectedItem.TenantID -All -RoleObjectId $O365ROLE.ObjectId | Out-String -Width 2147483647
			
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$O365ROLE = Get-MsolRole -RoleName "Company Administrator"
			$TextboxResults.Text = "Getting All $Role..."
			$textboxDetails.Text = "`$O365ROLE = Get-MsolRole -RoleName 'Company Administrator'
Get-MsolRoleMember -All -RoleObjectId `$O365ROLE.ObjectId"
			$TextboxResults.Text = Get-MsolRoleMember -All -RoleObjectId $O365ROLE.ObjectId | Out-String -Width 2147483647
			
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
	
}

$getAllComplianceAdministratorsToolStripMenuItem_Click={
	$Role = "Compliance Administrators"
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$O365ROLE = Get-MsolRole -RoleName "Compliance Administrator"
			$TextboxResults.Text = "Getting All $Role..."
			$textboxDetails.Text = "`$O365ROLE = Get-MsolRole -RoleName 'Compliance Administrator'
Get-MsolRoleMember -All -RoleObjectId `$O365ROLE.ObjectId"
			$TextboxResults.Text = Get-MsolRoleMember -All -RoleObjectId $O365ROLE.ObjectId | Out-String -Width 2147483647
			
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$O365ROLE = Get-MsolRole -TenantId $PartnerComboBox.SelectedItem.TenantID -RoleName "Compliance Administrator"
			$TextboxResults.Text = "Getting All $Role..."
			$textboxDetails.Text = "`$O365ROLE = Get-MsolRole -RoleName 'Compliance Administrator'
Get-MsolRoleMember -All -RoleObjectId `$O365ROLE.ObjectId"
			$TextboxResults.Text = Get-MsolRoleMember -TenantId $PartnerComboBox.SelectedItem.TenantID -All -RoleObjectId $O365ROLE.ObjectId | Out-String -Width 2147483647
			
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$O365ROLE = Get-MsolRole -RoleName "Compliance Administrator"
			$TextboxResults.Text = "Getting All $Role..."
			$textboxDetails.Text = "`$O365ROLE = Get-MsolRole -RoleName 'Compliance Administrator'
Get-MsolRoleMember -All -RoleObjectId `$O365ROLE.ObjectId"
			$TextboxResults.Text = Get-MsolRoleMember -All -RoleObjectId $O365ROLE.ObjectId | Out-String -Width 2147483647
			
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getAllExchangeServiceAdministratorsToolStripMenuItem_Click={
	$Role = "Exchange Service Administrators"
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$O365ROLE = Get-MsolRole -RoleName "Exchange Service Administrator"
			$TextboxResults.Text = "Getting All $Role..."
			$textboxDetails.Text = "`$O365ROLE = Get-MsolRole -RoleName 'Exchange Service Administrator'
Get-MsolRoleMember -All -RoleObjectId `$O365ROLE.ObjectId"
			$TextboxResults.Text = Get-MsolRoleMember -All -RoleObjectId $O365ROLE.ObjectId | Out-String -Width 2147483647
			
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$O365ROLE = Get-MsolRole -TenantId $PartnerComboBox.SelectedItem.TenantID -RoleName "Exchange Service Administrator"
			$TextboxResults.Text = "Getting All $Role..."
			$textboxDetails.Text = "`$O365ROLE = Get-MsolRole -RoleName 'Exchange Service Administrator'
Get-MsolRoleMember -All -RoleObjectId `$O365ROLE.ObjectId"
			$TextboxResults.Text = Get-MsolRoleMember -TenantId $PartnerComboBox.SelectedItem.TenantID -All -RoleObjectId $O365ROLE.ObjectId | Out-String -Width 2147483647
			
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$O365ROLE = Get-MsolRole -RoleName "Exchange Service Administrator"
			$TextboxResults.Text = "Getting All $Role..."
			$textboxDetails.Text = "`$O365ROLE = Get-MsolRole -RoleName 'Exchange Service Administrator'
Get-MsolRoleMember -All -RoleObjectId `$O365ROLE.ObjectId"
			$TextboxResults.Text = Get-MsolRoleMember -All -RoleObjectId $O365ROLE.ObjectId | Out-String -Width 2147483647
			
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getAllHelpdeskAdministratorsToolStripMenuItem_Click={
	$Role = "Helpdesk Administrators"
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$O365ROLE = Get-MsolRole -RoleName "Helpdesk Administrator"
			$TextboxResults.Text = "Getting All $Role..."
			$textboxDetails.Text = "`$O365ROLE = Get-MsolRole -RoleName 'Helpdesk Administrator'
Get-MsolRoleMember -All -RoleObjectId `$O365ROLE.ObjectId"
			$TextboxResults.Text = Get-MsolRoleMember -All -RoleObjectId $O365ROLE.ObjectId | Out-String -Width 2147483647
			
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$O365ROLE = Get-MsolRole -TenantId $PartnerComboBox.SelectedItem.TenantID -RoleName "Helpdesk Administrator"
			$TextboxResults.Text = "Getting All $Role..."
			$textboxDetails.Text = "`$O365ROLE = Get-MsolRole -RoleName 'Helpdesk Administrator'
Get-MsolRoleMember -All -RoleObjectId `$O365ROLE.ObjectId"
			$TextboxResults.Text = Get-MsolRoleMember -TenantId $PartnerComboBox.SelectedItem.TenantID -All -RoleObjectId $O365ROLE.ObjectId | Out-String -Width 2147483647
			
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$O365ROLE = Get-MsolRole -RoleName "Helpdesk Administrator"
			$TextboxResults.Text = "Getting All $Role..."
			$textboxDetails.Text = "`$O365ROLE = Get-MsolRole -RoleName 'Helpdesk Administrator'
Get-MsolRoleMember -All -RoleObjectId `$O365ROLE.ObjectId"
			$TextboxResults.Text = Get-MsolRoleMember -All -RoleObjectId $O365ROLE.ObjectId | Out-String -Width 2147483647
			
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getAllDeviceUsersToolStripMenuItem_Click={
	$Role = "Device Users"
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$O365ROLE = Get-MsolRole -RoleName "Device Users"
			$TextboxResults.Text = "Getting All $Role..."
			$textboxDetails.Text = "`$O365ROLE = Get-MsolRole -RoleName 'Device Users'
Get-MsolRoleMember -All -RoleObjectId `$O365ROLE.ObjectId"
			$TextboxResults.Text = Get-MsolRoleMember -All -RoleObjectId $O365ROLE.ObjectId | Out-String -Width 2147483647
			
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$O365ROLE = Get-MsolRole -TenantId $PartnerComboBox.SelectedItem.TenantID -RoleName "Device Users"
			$TextboxResults.Text = "Getting All $Role..."
			$textboxDetails.Text = "`$O365ROLE = Get-MsolRole -RoleName 'Device Users'
Get-MsolRoleMember -All -RoleObjectId `$O365ROLE.ObjectId"
			$TextboxResults.Text = Get-MsolRoleMember -TenantId $PartnerComboBox.SelectedItem.TenantID -All -RoleObjectId $O365ROLE.ObjectId | Out-String -Width 2147483647
			
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$O365ROLE = Get-MsolRole -RoleName "Device Users"
			$TextboxResults.Text = "Getting All $Role..."
			$textboxDetails.Text = "`$O365ROLE = Get-MsolRole -RoleName 'Device Users'
Get-MsolRoleMember -All -RoleObjectId `$O365ROLE.ObjectId"
			$TextboxResults.Text = Get-MsolRoleMember -All -RoleObjectId $O365ROLE.ObjectId | Out-String -Width 2147483647
			
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getAllSharePointServiceAdministratorsToolStripMenuItem_Click={
	$Role = "SharePoint Service Administrators"
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$O365ROLE = Get-MsolRole -RoleName "SharePoint Service Administrator"
			$TextboxResults.Text = "Getting All $Role..."
			$textboxDetails.Text = "`$O365ROLE = Get-MsolRole -RoleName 'SharePoint Service Administrator'
Get-MsolRoleMember -All -RoleObjectId `$O365ROLE.ObjectId"
			$TextboxResults.Text = Get-MsolRoleMember -All -RoleObjectId $O365ROLE.ObjectId | Out-String -Width 2147483647
			
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$O365ROLE = Get-MsolRole -TenantId $PartnerComboBox.SelectedItem.TenantID -RoleName "SharePoint Service Administrator"
			$TextboxResults.Text = "Getting All $Role..."
			$textboxDetails.Text = "`$O365ROLE = Get-MsolRole -RoleName 'SharePoint Service Administrator'
Get-MsolRoleMember -All -RoleObjectId `$O365ROLE.ObjectId"
			$TextboxResults.Text = Get-MsolRoleMember -TenantId $PartnerComboBox.SelectedItem.TenantID -All -RoleObjectId $O365ROLE.ObjectId | Out-String -Width 2147483647
			
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$O365ROLE = Get-MsolRole -RoleName "SharePoint Service Administrator"
			$TextboxResults.Text = "Getting All $Role..."
			$textboxDetails.Text = "`$O365ROLE = Get-MsolRole -RoleName 'SharePoint Service Administrator'
Get-MsolRoleMember -All -RoleObjectId `$O365ROLE.ObjectId"
			$TextboxResults.Text = Get-MsolRoleMember -All -RoleObjectId $O365ROLE.ObjectId | Out-String -Width 2147483647
			
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getAllUserAccountAdministratorsToolStripMenuItem_Click={
	$Role = "User Account Administrators"
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$O365ROLE = Get-MsolRole -RoleName "User Account Administrator"
			$TextboxResults.Text = "Getting All $Role..."
			$textboxDetails.Text = "`$O365ROLE = Get-MsolRole -RoleName 'User Account Administrator'
Get-MsolRoleMember -All -RoleObjectId `$O365ROLE.ObjectId"
			$TextboxResults.Text = Get-MsolRoleMember -All -RoleObjectId $O365ROLE.ObjectId | Out-String -Width 2147483647
			
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$O365ROLE = Get-MsolRole -TenantId $PartnerComboBox.SelectedItem.TenantID -RoleName "User Account Administrator"
			$TextboxResults.Text = "Getting All $Role..."
			$textboxDetails.Text = "`$O365ROLE = Get-MsolRole -RoleName 'User Account Administrator'
Get-MsolRoleMember -All -RoleObjectId `$O365ROLE.ObjectId"
			$TextboxResults.Text = Get-MsolRoleMember -TenantId $PartnerComboBox.SelectedItem.TenantID -All -RoleObjectId $O365ROLE.ObjectId | Out-String -Width 2147483647
			
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$O365ROLE = Get-MsolRole -RoleName "User Account Administrator"
			$TextboxResults.Text = "Getting All $Role..."
			$textboxDetails.Text = "`$O365ROLE = Get-MsolRole -RoleName 'User Account Administrator'
Get-MsolRoleMember -All -RoleObjectId `$O365ROLE.ObjectId"
			$TextboxResults.Text = Get-MsolRoleMember -All -RoleObjectId $O365ROLE.ObjectId | Out-String -Width 2147483647
			
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$disable2FAForAUserToolStripMenuItem_Click = {

	
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$SelectUsersFormText = "Select the User you want to disable Second-Factor Authentication for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPN = $SelectUsersForm_comboboxUsers
			$GlobalUPN = $SelectCachedUserPrincipalName_comboboxUPN
			
			$mfa = @()
			
			$TextboxResults.Text = "Disabling 2FA for $GlobalUPN..."
			$textboxDetails.Text = "`$mfa = @()
Set-MsolUser -UserPrincipalName $GlobalUPN -StrongAuthenticationRequirements `$mfa "
			$TextboxResults.Text = Set-MsolUser -UserPrincipalName $GlobalUPN -StrongAuthenticationRequirements $mfa | Out-String -Width 2147483647
			$TextboxResults.Text = Get-MsolUser -All | Select-Object DisplayName, StrongAuthenticationMethods, StrongAuthenticationRequirements | Sort-Object DisplayName | Format-Table -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$SelectUsersFormText = "Select the User you want to disable Second-Factor Authentication for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPN = $SelectUsersForm_comboboxUsers
			$GlobalUPN = $SelectCachedUserPrincipalName_comboboxUPN
			
			$mfa = @()
			
			$TextboxResults.Text = "Disabling 2FA for $GlobalUPN..."
			$textboxDetails.Text = "`$mfa = @()
Set-MsolUser -TenantId $TenantText -UserPrincipalName $GlobalUPN -StrongAuthenticationRequirements `$mfa "
			$TextboxResults.Text = Set-MsolUser -TenantId $PartnerComboBox.SelectedItem.TenantID -UserPrincipalName $GlobalUPN -StrongAuthenticationRequirements $mfa | Out-String -Width 2147483647
			$TextboxResults.Text = Get-MsolUser -All -TenantId $PartnerComboBox.SelectedItem.TenantID| Select-Object DisplayName, StrongAuthenticationMethods, StrongAuthenticationRequirements | Sort-Object DisplayName | Format-Table -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
			
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$SelectUsersFormText = "Select the User you want to disable Second-Factor Authentication for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPN = $SelectUsersForm_comboboxUsers
			$GlobalUPN = $SelectCachedUserPrincipalName_comboboxUPN
			
			$mfa = @()
			
			$TextboxResults.Text = "Disabling 2FA for $GlobalUPN..."
			$textboxDetails.Text = "`$mfa = @()
Set-MsolUser -UserPrincipalName $GlobalUPN -StrongAuthenticationRequirements `$mfa "
			$TextboxResults.Text = Set-MsolUser -UserPrincipalName $GlobalUPN -StrongAuthenticationRequirements $mfa | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getAllUsers2FAStatusToolStripMenuItem_Click={
	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all users 2FA status..."
			$textboxDetails.Text = "Get-MsolUser -All | Select-Object DisplayName, StrongAuthenticationMethods, StrongAuthenticationRequirements | Sort-Object DisplayName | Format-Table -AutoSize"
			$TextboxResults.Text = Get-MsolUser -All | Select-Object DisplayName, StrongAuthenticationMethods, StrongAuthenticationRequirements | Sort-Object DisplayName | Format-Table -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all users 2FA status..."
			$textboxDetails.Text = "Get-MsolUser -All -TenantId $TenantText | Select-Object DisplayName, StrongAuthenticationMethods, StrongAuthenticationRequirements | Sort-Object DisplayName | Format-Table -AutoSize"
			$TextboxResults.Text = Get-MsolUser -All -TenantId $PartnerComboBox.SelectedItem.TenantID | Select-Object DisplayName, StrongAuthenticationMethods, StrongAuthenticationRequirements | Sort-Object DisplayName | Format-Table -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
			
		}
		Else
		{
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			$TextboxResults.Text = "Getting all users 2FA status..."
			$textboxDetails.Text = "Get-MsolUser -All | Select-Object DisplayName, StrongAuthenticationMethods, StrongAuthenticationRequirements | Sort-Object DisplayName | Format-Table -AutoSize"
			$TextboxResults.Text = Get-MsolUser -All | Select-Object DisplayName, StrongAuthenticationMethods, StrongAuthenticationRequirements | Sort-Object DisplayName | Format-Table -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$enable2FAForAUserToolStripMenuItem_Click={

	Try
	{
		#What to do if connected to main o365 account
		If (Get-PSSession -name mainaccount -ErrorAction SilentlyContinue)
		{
			#Create the StrongAuthenticationRequirement object and insert required settings
			$auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement
			$auth.RelyingParty = "*"
			$auth.State = "Enabled"
			$auth.RememberDevicesNotIssuedBefore = (Get-Date)
			
			
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$SelectUsersFormText = "Select the User you want to enable Second-Factor Authentication for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPN = $SelectUsersForm_comboboxUsers
			$GlobalUPN = $SelectCachedUserPrincipalName_comboboxUPN
			
			$mfa = @()
			
			$TextboxResults.Text = "Enabling 2FA for $GlobalUPN..."
			$textboxDetails.Text = "Set-MsolUser -UserPrincipalName $GlobalUPN -StrongAuthenticationRequirements  $auth "
			$TextboxResults.Text = Set-MsolUser -UserPrincipalName $GlobalUPN -StrongAuthenticationRequirements $auth | Out-String -Width 2147483647
			$TextboxResults.Text = Get-MsolUser -All | Select-Object DisplayName, StrongAuthenticationMethods, StrongAuthenticationRequirements | Sort-Object DisplayName | Format-Table -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
		
		#What to do if connected to partner account
		ElseIf (Get-PSSession -name partneraccount -ErrorAction SilentlyContinue)
		{
			#Create the StrongAuthenticationRequirement object and insert required settings
			$auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement
			$auth.RelyingParty = "*"
			$auth.State = "Enabled"
			$auth.RememberDevicesNotIssuedBefore = (Get-Date)
			
			
			$TenantText = $PartnerComboBox.text
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$SelectUsersFormText = "Select the User you want to enable Second-Factor Authentication for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPN = $SelectUsersForm_comboboxUsers
			$GlobalUPN = $SelectCachedUserPrincipalName_comboboxUPN
			
			$mfa = @()
			
			$TextboxResults.Text = "Enabling 2FA for $GlobalUPN..."
			$textboxDetails.Text = "Set-MsolUser -TenantId $TenantText -UserPrincipalName $GlobalUPN -StrongAuthenticationRequirements $auth "
			$TextboxResults.Text = Set-MsolUser -TenantId $PartnerComboBox.SelectedItem.TenantID -UserPrincipalName $GlobalUPN -StrongAuthenticationRequirements $auth | Out-String -Width 2147483647
			$TextboxResults.Text = Get-MsolUser -All -TenantId $PartnerComboBox.SelectedItem.TenantID | Select-Object DisplayName, StrongAuthenticationMethods, StrongAuthenticationRequirements | Sort-Object DisplayName | Format-Table -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
			
		}
		Else
		{
			#Create the StrongAuthenticationRequirement object and insert required settings
			$auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement
			$auth.RelyingParty = "*"
			$auth.State = "Enabled"
			$auth.RememberDevicesNotIssuedBefore = (Get-Date)
			
			
			$FormO365AdministrationCenter.Cursor = 'WaitCursor'
			
			$SelectUsersFormText = "Select the User you want to enable Second-Factor Authentication for"
			#Call-SelectUsersForm_psf
			Show-SelectCachedUserPrincipalName_psf
			#$GlobalUPN = $SelectUsersForm_comboboxUsers
			$GlobalUPN = $SelectCachedUserPrincipalName_comboboxUPN
			
			$mfa = @()
			
			$TextboxResults.Text = "Enabling 2FA for $GlobalUPN..."
			$textboxDetails.Text = "Set-MsolUser -UserPrincipalName $GlobalUPN -StrongAuthenticationRequirements  $auth "
			$TextboxResults.Text = Set-MsolUser -UserPrincipalName $GlobalUPN -StrongAuthenticationRequirements $auth | Out-String -Width 2147483647
			$TextboxResults.Text = Get-MsolUser -All | Select-Object DisplayName, StrongAuthenticationMethods, StrongAuthenticationRequirements | Sort-Object DisplayName | Format-Table -AutoSize | Out-String -Width 2147483647
			$FormO365AdministrationCenter.Cursor = 'Default'
		}
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$textboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
}

$placeAUserOnLitigationHoldToolStripMenuItem_Click={
	Do
	{
		#$HidefromGALUser = Read-Host "Enter the UPN of the user you want to hide from the GAL"
		$SelectUsersFormText = "Select the User you want to place on Litigation Hold"
		#Call-SelectUsersForm_psf
		Show-SelectCachedDisplayNames_psf
		#$GlobalUPNhideGAL = $SelectUsersForm_comboboxUsers
		$GlobalUPNhideGAL = $SelectCachedDisplayNames_comboboxNames
		Try
		{
			If (!$GlobalUPNhideGAL)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User selected, please select a user.", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Placing $GlobalUPNhideGAL on Litigation Hold..."
				$textboxDetails.Text = "set-Mailbox -Identity $GlobalUPNhideGAL -LitigationHoldEnabled `$True"
				set-Mailbox -Identity $GlobalUPNhideGAL -LitigationHoldEnabled $True
				$TextboxResults.Text = get-mailbox | where-object { $_.litigationholdenabled -eq $true } | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to place another user on Litigation Hold?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
}

$getAllUsersOnLitigationHoldToolStripMenuItem_Click={
	Try
	{
		
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting all Users on Litigation Hold..."
		$textboxDetails.Text = "get-mailbox | where-object { `$_.litigationholdenabled -eq `$true } | Sort-Object"
		$TextboxResults.Text = get-mailbox | where-object { $_.litigationholdenabled -eq $true } | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$placeAllUsersOnLitigationHoldToolStripMenuItem_Click = {
	Try
	{
		
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Placing all users on Litigation Hold..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize Unlimited -Filter { RecipientTypeDetails -eq 'UserMailbox' } | Set-Mailbox -LitigationHoldEnabled `$True"
		Get-Mailbox -ResultSize Unlimited -Filter { RecipientTypeDetails -eq "UserMailbox" } | Set-Mailbox -LitigationHoldEnabled $true
		$TextboxResults.Text = get-mailbox | where-object { $_.litigationholdenabled -eq $true } | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$takeAllUsersOffLitigationHoldToolStripMenuItem_Click={
	Try
	{
		
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Placing all users off Litigation Hold..."
		$textboxDetails.Text = "Get-Mailbox -ResultSize Unlimited -Filter { RecipientTypeDetails -eq 'UserMailbox' } | Set-Mailbox -LitigationHoldEnabled `$False"
		Get-Mailbox -ResultSize Unlimited -Filter { RecipientTypeDetails -eq "UserMailbox" } | Set-Mailbox -LitigationHoldEnabled $False
		$TextboxResults.Text = get-mailbox | where-object { $_.litigationholdenabled -eq $False } | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$getAllUsersOffLitigationHoldToolStripMenuItem_Click={
	Try
	{
		
		$FormO365AdministrationCenter.Cursor = 'WaitCursor'
		$TextboxResults.Text = "Getting all Users off Litigation Hold..."
		$textboxDetails.Text = "get-mailbox | where-object { `$_.litigationholdenabled -eq `$False } | Sort-Object"
		$TextboxResults.Text = get-mailbox | where-object { $_.litigationholdenabled -eq $False } | Out-String -Width 2147483647
		$FormO365AdministrationCenter.Cursor = 'Default'
	}
	Catch
	{
		$FormO365AdministrationCenter.Cursor = 'Default'
		$TextboxResults.Text = ""
		$textboxDetails.Text = ""
		[System.Windows.Forms.MessageBox]::Show("$_", "Error")
	}
	
}

$placeAUserOffLitigationHoldToolStripMenuItem_Click={
	Do
	{
		#$HidefromGALUser = Read-Host "Enter the UPN of the user you want to hide from the GAL"
		$SelectUsersFormText = "Select the User you want to place off Litigation Hold"
		#Call-SelectUsersForm_psf
		Show-SelectCachedDisplayNames_psf
		#$GlobalUPNhideGAL = $SelectUsersForm_comboboxUsers
		$GlobalUPNhideGAL = $SelectCachedDisplayNames_comboboxNames
		Try
		{
			If (!$GlobalUPNhideGAL)
			{
				$TextboxResults.Text = ""
				$textboxDetails.Text = ""
				[System.Windows.Forms.MessageBox]::Show("No User selected, please select a user.", "Error")
			}
			Else
			{
				$FormO365AdministrationCenter.Cursor = 'WaitCursor'
				$TextboxResults.Text = "Placing $GlobalUPNhideGAL off Litigation Hold..."
				$textboxDetails.Text = "set-Mailbox -Identity $GlobalUPNhideGAL -LitigationHoldEnabled `$False"
				set-Mailbox -Identity $GlobalUPNhideGAL -LitigationHoldEnabled $False
				$TextboxResults.Text = get-mailbox | where-object { $_.litigationholdenabled -eq $False } | Out-String -Width 2147483647
				$FormO365AdministrationCenter.Cursor = 'Default'
			}
		}
		Catch
		{
			$FormO365AdministrationCenter.Cursor = 'Default'
			$TextboxResults.Text = ""
			$textboxDetails.Text = ""
			[System.Windows.Forms.MessageBox]::Show("$_", "Error")
		}
		#Create the pop-up message
		Add-Type -AssemblyName System.Windows.Forms
		$Result = [System.Windows.Forms.MessageBox]::Show('Do you want to place another user off Litigation Hold?', 'Info', 'YesNo', 'Info')
	}
	While ($Result -eq 'Yes')
	
}
]]></Code>
  <Mode>0</Mode>
  <Assemblies>
    <Assembly>mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
    <Assembly>System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
  </Assemblies>
</File>